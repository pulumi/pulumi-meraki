// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection example "network_id"
 * ```
 */
export class ApplianceTrafficShapingUplinkSelection extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceTrafficShapingUplinkSelection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceTrafficShapingUplinkSelectionState, opts?: pulumi.CustomResourceOptions): ApplianceTrafficShapingUplinkSelection {
        return new ApplianceTrafficShapingUplinkSelection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection';

    /**
     * Returns true if the given object is an instance of ApplianceTrafficShapingUplinkSelection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceTrafficShapingUplinkSelection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceTrafficShapingUplinkSelection.__pulumiType;
    }

    /**
     * Whether active-active AutoVPN is enabled
     */
    public readonly activeActiveAutoVpnEnabled!: pulumi.Output<boolean>;
    /**
     * The default uplink. Must be one of: 'wan1' or 'wan2'
     */
    public readonly defaultUplink!: pulumi.Output<string>;
    /**
     * WAN failover and failback
     */
    public readonly failoverAndFailback!: pulumi.Output<outputs.networks.ApplianceTrafficShapingUplinkSelectionFailoverAndFailback>;
    /**
     * Whether load balancing is enabled
     */
    public readonly loadBalancingEnabled!: pulumi.Output<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Uplink preference rules for VPN traffic
     */
    public readonly vpnTrafficUplinkPreferences!: pulumi.Output<outputs.networks.ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreference[]>;
    /**
     * Uplink preference rules for WAN traffic
     */
    public readonly wanTrafficUplinkPreferences!: pulumi.Output<outputs.networks.ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreference[]>;

    /**
     * Create a ApplianceTrafficShapingUplinkSelection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceTrafficShapingUplinkSelectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceTrafficShapingUplinkSelectionArgs | ApplianceTrafficShapingUplinkSelectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceTrafficShapingUplinkSelectionState | undefined;
            resourceInputs["activeActiveAutoVpnEnabled"] = state ? state.activeActiveAutoVpnEnabled : undefined;
            resourceInputs["defaultUplink"] = state ? state.defaultUplink : undefined;
            resourceInputs["failoverAndFailback"] = state ? state.failoverAndFailback : undefined;
            resourceInputs["loadBalancingEnabled"] = state ? state.loadBalancingEnabled : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["vpnTrafficUplinkPreferences"] = state ? state.vpnTrafficUplinkPreferences : undefined;
            resourceInputs["wanTrafficUplinkPreferences"] = state ? state.wanTrafficUplinkPreferences : undefined;
        } else {
            const args = argsOrState as ApplianceTrafficShapingUplinkSelectionArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["activeActiveAutoVpnEnabled"] = args ? args.activeActiveAutoVpnEnabled : undefined;
            resourceInputs["defaultUplink"] = args ? args.defaultUplink : undefined;
            resourceInputs["failoverAndFailback"] = args ? args.failoverAndFailback : undefined;
            resourceInputs["loadBalancingEnabled"] = args ? args.loadBalancingEnabled : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["vpnTrafficUplinkPreferences"] = args ? args.vpnTrafficUplinkPreferences : undefined;
            resourceInputs["wanTrafficUplinkPreferences"] = args ? args.wanTrafficUplinkPreferences : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceTrafficShapingUplinkSelection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceTrafficShapingUplinkSelection resources.
 */
export interface ApplianceTrafficShapingUplinkSelectionState {
    /**
     * Whether active-active AutoVPN is enabled
     */
    activeActiveAutoVpnEnabled?: pulumi.Input<boolean>;
    /**
     * The default uplink. Must be one of: 'wan1' or 'wan2'
     */
    defaultUplink?: pulumi.Input<string>;
    /**
     * WAN failover and failback
     */
    failoverAndFailback?: pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionFailoverAndFailback>;
    /**
     * Whether load balancing is enabled
     */
    loadBalancingEnabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Uplink preference rules for VPN traffic
     */
    vpnTrafficUplinkPreferences?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreference>[]>;
    /**
     * Uplink preference rules for WAN traffic
     */
    wanTrafficUplinkPreferences?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreference>[]>;
}

/**
 * The set of arguments for constructing a ApplianceTrafficShapingUplinkSelection resource.
 */
export interface ApplianceTrafficShapingUplinkSelectionArgs {
    /**
     * Whether active-active AutoVPN is enabled
     */
    activeActiveAutoVpnEnabled?: pulumi.Input<boolean>;
    /**
     * The default uplink. Must be one of: 'wan1' or 'wan2'
     */
    defaultUplink?: pulumi.Input<string>;
    /**
     * WAN failover and failback
     */
    failoverAndFailback?: pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionFailoverAndFailback>;
    /**
     * Whether load balancing is enabled
     */
    loadBalancingEnabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Uplink preference rules for VPN traffic
     */
    vpnTrafficUplinkPreferences?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreference>[]>;
    /**
     * Uplink preference rules for WAN traffic
     */
    wanTrafficUplinkPreferences?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreference>[]>;
}
