// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/groupPolicies:GroupPolicies example "group_policy_id,network_id"
 * ```
 */
export class GroupPolicies extends pulumi.CustomResource {
    /**
     * Get an existing GroupPolicies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupPoliciesState, opts?: pulumi.CustomResourceOptions): GroupPolicies {
        return new GroupPolicies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/groupPolicies:GroupPolicies';

    /**
     * Returns true if the given object is an instance of GroupPolicies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupPolicies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupPolicies.__pulumiType;
    }

    /**
     * The bandwidth settings for clients bound to your group policy.
     */
    declare public readonly bandwidth: pulumi.Output<outputs.networks.GroupPoliciesBandwidth>;
    /**
     * The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     */
    declare public readonly bonjourForwarding: pulumi.Output<outputs.networks.GroupPoliciesBonjourForwarding>;
    /**
     * The content filtering settings for your group policy
     */
    declare public readonly contentFiltering: pulumi.Output<outputs.networks.GroupPoliciesContentFiltering>;
    /**
     * The firewall and traffic shaping rules and settings for your policy.
     */
    declare public readonly firewallAndTrafficShaping: pulumi.Output<outputs.networks.GroupPoliciesFirewallAndTrafficShaping>;
    /**
     * The ID of the group policy
     */
    declare public /*out*/ readonly groupPolicyId: pulumi.Output<string>;
    /**
     * The name for your group policy. Required.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * The schedule for the group policy. Schedules are applied to days of the week.
     */
    declare public readonly scheduling: pulumi.Output<outputs.networks.GroupPoliciesScheduling>;
    /**
     * Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
     */
    declare public readonly splashAuthSettings: pulumi.Output<string>;
    /**
     * The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     */
    declare public readonly vlanTagging: pulumi.Output<outputs.networks.GroupPoliciesVlanTagging>;

    /**
     * Create a GroupPolicies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupPoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupPoliciesArgs | GroupPoliciesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupPoliciesState | undefined;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["bonjourForwarding"] = state?.bonjourForwarding;
            resourceInputs["contentFiltering"] = state?.contentFiltering;
            resourceInputs["firewallAndTrafficShaping"] = state?.firewallAndTrafficShaping;
            resourceInputs["groupPolicyId"] = state?.groupPolicyId;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["scheduling"] = state?.scheduling;
            resourceInputs["splashAuthSettings"] = state?.splashAuthSettings;
            resourceInputs["vlanTagging"] = state?.vlanTagging;
        } else {
            const args = argsOrState as GroupPoliciesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["bonjourForwarding"] = args?.bonjourForwarding;
            resourceInputs["contentFiltering"] = args?.contentFiltering;
            resourceInputs["firewallAndTrafficShaping"] = args?.firewallAndTrafficShaping;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["scheduling"] = args?.scheduling;
            resourceInputs["splashAuthSettings"] = args?.splashAuthSettings;
            resourceInputs["vlanTagging"] = args?.vlanTagging;
            resourceInputs["groupPolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupPolicies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupPolicies resources.
 */
export interface GroupPoliciesState {
    /**
     * The bandwidth settings for clients bound to your group policy.
     */
    bandwidth?: pulumi.Input<inputs.networks.GroupPoliciesBandwidth>;
    /**
     * The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     */
    bonjourForwarding?: pulumi.Input<inputs.networks.GroupPoliciesBonjourForwarding>;
    /**
     * The content filtering settings for your group policy
     */
    contentFiltering?: pulumi.Input<inputs.networks.GroupPoliciesContentFiltering>;
    /**
     * The firewall and traffic shaping rules and settings for your policy.
     */
    firewallAndTrafficShaping?: pulumi.Input<inputs.networks.GroupPoliciesFirewallAndTrafficShaping>;
    /**
     * The ID of the group policy
     */
    groupPolicyId?: pulumi.Input<string>;
    /**
     * The name for your group policy. Required.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The schedule for the group policy. Schedules are applied to days of the week.
     */
    scheduling?: pulumi.Input<inputs.networks.GroupPoliciesScheduling>;
    /**
     * Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
     */
    splashAuthSettings?: pulumi.Input<string>;
    /**
     * The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     */
    vlanTagging?: pulumi.Input<inputs.networks.GroupPoliciesVlanTagging>;
}

/**
 * The set of arguments for constructing a GroupPolicies resource.
 */
export interface GroupPoliciesArgs {
    /**
     * The bandwidth settings for clients bound to your group policy.
     */
    bandwidth?: pulumi.Input<inputs.networks.GroupPoliciesBandwidth>;
    /**
     * The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     */
    bonjourForwarding?: pulumi.Input<inputs.networks.GroupPoliciesBonjourForwarding>;
    /**
     * The content filtering settings for your group policy
     */
    contentFiltering?: pulumi.Input<inputs.networks.GroupPoliciesContentFiltering>;
    /**
     * The firewall and traffic shaping rules and settings for your policy.
     */
    firewallAndTrafficShaping?: pulumi.Input<inputs.networks.GroupPoliciesFirewallAndTrafficShaping>;
    /**
     * The name for your group policy. Required.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The schedule for the group policy. Schedules are applied to days of the week.
     */
    scheduling?: pulumi.Input<inputs.networks.GroupPoliciesScheduling>;
    /**
     * Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
     */
    splashAuthSettings?: pulumi.Input<string>;
    /**
     * The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     */
    vlanTagging?: pulumi.Input<inputs.networks.GroupPoliciesVlanTagging>;
}
