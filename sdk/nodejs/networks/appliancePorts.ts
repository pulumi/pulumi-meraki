// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.AppliancePorts("example", {
 *     accessPolicy: "open",
 *     allowedVlans: "all",
 *     dropUntaggedTraffic: false,
 *     enabled: true,
 *     networkId: "string",
 *     portId: "string",
 *     type: "access",
 *     vlan: 3,
 * });
 * export const merakiNetworksAppliancePortsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/appliancePorts:AppliancePorts example "network_id,port_id"
 * ```
 */
export class AppliancePorts extends pulumi.CustomResource {
    /**
     * Get an existing AppliancePorts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppliancePortsState, opts?: pulumi.CustomResourceOptions): AppliancePorts {
        return new AppliancePorts(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/appliancePorts:AppliancePorts';

    /**
     * Returns true if the given object is an instance of AppliancePorts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppliancePorts {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppliancePorts.__pulumiType;
    }

    /**
     * The name of the policy. Only applicable to Access ports.
     */
    declare public readonly accessPolicy: pulumi.Output<string>;
    /**
     * Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
     */
    declare public readonly allowedVlans: pulumi.Output<string>;
    /**
     * Whether the trunk port can drop all untagged traffic.
     */
    declare public readonly dropUntaggedTraffic: pulumi.Output<boolean>;
    /**
     * The status of the port
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Number of the port
     */
    declare public /*out*/ readonly number: pulumi.Output<number>;
    /**
     * portId path parameter. Port ID
     */
    declare public readonly portId: pulumi.Output<string>;
    /**
     * The type of the port: 'access' or 'trunk'.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     */
    declare public readonly vlan: pulumi.Output<number>;

    /**
     * Create a AppliancePorts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppliancePortsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppliancePortsArgs | AppliancePortsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppliancePortsState | undefined;
            resourceInputs["accessPolicy"] = state?.accessPolicy;
            resourceInputs["allowedVlans"] = state?.allowedVlans;
            resourceInputs["dropUntaggedTraffic"] = state?.dropUntaggedTraffic;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["number"] = state?.number;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["type"] = state?.type;
            resourceInputs["vlan"] = state?.vlan;
        } else {
            const args = argsOrState as AppliancePortsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.portId === undefined && !opts.urn) {
                throw new Error("Missing required property 'portId'");
            }
            resourceInputs["accessPolicy"] = args?.accessPolicy;
            resourceInputs["allowedVlans"] = args?.allowedVlans;
            resourceInputs["dropUntaggedTraffic"] = args?.dropUntaggedTraffic;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["portId"] = args?.portId;
            resourceInputs["type"] = args?.type;
            resourceInputs["vlan"] = args?.vlan;
            resourceInputs["number"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppliancePorts.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppliancePorts resources.
 */
export interface AppliancePortsState {
    /**
     * The name of the policy. Only applicable to Access ports.
     */
    accessPolicy?: pulumi.Input<string>;
    /**
     * Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
     */
    allowedVlans?: pulumi.Input<string>;
    /**
     * Whether the trunk port can drop all untagged traffic.
     */
    dropUntaggedTraffic?: pulumi.Input<boolean>;
    /**
     * The status of the port
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Number of the port
     */
    number?: pulumi.Input<number>;
    /**
     * portId path parameter. Port ID
     */
    portId?: pulumi.Input<string>;
    /**
     * The type of the port: 'access' or 'trunk'.
     */
    type?: pulumi.Input<string>;
    /**
     * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     */
    vlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppliancePorts resource.
 */
export interface AppliancePortsArgs {
    /**
     * The name of the policy. Only applicable to Access ports.
     */
    accessPolicy?: pulumi.Input<string>;
    /**
     * Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
     */
    allowedVlans?: pulumi.Input<string>;
    /**
     * Whether the trunk port can drop all untagged traffic.
     */
    dropUntaggedTraffic?: pulumi.Input<boolean>;
    /**
     * The status of the port
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * portId path parameter. Port ID
     */
    portId: pulumi.Input<string>;
    /**
     * The type of the port: 'access' or 'trunk'.
     */
    type?: pulumi.Input<string>;
    /**
     * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     */
    vlan?: pulumi.Input<number>;
}
