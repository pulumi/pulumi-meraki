// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/merakiAuthUsers:MerakiAuthUsers example "meraki_auth_user_id,network_id"
 * ```
 */
export class MerakiAuthUsers extends pulumi.CustomResource {
    /**
     * Get an existing MerakiAuthUsers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MerakiAuthUsersState, opts?: pulumi.CustomResourceOptions): MerakiAuthUsers {
        return new MerakiAuthUsers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/merakiAuthUsers:MerakiAuthUsers';

    /**
     * Returns true if the given object is an instance of MerakiAuthUsers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MerakiAuthUsers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MerakiAuthUsers.__pulumiType;
    }

    /**
     * Authorization type for user.
     */
    public readonly accountType!: pulumi.Output<string>;
    /**
     * User authorization info
     */
    public readonly authorizations!: pulumi.Output<outputs.networks.MerakiAuthUsersAuthorization[]>;
    /**
     * Creation time of the user
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Email address of the user
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Whether or not Meraki should email the password to user. Default is false.
     */
    public readonly emailPasswordToUser!: pulumi.Output<boolean>;
    /**
     * Whether or not the user is a Dashboard administrator
     */
    public readonly isAdmin!: pulumi.Output<boolean>;
    /**
     * merakiAuthUserId path parameter. Meraki auth user ID
     */
    public readonly merakiAuthUserId!: pulumi.Output<string | undefined>;
    /**
     * Name of the user
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The password for this user account. Only required If the user is not a Dashboard administrator.
     */
    public readonly password!: pulumi.Output<string>;

    /**
     * Create a MerakiAuthUsers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MerakiAuthUsersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MerakiAuthUsersArgs | MerakiAuthUsersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MerakiAuthUsersState | undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["authorizations"] = state ? state.authorizations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailPasswordToUser"] = state ? state.emailPasswordToUser : undefined;
            resourceInputs["isAdmin"] = state ? state.isAdmin : undefined;
            resourceInputs["merakiAuthUserId"] = state ? state.merakiAuthUserId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
        } else {
            const args = argsOrState as MerakiAuthUsersArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["accountType"] = args ? args.accountType : undefined;
            resourceInputs["authorizations"] = args ? args.authorizations : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["emailPasswordToUser"] = args ? args.emailPasswordToUser : undefined;
            resourceInputs["isAdmin"] = args ? args.isAdmin : undefined;
            resourceInputs["merakiAuthUserId"] = args ? args.merakiAuthUserId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MerakiAuthUsers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MerakiAuthUsers resources.
 */
export interface MerakiAuthUsersState {
    /**
     * Authorization type for user.
     */
    accountType?: pulumi.Input<string>;
    /**
     * User authorization info
     */
    authorizations?: pulumi.Input<pulumi.Input<inputs.networks.MerakiAuthUsersAuthorization>[]>;
    /**
     * Creation time of the user
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Email address of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Whether or not Meraki should email the password to user. Default is false.
     */
    emailPasswordToUser?: pulumi.Input<boolean>;
    /**
     * Whether or not the user is a Dashboard administrator
     */
    isAdmin?: pulumi.Input<boolean>;
    /**
     * merakiAuthUserId path parameter. Meraki auth user ID
     */
    merakiAuthUserId?: pulumi.Input<string>;
    /**
     * Name of the user
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The password for this user account. Only required If the user is not a Dashboard administrator.
     */
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MerakiAuthUsers resource.
 */
export interface MerakiAuthUsersArgs {
    /**
     * Authorization type for user.
     */
    accountType?: pulumi.Input<string>;
    /**
     * User authorization info
     */
    authorizations?: pulumi.Input<pulumi.Input<inputs.networks.MerakiAuthUsersAuthorization>[]>;
    /**
     * Email address of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Whether or not Meraki should email the password to user. Default is false.
     */
    emailPasswordToUser?: pulumi.Input<boolean>;
    /**
     * Whether or not the user is a Dashboard administrator
     */
    isAdmin?: pulumi.Input<boolean>;
    /**
     * merakiAuthUserId path parameter. Meraki auth user ID
     */
    merakiAuthUserId?: pulumi.Input<string>;
    /**
     * Name of the user
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The password for this user account. Only required If the user is not a Dashboard administrator.
     */
    password?: pulumi.Input<string>;
}
