// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceSecurityMalware("example", {
 *     allowedFiles: [{
 *         comment: "allow ZIP file",
 *         sha256: "e82c5f7d75004727e1f3b94426b9a11c8bc4c312a9170ac9a73abace40aef503",
 *     }],
 *     allowedUrls: [{
 *         comment: "allow help.com.au",
 *         url: "help.com.au",
 *     }],
 *     mode: "enabled",
 *     networkId: "string",
 * });
 * export const merakiNetworksApplianceSecurityMalwareExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceSecurityMalware:ApplianceSecurityMalware example "network_id"
 * ```
 */
export class ApplianceSecurityMalware extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceSecurityMalware resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceSecurityMalwareState, opts?: pulumi.CustomResourceOptions): ApplianceSecurityMalware {
        return new ApplianceSecurityMalware(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceSecurityMalware:ApplianceSecurityMalware';

    /**
     * Returns true if the given object is an instance of ApplianceSecurityMalware.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceSecurityMalware {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceSecurityMalware.__pulumiType;
    }

    /**
     * Sha256 digests of files permitted by the malware detection engine
     */
    public readonly allowedFiles!: pulumi.Output<outputs.networks.ApplianceSecurityMalwareAllowedFile[]>;
    /**
     * URLs permitted by the malware detection engine
     */
    public readonly allowedUrls!: pulumi.Output<outputs.networks.ApplianceSecurityMalwareAllowedUrl[]>;
    /**
     * Current status of malware prevention
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;

    /**
     * Create a ApplianceSecurityMalware resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceSecurityMalwareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceSecurityMalwareArgs | ApplianceSecurityMalwareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceSecurityMalwareState | undefined;
            resourceInputs["allowedFiles"] = state ? state.allowedFiles : undefined;
            resourceInputs["allowedUrls"] = state ? state.allowedUrls : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
        } else {
            const args = argsOrState as ApplianceSecurityMalwareArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["allowedFiles"] = args ? args.allowedFiles : undefined;
            resourceInputs["allowedUrls"] = args ? args.allowedUrls : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceSecurityMalware.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceSecurityMalware resources.
 */
export interface ApplianceSecurityMalwareState {
    /**
     * Sha256 digests of files permitted by the malware detection engine
     */
    allowedFiles?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSecurityMalwareAllowedFile>[]>;
    /**
     * URLs permitted by the malware detection engine
     */
    allowedUrls?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSecurityMalwareAllowedUrl>[]>;
    /**
     * Current status of malware prevention
     */
    mode?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplianceSecurityMalware resource.
 */
export interface ApplianceSecurityMalwareArgs {
    /**
     * Sha256 digests of files permitted by the malware detection engine
     */
    allowedFiles?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSecurityMalwareAllowedFile>[]>;
    /**
     * URLs permitted by the malware detection engine
     */
    allowedUrls?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSecurityMalwareAllowedUrl>[]>;
    /**
     * Current status of malware prevention
     */
    mode?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
}
