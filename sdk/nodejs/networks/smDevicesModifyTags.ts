// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
 * already existed previously.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.SmDevicesModifyTags("example", {
 *     networkId: "string",
 *     parameters: {
 *         ids: [
 *             "1284392014819",
 *             "2983092129865",
 *         ],
 *         scope: ["withAny, old_tag"],
 *         serials: [
 *             "XY0XX0Y0X0",
 *             "A01B01CD00E",
 *             "X02YZ1ZYZX",
 *         ],
 *         tags: [
 *             "tag1",
 *             "tag2",
 *         ],
 *         update_action: "add",
 *         wifi_macs: ["00:11:22:33:44:55"],
 *     },
 * });
 * export const merakiNetworksSmDevicesModifyTagsExample = example;
 * ```
 */
export class SmDevicesModifyTags extends pulumi.CustomResource {
    /**
     * Get an existing SmDevicesModifyTags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmDevicesModifyTagsState, opts?: pulumi.CustomResourceOptions): SmDevicesModifyTags {
        return new SmDevicesModifyTags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/smDevicesModifyTags:SmDevicesModifyTags';

    /**
     * Returns true if the given object is an instance of SmDevicesModifyTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmDevicesModifyTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmDevicesModifyTags.__pulumiType;
    }

    /**
     * Array of ResponseSmModifyNetworkSmDevicesTags
     */
    declare public /*out*/ readonly items: pulumi.Output<outputs.networks.SmDevicesModifyTagsItem[]>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly parameters: pulumi.Output<outputs.networks.SmDevicesModifyTagsParameters>;

    /**
     * Create a SmDevicesModifyTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmDevicesModifyTagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmDevicesModifyTagsArgs | SmDevicesModifyTagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmDevicesModifyTagsState | undefined;
            resourceInputs["items"] = state?.items;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["parameters"] = state?.parameters;
        } else {
            const args = argsOrState as SmDevicesModifyTagsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.parameters === undefined && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["items"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmDevicesModifyTags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmDevicesModifyTags resources.
 */
export interface SmDevicesModifyTagsState {
    /**
     * Array of ResponseSmModifyNetworkSmDevicesTags
     */
    items?: pulumi.Input<pulumi.Input<inputs.networks.SmDevicesModifyTagsItem>[]>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.networks.SmDevicesModifyTagsParameters>;
}

/**
 * The set of arguments for constructing a SmDevicesModifyTags resource.
 */
export interface SmDevicesModifyTagsArgs {
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    parameters: pulumi.Input<inputs.networks.SmDevicesModifyTagsParameters>;
}
