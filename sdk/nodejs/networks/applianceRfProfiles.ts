// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceRfProfiles("example", {
 *     fiveGhzSettings: {
 *         ax_enabled: true,
 *         min_bitrate: 48,
 *     },
 *     name: "MX RF Profile",
 *     networkId: "string",
 *     perSsidSettings: {
 *         status_1: {
 *             bandOperationMode: "dual",
 *             bandSteeringEnabled: true,
 *         },
 *         status_2: {
 *             bandOperationMode: "dual",
 *             bandSteeringEnabled: true,
 *         },
 *         status_3: {
 *             bandOperationMode: "dual",
 *             bandSteeringEnabled: true,
 *         },
 *         status_4: {
 *             bandOperationMode: "dual",
 *             bandSteeringEnabled: true,
 *         },
 *     },
 *     twoFourGhzSettings: {
 *         ax_enabled: true,
 *         min_bitrate: 12,
 *     },
 * });
 * export const merakiNetworksApplianceRfProfilesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceRfProfiles:ApplianceRfProfiles example "network_id,rf_profile_id"
 * ```
 */
export class ApplianceRfProfiles extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceRfProfiles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceRfProfilesState, opts?: pulumi.CustomResourceOptions): ApplianceRfProfiles {
        return new ApplianceRfProfiles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceRfProfiles:ApplianceRfProfiles';

    /**
     * Returns true if the given object is an instance of ApplianceRfProfiles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceRfProfiles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceRfProfiles.__pulumiType;
    }

    /**
     * Settings related to 5Ghz band.
     */
    declare public readonly fiveGhzSettings: pulumi.Output<outputs.networks.ApplianceRfProfilesFiveGhzSettings>;
    /**
     * The name of the profile.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ID of network this RF Profile belongs in.
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Per-SSID radio settings by number.
     */
    declare public readonly perSsidSettings: pulumi.Output<outputs.networks.ApplianceRfProfilesPerSsidSettings>;
    /**
     * rfProfileId path parameter. Rf profile ID
     */
    declare public readonly rfProfileId: pulumi.Output<string | undefined>;
    /**
     * Settings related to 2.4Ghz band.
     */
    declare public readonly twoFourGhzSettings: pulumi.Output<outputs.networks.ApplianceRfProfilesTwoFourGhzSettings>;

    /**
     * Create a ApplianceRfProfiles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceRfProfilesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceRfProfilesArgs | ApplianceRfProfilesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceRfProfilesState | undefined;
            resourceInputs["fiveGhzSettings"] = state?.fiveGhzSettings;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["perSsidSettings"] = state?.perSsidSettings;
            resourceInputs["rfProfileId"] = state?.rfProfileId;
            resourceInputs["twoFourGhzSettings"] = state?.twoFourGhzSettings;
        } else {
            const args = argsOrState as ApplianceRfProfilesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["fiveGhzSettings"] = args?.fiveGhzSettings;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["perSsidSettings"] = args?.perSsidSettings;
            resourceInputs["rfProfileId"] = args?.rfProfileId;
            resourceInputs["twoFourGhzSettings"] = args?.twoFourGhzSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceRfProfiles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceRfProfiles resources.
 */
export interface ApplianceRfProfilesState {
    /**
     * Settings related to 5Ghz band.
     */
    fiveGhzSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesFiveGhzSettings>;
    /**
     * The name of the profile.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of network this RF Profile belongs in.
     */
    networkId?: pulumi.Input<string>;
    /**
     * Per-SSID radio settings by number.
     */
    perSsidSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesPerSsidSettings>;
    /**
     * rfProfileId path parameter. Rf profile ID
     */
    rfProfileId?: pulumi.Input<string>;
    /**
     * Settings related to 2.4Ghz band.
     */
    twoFourGhzSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesTwoFourGhzSettings>;
}

/**
 * The set of arguments for constructing a ApplianceRfProfiles resource.
 */
export interface ApplianceRfProfilesArgs {
    /**
     * Settings related to 5Ghz band.
     */
    fiveGhzSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesFiveGhzSettings>;
    /**
     * The name of the profile.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of network this RF Profile belongs in.
     */
    networkId: pulumi.Input<string>;
    /**
     * Per-SSID radio settings by number.
     */
    perSsidSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesPerSsidSettings>;
    /**
     * rfProfileId path parameter. Rf profile ID
     */
    rfProfileId?: pulumi.Input<string>;
    /**
     * Settings related to 2.4Ghz band.
     */
    twoFourGhzSettings?: pulumi.Input<inputs.networks.ApplianceRfProfilesTwoFourGhzSettings>;
}
