// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.AlertsSettings("example", {
 *     alerts: [{
 *         alert_destinations: {
 *             allAdmins: false,
 *             emails: ["miles@meraki.com"],
 *             httpServerIds: ["aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M="],
 *             snmp: false,
 *         },
 *         enabled: true,
 *         filters: {
 *             timeout: 60,
 *         },
 *         type: "gatewayDown",
 *     }],
 *     defaultDestinations: {
 *         all_admins: true,
 *         emails: ["miles@meraki.com"],
 *         http_server_ids: ["aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M="],
 *         snmp: true,
 *     },
 *     networkId: "string",
 * });
 * export const merakiNetworksAlertsSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/alertsSettings:AlertsSettings example "network_id"
 * ```
 */
export class AlertsSettings extends pulumi.CustomResource {
    /**
     * Get an existing AlertsSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertsSettingsState, opts?: pulumi.CustomResourceOptions): AlertsSettings {
        return new AlertsSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/alertsSettings:AlertsSettings';

    /**
     * Returns true if the given object is an instance of AlertsSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertsSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertsSettings.__pulumiType;
    }

    /**
     * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
     */
    declare public readonly alerts: pulumi.Output<outputs.networks.AlertsSettingsAlert[] | undefined>;
    /**
     * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
     */
    declare public /*out*/ readonly alertsResponses: pulumi.Output<outputs.networks.AlertsSettingsAlertsResponse[]>;
    /**
     * The network-wide destinations for all alerts on the network.
     */
    declare public readonly defaultDestinations: pulumi.Output<outputs.networks.AlertsSettingsDefaultDestinations>;
    /**
     * muting
     */
    declare public readonly muting: pulumi.Output<outputs.networks.AlertsSettingsMuting>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;

    /**
     * Create a AlertsSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertsSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertsSettingsArgs | AlertsSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertsSettingsState | undefined;
            resourceInputs["alerts"] = state?.alerts;
            resourceInputs["alertsResponses"] = state?.alertsResponses;
            resourceInputs["defaultDestinations"] = state?.defaultDestinations;
            resourceInputs["muting"] = state?.muting;
            resourceInputs["networkId"] = state?.networkId;
        } else {
            const args = argsOrState as AlertsSettingsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["alerts"] = args?.alerts;
            resourceInputs["defaultDestinations"] = args?.defaultDestinations;
            resourceInputs["muting"] = args?.muting;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["alertsResponses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertsSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertsSettings resources.
 */
export interface AlertsSettingsState {
    /**
     * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.networks.AlertsSettingsAlert>[]>;
    /**
     * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
     */
    alertsResponses?: pulumi.Input<pulumi.Input<inputs.networks.AlertsSettingsAlertsResponse>[]>;
    /**
     * The network-wide destinations for all alerts on the network.
     */
    defaultDestinations?: pulumi.Input<inputs.networks.AlertsSettingsDefaultDestinations>;
    /**
     * muting
     */
    muting?: pulumi.Input<inputs.networks.AlertsSettingsMuting>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertsSettings resource.
 */
export interface AlertsSettingsArgs {
    /**
     * Alert-specific configuration for each type. Only alerts that pertain to the network can be updated.
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.networks.AlertsSettingsAlert>[]>;
    /**
     * The network-wide destinations for all alerts on the network.
     */
    defaultDestinations?: pulumi.Input<inputs.networks.AlertsSettingsDefaultDestinations>;
    /**
     * muting
     */
    muting?: pulumi.Input<inputs.networks.AlertsSettingsMuting>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
}
