// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.CameraWirelessProfiles("example", {
 *     name: "wireless profile A",
 *     networkId: "string",
 *     ssid: {
 *         auth_mode: "8021x-radius",
 *         encryption_mode: "wpa-eap",
 *         name: "ssid test",
 *     },
 * });
 * export const merakiNetworksCameraWirelessProfilesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/cameraWirelessProfiles:CameraWirelessProfiles example "network_id,wireless_profile_id"
 * ```
 */
export class CameraWirelessProfiles extends pulumi.CustomResource {
    /**
     * Get an existing CameraWirelessProfiles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CameraWirelessProfilesState, opts?: pulumi.CustomResourceOptions): CameraWirelessProfiles {
        return new CameraWirelessProfiles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/cameraWirelessProfiles:CameraWirelessProfiles';

    /**
     * Returns true if the given object is an instance of CameraWirelessProfiles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CameraWirelessProfiles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CameraWirelessProfiles.__pulumiType;
    }

    declare public /*out*/ readonly appliedDeviceCount: pulumi.Output<number>;
    /**
     * The identity of the wireless profile. Required for creating wireless profiles in 8021x-radius auth mode.
     */
    declare public readonly identity: pulumi.Output<outputs.networks.CameraWirelessProfilesIdentity>;
    /**
     * The name of the camera wireless profile. This parameter is required.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * The details of the SSID config.
     */
    declare public readonly ssid: pulumi.Output<outputs.networks.CameraWirelessProfilesSsid>;
    /**
     * wirelessProfileId path parameter. Wireless profile ID
     */
    declare public readonly wirelessProfileId: pulumi.Output<string | undefined>;

    /**
     * Create a CameraWirelessProfiles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CameraWirelessProfilesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CameraWirelessProfilesArgs | CameraWirelessProfilesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CameraWirelessProfilesState | undefined;
            resourceInputs["appliedDeviceCount"] = state?.appliedDeviceCount;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["ssid"] = state?.ssid;
            resourceInputs["wirelessProfileId"] = state?.wirelessProfileId;
        } else {
            const args = argsOrState as CameraWirelessProfilesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["identity"] = args?.identity;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["ssid"] = args?.ssid;
            resourceInputs["wirelessProfileId"] = args?.wirelessProfileId;
            resourceInputs["appliedDeviceCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CameraWirelessProfiles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CameraWirelessProfiles resources.
 */
export interface CameraWirelessProfilesState {
    appliedDeviceCount?: pulumi.Input<number>;
    /**
     * The identity of the wireless profile. Required for creating wireless profiles in 8021x-radius auth mode.
     */
    identity?: pulumi.Input<inputs.networks.CameraWirelessProfilesIdentity>;
    /**
     * The name of the camera wireless profile. This parameter is required.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The details of the SSID config.
     */
    ssid?: pulumi.Input<inputs.networks.CameraWirelessProfilesSsid>;
    /**
     * wirelessProfileId path parameter. Wireless profile ID
     */
    wirelessProfileId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CameraWirelessProfiles resource.
 */
export interface CameraWirelessProfilesArgs {
    /**
     * The identity of the wireless profile. Required for creating wireless profiles in 8021x-radius auth mode.
     */
    identity?: pulumi.Input<inputs.networks.CameraWirelessProfilesIdentity>;
    /**
     * The name of the camera wireless profile. This parameter is required.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The details of the SSID config.
     */
    ssid?: pulumi.Input<inputs.networks.CameraWirelessProfilesSsid>;
    /**
     * wirelessProfileId path parameter. Wireless profile ID
     */
    wirelessProfileId?: pulumi.Input<string>;
}
