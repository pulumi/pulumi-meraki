// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.Settings("example", {
 *     localStatusPage: {
 *         authentication: {
 *             enabled: false,
 *             password: "miles123",
 *         },
 *     },
 *     localStatusPageEnabled: true,
 *     namedVlans: {
 *         enabled: true,
 *     },
 *     networkId: "string",
 *     remoteStatusPageEnabled: true,
 *     securePort: {
 *         enabled: false,
 *     },
 * });
 * export const merakiNetworksSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/settings:Settings example "network_id"
 * ```
 */
export class Settings extends pulumi.CustomResource {
    /**
     * Get an existing Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsState, opts?: pulumi.CustomResourceOptions): Settings {
        return new Settings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/settings:Settings';

    /**
     * Returns true if the given object is an instance of Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Settings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Settings.__pulumiType;
    }

    /**
     * A hash of FIPS options applied to the Network
     */
    public /*out*/ readonly fips!: pulumi.Output<outputs.networks.SettingsFips>;
    /**
     * A hash of Local Status page(s)' authentication options applied to the Network.
     */
    public readonly localStatusPage!: pulumi.Output<outputs.networks.SettingsLocalStatusPage>;
    /**
     * Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
     */
    public readonly localStatusPageEnabled!: pulumi.Output<boolean>;
    /**
     * A hash of Named VLANs options applied to the Network.
     */
    public readonly namedVlans!: pulumi.Output<outputs.networks.SettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
     */
    public readonly remoteStatusPageEnabled!: pulumi.Output<boolean>;
    /**
     * A hash of SecureConnect options applied to the Network.
     */
    public readonly securePort!: pulumi.Output<outputs.networks.SettingsSecurePort>;

    /**
     * Create a Settings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsArgs | SettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsState | undefined;
            resourceInputs["fips"] = state ? state.fips : undefined;
            resourceInputs["localStatusPage"] = state ? state.localStatusPage : undefined;
            resourceInputs["localStatusPageEnabled"] = state ? state.localStatusPageEnabled : undefined;
            resourceInputs["namedVlans"] = state ? state.namedVlans : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["remoteStatusPageEnabled"] = state ? state.remoteStatusPageEnabled : undefined;
            resourceInputs["securePort"] = state ? state.securePort : undefined;
        } else {
            const args = argsOrState as SettingsArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["localStatusPage"] = args ? args.localStatusPage : undefined;
            resourceInputs["localStatusPageEnabled"] = args ? args.localStatusPageEnabled : undefined;
            resourceInputs["namedVlans"] = args ? args.namedVlans : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["remoteStatusPageEnabled"] = args ? args.remoteStatusPageEnabled : undefined;
            resourceInputs["securePort"] = args ? args.securePort : undefined;
            resourceInputs["fips"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Settings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Settings resources.
 */
export interface SettingsState {
    /**
     * A hash of FIPS options applied to the Network
     */
    fips?: pulumi.Input<inputs.networks.SettingsFips>;
    /**
     * A hash of Local Status page(s)' authentication options applied to the Network.
     */
    localStatusPage?: pulumi.Input<inputs.networks.SettingsLocalStatusPage>;
    /**
     * Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
     */
    localStatusPageEnabled?: pulumi.Input<boolean>;
    /**
     * A hash of Named VLANs options applied to the Network.
     */
    namedVlans?: pulumi.Input<inputs.networks.SettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
     */
    remoteStatusPageEnabled?: pulumi.Input<boolean>;
    /**
     * A hash of SecureConnect options applied to the Network.
     */
    securePort?: pulumi.Input<inputs.networks.SettingsSecurePort>;
}

/**
 * The set of arguments for constructing a Settings resource.
 */
export interface SettingsArgs {
    /**
     * A hash of Local Status page(s)' authentication options applied to the Network.
     */
    localStatusPage?: pulumi.Input<inputs.networks.SettingsLocalStatusPage>;
    /**
     * Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
     */
    localStatusPageEnabled?: pulumi.Input<boolean>;
    /**
     * A hash of Named VLANs options applied to the Network.
     */
    namedVlans?: pulumi.Input<inputs.networks.SettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
     */
    remoteStatusPageEnabled?: pulumi.Input<boolean>;
    /**
     * A hash of SecureConnect options applied to the Network.
     */
    securePort?: pulumi.Input<inputs.networks.SettingsSecurePort>;
}
