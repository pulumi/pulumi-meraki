// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceWarmSpare("example", {
 *     enabled: true,
 *     networkId: "string",
 *     spareSerial: "Q234-ABCD-5678",
 *     uplinkMode: "virtual",
 *     virtualIp1: "1.2.3.4",
 *     virtualIp2: "1.2.3.4",
 * });
 * export const merakiNetworksApplianceWarmSpareExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceWarmSpare:ApplianceWarmSpare example "network_id"
 * ```
 */
export class ApplianceWarmSpare extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceWarmSpare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceWarmSpareState, opts?: pulumi.CustomResourceOptions): ApplianceWarmSpare {
        return new ApplianceWarmSpare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceWarmSpare:ApplianceWarmSpare';

    /**
     * Returns true if the given object is an instance of ApplianceWarmSpare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceWarmSpare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceWarmSpare.__pulumiType;
    }

    /**
     * Enable warm spare
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    declare public /*out*/ readonly primarySerial: pulumi.Output<string>;
    /**
     * Serial number of the warm spare appliance
     */
    declare public readonly spareSerial: pulumi.Output<string>;
    /**
     * Uplink mode, either virtual or public
     */
    declare public readonly uplinkMode: pulumi.Output<string>;
    /**
     * The WAN 1 shared IP
     */
    declare public readonly virtualIp1: pulumi.Output<string>;
    /**
     * The WAN 2 shared IP
     */
    declare public readonly virtualIp2: pulumi.Output<string>;
    declare public /*out*/ readonly wan1: pulumi.Output<outputs.networks.ApplianceWarmSpareWan1>;
    declare public /*out*/ readonly wan2: pulumi.Output<outputs.networks.ApplianceWarmSpareWan2>;

    /**
     * Create a ApplianceWarmSpare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceWarmSpareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceWarmSpareArgs | ApplianceWarmSpareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceWarmSpareState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["primarySerial"] = state?.primarySerial;
            resourceInputs["spareSerial"] = state?.spareSerial;
            resourceInputs["uplinkMode"] = state?.uplinkMode;
            resourceInputs["virtualIp1"] = state?.virtualIp1;
            resourceInputs["virtualIp2"] = state?.virtualIp2;
            resourceInputs["wan1"] = state?.wan1;
            resourceInputs["wan2"] = state?.wan2;
        } else {
            const args = argsOrState as ApplianceWarmSpareArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["spareSerial"] = args?.spareSerial;
            resourceInputs["uplinkMode"] = args?.uplinkMode;
            resourceInputs["virtualIp1"] = args?.virtualIp1;
            resourceInputs["virtualIp2"] = args?.virtualIp2;
            resourceInputs["primarySerial"] = undefined /*out*/;
            resourceInputs["wan1"] = undefined /*out*/;
            resourceInputs["wan2"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceWarmSpare.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceWarmSpare resources.
 */
export interface ApplianceWarmSpareState {
    /**
     * Enable warm spare
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    primarySerial?: pulumi.Input<string>;
    /**
     * Serial number of the warm spare appliance
     */
    spareSerial?: pulumi.Input<string>;
    /**
     * Uplink mode, either virtual or public
     */
    uplinkMode?: pulumi.Input<string>;
    /**
     * The WAN 1 shared IP
     */
    virtualIp1?: pulumi.Input<string>;
    /**
     * The WAN 2 shared IP
     */
    virtualIp2?: pulumi.Input<string>;
    wan1?: pulumi.Input<inputs.networks.ApplianceWarmSpareWan1>;
    wan2?: pulumi.Input<inputs.networks.ApplianceWarmSpareWan2>;
}

/**
 * The set of arguments for constructing a ApplianceWarmSpare resource.
 */
export interface ApplianceWarmSpareArgs {
    /**
     * Enable warm spare
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Serial number of the warm spare appliance
     */
    spareSerial?: pulumi.Input<string>;
    /**
     * Uplink mode, either virtual or public
     */
    uplinkMode?: pulumi.Input<string>;
    /**
     * The WAN 1 shared IP
     */
    virtualIp1?: pulumi.Input<string>;
    /**
     * The WAN 2 shared IP
     */
    virtualIp2?: pulumi.Input<string>;
}
