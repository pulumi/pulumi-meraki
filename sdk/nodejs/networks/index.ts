// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertsSettingsArgs, AlertsSettingsState } from "./alertsSettings";
export type AlertsSettings = import("./alertsSettings").AlertsSettings;
export const AlertsSettings: typeof import("./alertsSettings").AlertsSettings = null as any;
utilities.lazyLoad(exports, ["AlertsSettings"], () => require("./alertsSettings"));

export { ApplianceConnectivityMonitoringDestinationsArgs, ApplianceConnectivityMonitoringDestinationsState } from "./applianceConnectivityMonitoringDestinations";
export type ApplianceConnectivityMonitoringDestinations = import("./applianceConnectivityMonitoringDestinations").ApplianceConnectivityMonitoringDestinations;
export const ApplianceConnectivityMonitoringDestinations: typeof import("./applianceConnectivityMonitoringDestinations").ApplianceConnectivityMonitoringDestinations = null as any;
utilities.lazyLoad(exports, ["ApplianceConnectivityMonitoringDestinations"], () => require("./applianceConnectivityMonitoringDestinations"));

export { ApplianceContentFilteringArgs, ApplianceContentFilteringState } from "./applianceContentFiltering";
export type ApplianceContentFiltering = import("./applianceContentFiltering").ApplianceContentFiltering;
export const ApplianceContentFiltering: typeof import("./applianceContentFiltering").ApplianceContentFiltering = null as any;
utilities.lazyLoad(exports, ["ApplianceContentFiltering"], () => require("./applianceContentFiltering"));

export { ApplianceFirewallCellularFirewallRulesArgs, ApplianceFirewallCellularFirewallRulesState } from "./applianceFirewallCellularFirewallRules";
export type ApplianceFirewallCellularFirewallRules = import("./applianceFirewallCellularFirewallRules").ApplianceFirewallCellularFirewallRules;
export const ApplianceFirewallCellularFirewallRules: typeof import("./applianceFirewallCellularFirewallRules").ApplianceFirewallCellularFirewallRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallCellularFirewallRules"], () => require("./applianceFirewallCellularFirewallRules"));

export { ApplianceFirewallFirewalledServicesArgs, ApplianceFirewallFirewalledServicesState } from "./applianceFirewallFirewalledServices";
export type ApplianceFirewallFirewalledServices = import("./applianceFirewallFirewalledServices").ApplianceFirewallFirewalledServices;
export const ApplianceFirewallFirewalledServices: typeof import("./applianceFirewallFirewalledServices").ApplianceFirewallFirewalledServices = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallFirewalledServices"], () => require("./applianceFirewallFirewalledServices"));

export { ApplianceFirewallInboundFirewallRulesArgs, ApplianceFirewallInboundFirewallRulesState } from "./applianceFirewallInboundFirewallRules";
export type ApplianceFirewallInboundFirewallRules = import("./applianceFirewallInboundFirewallRules").ApplianceFirewallInboundFirewallRules;
export const ApplianceFirewallInboundFirewallRules: typeof import("./applianceFirewallInboundFirewallRules").ApplianceFirewallInboundFirewallRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallInboundFirewallRules"], () => require("./applianceFirewallInboundFirewallRules"));

export { ApplianceFirewallL3FirewallRulesArgs, ApplianceFirewallL3FirewallRulesState } from "./applianceFirewallL3FirewallRules";
export type ApplianceFirewallL3FirewallRules = import("./applianceFirewallL3FirewallRules").ApplianceFirewallL3FirewallRules;
export const ApplianceFirewallL3FirewallRules: typeof import("./applianceFirewallL3FirewallRules").ApplianceFirewallL3FirewallRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallL3FirewallRules"], () => require("./applianceFirewallL3FirewallRules"));

export { ApplianceFirewallL7FirewallRulesArgs, ApplianceFirewallL7FirewallRulesState } from "./applianceFirewallL7FirewallRules";
export type ApplianceFirewallL7FirewallRules = import("./applianceFirewallL7FirewallRules").ApplianceFirewallL7FirewallRules;
export const ApplianceFirewallL7FirewallRules: typeof import("./applianceFirewallL7FirewallRules").ApplianceFirewallL7FirewallRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallL7FirewallRules"], () => require("./applianceFirewallL7FirewallRules"));

export { ApplianceFirewallOneToManyNatRulesArgs, ApplianceFirewallOneToManyNatRulesState } from "./applianceFirewallOneToManyNatRules";
export type ApplianceFirewallOneToManyNatRules = import("./applianceFirewallOneToManyNatRules").ApplianceFirewallOneToManyNatRules;
export const ApplianceFirewallOneToManyNatRules: typeof import("./applianceFirewallOneToManyNatRules").ApplianceFirewallOneToManyNatRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallOneToManyNatRules"], () => require("./applianceFirewallOneToManyNatRules"));

export { ApplianceFirewallOneToOneNatRulesArgs, ApplianceFirewallOneToOneNatRulesState } from "./applianceFirewallOneToOneNatRules";
export type ApplianceFirewallOneToOneNatRules = import("./applianceFirewallOneToOneNatRules").ApplianceFirewallOneToOneNatRules;
export const ApplianceFirewallOneToOneNatRules: typeof import("./applianceFirewallOneToOneNatRules").ApplianceFirewallOneToOneNatRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallOneToOneNatRules"], () => require("./applianceFirewallOneToOneNatRules"));

export { ApplianceFirewallPortForwardingRulesArgs, ApplianceFirewallPortForwardingRulesState } from "./applianceFirewallPortForwardingRules";
export type ApplianceFirewallPortForwardingRules = import("./applianceFirewallPortForwardingRules").ApplianceFirewallPortForwardingRules;
export const ApplianceFirewallPortForwardingRules: typeof import("./applianceFirewallPortForwardingRules").ApplianceFirewallPortForwardingRules = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallPortForwardingRules"], () => require("./applianceFirewallPortForwardingRules"));

export { ApplianceFirewallSettingsArgs, ApplianceFirewallSettingsState } from "./applianceFirewallSettings";
export type ApplianceFirewallSettings = import("./applianceFirewallSettings").ApplianceFirewallSettings;
export const ApplianceFirewallSettings: typeof import("./applianceFirewallSettings").ApplianceFirewallSettings = null as any;
utilities.lazyLoad(exports, ["ApplianceFirewallSettings"], () => require("./applianceFirewallSettings"));

export { AppliancePortsArgs, AppliancePortsState } from "./appliancePorts";
export type AppliancePorts = import("./appliancePorts").AppliancePorts;
export const AppliancePorts: typeof import("./appliancePorts").AppliancePorts = null as any;
utilities.lazyLoad(exports, ["AppliancePorts"], () => require("./appliancePorts"));

export { AppliancePrefixesDelegatedStaticsArgs, AppliancePrefixesDelegatedStaticsState } from "./appliancePrefixesDelegatedStatics";
export type AppliancePrefixesDelegatedStatics = import("./appliancePrefixesDelegatedStatics").AppliancePrefixesDelegatedStatics;
export const AppliancePrefixesDelegatedStatics: typeof import("./appliancePrefixesDelegatedStatics").AppliancePrefixesDelegatedStatics = null as any;
utilities.lazyLoad(exports, ["AppliancePrefixesDelegatedStatics"], () => require("./appliancePrefixesDelegatedStatics"));

export { ApplianceRfProfilesArgs, ApplianceRfProfilesState } from "./applianceRfProfiles";
export type ApplianceRfProfiles = import("./applianceRfProfiles").ApplianceRfProfiles;
export const ApplianceRfProfiles: typeof import("./applianceRfProfiles").ApplianceRfProfiles = null as any;
utilities.lazyLoad(exports, ["ApplianceRfProfiles"], () => require("./applianceRfProfiles"));

export { ApplianceSecurityIntrusionArgs, ApplianceSecurityIntrusionState } from "./applianceSecurityIntrusion";
export type ApplianceSecurityIntrusion = import("./applianceSecurityIntrusion").ApplianceSecurityIntrusion;
export const ApplianceSecurityIntrusion: typeof import("./applianceSecurityIntrusion").ApplianceSecurityIntrusion = null as any;
utilities.lazyLoad(exports, ["ApplianceSecurityIntrusion"], () => require("./applianceSecurityIntrusion"));

export { ApplianceSecurityMalwareArgs, ApplianceSecurityMalwareState } from "./applianceSecurityMalware";
export type ApplianceSecurityMalware = import("./applianceSecurityMalware").ApplianceSecurityMalware;
export const ApplianceSecurityMalware: typeof import("./applianceSecurityMalware").ApplianceSecurityMalware = null as any;
utilities.lazyLoad(exports, ["ApplianceSecurityMalware"], () => require("./applianceSecurityMalware"));

export { ApplianceSettingsArgs, ApplianceSettingsState } from "./applianceSettings";
export type ApplianceSettings = import("./applianceSettings").ApplianceSettings;
export const ApplianceSettings: typeof import("./applianceSettings").ApplianceSettings = null as any;
utilities.lazyLoad(exports, ["ApplianceSettings"], () => require("./applianceSettings"));

export { ApplianceSingleLanArgs, ApplianceSingleLanState } from "./applianceSingleLan";
export type ApplianceSingleLan = import("./applianceSingleLan").ApplianceSingleLan;
export const ApplianceSingleLan: typeof import("./applianceSingleLan").ApplianceSingleLan = null as any;
utilities.lazyLoad(exports, ["ApplianceSingleLan"], () => require("./applianceSingleLan"));

export { ApplianceSsidsArgs, ApplianceSsidsState } from "./applianceSsids";
export type ApplianceSsids = import("./applianceSsids").ApplianceSsids;
export const ApplianceSsids: typeof import("./applianceSsids").ApplianceSsids = null as any;
utilities.lazyLoad(exports, ["ApplianceSsids"], () => require("./applianceSsids"));

export { ApplianceTrafficShapingArgs, ApplianceTrafficShapingState } from "./applianceTrafficShaping";
export type ApplianceTrafficShaping = import("./applianceTrafficShaping").ApplianceTrafficShaping;
export const ApplianceTrafficShaping: typeof import("./applianceTrafficShaping").ApplianceTrafficShaping = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShaping"], () => require("./applianceTrafficShaping"));

export { ApplianceTrafficShapingCustomPerformanceClassesArgs, ApplianceTrafficShapingCustomPerformanceClassesState } from "./applianceTrafficShapingCustomPerformanceClasses";
export type ApplianceTrafficShapingCustomPerformanceClasses = import("./applianceTrafficShapingCustomPerformanceClasses").ApplianceTrafficShapingCustomPerformanceClasses;
export const ApplianceTrafficShapingCustomPerformanceClasses: typeof import("./applianceTrafficShapingCustomPerformanceClasses").ApplianceTrafficShapingCustomPerformanceClasses = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShapingCustomPerformanceClasses"], () => require("./applianceTrafficShapingCustomPerformanceClasses"));

export { ApplianceTrafficShapingRulesArgs, ApplianceTrafficShapingRulesState } from "./applianceTrafficShapingRules";
export type ApplianceTrafficShapingRules = import("./applianceTrafficShapingRules").ApplianceTrafficShapingRules;
export const ApplianceTrafficShapingRules: typeof import("./applianceTrafficShapingRules").ApplianceTrafficShapingRules = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShapingRules"], () => require("./applianceTrafficShapingRules"));

export { ApplianceTrafficShapingUplinkBandwidthArgs, ApplianceTrafficShapingUplinkBandwidthState } from "./applianceTrafficShapingUplinkBandwidth";
export type ApplianceTrafficShapingUplinkBandwidth = import("./applianceTrafficShapingUplinkBandwidth").ApplianceTrafficShapingUplinkBandwidth;
export const ApplianceTrafficShapingUplinkBandwidth: typeof import("./applianceTrafficShapingUplinkBandwidth").ApplianceTrafficShapingUplinkBandwidth = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShapingUplinkBandwidth"], () => require("./applianceTrafficShapingUplinkBandwidth"));

export { ApplianceTrafficShapingUplinkSelectionArgs, ApplianceTrafficShapingUplinkSelectionState } from "./applianceTrafficShapingUplinkSelection";
export type ApplianceTrafficShapingUplinkSelection = import("./applianceTrafficShapingUplinkSelection").ApplianceTrafficShapingUplinkSelection;
export const ApplianceTrafficShapingUplinkSelection: typeof import("./applianceTrafficShapingUplinkSelection").ApplianceTrafficShapingUplinkSelection = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShapingUplinkSelection"], () => require("./applianceTrafficShapingUplinkSelection"));

export { ApplianceTrafficShapingVpnExclusionsArgs, ApplianceTrafficShapingVpnExclusionsState } from "./applianceTrafficShapingVpnExclusions";
export type ApplianceTrafficShapingVpnExclusions = import("./applianceTrafficShapingVpnExclusions").ApplianceTrafficShapingVpnExclusions;
export const ApplianceTrafficShapingVpnExclusions: typeof import("./applianceTrafficShapingVpnExclusions").ApplianceTrafficShapingVpnExclusions = null as any;
utilities.lazyLoad(exports, ["ApplianceTrafficShapingVpnExclusions"], () => require("./applianceTrafficShapingVpnExclusions"));

export { ApplianceVlansArgs, ApplianceVlansState } from "./applianceVlans";
export type ApplianceVlans = import("./applianceVlans").ApplianceVlans;
export const ApplianceVlans: typeof import("./applianceVlans").ApplianceVlans = null as any;
utilities.lazyLoad(exports, ["ApplianceVlans"], () => require("./applianceVlans"));

export { ApplianceVlansSettingsArgs, ApplianceVlansSettingsState } from "./applianceVlansSettings";
export type ApplianceVlansSettings = import("./applianceVlansSettings").ApplianceVlansSettings;
export const ApplianceVlansSettings: typeof import("./applianceVlansSettings").ApplianceVlansSettings = null as any;
utilities.lazyLoad(exports, ["ApplianceVlansSettings"], () => require("./applianceVlansSettings"));

export { ApplianceVpnBgpArgs, ApplianceVpnBgpState } from "./applianceVpnBgp";
export type ApplianceVpnBgp = import("./applianceVpnBgp").ApplianceVpnBgp;
export const ApplianceVpnBgp: typeof import("./applianceVpnBgp").ApplianceVpnBgp = null as any;
utilities.lazyLoad(exports, ["ApplianceVpnBgp"], () => require("./applianceVpnBgp"));

export { ApplianceVpnSiteToSiteVpnArgs, ApplianceVpnSiteToSiteVpnState } from "./applianceVpnSiteToSiteVpn";
export type ApplianceVpnSiteToSiteVpn = import("./applianceVpnSiteToSiteVpn").ApplianceVpnSiteToSiteVpn;
export const ApplianceVpnSiteToSiteVpn: typeof import("./applianceVpnSiteToSiteVpn").ApplianceVpnSiteToSiteVpn = null as any;
utilities.lazyLoad(exports, ["ApplianceVpnSiteToSiteVpn"], () => require("./applianceVpnSiteToSiteVpn"));

export { ApplianceWarmSpareArgs, ApplianceWarmSpareState } from "./applianceWarmSpare";
export type ApplianceWarmSpare = import("./applianceWarmSpare").ApplianceWarmSpare;
export const ApplianceWarmSpare: typeof import("./applianceWarmSpare").ApplianceWarmSpare = null as any;
utilities.lazyLoad(exports, ["ApplianceWarmSpare"], () => require("./applianceWarmSpare"));

export { ApplianceWarmSpareSwapArgs, ApplianceWarmSpareSwapState } from "./applianceWarmSpareSwap";
export type ApplianceWarmSpareSwap = import("./applianceWarmSpareSwap").ApplianceWarmSpareSwap;
export const ApplianceWarmSpareSwap: typeof import("./applianceWarmSpareSwap").ApplianceWarmSpareSwap = null as any;
utilities.lazyLoad(exports, ["ApplianceWarmSpareSwap"], () => require("./applianceWarmSpareSwap"));

export { BaseArgs, BaseState } from "./base";
export type Base = import("./base").Base;
export const Base: typeof import("./base").Base = null as any;
utilities.lazyLoad(exports, ["Base"], () => require("./base"));

export { BindArgs, BindState } from "./bind";
export type Bind = import("./bind").Bind;
export const Bind: typeof import("./bind").Bind = null as any;
utilities.lazyLoad(exports, ["Bind"], () => require("./bind"));

export { CameraQualityRetentionProfilesArgs, CameraQualityRetentionProfilesState } from "./cameraQualityRetentionProfiles";
export type CameraQualityRetentionProfiles = import("./cameraQualityRetentionProfiles").CameraQualityRetentionProfiles;
export const CameraQualityRetentionProfiles: typeof import("./cameraQualityRetentionProfiles").CameraQualityRetentionProfiles = null as any;
utilities.lazyLoad(exports, ["CameraQualityRetentionProfiles"], () => require("./cameraQualityRetentionProfiles"));

export { CameraWirelessProfilesArgs, CameraWirelessProfilesState } from "./cameraWirelessProfiles";
export type CameraWirelessProfiles = import("./cameraWirelessProfiles").CameraWirelessProfiles;
export const CameraWirelessProfiles: typeof import("./cameraWirelessProfiles").CameraWirelessProfiles = null as any;
utilities.lazyLoad(exports, ["CameraWirelessProfiles"], () => require("./cameraWirelessProfiles"));

export { CellularGatewayConnectivityMonitoringDestinationsArgs, CellularGatewayConnectivityMonitoringDestinationsState } from "./cellularGatewayConnectivityMonitoringDestinations";
export type CellularGatewayConnectivityMonitoringDestinations = import("./cellularGatewayConnectivityMonitoringDestinations").CellularGatewayConnectivityMonitoringDestinations;
export const CellularGatewayConnectivityMonitoringDestinations: typeof import("./cellularGatewayConnectivityMonitoringDestinations").CellularGatewayConnectivityMonitoringDestinations = null as any;
utilities.lazyLoad(exports, ["CellularGatewayConnectivityMonitoringDestinations"], () => require("./cellularGatewayConnectivityMonitoringDestinations"));

export { CellularGatewayDhcpArgs, CellularGatewayDhcpState } from "./cellularGatewayDhcp";
export type CellularGatewayDhcp = import("./cellularGatewayDhcp").CellularGatewayDhcp;
export const CellularGatewayDhcp: typeof import("./cellularGatewayDhcp").CellularGatewayDhcp = null as any;
utilities.lazyLoad(exports, ["CellularGatewayDhcp"], () => require("./cellularGatewayDhcp"));

export { CellularGatewaySubnetPoolArgs, CellularGatewaySubnetPoolState } from "./cellularGatewaySubnetPool";
export type CellularGatewaySubnetPool = import("./cellularGatewaySubnetPool").CellularGatewaySubnetPool;
export const CellularGatewaySubnetPool: typeof import("./cellularGatewaySubnetPool").CellularGatewaySubnetPool = null as any;
utilities.lazyLoad(exports, ["CellularGatewaySubnetPool"], () => require("./cellularGatewaySubnetPool"));

export { CellularGatewayUplinkArgs, CellularGatewayUplinkState } from "./cellularGatewayUplink";
export type CellularGatewayUplink = import("./cellularGatewayUplink").CellularGatewayUplink;
export const CellularGatewayUplink: typeof import("./cellularGatewayUplink").CellularGatewayUplink = null as any;
utilities.lazyLoad(exports, ["CellularGatewayUplink"], () => require("./cellularGatewayUplink"));

export { ClientsPolicyArgs, ClientsPolicyState } from "./clientsPolicy";
export type ClientsPolicy = import("./clientsPolicy").ClientsPolicy;
export const ClientsPolicy: typeof import("./clientsPolicy").ClientsPolicy = null as any;
utilities.lazyLoad(exports, ["ClientsPolicy"], () => require("./clientsPolicy"));

export { ClientsProvisionArgs, ClientsProvisionState } from "./clientsProvision";
export type ClientsProvision = import("./clientsProvision").ClientsProvision;
export const ClientsProvision: typeof import("./clientsProvision").ClientsProvision = null as any;
utilities.lazyLoad(exports, ["ClientsProvision"], () => require("./clientsProvision"));

export { ClientsSplashAuthorizationStatusArgs, ClientsSplashAuthorizationStatusState } from "./clientsSplashAuthorizationStatus";
export type ClientsSplashAuthorizationStatus = import("./clientsSplashAuthorizationStatus").ClientsSplashAuthorizationStatus;
export const ClientsSplashAuthorizationStatus: typeof import("./clientsSplashAuthorizationStatus").ClientsSplashAuthorizationStatus = null as any;
utilities.lazyLoad(exports, ["ClientsSplashAuthorizationStatus"], () => require("./clientsSplashAuthorizationStatus"));

export { DevicesClaimArgs, DevicesClaimState } from "./devicesClaim";
export type DevicesClaim = import("./devicesClaim").DevicesClaim;
export const DevicesClaim: typeof import("./devicesClaim").DevicesClaim = null as any;
utilities.lazyLoad(exports, ["DevicesClaim"], () => require("./devicesClaim"));

export { DevicesClaimVmxArgs, DevicesClaimVmxState } from "./devicesClaimVmx";
export type DevicesClaimVmx = import("./devicesClaimVmx").DevicesClaimVmx;
export const DevicesClaimVmx: typeof import("./devicesClaimVmx").DevicesClaimVmx = null as any;
utilities.lazyLoad(exports, ["DevicesClaimVmx"], () => require("./devicesClaimVmx"));

export { DevicesRemoveArgs, DevicesRemoveState } from "./devicesRemove";
export type DevicesRemove = import("./devicesRemove").DevicesRemove;
export const DevicesRemove: typeof import("./devicesRemove").DevicesRemove = null as any;
utilities.lazyLoad(exports, ["DevicesRemove"], () => require("./devicesRemove"));

export { FirmwareUpgradesArgs, FirmwareUpgradesState } from "./firmwareUpgrades";
export type FirmwareUpgrades = import("./firmwareUpgrades").FirmwareUpgrades;
export const FirmwareUpgrades: typeof import("./firmwareUpgrades").FirmwareUpgrades = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgrades"], () => require("./firmwareUpgrades"));

export { FirmwareUpgradesRollbacksArgs, FirmwareUpgradesRollbacksState } from "./firmwareUpgradesRollbacks";
export type FirmwareUpgradesRollbacks = import("./firmwareUpgradesRollbacks").FirmwareUpgradesRollbacks;
export const FirmwareUpgradesRollbacks: typeof import("./firmwareUpgradesRollbacks").FirmwareUpgradesRollbacks = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesRollbacks"], () => require("./firmwareUpgradesRollbacks"));

export { FirmwareUpgradesStagedEventsArgs, FirmwareUpgradesStagedEventsState } from "./firmwareUpgradesStagedEvents";
export type FirmwareUpgradesStagedEvents = import("./firmwareUpgradesStagedEvents").FirmwareUpgradesStagedEvents;
export const FirmwareUpgradesStagedEvents: typeof import("./firmwareUpgradesStagedEvents").FirmwareUpgradesStagedEvents = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesStagedEvents"], () => require("./firmwareUpgradesStagedEvents"));

export { FirmwareUpgradesStagedEventsDeferArgs, FirmwareUpgradesStagedEventsDeferState } from "./firmwareUpgradesStagedEventsDefer";
export type FirmwareUpgradesStagedEventsDefer = import("./firmwareUpgradesStagedEventsDefer").FirmwareUpgradesStagedEventsDefer;
export const FirmwareUpgradesStagedEventsDefer: typeof import("./firmwareUpgradesStagedEventsDefer").FirmwareUpgradesStagedEventsDefer = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesStagedEventsDefer"], () => require("./firmwareUpgradesStagedEventsDefer"));

export { FirmwareUpgradesStagedEventsRollbacksArgs, FirmwareUpgradesStagedEventsRollbacksState } from "./firmwareUpgradesStagedEventsRollbacks";
export type FirmwareUpgradesStagedEventsRollbacks = import("./firmwareUpgradesStagedEventsRollbacks").FirmwareUpgradesStagedEventsRollbacks;
export const FirmwareUpgradesStagedEventsRollbacks: typeof import("./firmwareUpgradesStagedEventsRollbacks").FirmwareUpgradesStagedEventsRollbacks = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesStagedEventsRollbacks"], () => require("./firmwareUpgradesStagedEventsRollbacks"));

export { FirmwareUpgradesStagedGroupsArgs, FirmwareUpgradesStagedGroupsState } from "./firmwareUpgradesStagedGroups";
export type FirmwareUpgradesStagedGroups = import("./firmwareUpgradesStagedGroups").FirmwareUpgradesStagedGroups;
export const FirmwareUpgradesStagedGroups: typeof import("./firmwareUpgradesStagedGroups").FirmwareUpgradesStagedGroups = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesStagedGroups"], () => require("./firmwareUpgradesStagedGroups"));

export { FirmwareUpgradesStagedStagesArgs, FirmwareUpgradesStagedStagesState } from "./firmwareUpgradesStagedStages";
export type FirmwareUpgradesStagedStages = import("./firmwareUpgradesStagedStages").FirmwareUpgradesStagedStages;
export const FirmwareUpgradesStagedStages: typeof import("./firmwareUpgradesStagedStages").FirmwareUpgradesStagedStages = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradesStagedStages"], () => require("./firmwareUpgradesStagedStages"));

export { FloorPlansArgs, FloorPlansState } from "./floorPlans";
export type FloorPlans = import("./floorPlans").FloorPlans;
export const FloorPlans: typeof import("./floorPlans").FloorPlans = null as any;
utilities.lazyLoad(exports, ["FloorPlans"], () => require("./floorPlans"));

export { GetAlertsHistoryArgs, GetAlertsHistoryResult, GetAlertsHistoryOutputArgs } from "./getAlertsHistory";
export const getAlertsHistory: typeof import("./getAlertsHistory").getAlertsHistory = null as any;
export const getAlertsHistoryOutput: typeof import("./getAlertsHistory").getAlertsHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsHistory","getAlertsHistoryOutput"], () => require("./getAlertsHistory"));

export { GetAlertsSettingsArgs, GetAlertsSettingsResult, GetAlertsSettingsOutputArgs } from "./getAlertsSettings";
export const getAlertsSettings: typeof import("./getAlertsSettings").getAlertsSettings = null as any;
export const getAlertsSettingsOutput: typeof import("./getAlertsSettings").getAlertsSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsSettings","getAlertsSettingsOutput"], () => require("./getAlertsSettings"));

export { GetApplianceConnectivityMonitoringDestinationsArgs, GetApplianceConnectivityMonitoringDestinationsResult, GetApplianceConnectivityMonitoringDestinationsOutputArgs } from "./getApplianceConnectivityMonitoringDestinations";
export const getApplianceConnectivityMonitoringDestinations: typeof import("./getApplianceConnectivityMonitoringDestinations").getApplianceConnectivityMonitoringDestinations = null as any;
export const getApplianceConnectivityMonitoringDestinationsOutput: typeof import("./getApplianceConnectivityMonitoringDestinations").getApplianceConnectivityMonitoringDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceConnectivityMonitoringDestinations","getApplianceConnectivityMonitoringDestinationsOutput"], () => require("./getApplianceConnectivityMonitoringDestinations"));

export { GetApplianceContentFilteringArgs, GetApplianceContentFilteringResult, GetApplianceContentFilteringOutputArgs } from "./getApplianceContentFiltering";
export const getApplianceContentFiltering: typeof import("./getApplianceContentFiltering").getApplianceContentFiltering = null as any;
export const getApplianceContentFilteringOutput: typeof import("./getApplianceContentFiltering").getApplianceContentFilteringOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceContentFiltering","getApplianceContentFilteringOutput"], () => require("./getApplianceContentFiltering"));

export { GetApplianceContentFilteringCategoriesArgs, GetApplianceContentFilteringCategoriesResult, GetApplianceContentFilteringCategoriesOutputArgs } from "./getApplianceContentFilteringCategories";
export const getApplianceContentFilteringCategories: typeof import("./getApplianceContentFilteringCategories").getApplianceContentFilteringCategories = null as any;
export const getApplianceContentFilteringCategoriesOutput: typeof import("./getApplianceContentFilteringCategories").getApplianceContentFilteringCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceContentFilteringCategories","getApplianceContentFilteringCategoriesOutput"], () => require("./getApplianceContentFilteringCategories"));

export { GetApplianceFirewallCellularFirewallRulesArgs, GetApplianceFirewallCellularFirewallRulesResult, GetApplianceFirewallCellularFirewallRulesOutputArgs } from "./getApplianceFirewallCellularFirewallRules";
export const getApplianceFirewallCellularFirewallRules: typeof import("./getApplianceFirewallCellularFirewallRules").getApplianceFirewallCellularFirewallRules = null as any;
export const getApplianceFirewallCellularFirewallRulesOutput: typeof import("./getApplianceFirewallCellularFirewallRules").getApplianceFirewallCellularFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallCellularFirewallRules","getApplianceFirewallCellularFirewallRulesOutput"], () => require("./getApplianceFirewallCellularFirewallRules"));

export { GetApplianceFirewallFirewalledServicesArgs, GetApplianceFirewallFirewalledServicesResult, GetApplianceFirewallFirewalledServicesOutputArgs } from "./getApplianceFirewallFirewalledServices";
export const getApplianceFirewallFirewalledServices: typeof import("./getApplianceFirewallFirewalledServices").getApplianceFirewallFirewalledServices = null as any;
export const getApplianceFirewallFirewalledServicesOutput: typeof import("./getApplianceFirewallFirewalledServices").getApplianceFirewallFirewalledServicesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallFirewalledServices","getApplianceFirewallFirewalledServicesOutput"], () => require("./getApplianceFirewallFirewalledServices"));

export { GetApplianceFirewallInboundFirewallRulesArgs, GetApplianceFirewallInboundFirewallRulesResult, GetApplianceFirewallInboundFirewallRulesOutputArgs } from "./getApplianceFirewallInboundFirewallRules";
export const getApplianceFirewallInboundFirewallRules: typeof import("./getApplianceFirewallInboundFirewallRules").getApplianceFirewallInboundFirewallRules = null as any;
export const getApplianceFirewallInboundFirewallRulesOutput: typeof import("./getApplianceFirewallInboundFirewallRules").getApplianceFirewallInboundFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallInboundFirewallRules","getApplianceFirewallInboundFirewallRulesOutput"], () => require("./getApplianceFirewallInboundFirewallRules"));

export { GetApplianceFirewallL3FirewallRulesArgs, GetApplianceFirewallL3FirewallRulesResult, GetApplianceFirewallL3FirewallRulesOutputArgs } from "./getApplianceFirewallL3FirewallRules";
export const getApplianceFirewallL3FirewallRules: typeof import("./getApplianceFirewallL3FirewallRules").getApplianceFirewallL3FirewallRules = null as any;
export const getApplianceFirewallL3FirewallRulesOutput: typeof import("./getApplianceFirewallL3FirewallRules").getApplianceFirewallL3FirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallL3FirewallRules","getApplianceFirewallL3FirewallRulesOutput"], () => require("./getApplianceFirewallL3FirewallRules"));

export { GetApplianceFirewallL7FirewallRulesArgs, GetApplianceFirewallL7FirewallRulesResult, GetApplianceFirewallL7FirewallRulesOutputArgs } from "./getApplianceFirewallL7FirewallRules";
export const getApplianceFirewallL7FirewallRules: typeof import("./getApplianceFirewallL7FirewallRules").getApplianceFirewallL7FirewallRules = null as any;
export const getApplianceFirewallL7FirewallRulesOutput: typeof import("./getApplianceFirewallL7FirewallRules").getApplianceFirewallL7FirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallL7FirewallRules","getApplianceFirewallL7FirewallRulesOutput"], () => require("./getApplianceFirewallL7FirewallRules"));

export { GetApplianceFirewallL7FirewallRulesApplicationCategoriesArgs, GetApplianceFirewallL7FirewallRulesApplicationCategoriesResult, GetApplianceFirewallL7FirewallRulesApplicationCategoriesOutputArgs } from "./getApplianceFirewallL7FirewallRulesApplicationCategories";
export const getApplianceFirewallL7FirewallRulesApplicationCategories: typeof import("./getApplianceFirewallL7FirewallRulesApplicationCategories").getApplianceFirewallL7FirewallRulesApplicationCategories = null as any;
export const getApplianceFirewallL7FirewallRulesApplicationCategoriesOutput: typeof import("./getApplianceFirewallL7FirewallRulesApplicationCategories").getApplianceFirewallL7FirewallRulesApplicationCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallL7FirewallRulesApplicationCategories","getApplianceFirewallL7FirewallRulesApplicationCategoriesOutput"], () => require("./getApplianceFirewallL7FirewallRulesApplicationCategories"));

export { GetApplianceFirewallOneToManyNatRulesArgs, GetApplianceFirewallOneToManyNatRulesResult, GetApplianceFirewallOneToManyNatRulesOutputArgs } from "./getApplianceFirewallOneToManyNatRules";
export const getApplianceFirewallOneToManyNatRules: typeof import("./getApplianceFirewallOneToManyNatRules").getApplianceFirewallOneToManyNatRules = null as any;
export const getApplianceFirewallOneToManyNatRulesOutput: typeof import("./getApplianceFirewallOneToManyNatRules").getApplianceFirewallOneToManyNatRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallOneToManyNatRules","getApplianceFirewallOneToManyNatRulesOutput"], () => require("./getApplianceFirewallOneToManyNatRules"));

export { GetApplianceFirewallOneToOneNatRulesArgs, GetApplianceFirewallOneToOneNatRulesResult, GetApplianceFirewallOneToOneNatRulesOutputArgs } from "./getApplianceFirewallOneToOneNatRules";
export const getApplianceFirewallOneToOneNatRules: typeof import("./getApplianceFirewallOneToOneNatRules").getApplianceFirewallOneToOneNatRules = null as any;
export const getApplianceFirewallOneToOneNatRulesOutput: typeof import("./getApplianceFirewallOneToOneNatRules").getApplianceFirewallOneToOneNatRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallOneToOneNatRules","getApplianceFirewallOneToOneNatRulesOutput"], () => require("./getApplianceFirewallOneToOneNatRules"));

export { GetApplianceFirewallPortForwardingRulesArgs, GetApplianceFirewallPortForwardingRulesResult, GetApplianceFirewallPortForwardingRulesOutputArgs } from "./getApplianceFirewallPortForwardingRules";
export const getApplianceFirewallPortForwardingRules: typeof import("./getApplianceFirewallPortForwardingRules").getApplianceFirewallPortForwardingRules = null as any;
export const getApplianceFirewallPortForwardingRulesOutput: typeof import("./getApplianceFirewallPortForwardingRules").getApplianceFirewallPortForwardingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallPortForwardingRules","getApplianceFirewallPortForwardingRulesOutput"], () => require("./getApplianceFirewallPortForwardingRules"));

export { GetApplianceFirewallSettingsArgs, GetApplianceFirewallSettingsResult, GetApplianceFirewallSettingsOutputArgs } from "./getApplianceFirewallSettings";
export const getApplianceFirewallSettings: typeof import("./getApplianceFirewallSettings").getApplianceFirewallSettings = null as any;
export const getApplianceFirewallSettingsOutput: typeof import("./getApplianceFirewallSettings").getApplianceFirewallSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFirewallSettings","getApplianceFirewallSettingsOutput"], () => require("./getApplianceFirewallSettings"));

export { GetAppliancePortsArgs, GetAppliancePortsResult, GetAppliancePortsOutputArgs } from "./getAppliancePorts";
export const getAppliancePorts: typeof import("./getAppliancePorts").getAppliancePorts = null as any;
export const getAppliancePortsOutput: typeof import("./getAppliancePorts").getAppliancePortsOutput = null as any;
utilities.lazyLoad(exports, ["getAppliancePorts","getAppliancePortsOutput"], () => require("./getAppliancePorts"));

export { GetAppliancePrefixesDelegatedStaticsArgs, GetAppliancePrefixesDelegatedStaticsResult, GetAppliancePrefixesDelegatedStaticsOutputArgs } from "./getAppliancePrefixesDelegatedStatics";
export const getAppliancePrefixesDelegatedStatics: typeof import("./getAppliancePrefixesDelegatedStatics").getAppliancePrefixesDelegatedStatics = null as any;
export const getAppliancePrefixesDelegatedStaticsOutput: typeof import("./getAppliancePrefixesDelegatedStatics").getAppliancePrefixesDelegatedStaticsOutput = null as any;
utilities.lazyLoad(exports, ["getAppliancePrefixesDelegatedStatics","getAppliancePrefixesDelegatedStaticsOutput"], () => require("./getAppliancePrefixesDelegatedStatics"));

export { GetApplianceRfProfilesArgs, GetApplianceRfProfilesResult, GetApplianceRfProfilesOutputArgs } from "./getApplianceRfProfiles";
export const getApplianceRfProfiles: typeof import("./getApplianceRfProfiles").getApplianceRfProfiles = null as any;
export const getApplianceRfProfilesOutput: typeof import("./getApplianceRfProfiles").getApplianceRfProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceRfProfiles","getApplianceRfProfilesOutput"], () => require("./getApplianceRfProfiles"));

export { GetApplianceSecurityIntrusionArgs, GetApplianceSecurityIntrusionResult, GetApplianceSecurityIntrusionOutputArgs } from "./getApplianceSecurityIntrusion";
export const getApplianceSecurityIntrusion: typeof import("./getApplianceSecurityIntrusion").getApplianceSecurityIntrusion = null as any;
export const getApplianceSecurityIntrusionOutput: typeof import("./getApplianceSecurityIntrusion").getApplianceSecurityIntrusionOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSecurityIntrusion","getApplianceSecurityIntrusionOutput"], () => require("./getApplianceSecurityIntrusion"));

export { GetApplianceSecurityMalwareArgs, GetApplianceSecurityMalwareResult, GetApplianceSecurityMalwareOutputArgs } from "./getApplianceSecurityMalware";
export const getApplianceSecurityMalware: typeof import("./getApplianceSecurityMalware").getApplianceSecurityMalware = null as any;
export const getApplianceSecurityMalwareOutput: typeof import("./getApplianceSecurityMalware").getApplianceSecurityMalwareOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSecurityMalware","getApplianceSecurityMalwareOutput"], () => require("./getApplianceSecurityMalware"));

export { GetApplianceSettingsArgs, GetApplianceSettingsResult, GetApplianceSettingsOutputArgs } from "./getApplianceSettings";
export const getApplianceSettings: typeof import("./getApplianceSettings").getApplianceSettings = null as any;
export const getApplianceSettingsOutput: typeof import("./getApplianceSettings").getApplianceSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSettings","getApplianceSettingsOutput"], () => require("./getApplianceSettings"));

export { GetApplianceSingleLanArgs, GetApplianceSingleLanResult, GetApplianceSingleLanOutputArgs } from "./getApplianceSingleLan";
export const getApplianceSingleLan: typeof import("./getApplianceSingleLan").getApplianceSingleLan = null as any;
export const getApplianceSingleLanOutput: typeof import("./getApplianceSingleLan").getApplianceSingleLanOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSingleLan","getApplianceSingleLanOutput"], () => require("./getApplianceSingleLan"));

export { GetApplianceSsidsArgs, GetApplianceSsidsResult, GetApplianceSsidsOutputArgs } from "./getApplianceSsids";
export const getApplianceSsids: typeof import("./getApplianceSsids").getApplianceSsids = null as any;
export const getApplianceSsidsOutput: typeof import("./getApplianceSsids").getApplianceSsidsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSsids","getApplianceSsidsOutput"], () => require("./getApplianceSsids"));

export { GetApplianceTrafficShapingArgs, GetApplianceTrafficShapingResult, GetApplianceTrafficShapingOutputArgs } from "./getApplianceTrafficShaping";
export const getApplianceTrafficShaping: typeof import("./getApplianceTrafficShaping").getApplianceTrafficShaping = null as any;
export const getApplianceTrafficShapingOutput: typeof import("./getApplianceTrafficShaping").getApplianceTrafficShapingOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceTrafficShaping","getApplianceTrafficShapingOutput"], () => require("./getApplianceTrafficShaping"));

export { GetApplianceTrafficShapingRulesArgs, GetApplianceTrafficShapingRulesResult, GetApplianceTrafficShapingRulesOutputArgs } from "./getApplianceTrafficShapingRules";
export const getApplianceTrafficShapingRules: typeof import("./getApplianceTrafficShapingRules").getApplianceTrafficShapingRules = null as any;
export const getApplianceTrafficShapingRulesOutput: typeof import("./getApplianceTrafficShapingRules").getApplianceTrafficShapingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceTrafficShapingRules","getApplianceTrafficShapingRulesOutput"], () => require("./getApplianceTrafficShapingRules"));

export { GetApplianceTrafficShapingUplinkBandwidthArgs, GetApplianceTrafficShapingUplinkBandwidthResult, GetApplianceTrafficShapingUplinkBandwidthOutputArgs } from "./getApplianceTrafficShapingUplinkBandwidth";
export const getApplianceTrafficShapingUplinkBandwidth: typeof import("./getApplianceTrafficShapingUplinkBandwidth").getApplianceTrafficShapingUplinkBandwidth = null as any;
export const getApplianceTrafficShapingUplinkBandwidthOutput: typeof import("./getApplianceTrafficShapingUplinkBandwidth").getApplianceTrafficShapingUplinkBandwidthOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceTrafficShapingUplinkBandwidth","getApplianceTrafficShapingUplinkBandwidthOutput"], () => require("./getApplianceTrafficShapingUplinkBandwidth"));

export { GetApplianceTrafficShapingUplinkSelectionArgs, GetApplianceTrafficShapingUplinkSelectionResult, GetApplianceTrafficShapingUplinkSelectionOutputArgs } from "./getApplianceTrafficShapingUplinkSelection";
export const getApplianceTrafficShapingUplinkSelection: typeof import("./getApplianceTrafficShapingUplinkSelection").getApplianceTrafficShapingUplinkSelection = null as any;
export const getApplianceTrafficShapingUplinkSelectionOutput: typeof import("./getApplianceTrafficShapingUplinkSelection").getApplianceTrafficShapingUplinkSelectionOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceTrafficShapingUplinkSelection","getApplianceTrafficShapingUplinkSelectionOutput"], () => require("./getApplianceTrafficShapingUplinkSelection"));

export { GetApplianceVlansArgs, GetApplianceVlansResult, GetApplianceVlansOutputArgs } from "./getApplianceVlans";
export const getApplianceVlans: typeof import("./getApplianceVlans").getApplianceVlans = null as any;
export const getApplianceVlansOutput: typeof import("./getApplianceVlans").getApplianceVlansOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVlans","getApplianceVlansOutput"], () => require("./getApplianceVlans"));

export { GetApplianceVlansSettingsArgs, GetApplianceVlansSettingsResult, GetApplianceVlansSettingsOutputArgs } from "./getApplianceVlansSettings";
export const getApplianceVlansSettings: typeof import("./getApplianceVlansSettings").getApplianceVlansSettings = null as any;
export const getApplianceVlansSettingsOutput: typeof import("./getApplianceVlansSettings").getApplianceVlansSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVlansSettings","getApplianceVlansSettingsOutput"], () => require("./getApplianceVlansSettings"));

export { GetApplianceVpnBgpArgs, GetApplianceVpnBgpResult, GetApplianceVpnBgpOutputArgs } from "./getApplianceVpnBgp";
export const getApplianceVpnBgp: typeof import("./getApplianceVpnBgp").getApplianceVpnBgp = null as any;
export const getApplianceVpnBgpOutput: typeof import("./getApplianceVpnBgp").getApplianceVpnBgpOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVpnBgp","getApplianceVpnBgpOutput"], () => require("./getApplianceVpnBgp"));

export { GetApplianceVpnSiteToSiteVpnArgs, GetApplianceVpnSiteToSiteVpnResult, GetApplianceVpnSiteToSiteVpnOutputArgs } from "./getApplianceVpnSiteToSiteVpn";
export const getApplianceVpnSiteToSiteVpn: typeof import("./getApplianceVpnSiteToSiteVpn").getApplianceVpnSiteToSiteVpn = null as any;
export const getApplianceVpnSiteToSiteVpnOutput: typeof import("./getApplianceVpnSiteToSiteVpn").getApplianceVpnSiteToSiteVpnOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVpnSiteToSiteVpn","getApplianceVpnSiteToSiteVpnOutput"], () => require("./getApplianceVpnSiteToSiteVpn"));

export { GetApplianceWarmSpareArgs, GetApplianceWarmSpareResult, GetApplianceWarmSpareOutputArgs } from "./getApplianceWarmSpare";
export const getApplianceWarmSpare: typeof import("./getApplianceWarmSpare").getApplianceWarmSpare = null as any;
export const getApplianceWarmSpareOutput: typeof import("./getApplianceWarmSpare").getApplianceWarmSpareOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceWarmSpare","getApplianceWarmSpareOutput"], () => require("./getApplianceWarmSpare"));

export { GetBluetoothClientsArgs, GetBluetoothClientsResult, GetBluetoothClientsOutputArgs } from "./getBluetoothClients";
export const getBluetoothClients: typeof import("./getBluetoothClients").getBluetoothClients = null as any;
export const getBluetoothClientsOutput: typeof import("./getBluetoothClients").getBluetoothClientsOutput = null as any;
utilities.lazyLoad(exports, ["getBluetoothClients","getBluetoothClientsOutput"], () => require("./getBluetoothClients"));

export { GetCameraQualityRetentionProfilesArgs, GetCameraQualityRetentionProfilesResult, GetCameraQualityRetentionProfilesOutputArgs } from "./getCameraQualityRetentionProfiles";
export const getCameraQualityRetentionProfiles: typeof import("./getCameraQualityRetentionProfiles").getCameraQualityRetentionProfiles = null as any;
export const getCameraQualityRetentionProfilesOutput: typeof import("./getCameraQualityRetentionProfiles").getCameraQualityRetentionProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getCameraQualityRetentionProfiles","getCameraQualityRetentionProfilesOutput"], () => require("./getCameraQualityRetentionProfiles"));

export { GetCameraWirelessProfilesArgs, GetCameraWirelessProfilesResult, GetCameraWirelessProfilesOutputArgs } from "./getCameraWirelessProfiles";
export const getCameraWirelessProfiles: typeof import("./getCameraWirelessProfiles").getCameraWirelessProfiles = null as any;
export const getCameraWirelessProfilesOutput: typeof import("./getCameraWirelessProfiles").getCameraWirelessProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getCameraWirelessProfiles","getCameraWirelessProfilesOutput"], () => require("./getCameraWirelessProfiles"));

export { GetCellularGatewayConnectivityMonitoringDestinationsArgs, GetCellularGatewayConnectivityMonitoringDestinationsResult, GetCellularGatewayConnectivityMonitoringDestinationsOutputArgs } from "./getCellularGatewayConnectivityMonitoringDestinations";
export const getCellularGatewayConnectivityMonitoringDestinations: typeof import("./getCellularGatewayConnectivityMonitoringDestinations").getCellularGatewayConnectivityMonitoringDestinations = null as any;
export const getCellularGatewayConnectivityMonitoringDestinationsOutput: typeof import("./getCellularGatewayConnectivityMonitoringDestinations").getCellularGatewayConnectivityMonitoringDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayConnectivityMonitoringDestinations","getCellularGatewayConnectivityMonitoringDestinationsOutput"], () => require("./getCellularGatewayConnectivityMonitoringDestinations"));

export { GetCellularGatewayDhcpArgs, GetCellularGatewayDhcpResult, GetCellularGatewayDhcpOutputArgs } from "./getCellularGatewayDhcp";
export const getCellularGatewayDhcp: typeof import("./getCellularGatewayDhcp").getCellularGatewayDhcp = null as any;
export const getCellularGatewayDhcpOutput: typeof import("./getCellularGatewayDhcp").getCellularGatewayDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayDhcp","getCellularGatewayDhcpOutput"], () => require("./getCellularGatewayDhcp"));

export { GetCellularGatewaySubnetPoolArgs, GetCellularGatewaySubnetPoolResult, GetCellularGatewaySubnetPoolOutputArgs } from "./getCellularGatewaySubnetPool";
export const getCellularGatewaySubnetPool: typeof import("./getCellularGatewaySubnetPool").getCellularGatewaySubnetPool = null as any;
export const getCellularGatewaySubnetPoolOutput: typeof import("./getCellularGatewaySubnetPool").getCellularGatewaySubnetPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewaySubnetPool","getCellularGatewaySubnetPoolOutput"], () => require("./getCellularGatewaySubnetPool"));

export { GetCellularGatewayUplinkArgs, GetCellularGatewayUplinkResult, GetCellularGatewayUplinkOutputArgs } from "./getCellularGatewayUplink";
export const getCellularGatewayUplink: typeof import("./getCellularGatewayUplink").getCellularGatewayUplink = null as any;
export const getCellularGatewayUplinkOutput: typeof import("./getCellularGatewayUplink").getCellularGatewayUplinkOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayUplink","getCellularGatewayUplinkOutput"], () => require("./getCellularGatewayUplink"));

export { GetClientsArgs, GetClientsResult, GetClientsOutputArgs } from "./getClients";
export const getClients: typeof import("./getClients").getClients = null as any;
export const getClientsOutput: typeof import("./getClients").getClientsOutput = null as any;
utilities.lazyLoad(exports, ["getClients","getClientsOutput"], () => require("./getClients"));

export { GetClientsOverviewArgs, GetClientsOverviewResult, GetClientsOverviewOutputArgs } from "./getClientsOverview";
export const getClientsOverview: typeof import("./getClientsOverview").getClientsOverview = null as any;
export const getClientsOverviewOutput: typeof import("./getClientsOverview").getClientsOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getClientsOverview","getClientsOverviewOutput"], () => require("./getClientsOverview"));

export { GetClientsPolicyArgs, GetClientsPolicyResult, GetClientsPolicyOutputArgs } from "./getClientsPolicy";
export const getClientsPolicy: typeof import("./getClientsPolicy").getClientsPolicy = null as any;
export const getClientsPolicyOutput: typeof import("./getClientsPolicy").getClientsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getClientsPolicy","getClientsPolicyOutput"], () => require("./getClientsPolicy"));

export { GetClientsSplashAuthorizationStatusArgs, GetClientsSplashAuthorizationStatusResult, GetClientsSplashAuthorizationStatusOutputArgs } from "./getClientsSplashAuthorizationStatus";
export const getClientsSplashAuthorizationStatus: typeof import("./getClientsSplashAuthorizationStatus").getClientsSplashAuthorizationStatus = null as any;
export const getClientsSplashAuthorizationStatusOutput: typeof import("./getClientsSplashAuthorizationStatus").getClientsSplashAuthorizationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getClientsSplashAuthorizationStatus","getClientsSplashAuthorizationStatusOutput"], () => require("./getClientsSplashAuthorizationStatus"));

export { GetEventsArgs, GetEventsResult, GetEventsOutputArgs } from "./getEvents";
export const getEvents: typeof import("./getEvents").getEvents = null as any;
export const getEventsOutput: typeof import("./getEvents").getEventsOutput = null as any;
utilities.lazyLoad(exports, ["getEvents","getEventsOutput"], () => require("./getEvents"));

export { GetEventsEventTypesArgs, GetEventsEventTypesResult, GetEventsEventTypesOutputArgs } from "./getEventsEventTypes";
export const getEventsEventTypes: typeof import("./getEventsEventTypes").getEventsEventTypes = null as any;
export const getEventsEventTypesOutput: typeof import("./getEventsEventTypes").getEventsEventTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEventsEventTypes","getEventsEventTypesOutput"], () => require("./getEventsEventTypes"));

export { GetFirmwareUpgradesArgs, GetFirmwareUpgradesResult, GetFirmwareUpgradesOutputArgs } from "./getFirmwareUpgrades";
export const getFirmwareUpgrades: typeof import("./getFirmwareUpgrades").getFirmwareUpgrades = null as any;
export const getFirmwareUpgradesOutput: typeof import("./getFirmwareUpgrades").getFirmwareUpgradesOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgrades","getFirmwareUpgradesOutput"], () => require("./getFirmwareUpgrades"));

export { GetFirmwareUpgradesStagedEventsArgs, GetFirmwareUpgradesStagedEventsResult, GetFirmwareUpgradesStagedEventsOutputArgs } from "./getFirmwareUpgradesStagedEvents";
export const getFirmwareUpgradesStagedEvents: typeof import("./getFirmwareUpgradesStagedEvents").getFirmwareUpgradesStagedEvents = null as any;
export const getFirmwareUpgradesStagedEventsOutput: typeof import("./getFirmwareUpgradesStagedEvents").getFirmwareUpgradesStagedEventsOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradesStagedEvents","getFirmwareUpgradesStagedEventsOutput"], () => require("./getFirmwareUpgradesStagedEvents"));

export { GetFirmwareUpgradesStagedGroupsArgs, GetFirmwareUpgradesStagedGroupsResult, GetFirmwareUpgradesStagedGroupsOutputArgs } from "./getFirmwareUpgradesStagedGroups";
export const getFirmwareUpgradesStagedGroups: typeof import("./getFirmwareUpgradesStagedGroups").getFirmwareUpgradesStagedGroups = null as any;
export const getFirmwareUpgradesStagedGroupsOutput: typeof import("./getFirmwareUpgradesStagedGroups").getFirmwareUpgradesStagedGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradesStagedGroups","getFirmwareUpgradesStagedGroupsOutput"], () => require("./getFirmwareUpgradesStagedGroups"));

export { GetFirmwareUpgradesStagedStagesArgs, GetFirmwareUpgradesStagedStagesResult, GetFirmwareUpgradesStagedStagesOutputArgs } from "./getFirmwareUpgradesStagedStages";
export const getFirmwareUpgradesStagedStages: typeof import("./getFirmwareUpgradesStagedStages").getFirmwareUpgradesStagedStages = null as any;
export const getFirmwareUpgradesStagedStagesOutput: typeof import("./getFirmwareUpgradesStagedStages").getFirmwareUpgradesStagedStagesOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradesStagedStages","getFirmwareUpgradesStagedStagesOutput"], () => require("./getFirmwareUpgradesStagedStages"));

export { GetFloorPlansArgs, GetFloorPlansResult, GetFloorPlansOutputArgs } from "./getFloorPlans";
export const getFloorPlans: typeof import("./getFloorPlans").getFloorPlans = null as any;
export const getFloorPlansOutput: typeof import("./getFloorPlans").getFloorPlansOutput = null as any;
utilities.lazyLoad(exports, ["getFloorPlans","getFloorPlansOutput"], () => require("./getFloorPlans"));

export { GetGroupPoliciesArgs, GetGroupPoliciesResult, GetGroupPoliciesOutputArgs } from "./getGroupPolicies";
export const getGroupPolicies: typeof import("./getGroupPolicies").getGroupPolicies = null as any;
export const getGroupPoliciesOutput: typeof import("./getGroupPolicies").getGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getGroupPolicies","getGroupPoliciesOutput"], () => require("./getGroupPolicies"));

export { GetHealthAlertsArgs, GetHealthAlertsResult, GetHealthAlertsOutputArgs } from "./getHealthAlerts";
export const getHealthAlerts: typeof import("./getHealthAlerts").getHealthAlerts = null as any;
export const getHealthAlertsOutput: typeof import("./getHealthAlerts").getHealthAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getHealthAlerts","getHealthAlertsOutput"], () => require("./getHealthAlerts"));

export { GetInsightApplicationsHealthByTimeArgs, GetInsightApplicationsHealthByTimeResult, GetInsightApplicationsHealthByTimeOutputArgs } from "./getInsightApplicationsHealthByTime";
export const getInsightApplicationsHealthByTime: typeof import("./getInsightApplicationsHealthByTime").getInsightApplicationsHealthByTime = null as any;
export const getInsightApplicationsHealthByTimeOutput: typeof import("./getInsightApplicationsHealthByTime").getInsightApplicationsHealthByTimeOutput = null as any;
utilities.lazyLoad(exports, ["getInsightApplicationsHealthByTime","getInsightApplicationsHealthByTimeOutput"], () => require("./getInsightApplicationsHealthByTime"));

export { GetMerakiAuthUsersArgs, GetMerakiAuthUsersResult, GetMerakiAuthUsersOutputArgs } from "./getMerakiAuthUsers";
export const getMerakiAuthUsers: typeof import("./getMerakiAuthUsers").getMerakiAuthUsers = null as any;
export const getMerakiAuthUsersOutput: typeof import("./getMerakiAuthUsers").getMerakiAuthUsersOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiAuthUsers","getMerakiAuthUsersOutput"], () => require("./getMerakiAuthUsers"));

export { GetNetflowArgs, GetNetflowResult, GetNetflowOutputArgs } from "./getNetflow";
export const getNetflow: typeof import("./getNetflow").getNetflow = null as any;
export const getNetflowOutput: typeof import("./getNetflow").getNetflowOutput = null as any;
utilities.lazyLoad(exports, ["getNetflow","getNetflowOutput"], () => require("./getNetflow"));

export { GetPiiPiiKeysArgs, GetPiiPiiKeysResult, GetPiiPiiKeysOutputArgs } from "./getPiiPiiKeys";
export const getPiiPiiKeys: typeof import("./getPiiPiiKeys").getPiiPiiKeys = null as any;
export const getPiiPiiKeysOutput: typeof import("./getPiiPiiKeys").getPiiPiiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getPiiPiiKeys","getPiiPiiKeysOutput"], () => require("./getPiiPiiKeys"));

export { GetPiiRequestsArgs, GetPiiRequestsResult, GetPiiRequestsOutputArgs } from "./getPiiRequests";
export const getPiiRequests: typeof import("./getPiiRequests").getPiiRequests = null as any;
export const getPiiRequestsOutput: typeof import("./getPiiRequests").getPiiRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getPiiRequests","getPiiRequestsOutput"], () => require("./getPiiRequests"));

export { GetPiiSmDevicesForKeyArgs, GetPiiSmDevicesForKeyResult, GetPiiSmDevicesForKeyOutputArgs } from "./getPiiSmDevicesForKey";
export const getPiiSmDevicesForKey: typeof import("./getPiiSmDevicesForKey").getPiiSmDevicesForKey = null as any;
export const getPiiSmDevicesForKeyOutput: typeof import("./getPiiSmDevicesForKey").getPiiSmDevicesForKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPiiSmDevicesForKey","getPiiSmDevicesForKeyOutput"], () => require("./getPiiSmDevicesForKey"));

export { GetPiiSmOwnersForKeyArgs, GetPiiSmOwnersForKeyResult, GetPiiSmOwnersForKeyOutputArgs } from "./getPiiSmOwnersForKey";
export const getPiiSmOwnersForKey: typeof import("./getPiiSmOwnersForKey").getPiiSmOwnersForKey = null as any;
export const getPiiSmOwnersForKeyOutput: typeof import("./getPiiSmOwnersForKey").getPiiSmOwnersForKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPiiSmOwnersForKey","getPiiSmOwnersForKeyOutput"], () => require("./getPiiSmOwnersForKey"));

export { GetPoliciesByClientArgs, GetPoliciesByClientResult, GetPoliciesByClientOutputArgs } from "./getPoliciesByClient";
export const getPoliciesByClient: typeof import("./getPoliciesByClient").getPoliciesByClient = null as any;
export const getPoliciesByClientOutput: typeof import("./getPoliciesByClient").getPoliciesByClientOutput = null as any;
utilities.lazyLoad(exports, ["getPoliciesByClient","getPoliciesByClientOutput"], () => require("./getPoliciesByClient"));

export { GetSensorAlertsCurrentOverviewByMetricArgs, GetSensorAlertsCurrentOverviewByMetricResult, GetSensorAlertsCurrentOverviewByMetricOutputArgs } from "./getSensorAlertsCurrentOverviewByMetric";
export const getSensorAlertsCurrentOverviewByMetric: typeof import("./getSensorAlertsCurrentOverviewByMetric").getSensorAlertsCurrentOverviewByMetric = null as any;
export const getSensorAlertsCurrentOverviewByMetricOutput: typeof import("./getSensorAlertsCurrentOverviewByMetric").getSensorAlertsCurrentOverviewByMetricOutput = null as any;
utilities.lazyLoad(exports, ["getSensorAlertsCurrentOverviewByMetric","getSensorAlertsCurrentOverviewByMetricOutput"], () => require("./getSensorAlertsCurrentOverviewByMetric"));

export { GetSensorAlertsOverviewByMetricArgs, GetSensorAlertsOverviewByMetricResult, GetSensorAlertsOverviewByMetricOutputArgs } from "./getSensorAlertsOverviewByMetric";
export const getSensorAlertsOverviewByMetric: typeof import("./getSensorAlertsOverviewByMetric").getSensorAlertsOverviewByMetric = null as any;
export const getSensorAlertsOverviewByMetricOutput: typeof import("./getSensorAlertsOverviewByMetric").getSensorAlertsOverviewByMetricOutput = null as any;
utilities.lazyLoad(exports, ["getSensorAlertsOverviewByMetric","getSensorAlertsOverviewByMetricOutput"], () => require("./getSensorAlertsOverviewByMetric"));

export { GetSensorAlertsProfilesArgs, GetSensorAlertsProfilesResult, GetSensorAlertsProfilesOutputArgs } from "./getSensorAlertsProfiles";
export const getSensorAlertsProfiles: typeof import("./getSensorAlertsProfiles").getSensorAlertsProfiles = null as any;
export const getSensorAlertsProfilesOutput: typeof import("./getSensorAlertsProfiles").getSensorAlertsProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSensorAlertsProfiles","getSensorAlertsProfilesOutput"], () => require("./getSensorAlertsProfiles"));

export { GetSensorMqttBrokersArgs, GetSensorMqttBrokersResult, GetSensorMqttBrokersOutputArgs } from "./getSensorMqttBrokers";
export const getSensorMqttBrokers: typeof import("./getSensorMqttBrokers").getSensorMqttBrokers = null as any;
export const getSensorMqttBrokersOutput: typeof import("./getSensorMqttBrokers").getSensorMqttBrokersOutput = null as any;
utilities.lazyLoad(exports, ["getSensorMqttBrokers","getSensorMqttBrokersOutput"], () => require("./getSensorMqttBrokers"));

export { GetSensorRelationshipsArgs, GetSensorRelationshipsResult, GetSensorRelationshipsOutputArgs } from "./getSensorRelationships";
export const getSensorRelationships: typeof import("./getSensorRelationships").getSensorRelationships = null as any;
export const getSensorRelationshipsOutput: typeof import("./getSensorRelationships").getSensorRelationshipsOutput = null as any;
utilities.lazyLoad(exports, ["getSensorRelationships","getSensorRelationshipsOutput"], () => require("./getSensorRelationships"));

export { GetSettingsArgs, GetSettingsResult, GetSettingsOutputArgs } from "./getSettings";
export const getSettings: typeof import("./getSettings").getSettings = null as any;
export const getSettingsOutput: typeof import("./getSettings").getSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSettings","getSettingsOutput"], () => require("./getSettings"));

export { GetSmBypassActivationLockAttemptsArgs, GetSmBypassActivationLockAttemptsResult, GetSmBypassActivationLockAttemptsOutputArgs } from "./getSmBypassActivationLockAttempts";
export const getSmBypassActivationLockAttempts: typeof import("./getSmBypassActivationLockAttempts").getSmBypassActivationLockAttempts = null as any;
export const getSmBypassActivationLockAttemptsOutput: typeof import("./getSmBypassActivationLockAttempts").getSmBypassActivationLockAttemptsOutput = null as any;
utilities.lazyLoad(exports, ["getSmBypassActivationLockAttempts","getSmBypassActivationLockAttemptsOutput"], () => require("./getSmBypassActivationLockAttempts"));

export { GetSmDevicesArgs, GetSmDevicesResult, GetSmDevicesOutputArgs } from "./getSmDevices";
export const getSmDevices: typeof import("./getSmDevices").getSmDevices = null as any;
export const getSmDevicesOutput: typeof import("./getSmDevices").getSmDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevices","getSmDevicesOutput"], () => require("./getSmDevices"));

export { GetSmDevicesCellularUsageHistoryArgs, GetSmDevicesCellularUsageHistoryResult, GetSmDevicesCellularUsageHistoryOutputArgs } from "./getSmDevicesCellularUsageHistory";
export const getSmDevicesCellularUsageHistory: typeof import("./getSmDevicesCellularUsageHistory").getSmDevicesCellularUsageHistory = null as any;
export const getSmDevicesCellularUsageHistoryOutput: typeof import("./getSmDevicesCellularUsageHistory").getSmDevicesCellularUsageHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesCellularUsageHistory","getSmDevicesCellularUsageHistoryOutput"], () => require("./getSmDevicesCellularUsageHistory"));

export { GetSmDevicesCertsArgs, GetSmDevicesCertsResult, GetSmDevicesCertsOutputArgs } from "./getSmDevicesCerts";
export const getSmDevicesCerts: typeof import("./getSmDevicesCerts").getSmDevicesCerts = null as any;
export const getSmDevicesCertsOutput: typeof import("./getSmDevicesCerts").getSmDevicesCertsOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesCerts","getSmDevicesCertsOutput"], () => require("./getSmDevicesCerts"));

export { GetSmDevicesConnectivityArgs, GetSmDevicesConnectivityResult, GetSmDevicesConnectivityOutputArgs } from "./getSmDevicesConnectivity";
export const getSmDevicesConnectivity: typeof import("./getSmDevicesConnectivity").getSmDevicesConnectivity = null as any;
export const getSmDevicesConnectivityOutput: typeof import("./getSmDevicesConnectivity").getSmDevicesConnectivityOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesConnectivity","getSmDevicesConnectivityOutput"], () => require("./getSmDevicesConnectivity"));

export { GetSmDevicesDesktopLogsArgs, GetSmDevicesDesktopLogsResult, GetSmDevicesDesktopLogsOutputArgs } from "./getSmDevicesDesktopLogs";
export const getSmDevicesDesktopLogs: typeof import("./getSmDevicesDesktopLogs").getSmDevicesDesktopLogs = null as any;
export const getSmDevicesDesktopLogsOutput: typeof import("./getSmDevicesDesktopLogs").getSmDevicesDesktopLogsOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesDesktopLogs","getSmDevicesDesktopLogsOutput"], () => require("./getSmDevicesDesktopLogs"));

export { GetSmDevicesDeviceCommandLogsArgs, GetSmDevicesDeviceCommandLogsResult, GetSmDevicesDeviceCommandLogsOutputArgs } from "./getSmDevicesDeviceCommandLogs";
export const getSmDevicesDeviceCommandLogs: typeof import("./getSmDevicesDeviceCommandLogs").getSmDevicesDeviceCommandLogs = null as any;
export const getSmDevicesDeviceCommandLogsOutput: typeof import("./getSmDevicesDeviceCommandLogs").getSmDevicesDeviceCommandLogsOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesDeviceCommandLogs","getSmDevicesDeviceCommandLogsOutput"], () => require("./getSmDevicesDeviceCommandLogs"));

export { GetSmDevicesDeviceProfilesArgs, GetSmDevicesDeviceProfilesResult, GetSmDevicesDeviceProfilesOutputArgs } from "./getSmDevicesDeviceProfiles";
export const getSmDevicesDeviceProfiles: typeof import("./getSmDevicesDeviceProfiles").getSmDevicesDeviceProfiles = null as any;
export const getSmDevicesDeviceProfilesOutput: typeof import("./getSmDevicesDeviceProfiles").getSmDevicesDeviceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesDeviceProfiles","getSmDevicesDeviceProfilesOutput"], () => require("./getSmDevicesDeviceProfiles"));

export { GetSmDevicesNetworkAdaptersArgs, GetSmDevicesNetworkAdaptersResult, GetSmDevicesNetworkAdaptersOutputArgs } from "./getSmDevicesNetworkAdapters";
export const getSmDevicesNetworkAdapters: typeof import("./getSmDevicesNetworkAdapters").getSmDevicesNetworkAdapters = null as any;
export const getSmDevicesNetworkAdaptersOutput: typeof import("./getSmDevicesNetworkAdapters").getSmDevicesNetworkAdaptersOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesNetworkAdapters","getSmDevicesNetworkAdaptersOutput"], () => require("./getSmDevicesNetworkAdapters"));

export { GetSmDevicesPerformanceHistoryArgs, GetSmDevicesPerformanceHistoryResult, GetSmDevicesPerformanceHistoryOutputArgs } from "./getSmDevicesPerformanceHistory";
export const getSmDevicesPerformanceHistory: typeof import("./getSmDevicesPerformanceHistory").getSmDevicesPerformanceHistory = null as any;
export const getSmDevicesPerformanceHistoryOutput: typeof import("./getSmDevicesPerformanceHistory").getSmDevicesPerformanceHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesPerformanceHistory","getSmDevicesPerformanceHistoryOutput"], () => require("./getSmDevicesPerformanceHistory"));

export { GetSmDevicesSecurityCentersArgs, GetSmDevicesSecurityCentersResult, GetSmDevicesSecurityCentersOutputArgs } from "./getSmDevicesSecurityCenters";
export const getSmDevicesSecurityCenters: typeof import("./getSmDevicesSecurityCenters").getSmDevicesSecurityCenters = null as any;
export const getSmDevicesSecurityCentersOutput: typeof import("./getSmDevicesSecurityCenters").getSmDevicesSecurityCentersOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesSecurityCenters","getSmDevicesSecurityCentersOutput"], () => require("./getSmDevicesSecurityCenters"));

export { GetSmDevicesWlanListsArgs, GetSmDevicesWlanListsResult, GetSmDevicesWlanListsOutputArgs } from "./getSmDevicesWlanLists";
export const getSmDevicesWlanLists: typeof import("./getSmDevicesWlanLists").getSmDevicesWlanLists = null as any;
export const getSmDevicesWlanListsOutput: typeof import("./getSmDevicesWlanLists").getSmDevicesWlanListsOutput = null as any;
utilities.lazyLoad(exports, ["getSmDevicesWlanLists","getSmDevicesWlanListsOutput"], () => require("./getSmDevicesWlanLists"));

export { GetSmProfilesArgs, GetSmProfilesResult, GetSmProfilesOutputArgs } from "./getSmProfiles";
export const getSmProfiles: typeof import("./getSmProfiles").getSmProfiles = null as any;
export const getSmProfilesOutput: typeof import("./getSmProfiles").getSmProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSmProfiles","getSmProfilesOutput"], () => require("./getSmProfiles"));

export { GetSmTargetGroupsArgs, GetSmTargetGroupsResult, GetSmTargetGroupsOutputArgs } from "./getSmTargetGroups";
export const getSmTargetGroups: typeof import("./getSmTargetGroups").getSmTargetGroups = null as any;
export const getSmTargetGroupsOutput: typeof import("./getSmTargetGroups").getSmTargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSmTargetGroups","getSmTargetGroupsOutput"], () => require("./getSmTargetGroups"));

export { GetSmTrustedAccessConfigsArgs, GetSmTrustedAccessConfigsResult, GetSmTrustedAccessConfigsOutputArgs } from "./getSmTrustedAccessConfigs";
export const getSmTrustedAccessConfigs: typeof import("./getSmTrustedAccessConfigs").getSmTrustedAccessConfigs = null as any;
export const getSmTrustedAccessConfigsOutput: typeof import("./getSmTrustedAccessConfigs").getSmTrustedAccessConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getSmTrustedAccessConfigs","getSmTrustedAccessConfigsOutput"], () => require("./getSmTrustedAccessConfigs"));

export { GetSmUserAccessDevicesArgs, GetSmUserAccessDevicesResult, GetSmUserAccessDevicesOutputArgs } from "./getSmUserAccessDevices";
export const getSmUserAccessDevices: typeof import("./getSmUserAccessDevices").getSmUserAccessDevices = null as any;
export const getSmUserAccessDevicesOutput: typeof import("./getSmUserAccessDevices").getSmUserAccessDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getSmUserAccessDevices","getSmUserAccessDevicesOutput"], () => require("./getSmUserAccessDevices"));

export { GetSmUsersArgs, GetSmUsersResult, GetSmUsersOutputArgs } from "./getSmUsers";
export const getSmUsers: typeof import("./getSmUsers").getSmUsers = null as any;
export const getSmUsersOutput: typeof import("./getSmUsers").getSmUsersOutput = null as any;
utilities.lazyLoad(exports, ["getSmUsers","getSmUsersOutput"], () => require("./getSmUsers"));

export { GetSmUsersDeviceProfilesArgs, GetSmUsersDeviceProfilesResult, GetSmUsersDeviceProfilesOutputArgs } from "./getSmUsersDeviceProfiles";
export const getSmUsersDeviceProfiles: typeof import("./getSmUsersDeviceProfiles").getSmUsersDeviceProfiles = null as any;
export const getSmUsersDeviceProfilesOutput: typeof import("./getSmUsersDeviceProfiles").getSmUsersDeviceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getSmUsersDeviceProfiles","getSmUsersDeviceProfilesOutput"], () => require("./getSmUsersDeviceProfiles"));

export { GetSmUsersSoftwaresArgs, GetSmUsersSoftwaresResult, GetSmUsersSoftwaresOutputArgs } from "./getSmUsersSoftwares";
export const getSmUsersSoftwares: typeof import("./getSmUsersSoftwares").getSmUsersSoftwares = null as any;
export const getSmUsersSoftwaresOutput: typeof import("./getSmUsersSoftwares").getSmUsersSoftwaresOutput = null as any;
utilities.lazyLoad(exports, ["getSmUsersSoftwares","getSmUsersSoftwaresOutput"], () => require("./getSmUsersSoftwares"));

export { GetSnmpArgs, GetSnmpResult, GetSnmpOutputArgs } from "./getSnmp";
export const getSnmp: typeof import("./getSnmp").getSnmp = null as any;
export const getSnmpOutput: typeof import("./getSnmp").getSnmpOutput = null as any;
utilities.lazyLoad(exports, ["getSnmp","getSnmpOutput"], () => require("./getSnmp"));

export { GetSwitchAccessControlListsArgs, GetSwitchAccessControlListsResult, GetSwitchAccessControlListsOutputArgs } from "./getSwitchAccessControlLists";
export const getSwitchAccessControlLists: typeof import("./getSwitchAccessControlLists").getSwitchAccessControlLists = null as any;
export const getSwitchAccessControlListsOutput: typeof import("./getSwitchAccessControlLists").getSwitchAccessControlListsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchAccessControlLists","getSwitchAccessControlListsOutput"], () => require("./getSwitchAccessControlLists"));

export { GetSwitchAccessPoliciesArgs, GetSwitchAccessPoliciesResult, GetSwitchAccessPoliciesOutputArgs } from "./getSwitchAccessPolicies";
export const getSwitchAccessPolicies: typeof import("./getSwitchAccessPolicies").getSwitchAccessPolicies = null as any;
export const getSwitchAccessPoliciesOutput: typeof import("./getSwitchAccessPolicies").getSwitchAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchAccessPolicies","getSwitchAccessPoliciesOutput"], () => require("./getSwitchAccessPolicies"));

export { GetSwitchAlternateManagementInterfaceArgs, GetSwitchAlternateManagementInterfaceResult, GetSwitchAlternateManagementInterfaceOutputArgs } from "./getSwitchAlternateManagementInterface";
export const getSwitchAlternateManagementInterface: typeof import("./getSwitchAlternateManagementInterface").getSwitchAlternateManagementInterface = null as any;
export const getSwitchAlternateManagementInterfaceOutput: typeof import("./getSwitchAlternateManagementInterface").getSwitchAlternateManagementInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchAlternateManagementInterface","getSwitchAlternateManagementInterfaceOutput"], () => require("./getSwitchAlternateManagementInterface"));

export { GetSwitchDhcpServerPolicyArgs, GetSwitchDhcpServerPolicyResult, GetSwitchDhcpServerPolicyOutputArgs } from "./getSwitchDhcpServerPolicy";
export const getSwitchDhcpServerPolicy: typeof import("./getSwitchDhcpServerPolicy").getSwitchDhcpServerPolicy = null as any;
export const getSwitchDhcpServerPolicyOutput: typeof import("./getSwitchDhcpServerPolicy").getSwitchDhcpServerPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchDhcpServerPolicy","getSwitchDhcpServerPolicyOutput"], () => require("./getSwitchDhcpServerPolicy"));

export { GetSwitchDhcpServerPolicyArpInspectionTrustedServersArgs, GetSwitchDhcpServerPolicyArpInspectionTrustedServersResult, GetSwitchDhcpServerPolicyArpInspectionTrustedServersOutputArgs } from "./getSwitchDhcpServerPolicyArpInspectionTrustedServers";
export const getSwitchDhcpServerPolicyArpInspectionTrustedServers: typeof import("./getSwitchDhcpServerPolicyArpInspectionTrustedServers").getSwitchDhcpServerPolicyArpInspectionTrustedServers = null as any;
export const getSwitchDhcpServerPolicyArpInspectionTrustedServersOutput: typeof import("./getSwitchDhcpServerPolicyArpInspectionTrustedServers").getSwitchDhcpServerPolicyArpInspectionTrustedServersOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchDhcpServerPolicyArpInspectionTrustedServers","getSwitchDhcpServerPolicyArpInspectionTrustedServersOutput"], () => require("./getSwitchDhcpServerPolicyArpInspectionTrustedServers"));

export { GetSwitchDhcpServerPolicyArpInspectionWarningsByDeviceArgs, GetSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResult, GetSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOutputArgs } from "./getSwitchDhcpServerPolicyArpInspectionWarningsByDevice";
export const getSwitchDhcpServerPolicyArpInspectionWarningsByDevice: typeof import("./getSwitchDhcpServerPolicyArpInspectionWarningsByDevice").getSwitchDhcpServerPolicyArpInspectionWarningsByDevice = null as any;
export const getSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOutput: typeof import("./getSwitchDhcpServerPolicyArpInspectionWarningsByDevice").getSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchDhcpServerPolicyArpInspectionWarningsByDevice","getSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOutput"], () => require("./getSwitchDhcpServerPolicyArpInspectionWarningsByDevice"));

export { GetSwitchDhcpV4ServersSeenArgs, GetSwitchDhcpV4ServersSeenResult, GetSwitchDhcpV4ServersSeenOutputArgs } from "./getSwitchDhcpV4ServersSeen";
export const getSwitchDhcpV4ServersSeen: typeof import("./getSwitchDhcpV4ServersSeen").getSwitchDhcpV4ServersSeen = null as any;
export const getSwitchDhcpV4ServersSeenOutput: typeof import("./getSwitchDhcpV4ServersSeen").getSwitchDhcpV4ServersSeenOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchDhcpV4ServersSeen","getSwitchDhcpV4ServersSeenOutput"], () => require("./getSwitchDhcpV4ServersSeen"));

export { GetSwitchDscpToCosMappingsArgs, GetSwitchDscpToCosMappingsResult, GetSwitchDscpToCosMappingsOutputArgs } from "./getSwitchDscpToCosMappings";
export const getSwitchDscpToCosMappings: typeof import("./getSwitchDscpToCosMappings").getSwitchDscpToCosMappings = null as any;
export const getSwitchDscpToCosMappingsOutput: typeof import("./getSwitchDscpToCosMappings").getSwitchDscpToCosMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchDscpToCosMappings","getSwitchDscpToCosMappingsOutput"], () => require("./getSwitchDscpToCosMappings"));

export { GetSwitchLinkAggregationsArgs, GetSwitchLinkAggregationsResult, GetSwitchLinkAggregationsOutputArgs } from "./getSwitchLinkAggregations";
export const getSwitchLinkAggregations: typeof import("./getSwitchLinkAggregations").getSwitchLinkAggregations = null as any;
export const getSwitchLinkAggregationsOutput: typeof import("./getSwitchLinkAggregations").getSwitchLinkAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchLinkAggregations","getSwitchLinkAggregationsOutput"], () => require("./getSwitchLinkAggregations"));

export { GetSwitchMtuArgs, GetSwitchMtuResult, GetSwitchMtuOutputArgs } from "./getSwitchMtu";
export const getSwitchMtu: typeof import("./getSwitchMtu").getSwitchMtu = null as any;
export const getSwitchMtuOutput: typeof import("./getSwitchMtu").getSwitchMtuOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchMtu","getSwitchMtuOutput"], () => require("./getSwitchMtu"));

export { GetSwitchPortSchedulesArgs, GetSwitchPortSchedulesResult, GetSwitchPortSchedulesOutputArgs } from "./getSwitchPortSchedules";
export const getSwitchPortSchedules: typeof import("./getSwitchPortSchedules").getSwitchPortSchedules = null as any;
export const getSwitchPortSchedulesOutput: typeof import("./getSwitchPortSchedules").getSwitchPortSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchPortSchedules","getSwitchPortSchedulesOutput"], () => require("./getSwitchPortSchedules"));

export { GetSwitchQosRulesOrderArgs, GetSwitchQosRulesOrderResult, GetSwitchQosRulesOrderOutputArgs } from "./getSwitchQosRulesOrder";
export const getSwitchQosRulesOrder: typeof import("./getSwitchQosRulesOrder").getSwitchQosRulesOrder = null as any;
export const getSwitchQosRulesOrderOutput: typeof import("./getSwitchQosRulesOrder").getSwitchQosRulesOrderOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchQosRulesOrder","getSwitchQosRulesOrderOutput"], () => require("./getSwitchQosRulesOrder"));

export { GetSwitchRoutingMulticastArgs, GetSwitchRoutingMulticastResult, GetSwitchRoutingMulticastOutputArgs } from "./getSwitchRoutingMulticast";
export const getSwitchRoutingMulticast: typeof import("./getSwitchRoutingMulticast").getSwitchRoutingMulticast = null as any;
export const getSwitchRoutingMulticastOutput: typeof import("./getSwitchRoutingMulticast").getSwitchRoutingMulticastOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingMulticast","getSwitchRoutingMulticastOutput"], () => require("./getSwitchRoutingMulticast"));

export { GetSwitchRoutingMulticastRendezvousPointsArgs, GetSwitchRoutingMulticastRendezvousPointsResult, GetSwitchRoutingMulticastRendezvousPointsOutputArgs } from "./getSwitchRoutingMulticastRendezvousPoints";
export const getSwitchRoutingMulticastRendezvousPoints: typeof import("./getSwitchRoutingMulticastRendezvousPoints").getSwitchRoutingMulticastRendezvousPoints = null as any;
export const getSwitchRoutingMulticastRendezvousPointsOutput: typeof import("./getSwitchRoutingMulticastRendezvousPoints").getSwitchRoutingMulticastRendezvousPointsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingMulticastRendezvousPoints","getSwitchRoutingMulticastRendezvousPointsOutput"], () => require("./getSwitchRoutingMulticastRendezvousPoints"));

export { GetSwitchRoutingOspfArgs, GetSwitchRoutingOspfResult, GetSwitchRoutingOspfOutputArgs } from "./getSwitchRoutingOspf";
export const getSwitchRoutingOspf: typeof import("./getSwitchRoutingOspf").getSwitchRoutingOspf = null as any;
export const getSwitchRoutingOspfOutput: typeof import("./getSwitchRoutingOspf").getSwitchRoutingOspfOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingOspf","getSwitchRoutingOspfOutput"], () => require("./getSwitchRoutingOspf"));

export { GetSwitchSettingsArgs, GetSwitchSettingsResult, GetSwitchSettingsOutputArgs } from "./getSwitchSettings";
export const getSwitchSettings: typeof import("./getSwitchSettings").getSwitchSettings = null as any;
export const getSwitchSettingsOutput: typeof import("./getSwitchSettings").getSwitchSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchSettings","getSwitchSettingsOutput"], () => require("./getSwitchSettings"));

export { GetSwitchStacksArgs, GetSwitchStacksResult, GetSwitchStacksOutputArgs } from "./getSwitchStacks";
export const getSwitchStacks: typeof import("./getSwitchStacks").getSwitchStacks = null as any;
export const getSwitchStacksOutput: typeof import("./getSwitchStacks").getSwitchStacksOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStacks","getSwitchStacksOutput"], () => require("./getSwitchStacks"));

export { GetSwitchStacksRoutingInterfacesArgs, GetSwitchStacksRoutingInterfacesResult, GetSwitchStacksRoutingInterfacesOutputArgs } from "./getSwitchStacksRoutingInterfaces";
export const getSwitchStacksRoutingInterfaces: typeof import("./getSwitchStacksRoutingInterfaces").getSwitchStacksRoutingInterfaces = null as any;
export const getSwitchStacksRoutingInterfacesOutput: typeof import("./getSwitchStacksRoutingInterfaces").getSwitchStacksRoutingInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStacksRoutingInterfaces","getSwitchStacksRoutingInterfacesOutput"], () => require("./getSwitchStacksRoutingInterfaces"));

export { GetSwitchStacksRoutingInterfacesDhcpArgs, GetSwitchStacksRoutingInterfacesDhcpResult, GetSwitchStacksRoutingInterfacesDhcpOutputArgs } from "./getSwitchStacksRoutingInterfacesDhcp";
export const getSwitchStacksRoutingInterfacesDhcp: typeof import("./getSwitchStacksRoutingInterfacesDhcp").getSwitchStacksRoutingInterfacesDhcp = null as any;
export const getSwitchStacksRoutingInterfacesDhcpOutput: typeof import("./getSwitchStacksRoutingInterfacesDhcp").getSwitchStacksRoutingInterfacesDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStacksRoutingInterfacesDhcp","getSwitchStacksRoutingInterfacesDhcpOutput"], () => require("./getSwitchStacksRoutingInterfacesDhcp"));

export { GetSwitchStacksRoutingStaticRoutesArgs, GetSwitchStacksRoutingStaticRoutesResult, GetSwitchStacksRoutingStaticRoutesOutputArgs } from "./getSwitchStacksRoutingStaticRoutes";
export const getSwitchStacksRoutingStaticRoutes: typeof import("./getSwitchStacksRoutingStaticRoutes").getSwitchStacksRoutingStaticRoutes = null as any;
export const getSwitchStacksRoutingStaticRoutesOutput: typeof import("./getSwitchStacksRoutingStaticRoutes").getSwitchStacksRoutingStaticRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStacksRoutingStaticRoutes","getSwitchStacksRoutingStaticRoutesOutput"], () => require("./getSwitchStacksRoutingStaticRoutes"));

export { GetSwitchStormControlArgs, GetSwitchStormControlResult, GetSwitchStormControlOutputArgs } from "./getSwitchStormControl";
export const getSwitchStormControl: typeof import("./getSwitchStormControl").getSwitchStormControl = null as any;
export const getSwitchStormControlOutput: typeof import("./getSwitchStormControl").getSwitchStormControlOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStormControl","getSwitchStormControlOutput"], () => require("./getSwitchStormControl"));

export { GetSwitchStpArgs, GetSwitchStpResult, GetSwitchStpOutputArgs } from "./getSwitchStp";
export const getSwitchStp: typeof import("./getSwitchStp").getSwitchStp = null as any;
export const getSwitchStpOutput: typeof import("./getSwitchStp").getSwitchStpOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchStp","getSwitchStpOutput"], () => require("./getSwitchStp"));

export { GetSyslogServersArgs, GetSyslogServersResult, GetSyslogServersOutputArgs } from "./getSyslogServers";
export const getSyslogServers: typeof import("./getSyslogServers").getSyslogServers = null as any;
export const getSyslogServersOutput: typeof import("./getSyslogServers").getSyslogServersOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogServers","getSyslogServersOutput"], () => require("./getSyslogServers"));

export { GetTopologyLinkLayerArgs, GetTopologyLinkLayerResult, GetTopologyLinkLayerOutputArgs } from "./getTopologyLinkLayer";
export const getTopologyLinkLayer: typeof import("./getTopologyLinkLayer").getTopologyLinkLayer = null as any;
export const getTopologyLinkLayerOutput: typeof import("./getTopologyLinkLayer").getTopologyLinkLayerOutput = null as any;
utilities.lazyLoad(exports, ["getTopologyLinkLayer","getTopologyLinkLayerOutput"], () => require("./getTopologyLinkLayer"));

export { GetTrafficAnalysisArgs, GetTrafficAnalysisResult, GetTrafficAnalysisOutputArgs } from "./getTrafficAnalysis";
export const getTrafficAnalysis: typeof import("./getTrafficAnalysis").getTrafficAnalysis = null as any;
export const getTrafficAnalysisOutput: typeof import("./getTrafficAnalysis").getTrafficAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficAnalysis","getTrafficAnalysisOutput"], () => require("./getTrafficAnalysis"));

export { GetTrafficShapingApplicationCategoriesArgs, GetTrafficShapingApplicationCategoriesResult, GetTrafficShapingApplicationCategoriesOutputArgs } from "./getTrafficShapingApplicationCategories";
export const getTrafficShapingApplicationCategories: typeof import("./getTrafficShapingApplicationCategories").getTrafficShapingApplicationCategories = null as any;
export const getTrafficShapingApplicationCategoriesOutput: typeof import("./getTrafficShapingApplicationCategories").getTrafficShapingApplicationCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficShapingApplicationCategories","getTrafficShapingApplicationCategoriesOutput"], () => require("./getTrafficShapingApplicationCategories"));

export { GetTrafficShapingDscpTaggingOptionsArgs, GetTrafficShapingDscpTaggingOptionsResult, GetTrafficShapingDscpTaggingOptionsOutputArgs } from "./getTrafficShapingDscpTaggingOptions";
export const getTrafficShapingDscpTaggingOptions: typeof import("./getTrafficShapingDscpTaggingOptions").getTrafficShapingDscpTaggingOptions = null as any;
export const getTrafficShapingDscpTaggingOptionsOutput: typeof import("./getTrafficShapingDscpTaggingOptions").getTrafficShapingDscpTaggingOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficShapingDscpTaggingOptions","getTrafficShapingDscpTaggingOptionsOutput"], () => require("./getTrafficShapingDscpTaggingOptions"));

export { GetVlanProfilesArgs, GetVlanProfilesResult, GetVlanProfilesOutputArgs } from "./getVlanProfiles";
export const getVlanProfiles: typeof import("./getVlanProfiles").getVlanProfiles = null as any;
export const getVlanProfilesOutput: typeof import("./getVlanProfiles").getVlanProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getVlanProfiles","getVlanProfilesOutput"], () => require("./getVlanProfiles"));

export { GetVlanProfilesAssignmentsByDeviceArgs, GetVlanProfilesAssignmentsByDeviceResult, GetVlanProfilesAssignmentsByDeviceOutputArgs } from "./getVlanProfilesAssignmentsByDevice";
export const getVlanProfilesAssignmentsByDevice: typeof import("./getVlanProfilesAssignmentsByDevice").getVlanProfilesAssignmentsByDevice = null as any;
export const getVlanProfilesAssignmentsByDeviceOutput: typeof import("./getVlanProfilesAssignmentsByDevice").getVlanProfilesAssignmentsByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getVlanProfilesAssignmentsByDevice","getVlanProfilesAssignmentsByDeviceOutput"], () => require("./getVlanProfilesAssignmentsByDevice"));

export { GetWebhooksHttpServersArgs, GetWebhooksHttpServersResult, GetWebhooksHttpServersOutputArgs } from "./getWebhooksHttpServers";
export const getWebhooksHttpServers: typeof import("./getWebhooksHttpServers").getWebhooksHttpServers = null as any;
export const getWebhooksHttpServersOutput: typeof import("./getWebhooksHttpServers").getWebhooksHttpServersOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooksHttpServers","getWebhooksHttpServersOutput"], () => require("./getWebhooksHttpServers"));

export { GetWebhooksPayloadTemplatesArgs, GetWebhooksPayloadTemplatesResult, GetWebhooksPayloadTemplatesOutputArgs } from "./getWebhooksPayloadTemplates";
export const getWebhooksPayloadTemplates: typeof import("./getWebhooksPayloadTemplates").getWebhooksPayloadTemplates = null as any;
export const getWebhooksPayloadTemplatesOutput: typeof import("./getWebhooksPayloadTemplates").getWebhooksPayloadTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooksPayloadTemplates","getWebhooksPayloadTemplatesOutput"], () => require("./getWebhooksPayloadTemplates"));

export { GetWebhooksWebhookTestsArgs, GetWebhooksWebhookTestsResult, GetWebhooksWebhookTestsOutputArgs } from "./getWebhooksWebhookTests";
export const getWebhooksWebhookTests: typeof import("./getWebhooksWebhookTests").getWebhooksWebhookTests = null as any;
export const getWebhooksWebhookTestsOutput: typeof import("./getWebhooksWebhookTests").getWebhooksWebhookTestsOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooksWebhookTests","getWebhooksWebhookTestsOutput"], () => require("./getWebhooksWebhookTests"));

export { GetWirelessAlternateManagementInterfaceArgs, GetWirelessAlternateManagementInterfaceResult, GetWirelessAlternateManagementInterfaceOutputArgs } from "./getWirelessAlternateManagementInterface";
export const getWirelessAlternateManagementInterface: typeof import("./getWirelessAlternateManagementInterface").getWirelessAlternateManagementInterface = null as any;
export const getWirelessAlternateManagementInterfaceOutput: typeof import("./getWirelessAlternateManagementInterface").getWirelessAlternateManagementInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessAlternateManagementInterface","getWirelessAlternateManagementInterfaceOutput"], () => require("./getWirelessAlternateManagementInterface"));

export { GetWirelessBillingArgs, GetWirelessBillingResult, GetWirelessBillingOutputArgs } from "./getWirelessBilling";
export const getWirelessBilling: typeof import("./getWirelessBilling").getWirelessBilling = null as any;
export const getWirelessBillingOutput: typeof import("./getWirelessBilling").getWirelessBillingOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessBilling","getWirelessBillingOutput"], () => require("./getWirelessBilling"));

export { GetWirelessBluetoothSettingsArgs, GetWirelessBluetoothSettingsResult, GetWirelessBluetoothSettingsOutputArgs } from "./getWirelessBluetoothSettings";
export const getWirelessBluetoothSettings: typeof import("./getWirelessBluetoothSettings").getWirelessBluetoothSettings = null as any;
export const getWirelessBluetoothSettingsOutput: typeof import("./getWirelessBluetoothSettings").getWirelessBluetoothSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessBluetoothSettings","getWirelessBluetoothSettingsOutput"], () => require("./getWirelessBluetoothSettings"));

export { GetWirelessChannelUtilizationHistoryArgs, GetWirelessChannelUtilizationHistoryResult, GetWirelessChannelUtilizationHistoryOutputArgs } from "./getWirelessChannelUtilizationHistory";
export const getWirelessChannelUtilizationHistory: typeof import("./getWirelessChannelUtilizationHistory").getWirelessChannelUtilizationHistory = null as any;
export const getWirelessChannelUtilizationHistoryOutput: typeof import("./getWirelessChannelUtilizationHistory").getWirelessChannelUtilizationHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessChannelUtilizationHistory","getWirelessChannelUtilizationHistoryOutput"], () => require("./getWirelessChannelUtilizationHistory"));

export { GetWirelessClientCountHistoryArgs, GetWirelessClientCountHistoryResult, GetWirelessClientCountHistoryOutputArgs } from "./getWirelessClientCountHistory";
export const getWirelessClientCountHistory: typeof import("./getWirelessClientCountHistory").getWirelessClientCountHistory = null as any;
export const getWirelessClientCountHistoryOutput: typeof import("./getWirelessClientCountHistory").getWirelessClientCountHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessClientCountHistory","getWirelessClientCountHistoryOutput"], () => require("./getWirelessClientCountHistory"));

export { GetWirelessClientsConnectionStatsArgs, GetWirelessClientsConnectionStatsResult, GetWirelessClientsConnectionStatsOutputArgs } from "./getWirelessClientsConnectionStats";
export const getWirelessClientsConnectionStats: typeof import("./getWirelessClientsConnectionStats").getWirelessClientsConnectionStats = null as any;
export const getWirelessClientsConnectionStatsOutput: typeof import("./getWirelessClientsConnectionStats").getWirelessClientsConnectionStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessClientsConnectionStats","getWirelessClientsConnectionStatsOutput"], () => require("./getWirelessClientsConnectionStats"));

export { GetWirelessClientsLatencyStatsArgs, GetWirelessClientsLatencyStatsResult, GetWirelessClientsLatencyStatsOutputArgs } from "./getWirelessClientsLatencyStats";
export const getWirelessClientsLatencyStats: typeof import("./getWirelessClientsLatencyStats").getWirelessClientsLatencyStats = null as any;
export const getWirelessClientsLatencyStatsOutput: typeof import("./getWirelessClientsLatencyStats").getWirelessClientsLatencyStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessClientsLatencyStats","getWirelessClientsLatencyStatsOutput"], () => require("./getWirelessClientsLatencyStats"));

export { GetWirelessConnectionStatsArgs, GetWirelessConnectionStatsResult, GetWirelessConnectionStatsOutputArgs } from "./getWirelessConnectionStats";
export const getWirelessConnectionStats: typeof import("./getWirelessConnectionStats").getWirelessConnectionStats = null as any;
export const getWirelessConnectionStatsOutput: typeof import("./getWirelessConnectionStats").getWirelessConnectionStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessConnectionStats","getWirelessConnectionStatsOutput"], () => require("./getWirelessConnectionStats"));

export { GetWirelessDataRateHistoryArgs, GetWirelessDataRateHistoryResult, GetWirelessDataRateHistoryOutputArgs } from "./getWirelessDataRateHistory";
export const getWirelessDataRateHistory: typeof import("./getWirelessDataRateHistory").getWirelessDataRateHistory = null as any;
export const getWirelessDataRateHistoryOutput: typeof import("./getWirelessDataRateHistory").getWirelessDataRateHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDataRateHistory","getWirelessDataRateHistoryOutput"], () => require("./getWirelessDataRateHistory"));

export { GetWirelessDevicesConnectionStatsArgs, GetWirelessDevicesConnectionStatsResult, GetWirelessDevicesConnectionStatsOutputArgs } from "./getWirelessDevicesConnectionStats";
export const getWirelessDevicesConnectionStats: typeof import("./getWirelessDevicesConnectionStats").getWirelessDevicesConnectionStats = null as any;
export const getWirelessDevicesConnectionStatsOutput: typeof import("./getWirelessDevicesConnectionStats").getWirelessDevicesConnectionStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesConnectionStats","getWirelessDevicesConnectionStatsOutput"], () => require("./getWirelessDevicesConnectionStats"));

export { GetWirelessEthernetPortsProfilesArgs, GetWirelessEthernetPortsProfilesResult, GetWirelessEthernetPortsProfilesOutputArgs } from "./getWirelessEthernetPortsProfiles";
export const getWirelessEthernetPortsProfiles: typeof import("./getWirelessEthernetPortsProfiles").getWirelessEthernetPortsProfiles = null as any;
export const getWirelessEthernetPortsProfilesOutput: typeof import("./getWirelessEthernetPortsProfiles").getWirelessEthernetPortsProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessEthernetPortsProfiles","getWirelessEthernetPortsProfilesOutput"], () => require("./getWirelessEthernetPortsProfiles"));

export { GetWirelessFailedConnectionsArgs, GetWirelessFailedConnectionsResult, GetWirelessFailedConnectionsOutputArgs } from "./getWirelessFailedConnections";
export const getWirelessFailedConnections: typeof import("./getWirelessFailedConnections").getWirelessFailedConnections = null as any;
export const getWirelessFailedConnectionsOutput: typeof import("./getWirelessFailedConnections").getWirelessFailedConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessFailedConnections","getWirelessFailedConnectionsOutput"], () => require("./getWirelessFailedConnections"));

export { GetWirelessLatencyHistoryArgs, GetWirelessLatencyHistoryResult, GetWirelessLatencyHistoryOutputArgs } from "./getWirelessLatencyHistory";
export const getWirelessLatencyHistory: typeof import("./getWirelessLatencyHistory").getWirelessLatencyHistory = null as any;
export const getWirelessLatencyHistoryOutput: typeof import("./getWirelessLatencyHistory").getWirelessLatencyHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessLatencyHistory","getWirelessLatencyHistoryOutput"], () => require("./getWirelessLatencyHistory"));

export { GetWirelessLatencyStatsArgs, GetWirelessLatencyStatsResult, GetWirelessLatencyStatsOutputArgs } from "./getWirelessLatencyStats";
export const getWirelessLatencyStats: typeof import("./getWirelessLatencyStats").getWirelessLatencyStats = null as any;
export const getWirelessLatencyStatsOutput: typeof import("./getWirelessLatencyStats").getWirelessLatencyStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessLatencyStats","getWirelessLatencyStatsOutput"], () => require("./getWirelessLatencyStats"));

export { GetWirelessMeshStatusesArgs, GetWirelessMeshStatusesResult, GetWirelessMeshStatusesOutputArgs } from "./getWirelessMeshStatuses";
export const getWirelessMeshStatuses: typeof import("./getWirelessMeshStatuses").getWirelessMeshStatuses = null as any;
export const getWirelessMeshStatusesOutput: typeof import("./getWirelessMeshStatuses").getWirelessMeshStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessMeshStatuses","getWirelessMeshStatusesOutput"], () => require("./getWirelessMeshStatuses"));

export { GetWirelessRfProfilesArgs, GetWirelessRfProfilesResult, GetWirelessRfProfilesOutputArgs } from "./getWirelessRfProfiles";
export const getWirelessRfProfiles: typeof import("./getWirelessRfProfiles").getWirelessRfProfiles = null as any;
export const getWirelessRfProfilesOutput: typeof import("./getWirelessRfProfiles").getWirelessRfProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessRfProfiles","getWirelessRfProfilesOutput"], () => require("./getWirelessRfProfiles"));

export { GetWirelessSettingsArgs, GetWirelessSettingsResult, GetWirelessSettingsOutputArgs } from "./getWirelessSettings";
export const getWirelessSettings: typeof import("./getWirelessSettings").getWirelessSettings = null as any;
export const getWirelessSettingsOutput: typeof import("./getWirelessSettings").getWirelessSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSettings","getWirelessSettingsOutput"], () => require("./getWirelessSettings"));

export { GetWirelessSignalQualityHistoryArgs, GetWirelessSignalQualityHistoryResult, GetWirelessSignalQualityHistoryOutputArgs } from "./getWirelessSignalQualityHistory";
export const getWirelessSignalQualityHistory: typeof import("./getWirelessSignalQualityHistory").getWirelessSignalQualityHistory = null as any;
export const getWirelessSignalQualityHistoryOutput: typeof import("./getWirelessSignalQualityHistory").getWirelessSignalQualityHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSignalQualityHistory","getWirelessSignalQualityHistoryOutput"], () => require("./getWirelessSignalQualityHistory"));

export { GetWirelessSsidsArgs, GetWirelessSsidsResult, GetWirelessSsidsOutputArgs } from "./getWirelessSsids";
export const getWirelessSsids: typeof import("./getWirelessSsids").getWirelessSsids = null as any;
export const getWirelessSsidsOutput: typeof import("./getWirelessSsids").getWirelessSsidsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsids","getWirelessSsidsOutput"], () => require("./getWirelessSsids"));

export { GetWirelessSsidsBonjourForwardingArgs, GetWirelessSsidsBonjourForwardingResult, GetWirelessSsidsBonjourForwardingOutputArgs } from "./getWirelessSsidsBonjourForwarding";
export const getWirelessSsidsBonjourForwarding: typeof import("./getWirelessSsidsBonjourForwarding").getWirelessSsidsBonjourForwarding = null as any;
export const getWirelessSsidsBonjourForwardingOutput: typeof import("./getWirelessSsidsBonjourForwarding").getWirelessSsidsBonjourForwardingOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsBonjourForwarding","getWirelessSsidsBonjourForwardingOutput"], () => require("./getWirelessSsidsBonjourForwarding"));

export { GetWirelessSsidsDeviceTypeGroupPoliciesArgs, GetWirelessSsidsDeviceTypeGroupPoliciesResult, GetWirelessSsidsDeviceTypeGroupPoliciesOutputArgs } from "./getWirelessSsidsDeviceTypeGroupPolicies";
export const getWirelessSsidsDeviceTypeGroupPolicies: typeof import("./getWirelessSsidsDeviceTypeGroupPolicies").getWirelessSsidsDeviceTypeGroupPolicies = null as any;
export const getWirelessSsidsDeviceTypeGroupPoliciesOutput: typeof import("./getWirelessSsidsDeviceTypeGroupPolicies").getWirelessSsidsDeviceTypeGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsDeviceTypeGroupPolicies","getWirelessSsidsDeviceTypeGroupPoliciesOutput"], () => require("./getWirelessSsidsDeviceTypeGroupPolicies"));

export { GetWirelessSsidsEapOverrideArgs, GetWirelessSsidsEapOverrideResult, GetWirelessSsidsEapOverrideOutputArgs } from "./getWirelessSsidsEapOverride";
export const getWirelessSsidsEapOverride: typeof import("./getWirelessSsidsEapOverride").getWirelessSsidsEapOverride = null as any;
export const getWirelessSsidsEapOverrideOutput: typeof import("./getWirelessSsidsEapOverride").getWirelessSsidsEapOverrideOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsEapOverride","getWirelessSsidsEapOverrideOutput"], () => require("./getWirelessSsidsEapOverride"));

export { GetWirelessSsidsFirewallL3FirewallRulesArgs, GetWirelessSsidsFirewallL3FirewallRulesResult, GetWirelessSsidsFirewallL3FirewallRulesOutputArgs } from "./getWirelessSsidsFirewallL3FirewallRules";
export const getWirelessSsidsFirewallL3FirewallRules: typeof import("./getWirelessSsidsFirewallL3FirewallRules").getWirelessSsidsFirewallL3FirewallRules = null as any;
export const getWirelessSsidsFirewallL3FirewallRulesOutput: typeof import("./getWirelessSsidsFirewallL3FirewallRules").getWirelessSsidsFirewallL3FirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsFirewallL3FirewallRules","getWirelessSsidsFirewallL3FirewallRulesOutput"], () => require("./getWirelessSsidsFirewallL3FirewallRules"));

export { GetWirelessSsidsFirewallL7FirewallRulesArgs, GetWirelessSsidsFirewallL7FirewallRulesResult, GetWirelessSsidsFirewallL7FirewallRulesOutputArgs } from "./getWirelessSsidsFirewallL7FirewallRules";
export const getWirelessSsidsFirewallL7FirewallRules: typeof import("./getWirelessSsidsFirewallL7FirewallRules").getWirelessSsidsFirewallL7FirewallRules = null as any;
export const getWirelessSsidsFirewallL7FirewallRulesOutput: typeof import("./getWirelessSsidsFirewallL7FirewallRules").getWirelessSsidsFirewallL7FirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsFirewallL7FirewallRules","getWirelessSsidsFirewallL7FirewallRulesOutput"], () => require("./getWirelessSsidsFirewallL7FirewallRules"));

export { GetWirelessSsidsHotspot20Args, GetWirelessSsidsHotspot20Result, GetWirelessSsidsHotspot20OutputArgs } from "./getWirelessSsidsHotspot20";
export const getWirelessSsidsHotspot20: typeof import("./getWirelessSsidsHotspot20").getWirelessSsidsHotspot20 = null as any;
export const getWirelessSsidsHotspot20Output: typeof import("./getWirelessSsidsHotspot20").getWirelessSsidsHotspot20Output = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsHotspot20","getWirelessSsidsHotspot20Output"], () => require("./getWirelessSsidsHotspot20"));

export { GetWirelessSsidsIdentityPsksArgs, GetWirelessSsidsIdentityPsksResult, GetWirelessSsidsIdentityPsksOutputArgs } from "./getWirelessSsidsIdentityPsks";
export const getWirelessSsidsIdentityPsks: typeof import("./getWirelessSsidsIdentityPsks").getWirelessSsidsIdentityPsks = null as any;
export const getWirelessSsidsIdentityPsksOutput: typeof import("./getWirelessSsidsIdentityPsks").getWirelessSsidsIdentityPsksOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsIdentityPsks","getWirelessSsidsIdentityPsksOutput"], () => require("./getWirelessSsidsIdentityPsks"));

export { GetWirelessSsidsSchedulesArgs, GetWirelessSsidsSchedulesResult, GetWirelessSsidsSchedulesOutputArgs } from "./getWirelessSsidsSchedules";
export const getWirelessSsidsSchedules: typeof import("./getWirelessSsidsSchedules").getWirelessSsidsSchedules = null as any;
export const getWirelessSsidsSchedulesOutput: typeof import("./getWirelessSsidsSchedules").getWirelessSsidsSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsSchedules","getWirelessSsidsSchedulesOutput"], () => require("./getWirelessSsidsSchedules"));

export { GetWirelessSsidsSplashSettingsArgs, GetWirelessSsidsSplashSettingsResult, GetWirelessSsidsSplashSettingsOutputArgs } from "./getWirelessSsidsSplashSettings";
export const getWirelessSsidsSplashSettings: typeof import("./getWirelessSsidsSplashSettings").getWirelessSsidsSplashSettings = null as any;
export const getWirelessSsidsSplashSettingsOutput: typeof import("./getWirelessSsidsSplashSettings").getWirelessSsidsSplashSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsSplashSettings","getWirelessSsidsSplashSettingsOutput"], () => require("./getWirelessSsidsSplashSettings"));

export { GetWirelessSsidsTrafficShapingRulesArgs, GetWirelessSsidsTrafficShapingRulesResult, GetWirelessSsidsTrafficShapingRulesOutputArgs } from "./getWirelessSsidsTrafficShapingRules";
export const getWirelessSsidsTrafficShapingRules: typeof import("./getWirelessSsidsTrafficShapingRules").getWirelessSsidsTrafficShapingRules = null as any;
export const getWirelessSsidsTrafficShapingRulesOutput: typeof import("./getWirelessSsidsTrafficShapingRules").getWirelessSsidsTrafficShapingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsTrafficShapingRules","getWirelessSsidsTrafficShapingRulesOutput"], () => require("./getWirelessSsidsTrafficShapingRules"));

export { GetWirelessSsidsVpnArgs, GetWirelessSsidsVpnResult, GetWirelessSsidsVpnOutputArgs } from "./getWirelessSsidsVpn";
export const getWirelessSsidsVpn: typeof import("./getWirelessSsidsVpn").getWirelessSsidsVpn = null as any;
export const getWirelessSsidsVpnOutput: typeof import("./getWirelessSsidsVpn").getWirelessSsidsVpnOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessSsidsVpn","getWirelessSsidsVpnOutput"], () => require("./getWirelessSsidsVpn"));

export { GetWirelessUsageHistoryArgs, GetWirelessUsageHistoryResult, GetWirelessUsageHistoryOutputArgs } from "./getWirelessUsageHistory";
export const getWirelessUsageHistory: typeof import("./getWirelessUsageHistory").getWirelessUsageHistory = null as any;
export const getWirelessUsageHistoryOutput: typeof import("./getWirelessUsageHistory").getWirelessUsageHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessUsageHistory","getWirelessUsageHistoryOutput"], () => require("./getWirelessUsageHistory"));

export { GroupPoliciesArgs, GroupPoliciesState } from "./groupPolicies";
export type GroupPolicies = import("./groupPolicies").GroupPolicies;
export const GroupPolicies: typeof import("./groupPolicies").GroupPolicies = null as any;
utilities.lazyLoad(exports, ["GroupPolicies"], () => require("./groupPolicies"));

export { MerakiAuthUsersArgs, MerakiAuthUsersState } from "./merakiAuthUsers";
export type MerakiAuthUsers = import("./merakiAuthUsers").MerakiAuthUsers;
export const MerakiAuthUsers: typeof import("./merakiAuthUsers").MerakiAuthUsers = null as any;
utilities.lazyLoad(exports, ["MerakiAuthUsers"], () => require("./merakiAuthUsers"));

export { MqttBrokersArgs, MqttBrokersState } from "./mqttBrokers";
export type MqttBrokers = import("./mqttBrokers").MqttBrokers;
export const MqttBrokers: typeof import("./mqttBrokers").MqttBrokers = null as any;
utilities.lazyLoad(exports, ["MqttBrokers"], () => require("./mqttBrokers"));

export { NetflowArgs, NetflowState } from "./netflow";
export type Netflow = import("./netflow").Netflow;
export const Netflow: typeof import("./netflow").Netflow = null as any;
utilities.lazyLoad(exports, ["Netflow"], () => require("./netflow"));

export { PiiRequestsDeleteArgs, PiiRequestsDeleteState } from "./piiRequestsDelete";
export type PiiRequestsDelete = import("./piiRequestsDelete").PiiRequestsDelete;
export const PiiRequestsDelete: typeof import("./piiRequestsDelete").PiiRequestsDelete = null as any;
utilities.lazyLoad(exports, ["PiiRequestsDelete"], () => require("./piiRequestsDelete"));

export { SensorAlertsProfilesArgs, SensorAlertsProfilesState } from "./sensorAlertsProfiles";
export type SensorAlertsProfiles = import("./sensorAlertsProfiles").SensorAlertsProfiles;
export const SensorAlertsProfiles: typeof import("./sensorAlertsProfiles").SensorAlertsProfiles = null as any;
utilities.lazyLoad(exports, ["SensorAlertsProfiles"], () => require("./sensorAlertsProfiles"));

export { SensorMqttBrokersArgs, SensorMqttBrokersState } from "./sensorMqttBrokers";
export type SensorMqttBrokers = import("./sensorMqttBrokers").SensorMqttBrokers;
export const SensorMqttBrokers: typeof import("./sensorMqttBrokers").SensorMqttBrokers = null as any;
utilities.lazyLoad(exports, ["SensorMqttBrokers"], () => require("./sensorMqttBrokers"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { SmBypassActivationLockAttemptsArgs, SmBypassActivationLockAttemptsState } from "./smBypassActivationLockAttempts";
export type SmBypassActivationLockAttempts = import("./smBypassActivationLockAttempts").SmBypassActivationLockAttempts;
export const SmBypassActivationLockAttempts: typeof import("./smBypassActivationLockAttempts").SmBypassActivationLockAttempts = null as any;
utilities.lazyLoad(exports, ["SmBypassActivationLockAttempts"], () => require("./smBypassActivationLockAttempts"));

export { SmDevicesCheckinArgs, SmDevicesCheckinState } from "./smDevicesCheckin";
export type SmDevicesCheckin = import("./smDevicesCheckin").SmDevicesCheckin;
export const SmDevicesCheckin: typeof import("./smDevicesCheckin").SmDevicesCheckin = null as any;
utilities.lazyLoad(exports, ["SmDevicesCheckin"], () => require("./smDevicesCheckin"));

export { SmDevicesFieldsArgs, SmDevicesFieldsState } from "./smDevicesFields";
export type SmDevicesFields = import("./smDevicesFields").SmDevicesFields;
export const SmDevicesFields: typeof import("./smDevicesFields").SmDevicesFields = null as any;
utilities.lazyLoad(exports, ["SmDevicesFields"], () => require("./smDevicesFields"));

export { SmDevicesInstallAppsArgs, SmDevicesInstallAppsState } from "./smDevicesInstallApps";
export type SmDevicesInstallApps = import("./smDevicesInstallApps").SmDevicesInstallApps;
export const SmDevicesInstallApps: typeof import("./smDevicesInstallApps").SmDevicesInstallApps = null as any;
utilities.lazyLoad(exports, ["SmDevicesInstallApps"], () => require("./smDevicesInstallApps"));

export { SmDevicesLockArgs, SmDevicesLockState } from "./smDevicesLock";
export type SmDevicesLock = import("./smDevicesLock").SmDevicesLock;
export const SmDevicesLock: typeof import("./smDevicesLock").SmDevicesLock = null as any;
utilities.lazyLoad(exports, ["SmDevicesLock"], () => require("./smDevicesLock"));

export { SmDevicesModifyTagsArgs, SmDevicesModifyTagsState } from "./smDevicesModifyTags";
export type SmDevicesModifyTags = import("./smDevicesModifyTags").SmDevicesModifyTags;
export const SmDevicesModifyTags: typeof import("./smDevicesModifyTags").SmDevicesModifyTags = null as any;
utilities.lazyLoad(exports, ["SmDevicesModifyTags"], () => require("./smDevicesModifyTags"));

export { SmDevicesMoveArgs, SmDevicesMoveState } from "./smDevicesMove";
export type SmDevicesMove = import("./smDevicesMove").SmDevicesMove;
export const SmDevicesMove: typeof import("./smDevicesMove").SmDevicesMove = null as any;
utilities.lazyLoad(exports, ["SmDevicesMove"], () => require("./smDevicesMove"));

export { SmDevicesRebootArgs, SmDevicesRebootState } from "./smDevicesReboot";
export type SmDevicesReboot = import("./smDevicesReboot").SmDevicesReboot;
export const SmDevicesReboot: typeof import("./smDevicesReboot").SmDevicesReboot = null as any;
utilities.lazyLoad(exports, ["SmDevicesReboot"], () => require("./smDevicesReboot"));

export { SmDevicesRefreshDetailsArgs, SmDevicesRefreshDetailsState } from "./smDevicesRefreshDetails";
export type SmDevicesRefreshDetails = import("./smDevicesRefreshDetails").SmDevicesRefreshDetails;
export const SmDevicesRefreshDetails: typeof import("./smDevicesRefreshDetails").SmDevicesRefreshDetails = null as any;
utilities.lazyLoad(exports, ["SmDevicesRefreshDetails"], () => require("./smDevicesRefreshDetails"));

export { SmDevicesShutdownArgs, SmDevicesShutdownState } from "./smDevicesShutdown";
export type SmDevicesShutdown = import("./smDevicesShutdown").SmDevicesShutdown;
export const SmDevicesShutdown: typeof import("./smDevicesShutdown").SmDevicesShutdown = null as any;
utilities.lazyLoad(exports, ["SmDevicesShutdown"], () => require("./smDevicesShutdown"));

export { SmDevicesUnenrollArgs, SmDevicesUnenrollState } from "./smDevicesUnenroll";
export type SmDevicesUnenroll = import("./smDevicesUnenroll").SmDevicesUnenroll;
export const SmDevicesUnenroll: typeof import("./smDevicesUnenroll").SmDevicesUnenroll = null as any;
utilities.lazyLoad(exports, ["SmDevicesUnenroll"], () => require("./smDevicesUnenroll"));

export { SmDevicesUninstallAppsArgs, SmDevicesUninstallAppsState } from "./smDevicesUninstallApps";
export type SmDevicesUninstallApps = import("./smDevicesUninstallApps").SmDevicesUninstallApps;
export const SmDevicesUninstallApps: typeof import("./smDevicesUninstallApps").SmDevicesUninstallApps = null as any;
utilities.lazyLoad(exports, ["SmDevicesUninstallApps"], () => require("./smDevicesUninstallApps"));

export { SmDevicesWipeArgs, SmDevicesWipeState } from "./smDevicesWipe";
export type SmDevicesWipe = import("./smDevicesWipe").SmDevicesWipe;
export const SmDevicesWipe: typeof import("./smDevicesWipe").SmDevicesWipe = null as any;
utilities.lazyLoad(exports, ["SmDevicesWipe"], () => require("./smDevicesWipe"));

export { SmTargetGroupsArgs, SmTargetGroupsState } from "./smTargetGroups";
export type SmTargetGroups = import("./smTargetGroups").SmTargetGroups;
export const SmTargetGroups: typeof import("./smTargetGroups").SmTargetGroups = null as any;
utilities.lazyLoad(exports, ["SmTargetGroups"], () => require("./smTargetGroups"));

export { SmUserAccessDevicesDeleteArgs, SmUserAccessDevicesDeleteState } from "./smUserAccessDevicesDelete";
export type SmUserAccessDevicesDelete = import("./smUserAccessDevicesDelete").SmUserAccessDevicesDelete;
export const SmUserAccessDevicesDelete: typeof import("./smUserAccessDevicesDelete").SmUserAccessDevicesDelete = null as any;
utilities.lazyLoad(exports, ["SmUserAccessDevicesDelete"], () => require("./smUserAccessDevicesDelete"));

export { SnmpArgs, SnmpState } from "./snmp";
export type Snmp = import("./snmp").Snmp;
export const Snmp: typeof import("./snmp").Snmp = null as any;
utilities.lazyLoad(exports, ["Snmp"], () => require("./snmp"));

export { SplitArgs, SplitState } from "./split";
export type Split = import("./split").Split;
export const Split: typeof import("./split").Split = null as any;
utilities.lazyLoad(exports, ["Split"], () => require("./split"));

export { SwitchAccessControlListsArgs, SwitchAccessControlListsState } from "./switchAccessControlLists";
export type SwitchAccessControlLists = import("./switchAccessControlLists").SwitchAccessControlLists;
export const SwitchAccessControlLists: typeof import("./switchAccessControlLists").SwitchAccessControlLists = null as any;
utilities.lazyLoad(exports, ["SwitchAccessControlLists"], () => require("./switchAccessControlLists"));

export { SwitchAccessPoliciesArgs, SwitchAccessPoliciesState } from "./switchAccessPolicies";
export type SwitchAccessPolicies = import("./switchAccessPolicies").SwitchAccessPolicies;
export const SwitchAccessPolicies: typeof import("./switchAccessPolicies").SwitchAccessPolicies = null as any;
utilities.lazyLoad(exports, ["SwitchAccessPolicies"], () => require("./switchAccessPolicies"));

export { SwitchAlternateManagementInterfaceArgs, SwitchAlternateManagementInterfaceState } from "./switchAlternateManagementInterface";
export type SwitchAlternateManagementInterface = import("./switchAlternateManagementInterface").SwitchAlternateManagementInterface;
export const SwitchAlternateManagementInterface: typeof import("./switchAlternateManagementInterface").SwitchAlternateManagementInterface = null as any;
utilities.lazyLoad(exports, ["SwitchAlternateManagementInterface"], () => require("./switchAlternateManagementInterface"));

export { SwitchDhcpServerPolicyArgs, SwitchDhcpServerPolicyState } from "./switchDhcpServerPolicy";
export type SwitchDhcpServerPolicy = import("./switchDhcpServerPolicy").SwitchDhcpServerPolicy;
export const SwitchDhcpServerPolicy: typeof import("./switchDhcpServerPolicy").SwitchDhcpServerPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchDhcpServerPolicy"], () => require("./switchDhcpServerPolicy"));

export { SwitchDhcpServerPolicyArpInspectionTrustedServersArgs, SwitchDhcpServerPolicyArpInspectionTrustedServersState } from "./switchDhcpServerPolicyArpInspectionTrustedServers";
export type SwitchDhcpServerPolicyArpInspectionTrustedServers = import("./switchDhcpServerPolicyArpInspectionTrustedServers").SwitchDhcpServerPolicyArpInspectionTrustedServers;
export const SwitchDhcpServerPolicyArpInspectionTrustedServers: typeof import("./switchDhcpServerPolicyArpInspectionTrustedServers").SwitchDhcpServerPolicyArpInspectionTrustedServers = null as any;
utilities.lazyLoad(exports, ["SwitchDhcpServerPolicyArpInspectionTrustedServers"], () => require("./switchDhcpServerPolicyArpInspectionTrustedServers"));

export { SwitchDscpToCosMappingsArgs, SwitchDscpToCosMappingsState } from "./switchDscpToCosMappings";
export type SwitchDscpToCosMappings = import("./switchDscpToCosMappings").SwitchDscpToCosMappings;
export const SwitchDscpToCosMappings: typeof import("./switchDscpToCosMappings").SwitchDscpToCosMappings = null as any;
utilities.lazyLoad(exports, ["SwitchDscpToCosMappings"], () => require("./switchDscpToCosMappings"));

export { SwitchLinkAggregationsArgs, SwitchLinkAggregationsState } from "./switchLinkAggregations";
export type SwitchLinkAggregations = import("./switchLinkAggregations").SwitchLinkAggregations;
export const SwitchLinkAggregations: typeof import("./switchLinkAggregations").SwitchLinkAggregations = null as any;
utilities.lazyLoad(exports, ["SwitchLinkAggregations"], () => require("./switchLinkAggregations"));

export { SwitchMtuArgs, SwitchMtuState } from "./switchMtu";
export type SwitchMtu = import("./switchMtu").SwitchMtu;
export const SwitchMtu: typeof import("./switchMtu").SwitchMtu = null as any;
utilities.lazyLoad(exports, ["SwitchMtu"], () => require("./switchMtu"));

export { SwitchPortSchedulesArgs, SwitchPortSchedulesState } from "./switchPortSchedules";
export type SwitchPortSchedules = import("./switchPortSchedules").SwitchPortSchedules;
export const SwitchPortSchedules: typeof import("./switchPortSchedules").SwitchPortSchedules = null as any;
utilities.lazyLoad(exports, ["SwitchPortSchedules"], () => require("./switchPortSchedules"));

export { SwitchQosRulesOrderArgs, SwitchQosRulesOrderState } from "./switchQosRulesOrder";
export type SwitchQosRulesOrder = import("./switchQosRulesOrder").SwitchQosRulesOrder;
export const SwitchQosRulesOrder: typeof import("./switchQosRulesOrder").SwitchQosRulesOrder = null as any;
utilities.lazyLoad(exports, ["SwitchQosRulesOrder"], () => require("./switchQosRulesOrder"));

export { SwitchRoutingMulticastArgs, SwitchRoutingMulticastState } from "./switchRoutingMulticast";
export type SwitchRoutingMulticast = import("./switchRoutingMulticast").SwitchRoutingMulticast;
export const SwitchRoutingMulticast: typeof import("./switchRoutingMulticast").SwitchRoutingMulticast = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingMulticast"], () => require("./switchRoutingMulticast"));

export { SwitchRoutingMulticastRendezvousPointsArgs, SwitchRoutingMulticastRendezvousPointsState } from "./switchRoutingMulticastRendezvousPoints";
export type SwitchRoutingMulticastRendezvousPoints = import("./switchRoutingMulticastRendezvousPoints").SwitchRoutingMulticastRendezvousPoints;
export const SwitchRoutingMulticastRendezvousPoints: typeof import("./switchRoutingMulticastRendezvousPoints").SwitchRoutingMulticastRendezvousPoints = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingMulticastRendezvousPoints"], () => require("./switchRoutingMulticastRendezvousPoints"));

export { SwitchRoutingOspfArgs, SwitchRoutingOspfState } from "./switchRoutingOspf";
export type SwitchRoutingOspf = import("./switchRoutingOspf").SwitchRoutingOspf;
export const SwitchRoutingOspf: typeof import("./switchRoutingOspf").SwitchRoutingOspf = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingOspf"], () => require("./switchRoutingOspf"));

export { SwitchSettingsArgs, SwitchSettingsState } from "./switchSettings";
export type SwitchSettings = import("./switchSettings").SwitchSettings;
export const SwitchSettings: typeof import("./switchSettings").SwitchSettings = null as any;
utilities.lazyLoad(exports, ["SwitchSettings"], () => require("./switchSettings"));

export { SwitchStacksArgs, SwitchStacksState } from "./switchStacks";
export type SwitchStacks = import("./switchStacks").SwitchStacks;
export const SwitchStacks: typeof import("./switchStacks").SwitchStacks = null as any;
utilities.lazyLoad(exports, ["SwitchStacks"], () => require("./switchStacks"));

export { SwitchStacksAddArgs, SwitchStacksAddState } from "./switchStacksAdd";
export type SwitchStacksAdd = import("./switchStacksAdd").SwitchStacksAdd;
export const SwitchStacksAdd: typeof import("./switchStacksAdd").SwitchStacksAdd = null as any;
utilities.lazyLoad(exports, ["SwitchStacksAdd"], () => require("./switchStacksAdd"));

export { SwitchStacksRemoveArgs, SwitchStacksRemoveState } from "./switchStacksRemove";
export type SwitchStacksRemove = import("./switchStacksRemove").SwitchStacksRemove;
export const SwitchStacksRemove: typeof import("./switchStacksRemove").SwitchStacksRemove = null as any;
utilities.lazyLoad(exports, ["SwitchStacksRemove"], () => require("./switchStacksRemove"));

export { SwitchStacksRoutingInterfacesArgs, SwitchStacksRoutingInterfacesState } from "./switchStacksRoutingInterfaces";
export type SwitchStacksRoutingInterfaces = import("./switchStacksRoutingInterfaces").SwitchStacksRoutingInterfaces;
export const SwitchStacksRoutingInterfaces: typeof import("./switchStacksRoutingInterfaces").SwitchStacksRoutingInterfaces = null as any;
utilities.lazyLoad(exports, ["SwitchStacksRoutingInterfaces"], () => require("./switchStacksRoutingInterfaces"));

export { SwitchStacksRoutingInterfacesDhcpArgs, SwitchStacksRoutingInterfacesDhcpState } from "./switchStacksRoutingInterfacesDhcp";
export type SwitchStacksRoutingInterfacesDhcp = import("./switchStacksRoutingInterfacesDhcp").SwitchStacksRoutingInterfacesDhcp;
export const SwitchStacksRoutingInterfacesDhcp: typeof import("./switchStacksRoutingInterfacesDhcp").SwitchStacksRoutingInterfacesDhcp = null as any;
utilities.lazyLoad(exports, ["SwitchStacksRoutingInterfacesDhcp"], () => require("./switchStacksRoutingInterfacesDhcp"));

export { SwitchStacksRoutingStaticRoutesArgs, SwitchStacksRoutingStaticRoutesState } from "./switchStacksRoutingStaticRoutes";
export type SwitchStacksRoutingStaticRoutes = import("./switchStacksRoutingStaticRoutes").SwitchStacksRoutingStaticRoutes;
export const SwitchStacksRoutingStaticRoutes: typeof import("./switchStacksRoutingStaticRoutes").SwitchStacksRoutingStaticRoutes = null as any;
utilities.lazyLoad(exports, ["SwitchStacksRoutingStaticRoutes"], () => require("./switchStacksRoutingStaticRoutes"));

export { SwitchStormControlArgs, SwitchStormControlState } from "./switchStormControl";
export type SwitchStormControl = import("./switchStormControl").SwitchStormControl;
export const SwitchStormControl: typeof import("./switchStormControl").SwitchStormControl = null as any;
utilities.lazyLoad(exports, ["SwitchStormControl"], () => require("./switchStormControl"));

export { SwitchStpArgs, SwitchStpState } from "./switchStp";
export type SwitchStp = import("./switchStp").SwitchStp;
export const SwitchStp: typeof import("./switchStp").SwitchStp = null as any;
utilities.lazyLoad(exports, ["SwitchStp"], () => require("./switchStp"));

export { SyslogServersArgs, SyslogServersState } from "./syslogServers";
export type SyslogServers = import("./syslogServers").SyslogServers;
export const SyslogServers: typeof import("./syslogServers").SyslogServers = null as any;
utilities.lazyLoad(exports, ["SyslogServers"], () => require("./syslogServers"));

export { TrafficAnalysisArgs, TrafficAnalysisState } from "./trafficAnalysis";
export type TrafficAnalysis = import("./trafficAnalysis").TrafficAnalysis;
export const TrafficAnalysis: typeof import("./trafficAnalysis").TrafficAnalysis = null as any;
utilities.lazyLoad(exports, ["TrafficAnalysis"], () => require("./trafficAnalysis"));

export { UnbindArgs, UnbindState } from "./unbind";
export type Unbind = import("./unbind").Unbind;
export const Unbind: typeof import("./unbind").Unbind = null as any;
utilities.lazyLoad(exports, ["Unbind"], () => require("./unbind"));

export { VlanProfilesArgs, VlanProfilesState } from "./vlanProfiles";
export type VlanProfiles = import("./vlanProfiles").VlanProfiles;
export const VlanProfiles: typeof import("./vlanProfiles").VlanProfiles = null as any;
utilities.lazyLoad(exports, ["VlanProfiles"], () => require("./vlanProfiles"));

export { VlanProfilesAssignmentsReassignArgs, VlanProfilesAssignmentsReassignState } from "./vlanProfilesAssignmentsReassign";
export type VlanProfilesAssignmentsReassign = import("./vlanProfilesAssignmentsReassign").VlanProfilesAssignmentsReassign;
export const VlanProfilesAssignmentsReassign: typeof import("./vlanProfilesAssignmentsReassign").VlanProfilesAssignmentsReassign = null as any;
utilities.lazyLoad(exports, ["VlanProfilesAssignmentsReassign"], () => require("./vlanProfilesAssignmentsReassign"));

export { WebhooksHttpServersArgs, WebhooksHttpServersState } from "./webhooksHttpServers";
export type WebhooksHttpServers = import("./webhooksHttpServers").WebhooksHttpServers;
export const WebhooksHttpServers: typeof import("./webhooksHttpServers").WebhooksHttpServers = null as any;
utilities.lazyLoad(exports, ["WebhooksHttpServers"], () => require("./webhooksHttpServers"));

export { WebhooksPayloadTemplatesArgs, WebhooksPayloadTemplatesState } from "./webhooksPayloadTemplates";
export type WebhooksPayloadTemplates = import("./webhooksPayloadTemplates").WebhooksPayloadTemplates;
export const WebhooksPayloadTemplates: typeof import("./webhooksPayloadTemplates").WebhooksPayloadTemplates = null as any;
utilities.lazyLoad(exports, ["WebhooksPayloadTemplates"], () => require("./webhooksPayloadTemplates"));

export { WirelessAlternateManagementInterfaceArgs, WirelessAlternateManagementInterfaceState } from "./wirelessAlternateManagementInterface";
export type WirelessAlternateManagementInterface = import("./wirelessAlternateManagementInterface").WirelessAlternateManagementInterface;
export const WirelessAlternateManagementInterface: typeof import("./wirelessAlternateManagementInterface").WirelessAlternateManagementInterface = null as any;
utilities.lazyLoad(exports, ["WirelessAlternateManagementInterface"], () => require("./wirelessAlternateManagementInterface"));

export { WirelessBillingArgs, WirelessBillingState } from "./wirelessBilling";
export type WirelessBilling = import("./wirelessBilling").WirelessBilling;
export const WirelessBilling: typeof import("./wirelessBilling").WirelessBilling = null as any;
utilities.lazyLoad(exports, ["WirelessBilling"], () => require("./wirelessBilling"));

export { WirelessBluetoothSettingsArgs, WirelessBluetoothSettingsState } from "./wirelessBluetoothSettings";
export type WirelessBluetoothSettings = import("./wirelessBluetoothSettings").WirelessBluetoothSettings;
export const WirelessBluetoothSettings: typeof import("./wirelessBluetoothSettings").WirelessBluetoothSettings = null as any;
utilities.lazyLoad(exports, ["WirelessBluetoothSettings"], () => require("./wirelessBluetoothSettings"));

export { WirelessEthernetPortsProfilesArgs, WirelessEthernetPortsProfilesState } from "./wirelessEthernetPortsProfiles";
export type WirelessEthernetPortsProfiles = import("./wirelessEthernetPortsProfiles").WirelessEthernetPortsProfiles;
export const WirelessEthernetPortsProfiles: typeof import("./wirelessEthernetPortsProfiles").WirelessEthernetPortsProfiles = null as any;
utilities.lazyLoad(exports, ["WirelessEthernetPortsProfiles"], () => require("./wirelessEthernetPortsProfiles"));

export { WirelessEthernetPortsProfilesAssignArgs, WirelessEthernetPortsProfilesAssignState } from "./wirelessEthernetPortsProfilesAssign";
export type WirelessEthernetPortsProfilesAssign = import("./wirelessEthernetPortsProfilesAssign").WirelessEthernetPortsProfilesAssign;
export const WirelessEthernetPortsProfilesAssign: typeof import("./wirelessEthernetPortsProfilesAssign").WirelessEthernetPortsProfilesAssign = null as any;
utilities.lazyLoad(exports, ["WirelessEthernetPortsProfilesAssign"], () => require("./wirelessEthernetPortsProfilesAssign"));

export { WirelessEthernetPortsProfilesSetDefaultArgs, WirelessEthernetPortsProfilesSetDefaultState } from "./wirelessEthernetPortsProfilesSetDefault";
export type WirelessEthernetPortsProfilesSetDefault = import("./wirelessEthernetPortsProfilesSetDefault").WirelessEthernetPortsProfilesSetDefault;
export const WirelessEthernetPortsProfilesSetDefault: typeof import("./wirelessEthernetPortsProfilesSetDefault").WirelessEthernetPortsProfilesSetDefault = null as any;
utilities.lazyLoad(exports, ["WirelessEthernetPortsProfilesSetDefault"], () => require("./wirelessEthernetPortsProfilesSetDefault"));

export { WirelessRfProfilesArgs, WirelessRfProfilesState } from "./wirelessRfProfiles";
export type WirelessRfProfiles = import("./wirelessRfProfiles").WirelessRfProfiles;
export const WirelessRfProfiles: typeof import("./wirelessRfProfiles").WirelessRfProfiles = null as any;
utilities.lazyLoad(exports, ["WirelessRfProfiles"], () => require("./wirelessRfProfiles"));

export { WirelessSettingsArgs, WirelessSettingsState } from "./wirelessSettings";
export type WirelessSettings = import("./wirelessSettings").WirelessSettings;
export const WirelessSettings: typeof import("./wirelessSettings").WirelessSettings = null as any;
utilities.lazyLoad(exports, ["WirelessSettings"], () => require("./wirelessSettings"));

export { WirelessSsidsArgs, WirelessSsidsState } from "./wirelessSsids";
export type WirelessSsids = import("./wirelessSsids").WirelessSsids;
export const WirelessSsids: typeof import("./wirelessSsids").WirelessSsids = null as any;
utilities.lazyLoad(exports, ["WirelessSsids"], () => require("./wirelessSsids"));

export { WirelessSsidsBonjourForwardingArgs, WirelessSsidsBonjourForwardingState } from "./wirelessSsidsBonjourForwarding";
export type WirelessSsidsBonjourForwarding = import("./wirelessSsidsBonjourForwarding").WirelessSsidsBonjourForwarding;
export const WirelessSsidsBonjourForwarding: typeof import("./wirelessSsidsBonjourForwarding").WirelessSsidsBonjourForwarding = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsBonjourForwarding"], () => require("./wirelessSsidsBonjourForwarding"));

export { WirelessSsidsDeviceTypeGroupPoliciesArgs, WirelessSsidsDeviceTypeGroupPoliciesState } from "./wirelessSsidsDeviceTypeGroupPolicies";
export type WirelessSsidsDeviceTypeGroupPolicies = import("./wirelessSsidsDeviceTypeGroupPolicies").WirelessSsidsDeviceTypeGroupPolicies;
export const WirelessSsidsDeviceTypeGroupPolicies: typeof import("./wirelessSsidsDeviceTypeGroupPolicies").WirelessSsidsDeviceTypeGroupPolicies = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsDeviceTypeGroupPolicies"], () => require("./wirelessSsidsDeviceTypeGroupPolicies"));

export { WirelessSsidsEapOverrideArgs, WirelessSsidsEapOverrideState } from "./wirelessSsidsEapOverride";
export type WirelessSsidsEapOverride = import("./wirelessSsidsEapOverride").WirelessSsidsEapOverride;
export const WirelessSsidsEapOverride: typeof import("./wirelessSsidsEapOverride").WirelessSsidsEapOverride = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsEapOverride"], () => require("./wirelessSsidsEapOverride"));

export { WirelessSsidsFirewallL3FirewallRulesArgs, WirelessSsidsFirewallL3FirewallRulesState } from "./wirelessSsidsFirewallL3FirewallRules";
export type WirelessSsidsFirewallL3FirewallRules = import("./wirelessSsidsFirewallL3FirewallRules").WirelessSsidsFirewallL3FirewallRules;
export const WirelessSsidsFirewallL3FirewallRules: typeof import("./wirelessSsidsFirewallL3FirewallRules").WirelessSsidsFirewallL3FirewallRules = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsFirewallL3FirewallRules"], () => require("./wirelessSsidsFirewallL3FirewallRules"));

export { WirelessSsidsFirewallL7FirewallRulesArgs, WirelessSsidsFirewallL7FirewallRulesState } from "./wirelessSsidsFirewallL7FirewallRules";
export type WirelessSsidsFirewallL7FirewallRules = import("./wirelessSsidsFirewallL7FirewallRules").WirelessSsidsFirewallL7FirewallRules;
export const WirelessSsidsFirewallL7FirewallRules: typeof import("./wirelessSsidsFirewallL7FirewallRules").WirelessSsidsFirewallL7FirewallRules = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsFirewallL7FirewallRules"], () => require("./wirelessSsidsFirewallL7FirewallRules"));

export { WirelessSsidsHotspot20Args, WirelessSsidsHotspot20State } from "./wirelessSsidsHotspot20";
export type WirelessSsidsHotspot20 = import("./wirelessSsidsHotspot20").WirelessSsidsHotspot20;
export const WirelessSsidsHotspot20: typeof import("./wirelessSsidsHotspot20").WirelessSsidsHotspot20 = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsHotspot20"], () => require("./wirelessSsidsHotspot20"));

export { WirelessSsidsIdentityPsksArgs, WirelessSsidsIdentityPsksState } from "./wirelessSsidsIdentityPsks";
export type WirelessSsidsIdentityPsks = import("./wirelessSsidsIdentityPsks").WirelessSsidsIdentityPsks;
export const WirelessSsidsIdentityPsks: typeof import("./wirelessSsidsIdentityPsks").WirelessSsidsIdentityPsks = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsIdentityPsks"], () => require("./wirelessSsidsIdentityPsks"));

export { WirelessSsidsSchedulesArgs, WirelessSsidsSchedulesState } from "./wirelessSsidsSchedules";
export type WirelessSsidsSchedules = import("./wirelessSsidsSchedules").WirelessSsidsSchedules;
export const WirelessSsidsSchedules: typeof import("./wirelessSsidsSchedules").WirelessSsidsSchedules = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsSchedules"], () => require("./wirelessSsidsSchedules"));

export { WirelessSsidsSplashSettingsArgs, WirelessSsidsSplashSettingsState } from "./wirelessSsidsSplashSettings";
export type WirelessSsidsSplashSettings = import("./wirelessSsidsSplashSettings").WirelessSsidsSplashSettings;
export const WirelessSsidsSplashSettings: typeof import("./wirelessSsidsSplashSettings").WirelessSsidsSplashSettings = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsSplashSettings"], () => require("./wirelessSsidsSplashSettings"));

export { WirelessSsidsTrafficShapingRulesArgs, WirelessSsidsTrafficShapingRulesState } from "./wirelessSsidsTrafficShapingRules";
export type WirelessSsidsTrafficShapingRules = import("./wirelessSsidsTrafficShapingRules").WirelessSsidsTrafficShapingRules;
export const WirelessSsidsTrafficShapingRules: typeof import("./wirelessSsidsTrafficShapingRules").WirelessSsidsTrafficShapingRules = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsTrafficShapingRules"], () => require("./wirelessSsidsTrafficShapingRules"));

export { WirelessSsidsVpnArgs, WirelessSsidsVpnState } from "./wirelessSsidsVpn";
export type WirelessSsidsVpn = import("./wirelessSsidsVpn").WirelessSsidsVpn;
export const WirelessSsidsVpn: typeof import("./wirelessSsidsVpn").WirelessSsidsVpn = null as any;
utilities.lazyLoad(exports, ["WirelessSsidsVpn"], () => require("./wirelessSsidsVpn"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "meraki:networks/alertsSettings:AlertsSettings":
                return new AlertsSettings(name, <any>undefined, { urn })
            case "meraki:networks/applianceConnectivityMonitoringDestinations:ApplianceConnectivityMonitoringDestinations":
                return new ApplianceConnectivityMonitoringDestinations(name, <any>undefined, { urn })
            case "meraki:networks/applianceContentFiltering:ApplianceContentFiltering":
                return new ApplianceContentFiltering(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallCellularFirewallRules:ApplianceFirewallCellularFirewallRules":
                return new ApplianceFirewallCellularFirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallFirewalledServices:ApplianceFirewallFirewalledServices":
                return new ApplianceFirewallFirewalledServices(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallInboundFirewallRules:ApplianceFirewallInboundFirewallRules":
                return new ApplianceFirewallInboundFirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules":
                return new ApplianceFirewallL3FirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallL7FirewallRules:ApplianceFirewallL7FirewallRules":
                return new ApplianceFirewallL7FirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallOneToManyNatRules:ApplianceFirewallOneToManyNatRules":
                return new ApplianceFirewallOneToManyNatRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallOneToOneNatRules:ApplianceFirewallOneToOneNatRules":
                return new ApplianceFirewallOneToOneNatRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallPortForwardingRules:ApplianceFirewallPortForwardingRules":
                return new ApplianceFirewallPortForwardingRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceFirewallSettings:ApplianceFirewallSettings":
                return new ApplianceFirewallSettings(name, <any>undefined, { urn })
            case "meraki:networks/appliancePorts:AppliancePorts":
                return new AppliancePorts(name, <any>undefined, { urn })
            case "meraki:networks/appliancePrefixesDelegatedStatics:AppliancePrefixesDelegatedStatics":
                return new AppliancePrefixesDelegatedStatics(name, <any>undefined, { urn })
            case "meraki:networks/applianceRfProfiles:ApplianceRfProfiles":
                return new ApplianceRfProfiles(name, <any>undefined, { urn })
            case "meraki:networks/applianceSecurityIntrusion:ApplianceSecurityIntrusion":
                return new ApplianceSecurityIntrusion(name, <any>undefined, { urn })
            case "meraki:networks/applianceSecurityMalware:ApplianceSecurityMalware":
                return new ApplianceSecurityMalware(name, <any>undefined, { urn })
            case "meraki:networks/applianceSettings:ApplianceSettings":
                return new ApplianceSettings(name, <any>undefined, { urn })
            case "meraki:networks/applianceSingleLan:ApplianceSingleLan":
                return new ApplianceSingleLan(name, <any>undefined, { urn })
            case "meraki:networks/applianceSsids:ApplianceSsids":
                return new ApplianceSsids(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShaping:ApplianceTrafficShaping":
                return new ApplianceTrafficShaping(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShapingCustomPerformanceClasses:ApplianceTrafficShapingCustomPerformanceClasses":
                return new ApplianceTrafficShapingCustomPerformanceClasses(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShapingRules:ApplianceTrafficShapingRules":
                return new ApplianceTrafficShapingRules(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShapingUplinkBandwidth:ApplianceTrafficShapingUplinkBandwidth":
                return new ApplianceTrafficShapingUplinkBandwidth(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection":
                return new ApplianceTrafficShapingUplinkSelection(name, <any>undefined, { urn })
            case "meraki:networks/applianceTrafficShapingVpnExclusions:ApplianceTrafficShapingVpnExclusions":
                return new ApplianceTrafficShapingVpnExclusions(name, <any>undefined, { urn })
            case "meraki:networks/applianceVlans:ApplianceVlans":
                return new ApplianceVlans(name, <any>undefined, { urn })
            case "meraki:networks/applianceVlansSettings:ApplianceVlansSettings":
                return new ApplianceVlansSettings(name, <any>undefined, { urn })
            case "meraki:networks/applianceVpnBgp:ApplianceVpnBgp":
                return new ApplianceVpnBgp(name, <any>undefined, { urn })
            case "meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn":
                return new ApplianceVpnSiteToSiteVpn(name, <any>undefined, { urn })
            case "meraki:networks/applianceWarmSpare:ApplianceWarmSpare":
                return new ApplianceWarmSpare(name, <any>undefined, { urn })
            case "meraki:networks/applianceWarmSpareSwap:ApplianceWarmSpareSwap":
                return new ApplianceWarmSpareSwap(name, <any>undefined, { urn })
            case "meraki:networks/base:base":
                return new Base(name, <any>undefined, { urn })
            case "meraki:networks/bind:Bind":
                return new Bind(name, <any>undefined, { urn })
            case "meraki:networks/cameraQualityRetentionProfiles:CameraQualityRetentionProfiles":
                return new CameraQualityRetentionProfiles(name, <any>undefined, { urn })
            case "meraki:networks/cameraWirelessProfiles:CameraWirelessProfiles":
                return new CameraWirelessProfiles(name, <any>undefined, { urn })
            case "meraki:networks/cellularGatewayConnectivityMonitoringDestinations:CellularGatewayConnectivityMonitoringDestinations":
                return new CellularGatewayConnectivityMonitoringDestinations(name, <any>undefined, { urn })
            case "meraki:networks/cellularGatewayDhcp:CellularGatewayDhcp":
                return new CellularGatewayDhcp(name, <any>undefined, { urn })
            case "meraki:networks/cellularGatewaySubnetPool:CellularGatewaySubnetPool":
                return new CellularGatewaySubnetPool(name, <any>undefined, { urn })
            case "meraki:networks/cellularGatewayUplink:CellularGatewayUplink":
                return new CellularGatewayUplink(name, <any>undefined, { urn })
            case "meraki:networks/clientsPolicy:ClientsPolicy":
                return new ClientsPolicy(name, <any>undefined, { urn })
            case "meraki:networks/clientsProvision:ClientsProvision":
                return new ClientsProvision(name, <any>undefined, { urn })
            case "meraki:networks/clientsSplashAuthorizationStatus:ClientsSplashAuthorizationStatus":
                return new ClientsSplashAuthorizationStatus(name, <any>undefined, { urn })
            case "meraki:networks/devicesClaim:DevicesClaim":
                return new DevicesClaim(name, <any>undefined, { urn })
            case "meraki:networks/devicesClaimVmx:DevicesClaimVmx":
                return new DevicesClaimVmx(name, <any>undefined, { urn })
            case "meraki:networks/devicesRemove:DevicesRemove":
                return new DevicesRemove(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgrades:FirmwareUpgrades":
                return new FirmwareUpgrades(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesRollbacks:FirmwareUpgradesRollbacks":
                return new FirmwareUpgradesRollbacks(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesStagedEvents:FirmwareUpgradesStagedEvents":
                return new FirmwareUpgradesStagedEvents(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesStagedEventsDefer:FirmwareUpgradesStagedEventsDefer":
                return new FirmwareUpgradesStagedEventsDefer(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesStagedEventsRollbacks:FirmwareUpgradesStagedEventsRollbacks":
                return new FirmwareUpgradesStagedEventsRollbacks(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesStagedGroups:FirmwareUpgradesStagedGroups":
                return new FirmwareUpgradesStagedGroups(name, <any>undefined, { urn })
            case "meraki:networks/firmwareUpgradesStagedStages:FirmwareUpgradesStagedStages":
                return new FirmwareUpgradesStagedStages(name, <any>undefined, { urn })
            case "meraki:networks/floorPlans:FloorPlans":
                return new FloorPlans(name, <any>undefined, { urn })
            case "meraki:networks/groupPolicies:GroupPolicies":
                return new GroupPolicies(name, <any>undefined, { urn })
            case "meraki:networks/merakiAuthUsers:MerakiAuthUsers":
                return new MerakiAuthUsers(name, <any>undefined, { urn })
            case "meraki:networks/mqttBrokers:MqttBrokers":
                return new MqttBrokers(name, <any>undefined, { urn })
            case "meraki:networks/netflow:Netflow":
                return new Netflow(name, <any>undefined, { urn })
            case "meraki:networks/piiRequestsDelete:PiiRequestsDelete":
                return new PiiRequestsDelete(name, <any>undefined, { urn })
            case "meraki:networks/sensorAlertsProfiles:SensorAlertsProfiles":
                return new SensorAlertsProfiles(name, <any>undefined, { urn })
            case "meraki:networks/sensorMqttBrokers:SensorMqttBrokers":
                return new SensorMqttBrokers(name, <any>undefined, { urn })
            case "meraki:networks/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts":
                return new SmBypassActivationLockAttempts(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesCheckin:SmDevicesCheckin":
                return new SmDevicesCheckin(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesFields:SmDevicesFields":
                return new SmDevicesFields(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesInstallApps:SmDevicesInstallApps":
                return new SmDevicesInstallApps(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesLock:SmDevicesLock":
                return new SmDevicesLock(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesModifyTags:SmDevicesModifyTags":
                return new SmDevicesModifyTags(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesMove:SmDevicesMove":
                return new SmDevicesMove(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesReboot:SmDevicesReboot":
                return new SmDevicesReboot(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesRefreshDetails:SmDevicesRefreshDetails":
                return new SmDevicesRefreshDetails(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesShutdown:SmDevicesShutdown":
                return new SmDevicesShutdown(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesUnenroll:SmDevicesUnenroll":
                return new SmDevicesUnenroll(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesUninstallApps:SmDevicesUninstallApps":
                return new SmDevicesUninstallApps(name, <any>undefined, { urn })
            case "meraki:networks/smDevicesWipe:SmDevicesWipe":
                return new SmDevicesWipe(name, <any>undefined, { urn })
            case "meraki:networks/smTargetGroups:SmTargetGroups":
                return new SmTargetGroups(name, <any>undefined, { urn })
            case "meraki:networks/smUserAccessDevicesDelete:SmUserAccessDevicesDelete":
                return new SmUserAccessDevicesDelete(name, <any>undefined, { urn })
            case "meraki:networks/snmp:Snmp":
                return new Snmp(name, <any>undefined, { urn })
            case "meraki:networks/split:Split":
                return new Split(name, <any>undefined, { urn })
            case "meraki:networks/switchAccessControlLists:SwitchAccessControlLists":
                return new SwitchAccessControlLists(name, <any>undefined, { urn })
            case "meraki:networks/switchAccessPolicies:SwitchAccessPolicies":
                return new SwitchAccessPolicies(name, <any>undefined, { urn })
            case "meraki:networks/switchAlternateManagementInterface:SwitchAlternateManagementInterface":
                return new SwitchAlternateManagementInterface(name, <any>undefined, { urn })
            case "meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy":
                return new SwitchDhcpServerPolicy(name, <any>undefined, { urn })
            case "meraki:networks/switchDhcpServerPolicyArpInspectionTrustedServers:SwitchDhcpServerPolicyArpInspectionTrustedServers":
                return new SwitchDhcpServerPolicyArpInspectionTrustedServers(name, <any>undefined, { urn })
            case "meraki:networks/switchDscpToCosMappings:SwitchDscpToCosMappings":
                return new SwitchDscpToCosMappings(name, <any>undefined, { urn })
            case "meraki:networks/switchLinkAggregations:SwitchLinkAggregations":
                return new SwitchLinkAggregations(name, <any>undefined, { urn })
            case "meraki:networks/switchMtu:SwitchMtu":
                return new SwitchMtu(name, <any>undefined, { urn })
            case "meraki:networks/switchPortSchedules:SwitchPortSchedules":
                return new SwitchPortSchedules(name, <any>undefined, { urn })
            case "meraki:networks/switchQosRulesOrder:SwitchQosRulesOrder":
                return new SwitchQosRulesOrder(name, <any>undefined, { urn })
            case "meraki:networks/switchRoutingMulticast:SwitchRoutingMulticast":
                return new SwitchRoutingMulticast(name, <any>undefined, { urn })
            case "meraki:networks/switchRoutingMulticastRendezvousPoints:SwitchRoutingMulticastRendezvousPoints":
                return new SwitchRoutingMulticastRendezvousPoints(name, <any>undefined, { urn })
            case "meraki:networks/switchRoutingOspf:SwitchRoutingOspf":
                return new SwitchRoutingOspf(name, <any>undefined, { urn })
            case "meraki:networks/switchSettings:SwitchSettings":
                return new SwitchSettings(name, <any>undefined, { urn })
            case "meraki:networks/switchStacks:SwitchStacks":
                return new SwitchStacks(name, <any>undefined, { urn })
            case "meraki:networks/switchStacksAdd:SwitchStacksAdd":
                return new SwitchStacksAdd(name, <any>undefined, { urn })
            case "meraki:networks/switchStacksRemove:SwitchStacksRemove":
                return new SwitchStacksRemove(name, <any>undefined, { urn })
            case "meraki:networks/switchStacksRoutingInterfaces:SwitchStacksRoutingInterfaces":
                return new SwitchStacksRoutingInterfaces(name, <any>undefined, { urn })
            case "meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp":
                return new SwitchStacksRoutingInterfacesDhcp(name, <any>undefined, { urn })
            case "meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes":
                return new SwitchStacksRoutingStaticRoutes(name, <any>undefined, { urn })
            case "meraki:networks/switchStormControl:SwitchStormControl":
                return new SwitchStormControl(name, <any>undefined, { urn })
            case "meraki:networks/switchStp:SwitchStp":
                return new SwitchStp(name, <any>undefined, { urn })
            case "meraki:networks/syslogServers:SyslogServers":
                return new SyslogServers(name, <any>undefined, { urn })
            case "meraki:networks/trafficAnalysis:TrafficAnalysis":
                return new TrafficAnalysis(name, <any>undefined, { urn })
            case "meraki:networks/unbind:Unbind":
                return new Unbind(name, <any>undefined, { urn })
            case "meraki:networks/vlanProfiles:VlanProfiles":
                return new VlanProfiles(name, <any>undefined, { urn })
            case "meraki:networks/vlanProfilesAssignmentsReassign:VlanProfilesAssignmentsReassign":
                return new VlanProfilesAssignmentsReassign(name, <any>undefined, { urn })
            case "meraki:networks/webhooksHttpServers:WebhooksHttpServers":
                return new WebhooksHttpServers(name, <any>undefined, { urn })
            case "meraki:networks/webhooksPayloadTemplates:WebhooksPayloadTemplates":
                return new WebhooksPayloadTemplates(name, <any>undefined, { urn })
            case "meraki:networks/wirelessAlternateManagementInterface:WirelessAlternateManagementInterface":
                return new WirelessAlternateManagementInterface(name, <any>undefined, { urn })
            case "meraki:networks/wirelessBilling:WirelessBilling":
                return new WirelessBilling(name, <any>undefined, { urn })
            case "meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings":
                return new WirelessBluetoothSettings(name, <any>undefined, { urn })
            case "meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles":
                return new WirelessEthernetPortsProfiles(name, <any>undefined, { urn })
            case "meraki:networks/wirelessEthernetPortsProfilesAssign:WirelessEthernetPortsProfilesAssign":
                return new WirelessEthernetPortsProfilesAssign(name, <any>undefined, { urn })
            case "meraki:networks/wirelessEthernetPortsProfilesSetDefault:WirelessEthernetPortsProfilesSetDefault":
                return new WirelessEthernetPortsProfilesSetDefault(name, <any>undefined, { urn })
            case "meraki:networks/wirelessRfProfiles:WirelessRfProfiles":
                return new WirelessRfProfiles(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSettings:WirelessSettings":
                return new WirelessSettings(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsids:WirelessSsids":
                return new WirelessSsids(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsBonjourForwarding:WirelessSsidsBonjourForwarding":
                return new WirelessSsidsBonjourForwarding(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsDeviceTypeGroupPolicies:WirelessSsidsDeviceTypeGroupPolicies":
                return new WirelessSsidsDeviceTypeGroupPolicies(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsEapOverride:WirelessSsidsEapOverride":
                return new WirelessSsidsEapOverride(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsFirewallL3FirewallRules:WirelessSsidsFirewallL3FirewallRules":
                return new WirelessSsidsFirewallL3FirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsFirewallL7FirewallRules:WirelessSsidsFirewallL7FirewallRules":
                return new WirelessSsidsFirewallL7FirewallRules(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20":
                return new WirelessSsidsHotspot20(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsIdentityPsks:WirelessSsidsIdentityPsks":
                return new WirelessSsidsIdentityPsks(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsSchedules:WirelessSsidsSchedules":
                return new WirelessSsidsSchedules(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings":
                return new WirelessSsidsSplashSettings(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsTrafficShapingRules:WirelessSsidsTrafficShapingRules":
                return new WirelessSsidsTrafficShapingRules(name, <any>undefined, { urn })
            case "meraki:networks/wirelessSsidsVpn:WirelessSsidsVpn":
                return new WirelessSsidsVpn(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("meraki", "networks/alertsSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceConnectivityMonitoringDestinations", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceContentFiltering", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallCellularFirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallFirewalledServices", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallInboundFirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallL3FirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallL7FirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallOneToManyNatRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallOneToOneNatRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallPortForwardingRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceFirewallSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/appliancePorts", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/appliancePrefixesDelegatedStatics", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceRfProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceSecurityIntrusion", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceSecurityMalware", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceSingleLan", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceSsids", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShaping", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShapingCustomPerformanceClasses", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShapingRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShapingUplinkBandwidth", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShapingUplinkSelection", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceTrafficShapingVpnExclusions", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceVlans", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceVlansSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceVpnBgp", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceVpnSiteToSiteVpn", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceWarmSpare", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/applianceWarmSpareSwap", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/base", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/bind", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cameraQualityRetentionProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cameraWirelessProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cellularGatewayConnectivityMonitoringDestinations", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cellularGatewayDhcp", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cellularGatewaySubnetPool", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/cellularGatewayUplink", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/clientsPolicy", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/clientsProvision", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/clientsSplashAuthorizationStatus", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/devicesClaim", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/devicesClaimVmx", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/devicesRemove", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgrades", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesRollbacks", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesStagedEvents", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesStagedEventsDefer", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesStagedEventsRollbacks", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesStagedGroups", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/firmwareUpgradesStagedStages", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/floorPlans", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/groupPolicies", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/merakiAuthUsers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/mqttBrokers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/netflow", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/piiRequestsDelete", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/sensorAlertsProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/sensorMqttBrokers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/settings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smBypassActivationLockAttempts", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesCheckin", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesFields", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesInstallApps", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesLock", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesModifyTags", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesMove", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesReboot", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesRefreshDetails", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesShutdown", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesUnenroll", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesUninstallApps", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smDevicesWipe", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smTargetGroups", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/smUserAccessDevicesDelete", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/snmp", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/split", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchAccessControlLists", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchAccessPolicies", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchAlternateManagementInterface", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchDhcpServerPolicy", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchDhcpServerPolicyArpInspectionTrustedServers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchDscpToCosMappings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchLinkAggregations", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchMtu", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchPortSchedules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchQosRulesOrder", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchRoutingMulticast", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchRoutingMulticastRendezvousPoints", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchRoutingOspf", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacks", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacksAdd", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacksRemove", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacksRoutingInterfaces", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacksRoutingInterfacesDhcp", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStacksRoutingStaticRoutes", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStormControl", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/switchStp", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/syslogServers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/trafficAnalysis", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/unbind", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/vlanProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/vlanProfilesAssignmentsReassign", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/webhooksHttpServers", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/webhooksPayloadTemplates", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessAlternateManagementInterface", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessBilling", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessBluetoothSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessEthernetPortsProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessEthernetPortsProfilesAssign", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessEthernetPortsProfilesSetDefault", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessRfProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsids", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsBonjourForwarding", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsDeviceTypeGroupPolicies", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsEapOverride", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsFirewallL3FirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsFirewallL7FirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsHotspot20", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsIdentityPsks", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsSchedules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsSplashSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsTrafficShapingRules", _module)
pulumi.runtime.registerResourceModule("meraki", "networks/wirelessSsidsVpn", _module)
