// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.WirelessSsidsSplashSettings("example", {
 *     allowSimultaneousLogins: false,
 *     billing: {
 *         free_access: {
 *             durationInMinutes: 120,
 *             enabled: true,
 *         },
 *         prepaid_access_fast_login_enabled: true,
 *         reply_to_email_address: "user@email.com",
 *     },
 *     blockAllTrafficBeforeSignOn: false,
 *     controllerDisconnectionBehavior: "default",
 *     guestSponsorship: {
 *         duration_in_minutes: 30,
 *         guest_can_request_timeframe: false,
 *     },
 *     networkId: "string",
 *     number: "string",
 *     redirectUrl: "https://example.com",
 *     sentryEnrollment: {
 *         enforced_systems: ["iOS"],
 *         strength: "focused",
 *         systems_manager_network: {
 *             id: "N_1234",
 *         },
 *     },
 *     splashImage: {
 *         extension: "jpg",
 *         image: {
 *             contents: "Q2lzY28gTWVyYWtp",
 *             format: "jpg",
 *         },
 *         md5: "542cccac8d7dedee0f185311d154d194",
 *     },
 *     splashLogo: {
 *         extension: "jpg",
 *         image: {
 *             contents: "Q2lzY28gTWVyYWtp",
 *             format: "jpg",
 *         },
 *         md5: "abcd1234",
 *     },
 *     splashPrepaidFront: {
 *         extension: "jpg",
 *         image: {
 *             contents: "Q2lzY28gTWVyYWtp",
 *             format: "jpg",
 *         },
 *         md5: "542cccac8d7dedee0f185311d154d194",
 *     },
 *     splashTimeout: 1440,
 *     splashUrl: "https://www.custom_splash_url.com",
 *     themeId: "c3ddcb4f16785ee747ab5ffc10867d6c8ea704be",
 *     useRedirectUrl: true,
 *     useSplashUrl: true,
 *     welcomeMessage: "Welcome!",
 * });
 * export const merakiNetworksWirelessSsidsSplashSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings example "network_id,number"
 * ```
 */
export class WirelessSsidsSplashSettings extends pulumi.CustomResource {
    /**
     * Get an existing WirelessSsidsSplashSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessSsidsSplashSettingsState, opts?: pulumi.CustomResourceOptions): WirelessSsidsSplashSettings {
        return new WirelessSsidsSplashSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings';

    /**
     * Returns true if the given object is an instance of WirelessSsidsSplashSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessSsidsSplashSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessSsidsSplashSettings.__pulumiType;
    }

    /**
     * Whether or not to allow simultaneous logins from different devices.
     */
    declare public readonly allowSimultaneousLogins: pulumi.Output<boolean>;
    /**
     * Details associated with billing splash
     */
    declare public readonly billing: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsBilling>;
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     */
    declare public readonly blockAllTrafficBeforeSignOn: pulumi.Output<boolean>;
    /**
     * How login attempts should be handled when the controller is unreachable.
     */
    declare public readonly controllerDisconnectionBehavior: pulumi.Output<string>;
    /**
     * Details associated with guest sponsored splash
     */
    declare public readonly guestSponsorship: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsGuestSponsorship>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * number path parameter.
     */
    declare public readonly number: pulumi.Output<string>;
    /**
     * The custom redirect URL where the users will go after the splash page.
     */
    declare public readonly redirectUrl: pulumi.Output<string>;
    /**
     * Self-registration for splash with Meraki authentication.
     */
    declare public /*out*/ readonly selfRegistration: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsSelfRegistration>;
    /**
     * Systems Manager sentry enrollment splash settings.
     */
    declare public readonly sentryEnrollment: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsSentryEnrollment>;
    /**
     * The image used in the splash page.
     */
    declare public readonly splashImage: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsSplashImage>;
    /**
     * The logo used in the splash page.
     */
    declare public readonly splashLogo: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsSplashLogo>;
    /**
     * The type of splash page for this SSID
     */
    declare public /*out*/ readonly splashPage: pulumi.Output<string>;
    /**
     * The prepaid front image used in the splash page.
     */
    declare public readonly splashPrepaidFront: pulumi.Output<outputs.networks.WirelessSsidsSplashSettingsSplashPrepaidFront>;
    /**
     * Splash timeout in minutes.
     */
    declare public readonly splashTimeout: pulumi.Output<number>;
    /**
     * The custom splash URL of the click-through splash page.
     */
    declare public readonly splashUrl: pulumi.Output<string>;
    /**
     * SSID number
     */
    declare public /*out*/ readonly ssidNumber: pulumi.Output<number>;
    /**
     * The id of the selected splash theme.
     */
    declare public readonly themeId: pulumi.Output<string>;
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     */
    declare public readonly useRedirectUrl: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     */
    declare public readonly useSplashUrl: pulumi.Output<boolean>;
    /**
     * The welcome message for the users on the splash page.
     */
    declare public readonly welcomeMessage: pulumi.Output<string>;

    /**
     * Create a WirelessSsidsSplashSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessSsidsSplashSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessSsidsSplashSettingsArgs | WirelessSsidsSplashSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessSsidsSplashSettingsState | undefined;
            resourceInputs["allowSimultaneousLogins"] = state?.allowSimultaneousLogins;
            resourceInputs["billing"] = state?.billing;
            resourceInputs["blockAllTrafficBeforeSignOn"] = state?.blockAllTrafficBeforeSignOn;
            resourceInputs["controllerDisconnectionBehavior"] = state?.controllerDisconnectionBehavior;
            resourceInputs["guestSponsorship"] = state?.guestSponsorship;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["number"] = state?.number;
            resourceInputs["redirectUrl"] = state?.redirectUrl;
            resourceInputs["selfRegistration"] = state?.selfRegistration;
            resourceInputs["sentryEnrollment"] = state?.sentryEnrollment;
            resourceInputs["splashImage"] = state?.splashImage;
            resourceInputs["splashLogo"] = state?.splashLogo;
            resourceInputs["splashPage"] = state?.splashPage;
            resourceInputs["splashPrepaidFront"] = state?.splashPrepaidFront;
            resourceInputs["splashTimeout"] = state?.splashTimeout;
            resourceInputs["splashUrl"] = state?.splashUrl;
            resourceInputs["ssidNumber"] = state?.ssidNumber;
            resourceInputs["themeId"] = state?.themeId;
            resourceInputs["useRedirectUrl"] = state?.useRedirectUrl;
            resourceInputs["useSplashUrl"] = state?.useSplashUrl;
            resourceInputs["welcomeMessage"] = state?.welcomeMessage;
        } else {
            const args = argsOrState as WirelessSsidsSplashSettingsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.number === undefined && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["allowSimultaneousLogins"] = args?.allowSimultaneousLogins;
            resourceInputs["billing"] = args?.billing;
            resourceInputs["blockAllTrafficBeforeSignOn"] = args?.blockAllTrafficBeforeSignOn;
            resourceInputs["controllerDisconnectionBehavior"] = args?.controllerDisconnectionBehavior;
            resourceInputs["guestSponsorship"] = args?.guestSponsorship;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["number"] = args?.number;
            resourceInputs["redirectUrl"] = args?.redirectUrl;
            resourceInputs["sentryEnrollment"] = args?.sentryEnrollment;
            resourceInputs["splashImage"] = args?.splashImage;
            resourceInputs["splashLogo"] = args?.splashLogo;
            resourceInputs["splashPrepaidFront"] = args?.splashPrepaidFront;
            resourceInputs["splashTimeout"] = args?.splashTimeout;
            resourceInputs["splashUrl"] = args?.splashUrl;
            resourceInputs["themeId"] = args?.themeId;
            resourceInputs["useRedirectUrl"] = args?.useRedirectUrl;
            resourceInputs["useSplashUrl"] = args?.useSplashUrl;
            resourceInputs["welcomeMessage"] = args?.welcomeMessage;
            resourceInputs["selfRegistration"] = undefined /*out*/;
            resourceInputs["splashPage"] = undefined /*out*/;
            resourceInputs["ssidNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessSsidsSplashSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessSsidsSplashSettings resources.
 */
export interface WirelessSsidsSplashSettingsState {
    /**
     * Whether or not to allow simultaneous logins from different devices.
     */
    allowSimultaneousLogins?: pulumi.Input<boolean>;
    /**
     * Details associated with billing splash
     */
    billing?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsBilling>;
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     */
    blockAllTrafficBeforeSignOn?: pulumi.Input<boolean>;
    /**
     * How login attempts should be handled when the controller is unreachable.
     */
    controllerDisconnectionBehavior?: pulumi.Input<string>;
    /**
     * Details associated with guest sponsored splash
     */
    guestSponsorship?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsGuestSponsorship>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number?: pulumi.Input<string>;
    /**
     * The custom redirect URL where the users will go after the splash page.
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Self-registration for splash with Meraki authentication.
     */
    selfRegistration?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSelfRegistration>;
    /**
     * Systems Manager sentry enrollment splash settings.
     */
    sentryEnrollment?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSentryEnrollment>;
    /**
     * The image used in the splash page.
     */
    splashImage?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashImage>;
    /**
     * The logo used in the splash page.
     */
    splashLogo?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashLogo>;
    /**
     * The type of splash page for this SSID
     */
    splashPage?: pulumi.Input<string>;
    /**
     * The prepaid front image used in the splash page.
     */
    splashPrepaidFront?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashPrepaidFront>;
    /**
     * Splash timeout in minutes.
     */
    splashTimeout?: pulumi.Input<number>;
    /**
     * The custom splash URL of the click-through splash page.
     */
    splashUrl?: pulumi.Input<string>;
    /**
     * SSID number
     */
    ssidNumber?: pulumi.Input<number>;
    /**
     * The id of the selected splash theme.
     */
    themeId?: pulumi.Input<string>;
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     */
    useRedirectUrl?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     */
    useSplashUrl?: pulumi.Input<boolean>;
    /**
     * The welcome message for the users on the splash page.
     */
    welcomeMessage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessSsidsSplashSettings resource.
 */
export interface WirelessSsidsSplashSettingsArgs {
    /**
     * Whether or not to allow simultaneous logins from different devices.
     */
    allowSimultaneousLogins?: pulumi.Input<boolean>;
    /**
     * Details associated with billing splash
     */
    billing?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsBilling>;
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     */
    blockAllTrafficBeforeSignOn?: pulumi.Input<boolean>;
    /**
     * How login attempts should be handled when the controller is unreachable.
     */
    controllerDisconnectionBehavior?: pulumi.Input<string>;
    /**
     * Details associated with guest sponsored splash
     */
    guestSponsorship?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsGuestSponsorship>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number: pulumi.Input<string>;
    /**
     * The custom redirect URL where the users will go after the splash page.
     */
    redirectUrl?: pulumi.Input<string>;
    /**
     * Systems Manager sentry enrollment splash settings.
     */
    sentryEnrollment?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSentryEnrollment>;
    /**
     * The image used in the splash page.
     */
    splashImage?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashImage>;
    /**
     * The logo used in the splash page.
     */
    splashLogo?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashLogo>;
    /**
     * The prepaid front image used in the splash page.
     */
    splashPrepaidFront?: pulumi.Input<inputs.networks.WirelessSsidsSplashSettingsSplashPrepaidFront>;
    /**
     * Splash timeout in minutes.
     */
    splashTimeout?: pulumi.Input<number>;
    /**
     * The custom splash URL of the click-through splash page.
     */
    splashUrl?: pulumi.Input<string>;
    /**
     * The id of the selected splash theme.
     */
    themeId?: pulumi.Input<string>;
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     */
    useRedirectUrl?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     */
    useSplashUrl?: pulumi.Input<boolean>;
    /**
     * The welcome message for the users on the splash page.
     */
    welcomeMessage?: pulumi.Input<string>;
}
