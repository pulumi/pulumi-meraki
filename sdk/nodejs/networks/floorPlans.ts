// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.FloorPlans("example", {
 *     bottomLeftCorner: {
 *         lat: 37.770040510499996,
 *         lng: -122.38714009525,
 *     },
 *     bottomRightCorner: {
 *         lat: 37.770040510499996,
 *         lng: -122.38714009525,
 *     },
 *     center: {
 *         lat: 37.770040510499996,
 *         lng: -122.38714009525,
 *     },
 *     imageContents: "2a9edd3f4ffd80130c647d13eacb59f3",
 *     name: "HQ Floor Plan",
 *     networkId: "string",
 *     topLeftCorner: {
 *         lat: 37.770040510499996,
 *         lng: -122.38714009525,
 *     },
 *     topRightCorner: {
 *         lat: 37.770040510499996,
 *         lng: -122.38714009525,
 *     },
 * });
 * export const merakiNetworksFloorPlansExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/floorPlans:FloorPlans example "floor_plan_id,network_id"
 * ```
 */
export class FloorPlans extends pulumi.CustomResource {
    /**
     * Get an existing FloorPlans resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloorPlansState, opts?: pulumi.CustomResourceOptions): FloorPlans {
        return new FloorPlans(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/floorPlans:FloorPlans';

    /**
     * Returns true if the given object is an instance of FloorPlans.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FloorPlans {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FloorPlans.__pulumiType;
    }

    /**
     * The longitude and latitude of the bottom left corner of your floor plan.
     */
    public readonly bottomLeftCorner!: pulumi.Output<outputs.networks.FloorPlansBottomLeftCorner>;
    /**
     * The longitude and latitude of the bottom right corner of your floor plan.
     */
    public readonly bottomRightCorner!: pulumi.Output<outputs.networks.FloorPlansBottomRightCorner>;
    /**
     * The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
     */
    public readonly center!: pulumi.Output<outputs.networks.FloorPlansCenter>;
    /**
     * List of devices for the floorplan
     */
    public /*out*/ readonly devices!: pulumi.Output<outputs.networks.FloorPlansDevice[]>;
    /**
     * Floor plan ID
     */
    public readonly floorPlanId!: pulumi.Output<string>;
    /**
     * The height of your floor plan.
     */
    public /*out*/ readonly height!: pulumi.Output<number>;
    /**
     * The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     */
    public readonly imageContents!: pulumi.Output<string>;
    /**
     * The format type of the image.
     */
    public /*out*/ readonly imageExtension!: pulumi.Output<string>;
    /**
     * The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
     */
    public /*out*/ readonly imageMd5!: pulumi.Output<string>;
    /**
     * The url link for the floor plan image.
     */
    public /*out*/ readonly imageUrl!: pulumi.Output<string>;
    /**
     * The time the image url link will expire.
     */
    public /*out*/ readonly imageUrlExpiresAt!: pulumi.Output<string>;
    /**
     * The name of your floor plan.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The longitude and latitude of the top left corner of your floor plan.
     */
    public readonly topLeftCorner!: pulumi.Output<outputs.networks.FloorPlansTopLeftCorner>;
    /**
     * The longitude and latitude of the top right corner of your floor plan.
     */
    public readonly topRightCorner!: pulumi.Output<outputs.networks.FloorPlansTopRightCorner>;
    /**
     * The width of your floor plan.
     */
    public /*out*/ readonly width!: pulumi.Output<number>;

    /**
     * Create a FloorPlans resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FloorPlansArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloorPlansArgs | FloorPlansState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloorPlansState | undefined;
            resourceInputs["bottomLeftCorner"] = state ? state.bottomLeftCorner : undefined;
            resourceInputs["bottomRightCorner"] = state ? state.bottomRightCorner : undefined;
            resourceInputs["center"] = state ? state.center : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["floorPlanId"] = state ? state.floorPlanId : undefined;
            resourceInputs["height"] = state ? state.height : undefined;
            resourceInputs["imageContents"] = state ? state.imageContents : undefined;
            resourceInputs["imageExtension"] = state ? state.imageExtension : undefined;
            resourceInputs["imageMd5"] = state ? state.imageMd5 : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["imageUrlExpiresAt"] = state ? state.imageUrlExpiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["topLeftCorner"] = state ? state.topLeftCorner : undefined;
            resourceInputs["topRightCorner"] = state ? state.topRightCorner : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as FloorPlansArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["bottomLeftCorner"] = args ? args.bottomLeftCorner : undefined;
            resourceInputs["bottomRightCorner"] = args ? args.bottomRightCorner : undefined;
            resourceInputs["center"] = args ? args.center : undefined;
            resourceInputs["floorPlanId"] = args ? args.floorPlanId : undefined;
            resourceInputs["imageContents"] = args ? args.imageContents : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["topLeftCorner"] = args ? args.topLeftCorner : undefined;
            resourceInputs["topRightCorner"] = args ? args.topRightCorner : undefined;
            resourceInputs["devices"] = undefined /*out*/;
            resourceInputs["height"] = undefined /*out*/;
            resourceInputs["imageExtension"] = undefined /*out*/;
            resourceInputs["imageMd5"] = undefined /*out*/;
            resourceInputs["imageUrl"] = undefined /*out*/;
            resourceInputs["imageUrlExpiresAt"] = undefined /*out*/;
            resourceInputs["width"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FloorPlans.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FloorPlans resources.
 */
export interface FloorPlansState {
    /**
     * The longitude and latitude of the bottom left corner of your floor plan.
     */
    bottomLeftCorner?: pulumi.Input<inputs.networks.FloorPlansBottomLeftCorner>;
    /**
     * The longitude and latitude of the bottom right corner of your floor plan.
     */
    bottomRightCorner?: pulumi.Input<inputs.networks.FloorPlansBottomRightCorner>;
    /**
     * The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
     */
    center?: pulumi.Input<inputs.networks.FloorPlansCenter>;
    /**
     * List of devices for the floorplan
     */
    devices?: pulumi.Input<pulumi.Input<inputs.networks.FloorPlansDevice>[]>;
    /**
     * Floor plan ID
     */
    floorPlanId?: pulumi.Input<string>;
    /**
     * The height of your floor plan.
     */
    height?: pulumi.Input<number>;
    /**
     * The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     */
    imageContents?: pulumi.Input<string>;
    /**
     * The format type of the image.
     */
    imageExtension?: pulumi.Input<string>;
    /**
     * The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
     */
    imageMd5?: pulumi.Input<string>;
    /**
     * The url link for the floor plan image.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * The time the image url link will expire.
     */
    imageUrlExpiresAt?: pulumi.Input<string>;
    /**
     * The name of your floor plan.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The longitude and latitude of the top left corner of your floor plan.
     */
    topLeftCorner?: pulumi.Input<inputs.networks.FloorPlansTopLeftCorner>;
    /**
     * The longitude and latitude of the top right corner of your floor plan.
     */
    topRightCorner?: pulumi.Input<inputs.networks.FloorPlansTopRightCorner>;
    /**
     * The width of your floor plan.
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FloorPlans resource.
 */
export interface FloorPlansArgs {
    /**
     * The longitude and latitude of the bottom left corner of your floor plan.
     */
    bottomLeftCorner?: pulumi.Input<inputs.networks.FloorPlansBottomLeftCorner>;
    /**
     * The longitude and latitude of the bottom right corner of your floor plan.
     */
    bottomRightCorner?: pulumi.Input<inputs.networks.FloorPlansBottomRightCorner>;
    /**
     * The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
     */
    center?: pulumi.Input<inputs.networks.FloorPlansCenter>;
    /**
     * Floor plan ID
     */
    floorPlanId?: pulumi.Input<string>;
    /**
     * The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     */
    imageContents?: pulumi.Input<string>;
    /**
     * The name of your floor plan.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The longitude and latitude of the top left corner of your floor plan.
     */
    topLeftCorner?: pulumi.Input<inputs.networks.FloorPlansTopLeftCorner>;
    /**
     * The longitude and latitude of the top right corner of your floor plan.
     */
    topRightCorner?: pulumi.Input<inputs.networks.FloorPlansTopRightCorner>;
}
