// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessSettings:WirelessSettings example "network_id"
 * ```
 */
export class WirelessSettings extends pulumi.CustomResource {
    /**
     * Get an existing WirelessSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessSettingsState, opts?: pulumi.CustomResourceOptions): WirelessSettings {
        return new WirelessSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessSettings:WirelessSettings';

    /**
     * Returns true if the given object is an instance of WirelessSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessSettings.__pulumiType;
    }

    /**
     * Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     */
    public readonly ipv6BridgeEnabled!: pulumi.Output<boolean>;
    /**
     * Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     */
    public readonly ledLightsOn!: pulumi.Output<boolean>;
    /**
     * Toggle for enabling or disabling location analytics for your network
     */
    public readonly locationAnalyticsEnabled!: pulumi.Output<boolean>;
    /**
     * Toggle for enabling or disabling meshing in a network
     */
    public readonly meshingEnabled!: pulumi.Output<boolean>;
    /**
     * Named VLAN settings for wireless networks.
     */
    public readonly namedVlans!: pulumi.Output<outputs.networks.WirelessSettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Regulatory domain information for this network.
     */
    public /*out*/ readonly regulatoryDomain!: pulumi.Output<outputs.networks.WirelessSettingsRegulatoryDomain>;
    /**
     * The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
     */
    public readonly upgradestrategy!: pulumi.Output<string>;

    /**
     * Create a WirelessSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessSettingsArgs | WirelessSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessSettingsState | undefined;
            resourceInputs["ipv6BridgeEnabled"] = state ? state.ipv6BridgeEnabled : undefined;
            resourceInputs["ledLightsOn"] = state ? state.ledLightsOn : undefined;
            resourceInputs["locationAnalyticsEnabled"] = state ? state.locationAnalyticsEnabled : undefined;
            resourceInputs["meshingEnabled"] = state ? state.meshingEnabled : undefined;
            resourceInputs["namedVlans"] = state ? state.namedVlans : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["regulatoryDomain"] = state ? state.regulatoryDomain : undefined;
            resourceInputs["upgradestrategy"] = state ? state.upgradestrategy : undefined;
        } else {
            const args = argsOrState as WirelessSettingsArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["ipv6BridgeEnabled"] = args ? args.ipv6BridgeEnabled : undefined;
            resourceInputs["ledLightsOn"] = args ? args.ledLightsOn : undefined;
            resourceInputs["locationAnalyticsEnabled"] = args ? args.locationAnalyticsEnabled : undefined;
            resourceInputs["meshingEnabled"] = args ? args.meshingEnabled : undefined;
            resourceInputs["namedVlans"] = args ? args.namedVlans : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["upgradestrategy"] = args ? args.upgradestrategy : undefined;
            resourceInputs["regulatoryDomain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessSettings resources.
 */
export interface WirelessSettingsState {
    /**
     * Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     */
    ipv6BridgeEnabled?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     */
    ledLightsOn?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling location analytics for your network
     */
    locationAnalyticsEnabled?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling meshing in a network
     */
    meshingEnabled?: pulumi.Input<boolean>;
    /**
     * Named VLAN settings for wireless networks.
     */
    namedVlans?: pulumi.Input<inputs.networks.WirelessSettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Regulatory domain information for this network.
     */
    regulatoryDomain?: pulumi.Input<inputs.networks.WirelessSettingsRegulatoryDomain>;
    /**
     * The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
     */
    upgradestrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessSettings resource.
 */
export interface WirelessSettingsArgs {
    /**
     * Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     */
    ipv6BridgeEnabled?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     */
    ledLightsOn?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling location analytics for your network
     */
    locationAnalyticsEnabled?: pulumi.Input<boolean>;
    /**
     * Toggle for enabling or disabling meshing in a network
     */
    meshingEnabled?: pulumi.Input<boolean>;
    /**
     * Named VLAN settings for wireless networks.
     */
    namedVlans?: pulumi.Input<inputs.networks.WirelessSettingsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
     */
    upgradestrategy?: pulumi.Input<string>;
}
