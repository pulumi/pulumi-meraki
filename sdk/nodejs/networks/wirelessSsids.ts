// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.WirelessSsids("example", {
 *     activeDirectory: {
 *         credentials: {
 *             logonName: "user",
 *             password: "password",
 *         },
 *         servers: [{
 *             host: "127.0.0.1",
 *             port: 3268,
 *         }],
 *     },
 *     adultContentFilteringEnabled: false,
 *     apTagsAndVlanIds: [{
 *         tags: [
 *             "tag1",
 *             "tag2",
 *         ],
 *         vlan_id: 100,
 *     }],
 *     authMode: "8021x-radius",
 *     availabilityTags: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     availableOnAllAps: false,
 *     bandSelection: "5 GHz band only",
 *     concentratorNetworkId: "N_24329156",
 *     defaultVlanId: 1,
 *     disassociateClientsOnVpnFailover: false,
 *     dnsRewrite: {
 *         dns_custom_nameservers: [
 *             "8.8.8.8",
 *             "8.8.4.4",
 *         ],
 *         enabled: true,
 *     },
 *     dot11r: {
 *         adaptive: true,
 *         enabled: true,
 *     },
 *     dot11w: {
 *         enabled: true,
 *         required: false,
 *     },
 *     enabled: true,
 *     encryptionMode: "wpa",
 *     enterpriseAdminAccess: "access enabled",
 *     gre: {
 *         concentrator: {
 *             host: "192.168.1.1",
 *         },
 *         key: 5,
 *     },
 *     ipAssignmentMode: "NAT mode",
 *     lanIsolationEnabled: true,
 *     ldap: {
 *         base_distinguished_name: "dc=example,dc=com",
 *         credentials: {
 *             distinguishedName: "cn=user,dc=example,dc=com",
 *             password: "password",
 *         },
 *         server_ca_certificate: {
 *             contents: `          "-----BEGIN CERTIFICATE-----
 *         MIIDyTCCArGgAwIBAgIKBBNXOVCGU1YztjANBgkqhkiG9w0BAQsFADAnMQ4wDAYD
 *         VQQKEwVDaXNjbzEVMBMGA1UEAxMMQUNUMiBTVURJIENBMB4XDTIxMDUzMTEzNTUx
 *         NVoXDTI5MDUxNDIwMjU0MVowbTEpMCcGA1UEBRMgUElEOkM5MjAwTC0yNFAtNEcg
 *         U046SkFFMjUyMjBSMksxDjAMBgNVBAoTBUNpc2NvMRgwFgYDVQQLEw9BQ1QtMiBM
 *         aXRlIFNVREkxFjAUBgNVBAMTDUM5MjAwTC0yNFAtNEcwggEiMA0GCSqGSIb3DQEB
 *         AQUAA4IBDwAwggEKAoIBAQDaUPxW76gT5MdoEAt+UrDFiYA9RYh2iHicDViBEyow
 *         TR1TuP36bHh13X3vtGiDsCD88Ci2TZIqd/EDkkc7v9ipUUYVVH+YDrPt2Aukb1PH
 *         D6K0R+KhgEzRo5x54TlU6oWvjUpwNZUwwdhMWIQaUVkMyZBYNy0jGPLO8jwZhyBg
 *         1Fneybr9pwedGbLrAaz+gdEikB8B4a/fvPjVfL5Ngb4QRjFqWuE+X3nLc0kHedep
 *         6nfgpUNXMlStVm5nIXKP6OjmzfCHPYh9L2Ehs1TrSk1ser9Ofx0ZMVL/jBZR2EIj
 *         OZ8tH6KlX2/B2pbSPIO6kD5c4UA8Cf1SbDJCwJ/kI9ihAgMBAAGjgbAwga0wDgYD
 *         VR0PAQH/BAQDAgXgMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUSNjx8cJw1Vu7
 *         fHMJk6+4uDAD+H8wTQYDVR0RBEYwRKBCBgkrBgEEAQkVAgOgNRMzQ2hpcElEPVVV
 *         VUNNaElGcUVFMklFUUVBQWNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9MB0GA1Ud
 *         DgQWBBRdhMkFD/z5hokaQeLbaRsp4hkvbzANBgkqhkiG9w0BAQsFAAOCAQEAMtuh
 *         YpBz4xEZ7YdJsLpw67Q0TTJGnTBRpzAeY1urYDoDz8TSx556XG7z3IRzuED5KVSp
 *         OwmH/iZ+tDfYQ3W3ElWTW93871DkuW4WQIfbnoHg/F7bF0DKYVkD3rpZjyz3NhzH
 *         d7cjTdJXQ85bTAOXDuxKH3qewrXxxOGXgh3I6NUq0UwMTWh84lND7Jl+ZAQkYNS2
 *         iHanTZFQBk3ML0NUb7fKDYGRTZRqwQ/upIO4S6LV1cxH/6V0qbMy3sCSHZoMLrW3
 *         0m3M6yKpe5+VZzHZwmWdUf3Ot+zKjhveK5/YNsMIASdvtvymxUizq2Hr1hvR/kPc
 *         p1vuyWxipU8JfzOh/A==
 *         -----END CERTIFICATE-----
 *         "
 * `,
 *         },
 *         servers: [{
 *             host: "127.0.0.1",
 *             port: 389,
 *         }],
 *     },
 *     localRadius: {
 *         cache_timeout: 60,
 *         certificate_authentication: {
 *             clientRootCaCertificate: {
 *                 contents: `          "-----BEGIN CERTIFICATE-----
 *         MIIDyTCCArGgAwIBAgIKBBNXOVCGU1YztjANBgkqhkiG9w0BAQsFADAnMQ4wDAYD
 *         VQQKEwVDaXNjbzEVMBMGA1UEAxMMQUNUMiBTVURJIENBMB4XDTIxMDUzMTEzNTUx
 *         NVoXDTI5MDUxNDIwMjU0MVowbTEpMCcGA1UEBRMgUElEOkM5MjAwTC0yNFAtNEcg
 *         U046SkFFMjUyMjBSMksxDjAMBgNVBAoTBUNpc2NvMRgwFgYDVQQLEw9BQ1QtMiBM
 *         aXRlIFNVREkxFjAUBgNVBAMTDUM5MjAwTC0yNFAtNEcwggEiMA0GCSqGSIb3DQEB
 *         AQUAA4IBDwAwggEKAoIBAQDaUPxW76gT5MdoEAt+UrDFiYA9RYh2iHicDViBEyow
 *         TR1TuP36bHh13X3vtGiDsCD88Ci2TZIqd/EDkkc7v9ipUUYVVH+YDrPt2Aukb1PH
 *         D6K0R+KhgEzRo5x54TlU6oWvjUpwNZUwwdhMWIQaUVkMyZBYNy0jGPLO8jwZhyBg
 *         1Fneybr9pwedGbLrAaz+gdEikB8B4a/fvPjVfL5Ngb4QRjFqWuE+X3nLc0kHedep
 *         6nfgpUNXMlStVm5nIXKP6OjmzfCHPYh9L2Ehs1TrSk1ser9Ofx0ZMVL/jBZR2EIj
 *         OZ8tH6KlX2/B2pbSPIO6kD5c4UA8Cf1SbDJCwJ/kI9ihAgMBAAGjgbAwga0wDgYD
 *         VR0PAQH/BAQDAgXgMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUSNjx8cJw1Vu7
 *         fHMJk6+4uDAD+H8wTQYDVR0RBEYwRKBCBgkrBgEEAQkVAgOgNRMzQ2hpcElEPVVV
 *         VUNNaElGcUVFMklFUUVBQWNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9MB0GA1Ud
 *         DgQWBBRdhMkFD/z5hokaQeLbaRsp4hkvbzANBgkqhkiG9w0BAQsFAAOCAQEAMtuh
 *         YpBz4xEZ7YdJsLpw67Q0TTJGnTBRpzAeY1urYDoDz8TSx556XG7z3IRzuED5KVSp
 *         OwmH/iZ+tDfYQ3W3ElWTW93871DkuW4WQIfbnoHg/F7bF0DKYVkD3rpZjyz3NhzH
 *         d7cjTdJXQ85bTAOXDuxKH3qewrXxxOGXgh3I6NUq0UwMTWh84lND7Jl+ZAQkYNS2
 *         iHanTZFQBk3ML0NUb7fKDYGRTZRqwQ/upIO4S6LV1cxH/6V0qbMy3sCSHZoMLrW3
 *         0m3M6yKpe5+VZzHZwmWdUf3Ot+zKjhveK5/YNsMIASdvtvymxUizq2Hr1hvR/kPc
 *         p1vuyWxipU8JfzOh/A==
 *         -----END CERTIFICATE-----
 *         "
 * `,
 *             },
 *             enabled: true,
 *             ocspResponderUrl: "http://ocsp-server.example.com",
 *             useLdap: false,
 *             useOcsp: true,
 *         },
 *         password_authentication: {
 *             enabled: false,
 *         },
 *     },
 *     mandatoryDhcpEnabled: false,
 *     minBitrate: 5.5,
 *     name: "My SSID",
 *     namedVlans: {
 *         radius: {
 *             guestVlan: {
 *                 enabled: true,
 *                 name: "Guest VLAN",
 *             },
 *         },
 *         tagging: {
 *             byApTags: [{
 *                 tags: [
 *                     "tag1",
 *                     "tag2",
 *                 ],
 *                 vlanName: "My VLAN",
 *             }],
 *             defaultVlanName: "My VLAN",
 *             enabled: true,
 *         },
 *     },
 *     networkId: "string",
 *     number: "string",
 *     oauth: {
 *         allowed_domains: ["example.com"],
 *     },
 *     perClientBandwidthLimitDown: 1,
 *     perClientBandwidthLimitUp: 1,
 *     perSsidBandwidthLimitDown: 1,
 *     perSsidBandwidthLimitUp: 1,
 *     psk: "deadbeef",
 *     radiusAccountingEnabled: true,
 *     radiusAccountingInterimInterval: 5,
 *     radiusAccountingServers: [{
 *         ca_certificate: `          "-----BEGIN CERTIFICATE-----
 *         MIIDyTCCArGgAwIBAgIKBBNXOVCGU1YztjANBgkqhkiG9w0BAQsFADAnMQ4wDAYD
 *         VQQKEwVDaXNjbzEVMBMGA1UEAxMMQUNUMiBTVURJIENBMB4XDTIxMDUzMTEzNTUx
 *         NVoXDTI5MDUxNDIwMjU0MVowbTEpMCcGA1UEBRMgUElEOkM5MjAwTC0yNFAtNEcg
 *         U046SkFFMjUyMjBSMksxDjAMBgNVBAoTBUNpc2NvMRgwFgYDVQQLEw9BQ1QtMiBM
 *         aXRlIFNVREkxFjAUBgNVBAMTDUM5MjAwTC0yNFAtNEcwggEiMA0GCSqGSIb3DQEB
 *         AQUAA4IBDwAwggEKAoIBAQDaUPxW76gT5MdoEAt+UrDFiYA9RYh2iHicDViBEyow
 *         TR1TuP36bHh13X3vtGiDsCD88Ci2TZIqd/EDkkc7v9ipUUYVVH+YDrPt2Aukb1PH
 *         D6K0R+KhgEzRo5x54TlU6oWvjUpwNZUwwdhMWIQaUVkMyZBYNy0jGPLO8jwZhyBg
 *         1Fneybr9pwedGbLrAaz+gdEikB8B4a/fvPjVfL5Ngb4QRjFqWuE+X3nLc0kHedep
 *         6nfgpUNXMlStVm5nIXKP6OjmzfCHPYh9L2Ehs1TrSk1ser9Ofx0ZMVL/jBZR2EIj
 *         OZ8tH6KlX2/B2pbSPIO6kD5c4UA8Cf1SbDJCwJ/kI9ihAgMBAAGjgbAwga0wDgYD
 *         VR0PAQH/BAQDAgXgMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUSNjx8cJw1Vu7
 *         fHMJk6+4uDAD+H8wTQYDVR0RBEYwRKBCBgkrBgEEAQkVAgOgNRMzQ2hpcElEPVVV
 *         VUNNaElGcUVFMklFUUVBQWNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9MB0GA1Ud
 *         DgQWBBRdhMkFD/z5hokaQeLbaRsp4hkvbzANBgkqhkiG9w0BAQsFAAOCAQEAMtuh
 *         YpBz4xEZ7YdJsLpw67Q0TTJGnTBRpzAeY1urYDoDz8TSx556XG7z3IRzuED5KVSp
 *         OwmH/iZ+tDfYQ3W3ElWTW93871DkuW4WQIfbnoHg/F7bF0DKYVkD3rpZjyz3NhzH
 *         d7cjTdJXQ85bTAOXDuxKH3qewrXxxOGXgh3I6NUq0UwMTWh84lND7Jl+ZAQkYNS2
 *         iHanTZFQBk3ML0NUb7fKDYGRTZRqwQ/upIO4S6LV1cxH/6V0qbMy3sCSHZoMLrW3
 *         0m3M6yKpe5+VZzHZwmWdUf3Ot+zKjhveK5/YNsMIASdvtvymxUizq2Hr1hvR/kPc
 *         p1vuyWxipU8JfzOh/A==
 *         -----END CERTIFICATE-----
 *         "
 * `,
 *         host: "0.0.0.0",
 *         port: 3000,
 *         radsec_enabled: true,
 *         secret: "secret-string",
 *     }],
 *     radiusAttributeForGroupPolicies: "Filter-Id",
 *     radiusAuthenticationNasId: "00-11-22-33-44-55:AP1",
 *     radiusCalledStationId: "00-11-22-33-44-55:AP1",
 *     radiusCoaEnabled: true,
 *     radiusFailoverPolicy: "Deny access",
 *     radiusFallbackEnabled: true,
 *     radiusGuestVlanEnabled: true,
 *     radiusGuestVlanId: 1,
 *     radiusLoadBalancingPolicy: "Round robin",
 *     radiusOverride: false,
 *     radiusProxyEnabled: false,
 *     radiusServerAttemptsLimit: 5,
 *     radiusServerTimeout: 5,
 *     radiusServers: [{
 *         ca_certificate: `          "-----BEGIN CERTIFICATE-----
 *         MIIDyTCCArGgAwIBAgIKBBNXOVCGU1YztjANBgkqhkiG9w0BAQsFADAnMQ4wDAYD
 *         VQQKEwVDaXNjbzEVMBMGA1UEAxMMQUNUMiBTVURJIENBMB4XDTIxMDUzMTEzNTUx
 *         NVoXDTI5MDUxNDIwMjU0MVowbTEpMCcGA1UEBRMgUElEOkM5MjAwTC0yNFAtNEcg
 *         U046SkFFMjUyMjBSMksxDjAMBgNVBAoTBUNpc2NvMRgwFgYDVQQLEw9BQ1QtMiBM
 *         aXRlIFNVREkxFjAUBgNVBAMTDUM5MjAwTC0yNFAtNEcwggEiMA0GCSqGSIb3DQEB
 *         AQUAA4IBDwAwggEKAoIBAQDaUPxW76gT5MdoEAt+UrDFiYA9RYh2iHicDViBEyow
 *         TR1TuP36bHh13X3vtGiDsCD88Ci2TZIqd/EDkkc7v9ipUUYVVH+YDrPt2Aukb1PH
 *         D6K0R+KhgEzRo5x54TlU6oWvjUpwNZUwwdhMWIQaUVkMyZBYNy0jGPLO8jwZhyBg
 *         1Fneybr9pwedGbLrAaz+gdEikB8B4a/fvPjVfL5Ngb4QRjFqWuE+X3nLc0kHedep
 *         6nfgpUNXMlStVm5nIXKP6OjmzfCHPYh9L2Ehs1TrSk1ser9Ofx0ZMVL/jBZR2EIj
 *         OZ8tH6KlX2/B2pbSPIO6kD5c4UA8Cf1SbDJCwJ/kI9ihAgMBAAGjgbAwga0wDgYD
 *         VR0PAQH/BAQDAgXgMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUSNjx8cJw1Vu7
 *         fHMJk6+4uDAD+H8wTQYDVR0RBEYwRKBCBgkrBgEEAQkVAgOgNRMzQ2hpcElEPVVV
 *         VUNNaElGcUVFMklFUUVBQWNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9MB0GA1Ud
 *         DgQWBBRdhMkFD/z5hokaQeLbaRsp4hkvbzANBgkqhkiG9w0BAQsFAAOCAQEAMtuh
 *         YpBz4xEZ7YdJsLpw67Q0TTJGnTBRpzAeY1urYDoDz8TSx556XG7z3IRzuED5KVSp
 *         OwmH/iZ+tDfYQ3W3ElWTW93871DkuW4WQIfbnoHg/F7bF0DKYVkD3rpZjyz3NhzH
 *         d7cjTdJXQ85bTAOXDuxKH3qewrXxxOGXgh3I6NUq0UwMTWh84lND7Jl+ZAQkYNS2
 *         iHanTZFQBk3ML0NUb7fKDYGRTZRqwQ/upIO4S6LV1cxH/6V0qbMy3sCSHZoMLrW3
 *         0m3M6yKpe5+VZzHZwmWdUf3Ot+zKjhveK5/YNsMIASdvtvymxUizq2Hr1hvR/kPc
 *         p1vuyWxipU8JfzOh/A==
 *         -----END CERTIFICATE-----
 *         "
 * `,
 *         host: "0.0.0.0",
 *         open_roaming_certificate_id: 2,
 *         port: 3000,
 *         radsec_enabled: true,
 *         secret: "secret-string",
 *     }],
 *     radiusTestingEnabled: true,
 *     secondaryConcentratorNetworkId: "disabled",
 *     speedBurst: {
 *         enabled: true,
 *     },
 *     splashGuestSponsorDomains: ["example.com"],
 *     splashPage: "Click-through splash page",
 *     useVlanTagging: false,
 *     visible: true,
 *     vlanId: 10,
 *     walledGardenEnabled: true,
 *     walledGardenRanges: [
 *         "example.com",
 *         "1.1.1.1/32",
 *     ],
 *     wpaEncryptionMode: "WPA2 only",
 * });
 * export const merakiNetworksWirelessSsidsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessSsids:WirelessSsids example "network_id,number"
 * ```
 */
export class WirelessSsids extends pulumi.CustomResource {
    /**
     * Get an existing WirelessSsids resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessSsidsState, opts?: pulumi.CustomResourceOptions): WirelessSsids {
        return new WirelessSsids(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessSsids:WirelessSsids';

    /**
     * Returns true if the given object is an instance of WirelessSsids.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessSsids {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessSsids.__pulumiType;
    }

    /**
     * The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
     */
    declare public readonly activeDirectory: pulumi.Output<outputs.networks.WirelessSsidsActiveDirectory | undefined>;
    declare public /*out*/ readonly adminSplashUrl: pulumi.Output<string>;
    /**
     * Boolean indicating whether or not adult content will be blocked
     */
    declare public readonly adultContentFilteringEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    declare public readonly apTagsAndVlanIds: pulumi.Output<outputs.networks.WirelessSsidsApTagsAndVlanId[] | undefined>;
    /**
     * The association control method for the SSID
     */
    declare public readonly authMode: pulumi.Output<string>;
    /**
     * List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
     */
    declare public readonly availabilityTags: pulumi.Output<string[] | undefined>;
    /**
     * Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
     */
    declare public readonly availableOnAllAps: pulumi.Output<boolean>;
    /**
     * The client-serving radio frequencies of this SSID in the default indoor RF profile
     */
    declare public readonly bandSelection: pulumi.Output<string>;
    /**
     * The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
     */
    declare public readonly concentratorNetworkId: pulumi.Output<string | undefined>;
    /**
     * The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    declare public readonly defaultVlanId: pulumi.Output<number | undefined>;
    /**
     * Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
     */
    declare public readonly disassociateClientsOnVpnFailover: pulumi.Output<boolean | undefined>;
    /**
     * DNS servers rewrite settings
     */
    declare public readonly dnsRewrite: pulumi.Output<outputs.networks.WirelessSsidsDnsRewrite | undefined>;
    /**
     * The current setting for 802.11r
     */
    declare public readonly dot11r: pulumi.Output<outputs.networks.WirelessSsidsDot11r | undefined>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    declare public readonly dot11w: pulumi.Output<outputs.networks.WirelessSsidsDot11w | undefined>;
    /**
     * Whether or not the SSID is enabled
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The psk encryption mode for the SSID
     */
    declare public readonly encryptionMode: pulumi.Output<string>;
    /**
     * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
     */
    declare public readonly enterpriseAdminAccess: pulumi.Output<string | undefined>;
    /**
     * Ethernet over GRE settings
     */
    declare public readonly gre: pulumi.Output<outputs.networks.WirelessSsidsGre | undefined>;
    /**
     * The client IP assignment mode
     */
    declare public readonly ipAssignmentMode: pulumi.Output<string>;
    /**
     * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
     */
    declare public readonly lanIsolationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
     */
    declare public readonly ldap: pulumi.Output<outputs.networks.WirelessSsidsLdap | undefined>;
    /**
     * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
     */
    declare public readonly localRadius: pulumi.Output<outputs.networks.WirelessSsidsLocalRadius | undefined>;
    /**
     * Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
     */
    declare public readonly mandatoryDhcpEnabled: pulumi.Output<boolean>;
    /**
     * The minimum bitrate in Mbps of this SSID in the default indoor RF profile
     */
    declare public readonly minBitrate: pulumi.Output<number>;
    /**
     * The name of the SSID
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Named VLAN settings.
     */
    declare public readonly namedVlans: pulumi.Output<outputs.networks.WirelessSsidsNamedVlans | undefined>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Unique identifier of the SSID
     */
    declare public readonly number: pulumi.Output<number>;
    /**
     * The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
     */
    declare public readonly oauth: pulumi.Output<outputs.networks.WirelessSsidsOauth | undefined>;
    /**
     * The download bandwidth limit in Kbps. (0 represents no limit.)
     */
    declare public readonly perClientBandwidthLimitDown: pulumi.Output<number>;
    /**
     * The upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    declare public readonly perClientBandwidthLimitUp: pulumi.Output<number>;
    /**
     * The total download bandwidth limit in Kbps (0 represents no limit)
     */
    declare public readonly perSsidBandwidthLimitDown: pulumi.Output<number>;
    /**
     * The total upload bandwidth limit in Kbps (0 represents no limit)
     */
    declare public readonly perSsidBandwidthLimitUp: pulumi.Output<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'
     */
    declare public readonly psk: pulumi.Output<string | undefined>;
    /**
     * Whether or not RADIUS accounting is enabled
     */
    declare public readonly radiusAccountingEnabled: pulumi.Output<boolean>;
    /**
     * The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
     */
    declare public readonly radiusAccountingInterimInterval: pulumi.Output<number | undefined>;
    /**
     * List of RADIUS accounting 802.1X servers to be used for authentication
     */
    declare public readonly radiusAccountingServers: pulumi.Output<outputs.networks.WirelessSsidsRadiusAccountingServer[] | undefined>;
    /**
     * List of RADIUS accounting 802.1X servers to be used for authentication
     */
    declare public /*out*/ readonly radiusAccountingServersResponses: pulumi.Output<outputs.networks.WirelessSsidsRadiusAccountingServersResponse[]>;
    /**
     * RADIUS attribute used to look up group policies
     */
    declare public readonly radiusAttributeForGroupPolicies: pulumi.Output<string>;
    /**
     * The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
     */
    declare public readonly radiusAuthenticationNasId: pulumi.Output<string | undefined>;
    /**
     * The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
     */
    declare public readonly radiusCalledStationId: pulumi.Output<string | undefined>;
    /**
     * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
     */
    declare public readonly radiusCoaEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
     */
    declare public readonly radiusFailoverPolicy: pulumi.Output<string>;
    /**
     * Whether or not higher priority RADIUS servers should be retried after 60 seconds.
     */
    declare public readonly radiusFallbackEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    declare public readonly radiusGuestVlanEnabled: pulumi.Output<boolean | undefined>;
    /**
     * VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    declare public readonly radiusGuestVlanId: pulumi.Output<number | undefined>;
    /**
     * Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
     */
    declare public readonly radiusLoadBalancingPolicy: pulumi.Output<string>;
    /**
     * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
     */
    declare public readonly radiusOverride: pulumi.Output<boolean | undefined>;
    /**
     * If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
     */
    declare public readonly radiusProxyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
     */
    declare public readonly radiusServerAttemptsLimit: pulumi.Output<number | undefined>;
    /**
     * The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
     */
    declare public readonly radiusServerTimeout: pulumi.Output<number | undefined>;
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    declare public readonly radiusServers: pulumi.Output<outputs.networks.WirelessSsidsRadiusServer[] | undefined>;
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    declare public /*out*/ readonly radiusServersResponses: pulumi.Output<outputs.networks.WirelessSsidsRadiusServersResponse[]>;
    /**
     * If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
     */
    declare public readonly radiusTestingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
     */
    declare public readonly secondaryConcentratorNetworkId: pulumi.Output<string | undefined>;
    /**
     * The SpeedBurst setting for this SSID'
     */
    declare public readonly speedBurst: pulumi.Output<outputs.networks.WirelessSsidsSpeedBurst | undefined>;
    /**
     * Array of valid sponsor email domains for sponsored guest splash type.
     */
    declare public readonly splashGuestSponsorDomains: pulumi.Output<string[] | undefined>;
    /**
     * The type of splash page for the SSID
     */
    declare public readonly splashPage: pulumi.Output<string>;
    /**
     * Splash page timeout
     */
    declare public /*out*/ readonly splashTimeout: pulumi.Output<string>;
    /**
     * SSID Administrator access status
     */
    declare public /*out*/ readonly ssidAdminAccessible: pulumi.Output<boolean>;
    /**
     * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    declare public readonly useVlanTagging: pulumi.Output<boolean | undefined>;
    /**
     * Whether the SSID is advertised or hidden by the AP
     */
    declare public readonly visible: pulumi.Output<boolean>;
    /**
     * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
     */
    declare public readonly vlanId: pulumi.Output<number | undefined>;
    /**
     * Allow users to access a configurable list of IP ranges prior to sign-on
     */
    declare public readonly walledGardenEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Domain names and IP address ranges available in Walled Garden mode
     */
    declare public readonly walledGardenRanges: pulumi.Output<string[] | undefined>;
    /**
     * The types of WPA encryption
     */
    declare public readonly wpaEncryptionMode: pulumi.Output<string>;

    /**
     * Create a WirelessSsids resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessSsidsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessSsidsArgs | WirelessSsidsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessSsidsState | undefined;
            resourceInputs["activeDirectory"] = state?.activeDirectory;
            resourceInputs["adminSplashUrl"] = state?.adminSplashUrl;
            resourceInputs["adultContentFilteringEnabled"] = state?.adultContentFilteringEnabled;
            resourceInputs["apTagsAndVlanIds"] = state?.apTagsAndVlanIds;
            resourceInputs["authMode"] = state?.authMode;
            resourceInputs["availabilityTags"] = state?.availabilityTags;
            resourceInputs["availableOnAllAps"] = state?.availableOnAllAps;
            resourceInputs["bandSelection"] = state?.bandSelection;
            resourceInputs["concentratorNetworkId"] = state?.concentratorNetworkId;
            resourceInputs["defaultVlanId"] = state?.defaultVlanId;
            resourceInputs["disassociateClientsOnVpnFailover"] = state?.disassociateClientsOnVpnFailover;
            resourceInputs["dnsRewrite"] = state?.dnsRewrite;
            resourceInputs["dot11r"] = state?.dot11r;
            resourceInputs["dot11w"] = state?.dot11w;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["encryptionMode"] = state?.encryptionMode;
            resourceInputs["enterpriseAdminAccess"] = state?.enterpriseAdminAccess;
            resourceInputs["gre"] = state?.gre;
            resourceInputs["ipAssignmentMode"] = state?.ipAssignmentMode;
            resourceInputs["lanIsolationEnabled"] = state?.lanIsolationEnabled;
            resourceInputs["ldap"] = state?.ldap;
            resourceInputs["localRadius"] = state?.localRadius;
            resourceInputs["mandatoryDhcpEnabled"] = state?.mandatoryDhcpEnabled;
            resourceInputs["minBitrate"] = state?.minBitrate;
            resourceInputs["name"] = state?.name;
            resourceInputs["namedVlans"] = state?.namedVlans;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["number"] = state?.number;
            resourceInputs["oauth"] = state?.oauth;
            resourceInputs["perClientBandwidthLimitDown"] = state?.perClientBandwidthLimitDown;
            resourceInputs["perClientBandwidthLimitUp"] = state?.perClientBandwidthLimitUp;
            resourceInputs["perSsidBandwidthLimitDown"] = state?.perSsidBandwidthLimitDown;
            resourceInputs["perSsidBandwidthLimitUp"] = state?.perSsidBandwidthLimitUp;
            resourceInputs["psk"] = state?.psk;
            resourceInputs["radiusAccountingEnabled"] = state?.radiusAccountingEnabled;
            resourceInputs["radiusAccountingInterimInterval"] = state?.radiusAccountingInterimInterval;
            resourceInputs["radiusAccountingServers"] = state?.radiusAccountingServers;
            resourceInputs["radiusAccountingServersResponses"] = state?.radiusAccountingServersResponses;
            resourceInputs["radiusAttributeForGroupPolicies"] = state?.radiusAttributeForGroupPolicies;
            resourceInputs["radiusAuthenticationNasId"] = state?.radiusAuthenticationNasId;
            resourceInputs["radiusCalledStationId"] = state?.radiusCalledStationId;
            resourceInputs["radiusCoaEnabled"] = state?.radiusCoaEnabled;
            resourceInputs["radiusFailoverPolicy"] = state?.radiusFailoverPolicy;
            resourceInputs["radiusFallbackEnabled"] = state?.radiusFallbackEnabled;
            resourceInputs["radiusGuestVlanEnabled"] = state?.radiusGuestVlanEnabled;
            resourceInputs["radiusGuestVlanId"] = state?.radiusGuestVlanId;
            resourceInputs["radiusLoadBalancingPolicy"] = state?.radiusLoadBalancingPolicy;
            resourceInputs["radiusOverride"] = state?.radiusOverride;
            resourceInputs["radiusProxyEnabled"] = state?.radiusProxyEnabled;
            resourceInputs["radiusServerAttemptsLimit"] = state?.radiusServerAttemptsLimit;
            resourceInputs["radiusServerTimeout"] = state?.radiusServerTimeout;
            resourceInputs["radiusServers"] = state?.radiusServers;
            resourceInputs["radiusServersResponses"] = state?.radiusServersResponses;
            resourceInputs["radiusTestingEnabled"] = state?.radiusTestingEnabled;
            resourceInputs["secondaryConcentratorNetworkId"] = state?.secondaryConcentratorNetworkId;
            resourceInputs["speedBurst"] = state?.speedBurst;
            resourceInputs["splashGuestSponsorDomains"] = state?.splashGuestSponsorDomains;
            resourceInputs["splashPage"] = state?.splashPage;
            resourceInputs["splashTimeout"] = state?.splashTimeout;
            resourceInputs["ssidAdminAccessible"] = state?.ssidAdminAccessible;
            resourceInputs["useVlanTagging"] = state?.useVlanTagging;
            resourceInputs["visible"] = state?.visible;
            resourceInputs["vlanId"] = state?.vlanId;
            resourceInputs["walledGardenEnabled"] = state?.walledGardenEnabled;
            resourceInputs["walledGardenRanges"] = state?.walledGardenRanges;
            resourceInputs["wpaEncryptionMode"] = state?.wpaEncryptionMode;
        } else {
            const args = argsOrState as WirelessSsidsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.number === undefined && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["activeDirectory"] = args?.activeDirectory;
            resourceInputs["adultContentFilteringEnabled"] = args?.adultContentFilteringEnabled;
            resourceInputs["apTagsAndVlanIds"] = args?.apTagsAndVlanIds;
            resourceInputs["authMode"] = args?.authMode;
            resourceInputs["availabilityTags"] = args?.availabilityTags;
            resourceInputs["availableOnAllAps"] = args?.availableOnAllAps;
            resourceInputs["bandSelection"] = args?.bandSelection;
            resourceInputs["concentratorNetworkId"] = args?.concentratorNetworkId;
            resourceInputs["defaultVlanId"] = args?.defaultVlanId;
            resourceInputs["disassociateClientsOnVpnFailover"] = args?.disassociateClientsOnVpnFailover;
            resourceInputs["dnsRewrite"] = args?.dnsRewrite;
            resourceInputs["dot11r"] = args?.dot11r;
            resourceInputs["dot11w"] = args?.dot11w;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["encryptionMode"] = args?.encryptionMode;
            resourceInputs["enterpriseAdminAccess"] = args?.enterpriseAdminAccess;
            resourceInputs["gre"] = args?.gre;
            resourceInputs["ipAssignmentMode"] = args?.ipAssignmentMode;
            resourceInputs["lanIsolationEnabled"] = args?.lanIsolationEnabled;
            resourceInputs["ldap"] = args?.ldap;
            resourceInputs["localRadius"] = args?.localRadius;
            resourceInputs["mandatoryDhcpEnabled"] = args?.mandatoryDhcpEnabled;
            resourceInputs["minBitrate"] = args?.minBitrate;
            resourceInputs["name"] = args?.name;
            resourceInputs["namedVlans"] = args?.namedVlans;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["number"] = args?.number;
            resourceInputs["oauth"] = args?.oauth;
            resourceInputs["perClientBandwidthLimitDown"] = args?.perClientBandwidthLimitDown;
            resourceInputs["perClientBandwidthLimitUp"] = args?.perClientBandwidthLimitUp;
            resourceInputs["perSsidBandwidthLimitDown"] = args?.perSsidBandwidthLimitDown;
            resourceInputs["perSsidBandwidthLimitUp"] = args?.perSsidBandwidthLimitUp;
            resourceInputs["psk"] = args?.psk;
            resourceInputs["radiusAccountingEnabled"] = args?.radiusAccountingEnabled;
            resourceInputs["radiusAccountingInterimInterval"] = args?.radiusAccountingInterimInterval;
            resourceInputs["radiusAccountingServers"] = args?.radiusAccountingServers;
            resourceInputs["radiusAttributeForGroupPolicies"] = args?.radiusAttributeForGroupPolicies;
            resourceInputs["radiusAuthenticationNasId"] = args?.radiusAuthenticationNasId;
            resourceInputs["radiusCalledStationId"] = args?.radiusCalledStationId;
            resourceInputs["radiusCoaEnabled"] = args?.radiusCoaEnabled;
            resourceInputs["radiusFailoverPolicy"] = args?.radiusFailoverPolicy;
            resourceInputs["radiusFallbackEnabled"] = args?.radiusFallbackEnabled;
            resourceInputs["radiusGuestVlanEnabled"] = args?.radiusGuestVlanEnabled;
            resourceInputs["radiusGuestVlanId"] = args?.radiusGuestVlanId;
            resourceInputs["radiusLoadBalancingPolicy"] = args?.radiusLoadBalancingPolicy;
            resourceInputs["radiusOverride"] = args?.radiusOverride;
            resourceInputs["radiusProxyEnabled"] = args?.radiusProxyEnabled;
            resourceInputs["radiusServerAttemptsLimit"] = args?.radiusServerAttemptsLimit;
            resourceInputs["radiusServerTimeout"] = args?.radiusServerTimeout;
            resourceInputs["radiusServers"] = args?.radiusServers;
            resourceInputs["radiusTestingEnabled"] = args?.radiusTestingEnabled;
            resourceInputs["secondaryConcentratorNetworkId"] = args?.secondaryConcentratorNetworkId;
            resourceInputs["speedBurst"] = args?.speedBurst;
            resourceInputs["splashGuestSponsorDomains"] = args?.splashGuestSponsorDomains;
            resourceInputs["splashPage"] = args?.splashPage;
            resourceInputs["useVlanTagging"] = args?.useVlanTagging;
            resourceInputs["visible"] = args?.visible;
            resourceInputs["vlanId"] = args?.vlanId;
            resourceInputs["walledGardenEnabled"] = args?.walledGardenEnabled;
            resourceInputs["walledGardenRanges"] = args?.walledGardenRanges;
            resourceInputs["wpaEncryptionMode"] = args?.wpaEncryptionMode;
            resourceInputs["adminSplashUrl"] = undefined /*out*/;
            resourceInputs["radiusAccountingServersResponses"] = undefined /*out*/;
            resourceInputs["radiusServersResponses"] = undefined /*out*/;
            resourceInputs["splashTimeout"] = undefined /*out*/;
            resourceInputs["ssidAdminAccessible"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessSsids.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessSsids resources.
 */
export interface WirelessSsidsState {
    /**
     * The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
     */
    activeDirectory?: pulumi.Input<inputs.networks.WirelessSsidsActiveDirectory>;
    adminSplashUrl?: pulumi.Input<string>;
    /**
     * Boolean indicating whether or not adult content will be blocked
     */
    adultContentFilteringEnabled?: pulumi.Input<boolean>;
    /**
     * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    apTagsAndVlanIds?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsApTagsAndVlanId>[]>;
    /**
     * The association control method for the SSID
     */
    authMode?: pulumi.Input<string>;
    /**
     * List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
     */
    availabilityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
     */
    availableOnAllAps?: pulumi.Input<boolean>;
    /**
     * The client-serving radio frequencies of this SSID in the default indoor RF profile
     */
    bandSelection?: pulumi.Input<string>;
    /**
     * The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
     */
    concentratorNetworkId?: pulumi.Input<string>;
    /**
     * The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    defaultVlanId?: pulumi.Input<number>;
    /**
     * Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
     */
    disassociateClientsOnVpnFailover?: pulumi.Input<boolean>;
    /**
     * DNS servers rewrite settings
     */
    dnsRewrite?: pulumi.Input<inputs.networks.WirelessSsidsDnsRewrite>;
    /**
     * The current setting for 802.11r
     */
    dot11r?: pulumi.Input<inputs.networks.WirelessSsidsDot11r>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    dot11w?: pulumi.Input<inputs.networks.WirelessSsidsDot11w>;
    /**
     * Whether or not the SSID is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The psk encryption mode for the SSID
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
     */
    enterpriseAdminAccess?: pulumi.Input<string>;
    /**
     * Ethernet over GRE settings
     */
    gre?: pulumi.Input<inputs.networks.WirelessSsidsGre>;
    /**
     * The client IP assignment mode
     */
    ipAssignmentMode?: pulumi.Input<string>;
    /**
     * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
     */
    lanIsolationEnabled?: pulumi.Input<boolean>;
    /**
     * The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
     */
    ldap?: pulumi.Input<inputs.networks.WirelessSsidsLdap>;
    /**
     * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
     */
    localRadius?: pulumi.Input<inputs.networks.WirelessSsidsLocalRadius>;
    /**
     * Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
     */
    mandatoryDhcpEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum bitrate in Mbps of this SSID in the default indoor RF profile
     */
    minBitrate?: pulumi.Input<number>;
    /**
     * The name of the SSID
     */
    name?: pulumi.Input<string>;
    /**
     * Named VLAN settings.
     */
    namedVlans?: pulumi.Input<inputs.networks.WirelessSsidsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Unique identifier of the SSID
     */
    number?: pulumi.Input<number>;
    /**
     * The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
     */
    oauth?: pulumi.Input<inputs.networks.WirelessSsidsOauth>;
    /**
     * The download bandwidth limit in Kbps. (0 represents no limit.)
     */
    perClientBandwidthLimitDown?: pulumi.Input<number>;
    /**
     * The upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    perClientBandwidthLimitUp?: pulumi.Input<number>;
    /**
     * The total download bandwidth limit in Kbps (0 represents no limit)
     */
    perSsidBandwidthLimitDown?: pulumi.Input<number>;
    /**
     * The total upload bandwidth limit in Kbps (0 represents no limit)
     */
    perSsidBandwidthLimitUp?: pulumi.Input<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'
     */
    psk?: pulumi.Input<string>;
    /**
     * Whether or not RADIUS accounting is enabled
     */
    radiusAccountingEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
     */
    radiusAccountingInterimInterval?: pulumi.Input<number>;
    /**
     * List of RADIUS accounting 802.1X servers to be used for authentication
     */
    radiusAccountingServers?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusAccountingServer>[]>;
    /**
     * List of RADIUS accounting 802.1X servers to be used for authentication
     */
    radiusAccountingServersResponses?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusAccountingServersResponse>[]>;
    /**
     * RADIUS attribute used to look up group policies
     */
    radiusAttributeForGroupPolicies?: pulumi.Input<string>;
    /**
     * The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
     */
    radiusAuthenticationNasId?: pulumi.Input<string>;
    /**
     * The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
     */
    radiusCalledStationId?: pulumi.Input<string>;
    /**
     * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
     */
    radiusCoaEnabled?: pulumi.Input<boolean>;
    /**
     * Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
     */
    radiusFailoverPolicy?: pulumi.Input<string>;
    /**
     * Whether or not higher priority RADIUS servers should be retried after 60 seconds.
     */
    radiusFallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    radiusGuestVlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    radiusGuestVlanId?: pulumi.Input<number>;
    /**
     * Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
     */
    radiusLoadBalancingPolicy?: pulumi.Input<string>;
    /**
     * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
     */
    radiusOverride?: pulumi.Input<boolean>;
    /**
     * If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
     */
    radiusProxyEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
     */
    radiusServerAttemptsLimit?: pulumi.Input<number>;
    /**
     * The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
     */
    radiusServerTimeout?: pulumi.Input<number>;
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    radiusServers?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusServer>[]>;
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    radiusServersResponses?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusServersResponse>[]>;
    /**
     * If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
     */
    radiusTestingEnabled?: pulumi.Input<boolean>;
    /**
     * The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
     */
    secondaryConcentratorNetworkId?: pulumi.Input<string>;
    /**
     * The SpeedBurst setting for this SSID'
     */
    speedBurst?: pulumi.Input<inputs.networks.WirelessSsidsSpeedBurst>;
    /**
     * Array of valid sponsor email domains for sponsored guest splash type.
     */
    splashGuestSponsorDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of splash page for the SSID
     */
    splashPage?: pulumi.Input<string>;
    /**
     * Splash page timeout
     */
    splashTimeout?: pulumi.Input<string>;
    /**
     * SSID Administrator access status
     */
    ssidAdminAccessible?: pulumi.Input<boolean>;
    /**
     * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    useVlanTagging?: pulumi.Input<boolean>;
    /**
     * Whether the SSID is advertised or hidden by the AP
     */
    visible?: pulumi.Input<boolean>;
    /**
     * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
     */
    vlanId?: pulumi.Input<number>;
    /**
     * Allow users to access a configurable list of IP ranges prior to sign-on
     */
    walledGardenEnabled?: pulumi.Input<boolean>;
    /**
     * Domain names and IP address ranges available in Walled Garden mode
     */
    walledGardenRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The types of WPA encryption
     */
    wpaEncryptionMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessSsids resource.
 */
export interface WirelessSsidsArgs {
    /**
     * The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
     */
    activeDirectory?: pulumi.Input<inputs.networks.WirelessSsidsActiveDirectory>;
    /**
     * Boolean indicating whether or not adult content will be blocked
     */
    adultContentFilteringEnabled?: pulumi.Input<boolean>;
    /**
     * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    apTagsAndVlanIds?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsApTagsAndVlanId>[]>;
    /**
     * The association control method for the SSID
     */
    authMode?: pulumi.Input<string>;
    /**
     * List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
     */
    availabilityTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
     */
    availableOnAllAps?: pulumi.Input<boolean>;
    /**
     * The client-serving radio frequencies of this SSID in the default indoor RF profile
     */
    bandSelection?: pulumi.Input<string>;
    /**
     * The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
     */
    concentratorNetworkId?: pulumi.Input<string>;
    /**
     * The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    defaultVlanId?: pulumi.Input<number>;
    /**
     * Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
     */
    disassociateClientsOnVpnFailover?: pulumi.Input<boolean>;
    /**
     * DNS servers rewrite settings
     */
    dnsRewrite?: pulumi.Input<inputs.networks.WirelessSsidsDnsRewrite>;
    /**
     * The current setting for 802.11r
     */
    dot11r?: pulumi.Input<inputs.networks.WirelessSsidsDot11r>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    dot11w?: pulumi.Input<inputs.networks.WirelessSsidsDot11w>;
    /**
     * Whether or not the SSID is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The psk encryption mode for the SSID
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
     */
    enterpriseAdminAccess?: pulumi.Input<string>;
    /**
     * Ethernet over GRE settings
     */
    gre?: pulumi.Input<inputs.networks.WirelessSsidsGre>;
    /**
     * The client IP assignment mode
     */
    ipAssignmentMode?: pulumi.Input<string>;
    /**
     * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
     */
    lanIsolationEnabled?: pulumi.Input<boolean>;
    /**
     * The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
     */
    ldap?: pulumi.Input<inputs.networks.WirelessSsidsLdap>;
    /**
     * The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
     */
    localRadius?: pulumi.Input<inputs.networks.WirelessSsidsLocalRadius>;
    /**
     * Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
     */
    mandatoryDhcpEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum bitrate in Mbps of this SSID in the default indoor RF profile
     */
    minBitrate?: pulumi.Input<number>;
    /**
     * The name of the SSID
     */
    name?: pulumi.Input<string>;
    /**
     * Named VLAN settings.
     */
    namedVlans?: pulumi.Input<inputs.networks.WirelessSsidsNamedVlans>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Unique identifier of the SSID
     */
    number: pulumi.Input<number>;
    /**
     * The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
     */
    oauth?: pulumi.Input<inputs.networks.WirelessSsidsOauth>;
    /**
     * The download bandwidth limit in Kbps. (0 represents no limit.)
     */
    perClientBandwidthLimitDown?: pulumi.Input<number>;
    /**
     * The upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    perClientBandwidthLimitUp?: pulumi.Input<number>;
    /**
     * The total download bandwidth limit in Kbps (0 represents no limit)
     */
    perSsidBandwidthLimitDown?: pulumi.Input<number>;
    /**
     * The total upload bandwidth limit in Kbps (0 represents no limit)
     */
    perSsidBandwidthLimitUp?: pulumi.Input<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'
     */
    psk?: pulumi.Input<string>;
    /**
     * Whether or not RADIUS accounting is enabled
     */
    radiusAccountingEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
     */
    radiusAccountingInterimInterval?: pulumi.Input<number>;
    /**
     * List of RADIUS accounting 802.1X servers to be used for authentication
     */
    radiusAccountingServers?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusAccountingServer>[]>;
    /**
     * RADIUS attribute used to look up group policies
     */
    radiusAttributeForGroupPolicies?: pulumi.Input<string>;
    /**
     * The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
     */
    radiusAuthenticationNasId?: pulumi.Input<string>;
    /**
     * The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
     */
    radiusCalledStationId?: pulumi.Input<string>;
    /**
     * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
     */
    radiusCoaEnabled?: pulumi.Input<boolean>;
    /**
     * Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
     */
    radiusFailoverPolicy?: pulumi.Input<string>;
    /**
     * Whether or not higher priority RADIUS servers should be retried after 60 seconds.
     */
    radiusFallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    radiusGuestVlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
     */
    radiusGuestVlanId?: pulumi.Input<number>;
    /**
     * Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
     */
    radiusLoadBalancingPolicy?: pulumi.Input<string>;
    /**
     * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
     */
    radiusOverride?: pulumi.Input<boolean>;
    /**
     * If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
     */
    radiusProxyEnabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
     */
    radiusServerAttemptsLimit?: pulumi.Input<number>;
    /**
     * The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
     */
    radiusServerTimeout?: pulumi.Input<number>;
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    radiusServers?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsRadiusServer>[]>;
    /**
     * If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
     */
    radiusTestingEnabled?: pulumi.Input<boolean>;
    /**
     * The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
     */
    secondaryConcentratorNetworkId?: pulumi.Input<string>;
    /**
     * The SpeedBurst setting for this SSID'
     */
    speedBurst?: pulumi.Input<inputs.networks.WirelessSsidsSpeedBurst>;
    /**
     * Array of valid sponsor email domains for sponsored guest splash type.
     */
    splashGuestSponsorDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of splash page for the SSID
     */
    splashPage?: pulumi.Input<string>;
    /**
     * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    useVlanTagging?: pulumi.Input<boolean>;
    /**
     * Whether the SSID is advertised or hidden by the AP
     */
    visible?: pulumi.Input<boolean>;
    /**
     * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
     */
    vlanId?: pulumi.Input<number>;
    /**
     * Allow users to access a configurable list of IP ranges prior to sign-on
     */
    walledGardenEnabled?: pulumi.Input<boolean>;
    /**
     * Domain names and IP address ranges available in Walled Garden mode
     */
    walledGardenRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The types of WPA encryption
     */
    wpaEncryptionMode?: pulumi.Input<string>;
}
