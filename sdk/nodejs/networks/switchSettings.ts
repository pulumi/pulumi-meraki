// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/switchSettings:SwitchSettings example "network_id"
 * ```
 */
export class SwitchSettings extends pulumi.CustomResource {
    /**
     * Get an existing SwitchSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchSettingsState, opts?: pulumi.CustomResourceOptions): SwitchSettings {
        return new SwitchSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/switchSettings:SwitchSettings';

    /**
     * Returns true if the given object is an instance of SwitchSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchSettings.__pulumiType;
    }

    /**
     * MAC blocklist
     */
    declare public readonly macBlocklist: pulumi.Output<outputs.networks.SwitchSettingsMacBlocklist>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Exceptions on a per switch basis to "useCombinedPower"
     */
    declare public readonly powerExceptions: pulumi.Output<outputs.networks.SwitchSettingsPowerException[]>;
    /**
     * Uplink client sampling
     */
    declare public readonly uplinkClientSampling: pulumi.Output<outputs.networks.SwitchSettingsUplinkClientSampling>;
    /**
     * The use Combined Power as the default behavior of secondary power supplies on supported devices.
     */
    declare public readonly useCombinedPower: pulumi.Output<boolean>;
    /**
     * Management VLAN
     */
    declare public readonly vlan: pulumi.Output<number>;

    /**
     * Create a SwitchSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchSettingsArgs | SwitchSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchSettingsState | undefined;
            resourceInputs["macBlocklist"] = state?.macBlocklist;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["powerExceptions"] = state?.powerExceptions;
            resourceInputs["uplinkClientSampling"] = state?.uplinkClientSampling;
            resourceInputs["useCombinedPower"] = state?.useCombinedPower;
            resourceInputs["vlan"] = state?.vlan;
        } else {
            const args = argsOrState as SwitchSettingsArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["macBlocklist"] = args?.macBlocklist;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["powerExceptions"] = args?.powerExceptions;
            resourceInputs["uplinkClientSampling"] = args?.uplinkClientSampling;
            resourceInputs["useCombinedPower"] = args?.useCombinedPower;
            resourceInputs["vlan"] = args?.vlan;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchSettings resources.
 */
export interface SwitchSettingsState {
    /**
     * MAC blocklist
     */
    macBlocklist?: pulumi.Input<inputs.networks.SwitchSettingsMacBlocklist>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Exceptions on a per switch basis to "useCombinedPower"
     */
    powerExceptions?: pulumi.Input<pulumi.Input<inputs.networks.SwitchSettingsPowerException>[]>;
    /**
     * Uplink client sampling
     */
    uplinkClientSampling?: pulumi.Input<inputs.networks.SwitchSettingsUplinkClientSampling>;
    /**
     * The use Combined Power as the default behavior of secondary power supplies on supported devices.
     */
    useCombinedPower?: pulumi.Input<boolean>;
    /**
     * Management VLAN
     */
    vlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SwitchSettings resource.
 */
export interface SwitchSettingsArgs {
    /**
     * MAC blocklist
     */
    macBlocklist?: pulumi.Input<inputs.networks.SwitchSettingsMacBlocklist>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Exceptions on a per switch basis to "useCombinedPower"
     */
    powerExceptions?: pulumi.Input<pulumi.Input<inputs.networks.SwitchSettingsPowerException>[]>;
    /**
     * Uplink client sampling
     */
    uplinkClientSampling?: pulumi.Input<inputs.networks.SwitchSettingsUplinkClientSampling>;
    /**
     * The use Combined Power as the default behavior of secondary power supplies on supported devices.
     */
    useCombinedPower?: pulumi.Input<boolean>;
    /**
     * Management VLAN
     */
    vlan?: pulumi.Input<number>;
}
