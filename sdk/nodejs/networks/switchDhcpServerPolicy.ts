// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.SwitchDhcpServerPolicy("example", {
 *     alerts: {
 *         email: {
 *             enabled: true,
 *         },
 *     },
 *     allowedServers: [
 *         "00:50:56:00:00:01",
 *         "00:50:56:00:00:02",
 *     ],
 *     arpInspection: {
 *         enabled: true,
 *     },
 *     blockedServers: [
 *         "00:50:56:00:00:03",
 *         "00:50:56:00:00:04",
 *     ],
 *     defaultPolicy: "block",
 *     networkId: "string",
 * });
 * export const merakiNetworksSwitchDhcpServerPolicyExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy example "network_id"
 * ```
 */
export class SwitchDhcpServerPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchDhcpServerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchDhcpServerPolicyState, opts?: pulumi.CustomResourceOptions): SwitchDhcpServerPolicy {
        return new SwitchDhcpServerPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy';

    /**
     * Returns true if the given object is an instance of SwitchDhcpServerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchDhcpServerPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchDhcpServerPolicy.__pulumiType;
    }

    /**
     * Email alert settings for DHCP servers
     */
    public readonly alerts!: pulumi.Output<outputs.networks.SwitchDhcpServerPolicyAlerts>;
    /**
     * List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
     * to block.An empty array will clear the entries.
     */
    public readonly allowedServers!: pulumi.Output<string[]>;
    /**
     * Dynamic ARP Inspection settings
     */
    public readonly arpInspection!: pulumi.Output<outputs.networks.SwitchDhcpServerPolicyArpInspection>;
    /**
     * List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
     * to allow.An empty array will clear the entries.
     */
    public readonly blockedServers!: pulumi.Output<string[]>;
    /**
     * 'allow' or 'block' new DHCP servers. Default value is 'allow'.
     */
    public readonly defaultPolicy!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;

    /**
     * Create a SwitchDhcpServerPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchDhcpServerPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchDhcpServerPolicyArgs | SwitchDhcpServerPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchDhcpServerPolicyState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["allowedServers"] = state ? state.allowedServers : undefined;
            resourceInputs["arpInspection"] = state ? state.arpInspection : undefined;
            resourceInputs["blockedServers"] = state ? state.blockedServers : undefined;
            resourceInputs["defaultPolicy"] = state ? state.defaultPolicy : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
        } else {
            const args = argsOrState as SwitchDhcpServerPolicyArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["allowedServers"] = args ? args.allowedServers : undefined;
            resourceInputs["arpInspection"] = args ? args.arpInspection : undefined;
            resourceInputs["blockedServers"] = args ? args.blockedServers : undefined;
            resourceInputs["defaultPolicy"] = args ? args.defaultPolicy : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchDhcpServerPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchDhcpServerPolicy resources.
 */
export interface SwitchDhcpServerPolicyState {
    /**
     * Email alert settings for DHCP servers
     */
    alerts?: pulumi.Input<inputs.networks.SwitchDhcpServerPolicyAlerts>;
    /**
     * List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
     * to block.An empty array will clear the entries.
     */
    allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dynamic ARP Inspection settings
     */
    arpInspection?: pulumi.Input<inputs.networks.SwitchDhcpServerPolicyArpInspection>;
    /**
     * List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
     * to allow.An empty array will clear the entries.
     */
    blockedServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 'allow' or 'block' new DHCP servers. Default value is 'allow'.
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchDhcpServerPolicy resource.
 */
export interface SwitchDhcpServerPolicyArgs {
    /**
     * Email alert settings for DHCP servers
     */
    alerts?: pulumi.Input<inputs.networks.SwitchDhcpServerPolicyAlerts>;
    /**
     * List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
     * to block.An empty array will clear the entries.
     */
    allowedServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dynamic ARP Inspection settings
     */
    arpInspection?: pulumi.Input<inputs.networks.SwitchDhcpServerPolicyArpInspection>;
    /**
     * List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
     * to allow.An empty array will clear the entries.
     */
    blockedServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 'allow' or 'block' new DHCP servers. Default value is 'allow'.
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
}
