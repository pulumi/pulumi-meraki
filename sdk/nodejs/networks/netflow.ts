// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.Netflow("example", {
 *     collectorIp: "1.2.3.4",
 *     collectorPort: 443,
 *     etaDstPort: 443,
 *     etaEnabled: true,
 *     networkId: "string",
 *     reportingEnabled: true,
 * });
 * export const merakiNetworksNetflowExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/netflow:Netflow example "network_id"
 * ```
 */
export class Netflow extends pulumi.CustomResource {
    /**
     * Get an existing Netflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetflowState, opts?: pulumi.CustomResourceOptions): Netflow {
        return new Netflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/netflow:Netflow';

    /**
     * Returns true if the given object is an instance of Netflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Netflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Netflow.__pulumiType;
    }

    /**
     * The IPv4 address of the NetFlow collector.
     */
    declare public readonly collectorIp: pulumi.Output<string>;
    /**
     * The port that the NetFlow collector will be listening on.
     */
    declare public readonly collectorPort: pulumi.Output<number>;
    /**
     * The port that the Encrypted Traffic Analytics collector will be listening on.
     */
    declare public readonly etaDstPort: pulumi.Output<number>;
    /**
     * Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
     */
    declare public readonly etaEnabled: pulumi.Output<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
     */
    declare public readonly reportingEnabled: pulumi.Output<boolean>;

    /**
     * Create a Netflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetflowArgs | NetflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetflowState | undefined;
            resourceInputs["collectorIp"] = state?.collectorIp;
            resourceInputs["collectorPort"] = state?.collectorPort;
            resourceInputs["etaDstPort"] = state?.etaDstPort;
            resourceInputs["etaEnabled"] = state?.etaEnabled;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["reportingEnabled"] = state?.reportingEnabled;
        } else {
            const args = argsOrState as NetflowArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["collectorIp"] = args?.collectorIp;
            resourceInputs["collectorPort"] = args?.collectorPort;
            resourceInputs["etaDstPort"] = args?.etaDstPort;
            resourceInputs["etaEnabled"] = args?.etaEnabled;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["reportingEnabled"] = args?.reportingEnabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Netflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Netflow resources.
 */
export interface NetflowState {
    /**
     * The IPv4 address of the NetFlow collector.
     */
    collectorIp?: pulumi.Input<string>;
    /**
     * The port that the NetFlow collector will be listening on.
     */
    collectorPort?: pulumi.Input<number>;
    /**
     * The port that the Encrypted Traffic Analytics collector will be listening on.
     */
    etaDstPort?: pulumi.Input<number>;
    /**
     * Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
     */
    etaEnabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
     */
    reportingEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Netflow resource.
 */
export interface NetflowArgs {
    /**
     * The IPv4 address of the NetFlow collector.
     */
    collectorIp?: pulumi.Input<string>;
    /**
     * The port that the NetFlow collector will be listening on.
     */
    collectorPort?: pulumi.Input<number>;
    /**
     * The port that the Encrypted Traffic Analytics collector will be listening on.
     */
    etaDstPort?: pulumi.Input<number>;
    /**
     * Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
     */
    etaEnabled?: pulumi.Input<boolean>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
     */
    reportingEnabled?: pulumi.Input<boolean>;
}
