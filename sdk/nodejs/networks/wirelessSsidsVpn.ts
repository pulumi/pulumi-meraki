// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessSsidsVpn:WirelessSsidsVpn example "network_id,number"
 * ```
 */
export class WirelessSsidsVpn extends pulumi.CustomResource {
    /**
     * Get an existing WirelessSsidsVpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessSsidsVpnState, opts?: pulumi.CustomResourceOptions): WirelessSsidsVpn {
        return new WirelessSsidsVpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessSsidsVpn:WirelessSsidsVpn';

    /**
     * Returns true if the given object is an instance of WirelessSsidsVpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessSsidsVpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessSsidsVpn.__pulumiType;
    }

    /**
     * The VPN concentrator settings for this SSID.
     */
    declare public readonly concentrator: pulumi.Output<outputs.networks.WirelessSsidsVpnConcentrator>;
    /**
     * Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
     */
    declare public readonly failover: pulumi.Output<outputs.networks.WirelessSsidsVpnFailover>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * number path parameter.
     */
    declare public readonly number: pulumi.Output<string>;
    /**
     * The VPN split tunnel settings for this SSID.
     */
    declare public readonly splitTunnel: pulumi.Output<outputs.networks.WirelessSsidsVpnSplitTunnel>;

    /**
     * Create a WirelessSsidsVpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessSsidsVpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessSsidsVpnArgs | WirelessSsidsVpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessSsidsVpnState | undefined;
            resourceInputs["concentrator"] = state?.concentrator;
            resourceInputs["failover"] = state?.failover;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["number"] = state?.number;
            resourceInputs["splitTunnel"] = state?.splitTunnel;
        } else {
            const args = argsOrState as WirelessSsidsVpnArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.number === undefined && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["concentrator"] = args?.concentrator;
            resourceInputs["failover"] = args?.failover;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["number"] = args?.number;
            resourceInputs["splitTunnel"] = args?.splitTunnel;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessSsidsVpn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessSsidsVpn resources.
 */
export interface WirelessSsidsVpnState {
    /**
     * The VPN concentrator settings for this SSID.
     */
    concentrator?: pulumi.Input<inputs.networks.WirelessSsidsVpnConcentrator>;
    /**
     * Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
     */
    failover?: pulumi.Input<inputs.networks.WirelessSsidsVpnFailover>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number?: pulumi.Input<string>;
    /**
     * The VPN split tunnel settings for this SSID.
     */
    splitTunnel?: pulumi.Input<inputs.networks.WirelessSsidsVpnSplitTunnel>;
}

/**
 * The set of arguments for constructing a WirelessSsidsVpn resource.
 */
export interface WirelessSsidsVpnArgs {
    /**
     * The VPN concentrator settings for this SSID.
     */
    concentrator?: pulumi.Input<inputs.networks.WirelessSsidsVpnConcentrator>;
    /**
     * Secondary VPN concentrator settings. This is only used when two VPN concentrators are configured on the SSID.
     */
    failover?: pulumi.Input<inputs.networks.WirelessSsidsVpnFailover>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number: pulumi.Input<string>;
    /**
     * The VPN split tunnel settings for this SSID.
     */
    splitTunnel?: pulumi.Input<inputs.networks.WirelessSsidsVpnSplitTunnel>;
}
