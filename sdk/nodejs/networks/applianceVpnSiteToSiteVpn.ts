// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceVpnSiteToSiteVpn("example", {
 *     hubs: [{
 *         hub_id: "N_4901849",
 *         use_default_route: true,
 *     }],
 *     mode: "spoke",
 *     networkId: "string",
 *     subnets: [{
 *         local_subnet: "192.168.1.0/24",
 *         use_vpn: true,
 *     }],
 * });
 * export const merakiNetworksApplianceVpnSiteToSiteVpnExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn example "network_id"
 * ```
 */
export class ApplianceVpnSiteToSiteVpn extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceVpnSiteToSiteVpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceVpnSiteToSiteVpnState, opts?: pulumi.CustomResourceOptions): ApplianceVpnSiteToSiteVpn {
        return new ApplianceVpnSiteToSiteVpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn';

    /**
     * Returns true if the given object is an instance of ApplianceVpnSiteToSiteVpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceVpnSiteToSiteVpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceVpnSiteToSiteVpn.__pulumiType;
    }

    /**
     * The list of VPN hubs, in order of preference.
     */
    declare public readonly hubs: pulumi.Output<outputs.networks.ApplianceVpnSiteToSiteVpnHub[]>;
    /**
     * The site-to-site VPN mode.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * The list of subnets and their VPN presence.
     */
    declare public readonly subnets: pulumi.Output<outputs.networks.ApplianceVpnSiteToSiteVpnSubnet[]>;

    /**
     * Create a ApplianceVpnSiteToSiteVpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceVpnSiteToSiteVpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceVpnSiteToSiteVpnArgs | ApplianceVpnSiteToSiteVpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceVpnSiteToSiteVpnState | undefined;
            resourceInputs["hubs"] = state?.hubs;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["subnets"] = state?.subnets;
        } else {
            const args = argsOrState as ApplianceVpnSiteToSiteVpnArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["hubs"] = args?.hubs;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["subnets"] = args?.subnets;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceVpnSiteToSiteVpn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceVpnSiteToSiteVpn resources.
 */
export interface ApplianceVpnSiteToSiteVpnState {
    /**
     * The list of VPN hubs, in order of preference.
     */
    hubs?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceVpnSiteToSiteVpnHub>[]>;
    /**
     * The site-to-site VPN mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The list of subnets and their VPN presence.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceVpnSiteToSiteVpnSubnet>[]>;
}

/**
 * The set of arguments for constructing a ApplianceVpnSiteToSiteVpn resource.
 */
export interface ApplianceVpnSiteToSiteVpnArgs {
    /**
     * The list of VPN hubs, in order of preference.
     */
    hubs?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceVpnSiteToSiteVpnHub>[]>;
    /**
     * The site-to-site VPN mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The list of subnets and their VPN presence.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceVpnSiteToSiteVpnSubnet>[]>;
}
