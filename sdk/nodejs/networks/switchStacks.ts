// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.SwitchStacks("example", {
 *     name: "A cool stack",
 *     networkId: "string",
 *     serials: [
 *         "QBZY-XWVU-TSRQ",
 *         "QBAB-CDEF-GHIJ",
 *     ],
 * });
 * export const merakiNetworksSwitchStacksExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/switchStacks:SwitchStacks example "network_id,switch_stack_id"
 * ```
 */
export class SwitchStacks extends pulumi.CustomResource {
    /**
     * Get an existing SwitchStacks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchStacksState, opts?: pulumi.CustomResourceOptions): SwitchStacks {
        return new SwitchStacks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/switchStacks:SwitchStacks';

    /**
     * Returns true if the given object is an instance of SwitchStacks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchStacks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchStacks.__pulumiType;
    }

    /**
     * Name of the Switch stack
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Serials of the switches in the switch stack
     */
    declare public readonly serials: pulumi.Output<string[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    declare public readonly switchStackId: pulumi.Output<string>;

    /**
     * Create a SwitchStacks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchStacksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchStacksArgs | SwitchStacksState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchStacksState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["serials"] = state?.serials;
            resourceInputs["switchStackId"] = state?.switchStackId;
        } else {
            const args = argsOrState as SwitchStacksArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["serials"] = args?.serials;
            resourceInputs["switchStackId"] = args?.switchStackId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchStacks.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchStacks resources.
 */
export interface SwitchStacksState {
    /**
     * Name of the Switch stack
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Serials of the switches in the switch stack
     */
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    switchStackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchStacks resource.
 */
export interface SwitchStacksArgs {
    /**
     * Name of the Switch stack
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Serials of the switches in the switch stack
     */
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    switchStackId?: pulumi.Input<string>;
}
