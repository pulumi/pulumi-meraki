// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.WirelessEthernetPortsProfiles("example", {
 *     name: "string",
 *     networkId: "string",
 *     ports: [{
 *         enabled: false,
 *         name: "string",
 *         psk_group_id: "string",
 *         ssid: 1,
 *     }],
 *     profileId: "string",
 *     usbPorts: [{
 *         enabled: false,
 *         name: "string",
 *         ssid: 1,
 *     }],
 * });
 * export const merakiNetworksWirelessEthernetPortsProfilesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles example "network_id,profile_id"
 * ```
 */
export class WirelessEthernetPortsProfiles extends pulumi.CustomResource {
    /**
     * Get an existing WirelessEthernetPortsProfiles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessEthernetPortsProfilesState, opts?: pulumi.CustomResourceOptions): WirelessEthernetPortsProfiles {
        return new WirelessEthernetPortsProfiles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles';

    /**
     * Returns true if the given object is an instance of WirelessEthernetPortsProfiles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessEthernetPortsProfiles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessEthernetPortsProfiles.__pulumiType;
    }

    /**
     * Is default profile
     */
    declare public /*out*/ readonly isDefault: pulumi.Output<boolean>;
    /**
     * AP port profile name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Ports config
     */
    declare public readonly ports: pulumi.Output<outputs.networks.WirelessEthernetPortsProfilesPort[]>;
    /**
     * AP port profile ID
     */
    declare public readonly profileId: pulumi.Output<string>;
    /**
     * Usb ports config
     */
    declare public readonly usbPorts: pulumi.Output<outputs.networks.WirelessEthernetPortsProfilesUsbPort[]>;

    /**
     * Create a WirelessEthernetPortsProfiles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessEthernetPortsProfilesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessEthernetPortsProfilesArgs | WirelessEthernetPortsProfilesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessEthernetPortsProfilesState | undefined;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["ports"] = state?.ports;
            resourceInputs["profileId"] = state?.profileId;
            resourceInputs["usbPorts"] = state?.usbPorts;
        } else {
            const args = argsOrState as WirelessEthernetPortsProfilesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.profileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["ports"] = args?.ports;
            resourceInputs["profileId"] = args?.profileId;
            resourceInputs["usbPorts"] = args?.usbPorts;
            resourceInputs["isDefault"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessEthernetPortsProfiles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessEthernetPortsProfiles resources.
 */
export interface WirelessEthernetPortsProfilesState {
    /**
     * Is default profile
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * AP port profile name
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Ports config
     */
    ports?: pulumi.Input<pulumi.Input<inputs.networks.WirelessEthernetPortsProfilesPort>[]>;
    /**
     * AP port profile ID
     */
    profileId?: pulumi.Input<string>;
    /**
     * Usb ports config
     */
    usbPorts?: pulumi.Input<pulumi.Input<inputs.networks.WirelessEthernetPortsProfilesUsbPort>[]>;
}

/**
 * The set of arguments for constructing a WirelessEthernetPortsProfiles resource.
 */
export interface WirelessEthernetPortsProfilesArgs {
    /**
     * AP port profile name
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Ports config
     */
    ports?: pulumi.Input<pulumi.Input<inputs.networks.WirelessEthernetPortsProfilesPort>[]>;
    /**
     * AP port profile ID
     */
    profileId: pulumi.Input<string>;
    /**
     * Usb ports config
     */
    usbPorts?: pulumi.Input<pulumi.Input<inputs.networks.WirelessEthernetPortsProfilesUsbPort>[]>;
}
