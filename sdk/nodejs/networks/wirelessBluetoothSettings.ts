// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.WirelessBluetoothSettings("example", {
 *     advertisingEnabled: true,
 *     major: 1,
 *     majorMinorAssignmentMode: "Non-unique",
 *     minor: 1,
 *     networkId: "string",
 *     scanningEnabled: true,
 *     uuid: "00000000-0000-0000-000-000000000000",
 * });
 * export const merakiNetworksWirelessBluetoothSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings example "network_id"
 * ```
 */
export class WirelessBluetoothSettings extends pulumi.CustomResource {
    /**
     * Get an existing WirelessBluetoothSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessBluetoothSettingsState, opts?: pulumi.CustomResourceOptions): WirelessBluetoothSettings {
        return new WirelessBluetoothSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings';

    /**
     * Returns true if the given object is an instance of WirelessBluetoothSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessBluetoothSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessBluetoothSettings.__pulumiType;
    }

    /**
     * Whether APs will advertise beacons.
     */
    public readonly advertisingEnabled!: pulumi.Output<boolean>;
    /**
     * Whether ESL is enabled on this network.
     */
    public /*out*/ readonly eslEnabled!: pulumi.Output<boolean>;
    /**
     * The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    public readonly major!: pulumi.Output<number>;
    /**
     * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
     */
    public readonly majorMinorAssignmentMode!: pulumi.Output<string>;
    /**
     * The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    public readonly minor!: pulumi.Output<number>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Whether APs will scan for Bluetooth enabled clients.
     */
    public readonly scanningEnabled!: pulumi.Output<boolean>;
    /**
     * The UUID to be used in the beacon identifier.
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a WirelessBluetoothSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessBluetoothSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessBluetoothSettingsArgs | WirelessBluetoothSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessBluetoothSettingsState | undefined;
            resourceInputs["advertisingEnabled"] = state ? state.advertisingEnabled : undefined;
            resourceInputs["eslEnabled"] = state ? state.eslEnabled : undefined;
            resourceInputs["major"] = state ? state.major : undefined;
            resourceInputs["majorMinorAssignmentMode"] = state ? state.majorMinorAssignmentMode : undefined;
            resourceInputs["minor"] = state ? state.minor : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["scanningEnabled"] = state ? state.scanningEnabled : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as WirelessBluetoothSettingsArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["advertisingEnabled"] = args ? args.advertisingEnabled : undefined;
            resourceInputs["major"] = args ? args.major : undefined;
            resourceInputs["majorMinorAssignmentMode"] = args ? args.majorMinorAssignmentMode : undefined;
            resourceInputs["minor"] = args ? args.minor : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["scanningEnabled"] = args ? args.scanningEnabled : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["eslEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessBluetoothSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessBluetoothSettings resources.
 */
export interface WirelessBluetoothSettingsState {
    /**
     * Whether APs will advertise beacons.
     */
    advertisingEnabled?: pulumi.Input<boolean>;
    /**
     * Whether ESL is enabled on this network.
     */
    eslEnabled?: pulumi.Input<boolean>;
    /**
     * The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    major?: pulumi.Input<number>;
    /**
     * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
     */
    majorMinorAssignmentMode?: pulumi.Input<string>;
    /**
     * The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    minor?: pulumi.Input<number>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Whether APs will scan for Bluetooth enabled clients.
     */
    scanningEnabled?: pulumi.Input<boolean>;
    /**
     * The UUID to be used in the beacon identifier.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelessBluetoothSettings resource.
 */
export interface WirelessBluetoothSettingsArgs {
    /**
     * Whether APs will advertise beacons.
     */
    advertisingEnabled?: pulumi.Input<boolean>;
    /**
     * The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    major?: pulumi.Input<number>;
    /**
     * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
     */
    majorMinorAssignmentMode?: pulumi.Input<string>;
    /**
     * The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
     */
    minor?: pulumi.Input<number>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Whether APs will scan for Bluetooth enabled clients.
     */
    scanningEnabled?: pulumi.Input<boolean>;
    /**
     * The UUID to be used in the beacon identifier.
     */
    uuid?: pulumi.Input<string>;
}
