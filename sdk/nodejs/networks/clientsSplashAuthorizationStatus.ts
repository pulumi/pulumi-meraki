// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/clientsSplashAuthorizationStatus:ClientsSplashAuthorizationStatus example "client_id,network_id"
 * ```
 */
export class ClientsSplashAuthorizationStatus extends pulumi.CustomResource {
    /**
     * Get an existing ClientsSplashAuthorizationStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientsSplashAuthorizationStatusState, opts?: pulumi.CustomResourceOptions): ClientsSplashAuthorizationStatus {
        return new ClientsSplashAuthorizationStatus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/clientsSplashAuthorizationStatus:ClientsSplashAuthorizationStatus';

    /**
     * Returns true if the given object is an instance of ClientsSplashAuthorizationStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientsSplashAuthorizationStatus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientsSplashAuthorizationStatus.__pulumiType;
    }

    /**
     * clientId path parameter. Client ID
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
     */
    public readonly ssids!: pulumi.Output<outputs.networks.ClientsSplashAuthorizationStatusSsids>;

    /**
     * Create a ClientsSplashAuthorizationStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientsSplashAuthorizationStatusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientsSplashAuthorizationStatusArgs | ClientsSplashAuthorizationStatusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientsSplashAuthorizationStatusState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["ssids"] = state ? state.ssids : undefined;
        } else {
            const args = argsOrState as ClientsSplashAuthorizationStatusArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["ssids"] = args ? args.ssids : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientsSplashAuthorizationStatus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientsSplashAuthorizationStatus resources.
 */
export interface ClientsSplashAuthorizationStatusState {
    /**
     * clientId path parameter. Client ID
     */
    clientId?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
     */
    ssids?: pulumi.Input<inputs.networks.ClientsSplashAuthorizationStatusSsids>;
}

/**
 * The set of arguments for constructing a ClientsSplashAuthorizationStatus resource.
 */
export interface ClientsSplashAuthorizationStatusArgs {
    /**
     * clientId path parameter. Client ID
     */
    clientId: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
     */
    ssids?: pulumi.Input<inputs.networks.ClientsSplashAuthorizationStatusSsids>;
}
