// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceFirewallL3FirewallRules("example", {
 *     networkId: "string",
 *     rules: [{
 *         comment: "Allow TCP traffic to subnet with HTTP servers.",
 *         dest_cidr: "192.168.1.0/24",
 *         dest_port: "443",
 *         policy: "allow",
 *         protocol: "tcp",
 *         src_cidr: "Any",
 *         src_port: "Any",
 *         syslog_enabled: false,
 *     }],
 * });
 * export const merakiNetworksApplianceFirewallL3FirewallRulesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules example "network_id"
 * ```
 */
export class ApplianceFirewallL3FirewallRules extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceFirewallL3FirewallRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceFirewallL3FirewallRulesState, opts?: pulumi.CustomResourceOptions): ApplianceFirewallL3FirewallRules {
        return new ApplianceFirewallL3FirewallRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules';

    /**
     * Returns true if the given object is an instance of ApplianceFirewallL3FirewallRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceFirewallL3FirewallRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceFirewallL3FirewallRules.__pulumiType;
    }

    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * An ordered array of the firewall rules (not including the default rule)
     */
    declare public readonly rules: pulumi.Output<outputs.networks.ApplianceFirewallL3FirewallRulesRule[] | undefined>;
    /**
     * An ordered array of the firewall rules (not including the default rule)
     */
    declare public /*out*/ readonly rulesResponses: pulumi.Output<outputs.networks.ApplianceFirewallL3FirewallRulesRulesResponse[]>;
    /**
     * Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
     */
    declare public readonly syslogDefaultRule: pulumi.Output<boolean>;

    /**
     * Create a ApplianceFirewallL3FirewallRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceFirewallL3FirewallRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceFirewallL3FirewallRulesArgs | ApplianceFirewallL3FirewallRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceFirewallL3FirewallRulesState | undefined;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["rulesResponses"] = state?.rulesResponses;
            resourceInputs["syslogDefaultRule"] = state?.syslogDefaultRule;
        } else {
            const args = argsOrState as ApplianceFirewallL3FirewallRulesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["syslogDefaultRule"] = args?.syslogDefaultRule;
            resourceInputs["rulesResponses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceFirewallL3FirewallRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceFirewallL3FirewallRules resources.
 */
export interface ApplianceFirewallL3FirewallRulesState {
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * An ordered array of the firewall rules (not including the default rule)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceFirewallL3FirewallRulesRule>[]>;
    /**
     * An ordered array of the firewall rules (not including the default rule)
     */
    rulesResponses?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceFirewallL3FirewallRulesRulesResponse>[]>;
    /**
     * Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
     */
    syslogDefaultRule?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ApplianceFirewallL3FirewallRules resource.
 */
export interface ApplianceFirewallL3FirewallRulesArgs {
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * An ordered array of the firewall rules (not including the default rule)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceFirewallL3FirewallRulesRule>[]>;
    /**
     * Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
     */
    syslogDefaultRule?: pulumi.Input<boolean>;
}
