// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceFirewallOneToOneNatRules("example", {
 *     networkId: "string",
 *     rules: [{
 *         allowed_inbound: [{
 *             allowedIps: [
 *                 "10.82.112.0/24",
 *                 "10.82.0.0/16",
 *             ],
 *             destinationPorts: ["80"],
 *             protocol: "tcp",
 *         }],
 *         lan_ip: "192.168.128.22",
 *         name: "Service behind NAT",
 *         public_ip: "146.12.3.33",
 *         uplink: "internet1",
 *     }],
 * });
 * export const merakiNetworksApplianceFirewallOneToOneNatRulesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceFirewallOneToOneNatRules:ApplianceFirewallOneToOneNatRules example "network_id"
 * ```
 */
export class ApplianceFirewallOneToOneNatRules extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceFirewallOneToOneNatRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceFirewallOneToOneNatRulesState, opts?: pulumi.CustomResourceOptions): ApplianceFirewallOneToOneNatRules {
        return new ApplianceFirewallOneToOneNatRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceFirewallOneToOneNatRules:ApplianceFirewallOneToOneNatRules';

    /**
     * Returns true if the given object is an instance of ApplianceFirewallOneToOneNatRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceFirewallOneToOneNatRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceFirewallOneToOneNatRules.__pulumiType;
    }

    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * An array of 1:1 nat rules
     */
    declare public readonly rules: pulumi.Output<outputs.networks.ApplianceFirewallOneToOneNatRulesRule[]>;

    /**
     * Create a ApplianceFirewallOneToOneNatRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceFirewallOneToOneNatRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceFirewallOneToOneNatRulesArgs | ApplianceFirewallOneToOneNatRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceFirewallOneToOneNatRulesState | undefined;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as ApplianceFirewallOneToOneNatRulesArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["rules"] = args?.rules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceFirewallOneToOneNatRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceFirewallOneToOneNatRules resources.
 */
export interface ApplianceFirewallOneToOneNatRulesState {
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * An array of 1:1 nat rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceFirewallOneToOneNatRulesRule>[]>;
}

/**
 * The set of arguments for constructing a ApplianceFirewallOneToOneNatRules resource.
 */
export interface ApplianceFirewallOneToOneNatRulesArgs {
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * An array of 1:1 nat rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceFirewallOneToOneNatRulesRule>[]>;
}
