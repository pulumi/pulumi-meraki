// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceContentFiltering("example", {
 *     allowedUrlPatterns: [
 *         "http://www.example.org",
 *         "http://help.com.au",
 *     ],
 *     blockedUrlCategories: [
 *         "meraki:contentFiltering/category/1",
 *         "meraki:contentFiltering/category/7",
 *     ],
 *     blockedUrlPatterns: [
 *         "http://www.example.com",
 *         "http://www.betting.com",
 *     ],
 *     networkId: "string",
 *     urlCategoryListSize: "topSites",
 * });
 * export const merakiNetworksApplianceContentFilteringExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceContentFiltering:ApplianceContentFiltering example "network_id"
 * ```
 */
export class ApplianceContentFiltering extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceContentFiltering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceContentFilteringState, opts?: pulumi.CustomResourceOptions): ApplianceContentFiltering {
        return new ApplianceContentFiltering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceContentFiltering:ApplianceContentFiltering';

    /**
     * Returns true if the given object is an instance of ApplianceContentFiltering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceContentFiltering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceContentFiltering.__pulumiType;
    }

    /**
     * A list of URL patterns that are allowed
     */
    declare public readonly allowedUrlPatterns: pulumi.Output<string[]>;
    /**
     * A list of URL categories to block
     */
    declare public readonly blockedUrlCategories: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly blockedUrlCategoriesResponses: pulumi.Output<outputs.networks.ApplianceContentFilteringBlockedUrlCategoriesResponse[]>;
    /**
     * A list of URL patterns that are blocked
     */
    declare public readonly blockedUrlPatterns: pulumi.Output<string[]>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * URL category list size which is either 'topSites' or 'fullList'
     */
    declare public readonly urlCategoryListSize: pulumi.Output<string | undefined>;

    /**
     * Create a ApplianceContentFiltering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceContentFilteringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceContentFilteringArgs | ApplianceContentFilteringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceContentFilteringState | undefined;
            resourceInputs["allowedUrlPatterns"] = state?.allowedUrlPatterns;
            resourceInputs["blockedUrlCategories"] = state?.blockedUrlCategories;
            resourceInputs["blockedUrlCategoriesResponses"] = state?.blockedUrlCategoriesResponses;
            resourceInputs["blockedUrlPatterns"] = state?.blockedUrlPatterns;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["urlCategoryListSize"] = state?.urlCategoryListSize;
        } else {
            const args = argsOrState as ApplianceContentFilteringArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["allowedUrlPatterns"] = args?.allowedUrlPatterns;
            resourceInputs["blockedUrlCategories"] = args?.blockedUrlCategories;
            resourceInputs["blockedUrlPatterns"] = args?.blockedUrlPatterns;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["urlCategoryListSize"] = args?.urlCategoryListSize;
            resourceInputs["blockedUrlCategoriesResponses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceContentFiltering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceContentFiltering resources.
 */
export interface ApplianceContentFilteringState {
    /**
     * A list of URL patterns that are allowed
     */
    allowedUrlPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of URL categories to block
     */
    blockedUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    blockedUrlCategoriesResponses?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceContentFilteringBlockedUrlCategoriesResponse>[]>;
    /**
     * A list of URL patterns that are blocked
     */
    blockedUrlPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * URL category list size which is either 'topSites' or 'fullList'
     */
    urlCategoryListSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplianceContentFiltering resource.
 */
export interface ApplianceContentFilteringArgs {
    /**
     * A list of URL patterns that are allowed
     */
    allowedUrlPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of URL categories to block
     */
    blockedUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of URL patterns that are blocked
     */
    blockedUrlPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * URL category list size which is either 'topSites' or 'fullList'
     */
    urlCategoryListSize?: pulumi.Input<string>;
}
