// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.SwitchRoutingMulticastRendezvousPoints("example", {
 *     interfaceIp: "192.168.1.2",
 *     multicastGroup: "Any",
 *     networkId: "string",
 * });
 * export const merakiNetworksSwitchRoutingMulticastRendezvousPointsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/switchRoutingMulticastRendezvousPoints:SwitchRoutingMulticastRendezvousPoints example "network_id,rendezvous_point_id"
 * ```
 */
export class SwitchRoutingMulticastRendezvousPoints extends pulumi.CustomResource {
    /**
     * Get an existing SwitchRoutingMulticastRendezvousPoints resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchRoutingMulticastRendezvousPointsState, opts?: pulumi.CustomResourceOptions): SwitchRoutingMulticastRendezvousPoints {
        return new SwitchRoutingMulticastRendezvousPoints(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/switchRoutingMulticastRendezvousPoints:SwitchRoutingMulticastRendezvousPoints';

    /**
     * Returns true if the given object is an instance of SwitchRoutingMulticastRendezvousPoints.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchRoutingMulticastRendezvousPoints {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchRoutingMulticastRendezvousPoints.__pulumiType;
    }

    /**
     * The IP address of the interface where the RP needs to be created.
     */
    public readonly interfaceIp!: pulumi.Output<string>;
    public /*out*/ readonly interfaceName!: pulumi.Output<string>;
    /**
     * 'Any', or the IP address of a multicast group
     */
    public readonly multicastGroup!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * rendezvousPointId path parameter. Rendezvous point ID
     */
    public readonly rendezvousPointId!: pulumi.Output<string>;
    public /*out*/ readonly serial!: pulumi.Output<string>;

    /**
     * Create a SwitchRoutingMulticastRendezvousPoints resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchRoutingMulticastRendezvousPointsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchRoutingMulticastRendezvousPointsArgs | SwitchRoutingMulticastRendezvousPointsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchRoutingMulticastRendezvousPointsState | undefined;
            resourceInputs["interfaceIp"] = state ? state.interfaceIp : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["multicastGroup"] = state ? state.multicastGroup : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["rendezvousPointId"] = state ? state.rendezvousPointId : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
        } else {
            const args = argsOrState as SwitchRoutingMulticastRendezvousPointsArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["interfaceIp"] = args ? args.interfaceIp : undefined;
            resourceInputs["multicastGroup"] = args ? args.multicastGroup : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["rendezvousPointId"] = args ? args.rendezvousPointId : undefined;
            resourceInputs["interfaceName"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchRoutingMulticastRendezvousPoints.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchRoutingMulticastRendezvousPoints resources.
 */
export interface SwitchRoutingMulticastRendezvousPointsState {
    /**
     * The IP address of the interface where the RP needs to be created.
     */
    interfaceIp?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    /**
     * 'Any', or the IP address of a multicast group
     */
    multicastGroup?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * rendezvousPointId path parameter. Rendezvous point ID
     */
    rendezvousPointId?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchRoutingMulticastRendezvousPoints resource.
 */
export interface SwitchRoutingMulticastRendezvousPointsArgs {
    /**
     * The IP address of the interface where the RP needs to be created.
     */
    interfaceIp?: pulumi.Input<string>;
    /**
     * 'Any', or the IP address of a multicast group
     */
    multicastGroup?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * rendezvousPointId path parameter. Rendezvous point ID
     */
    rendezvousPointId?: pulumi.Input<string>;
}
