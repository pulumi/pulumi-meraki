// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.WirelessSsidsHotspot20("example", {
 *     domains: [
 *         "meraki.local",
 *         "domain2.com",
 *     ],
 *     enabled: true,
 *     mccMncs: [{
 *         mcc: "123",
 *         mnc: "456",
 *     }],
 *     naiRealms: [{
 *         format: "1",
 *         methods: [{
 *             authenticationTypes: {
 *                 eapinnerAuthentication: ["EAP-TTLS with MSCHAPv2"],
 *                 nonEapinnerAuthentication: ["MSCHAP"],
 *             },
 *             id: "1",
 *         }],
 *     }],
 *     networkAccessType: "Private network",
 *     networkId: "string",
 *     number: "string",
 *     operator: {
 *         name: "Meraki Product Management",
 *     },
 *     roamConsortOis: [
 *         "ABC123",
 *         "456EFG",
 *     ],
 *     venue: {
 *         name: "SF Branch",
 *         type: "Unspecified Assembly",
 *     },
 * });
 * export const merakiNetworksWirelessSsidsHotspot20Example = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20 example "network_id,number"
 * ```
 */
export class WirelessSsidsHotspot20 extends pulumi.CustomResource {
    /**
     * Get an existing WirelessSsidsHotspot20 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessSsidsHotspot20State, opts?: pulumi.CustomResourceOptions): WirelessSsidsHotspot20 {
        return new WirelessSsidsHotspot20(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20';

    /**
     * Returns true if the given object is an instance of WirelessSsidsHotspot20.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessSsidsHotspot20 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessSsidsHotspot20.__pulumiType;
    }

    /**
     * An array of domain names
     */
    declare public readonly domains: pulumi.Output<string[]>;
    /**
     * Whether or not Hotspot 2.0 for this SSID is enabled
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * An array of MCC/MNC pairs
     */
    declare public readonly mccMncs: pulumi.Output<outputs.networks.WirelessSsidsHotspot20MccMnc[]>;
    /**
     * An array of NAI realms
     */
    declare public readonly naiRealms: pulumi.Output<outputs.networks.WirelessSsidsHotspot20NaiRealm[]>;
    /**
     * The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
     */
    declare public readonly networkAccessType: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * number path parameter.
     */
    declare public readonly number: pulumi.Output<string>;
    /**
     * Operator settings for this SSID
     */
    declare public readonly operator: pulumi.Output<outputs.networks.WirelessSsidsHotspot20Operator>;
    /**
     * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     */
    declare public readonly roamConsortOis: pulumi.Output<string[]>;
    /**
     * Venue settings for this SSID
     */
    declare public readonly venue: pulumi.Output<outputs.networks.WirelessSsidsHotspot20Venue>;

    /**
     * Create a WirelessSsidsHotspot20 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessSsidsHotspot20Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessSsidsHotspot20Args | WirelessSsidsHotspot20State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessSsidsHotspot20State | undefined;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["mccMncs"] = state?.mccMncs;
            resourceInputs["naiRealms"] = state?.naiRealms;
            resourceInputs["networkAccessType"] = state?.networkAccessType;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["number"] = state?.number;
            resourceInputs["operator"] = state?.operator;
            resourceInputs["roamConsortOis"] = state?.roamConsortOis;
            resourceInputs["venue"] = state?.venue;
        } else {
            const args = argsOrState as WirelessSsidsHotspot20Args | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.number === undefined && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["domains"] = args?.domains;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["mccMncs"] = args?.mccMncs;
            resourceInputs["naiRealms"] = args?.naiRealms;
            resourceInputs["networkAccessType"] = args?.networkAccessType;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["number"] = args?.number;
            resourceInputs["operator"] = args?.operator;
            resourceInputs["roamConsortOis"] = args?.roamConsortOis;
            resourceInputs["venue"] = args?.venue;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessSsidsHotspot20.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessSsidsHotspot20 resources.
 */
export interface WirelessSsidsHotspot20State {
    /**
     * An array of domain names
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not Hotspot 2.0 for this SSID is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An array of MCC/MNC pairs
     */
    mccMncs?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsHotspot20MccMnc>[]>;
    /**
     * An array of NAI realms
     */
    naiRealms?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsHotspot20NaiRealm>[]>;
    /**
     * The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
     */
    networkAccessType?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number?: pulumi.Input<string>;
    /**
     * Operator settings for this SSID
     */
    operator?: pulumi.Input<inputs.networks.WirelessSsidsHotspot20Operator>;
    /**
     * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     */
    roamConsortOis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Venue settings for this SSID
     */
    venue?: pulumi.Input<inputs.networks.WirelessSsidsHotspot20Venue>;
}

/**
 * The set of arguments for constructing a WirelessSsidsHotspot20 resource.
 */
export interface WirelessSsidsHotspot20Args {
    /**
     * An array of domain names
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether or not Hotspot 2.0 for this SSID is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An array of MCC/MNC pairs
     */
    mccMncs?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsHotspot20MccMnc>[]>;
    /**
     * An array of NAI realms
     */
    naiRealms?: pulumi.Input<pulumi.Input<inputs.networks.WirelessSsidsHotspot20NaiRealm>[]>;
    /**
     * The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
     */
    networkAccessType?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * number path parameter.
     */
    number: pulumi.Input<string>;
    /**
     * Operator settings for this SSID
     */
    operator?: pulumi.Input<inputs.networks.WirelessSsidsHotspot20Operator>;
    /**
     * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     */
    roamConsortOis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Venue settings for this SSID
     */
    venue?: pulumi.Input<inputs.networks.WirelessSsidsHotspot20Venue>;
}
