// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.ApplianceSsids("example", {
 *     authMode: "8021x-radius",
 *     defaultVlanId: 1,
 *     dhcpEnforcedDeauthentication: {
 *         enabled: true,
 *     },
 *     dot11w: {
 *         enabled: true,
 *         required: true,
 *     },
 *     enabled: true,
 *     encryptionMode: "wpa",
 *     name: "My SSID",
 *     networkId: "string",
 *     number: "string",
 *     psk: "psk",
 *     radiusServers: [{
 *         host: "0.0.0.0",
 *         port: 1000,
 *         secret: "secret",
 *     }],
 *     visible: true,
 *     wpaEncryptionMode: "WPA2 only",
 * });
 * export const merakiNetworksApplianceSsidsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/applianceSsids:ApplianceSsids example "network_id,number"
 * ```
 */
export class ApplianceSsids extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceSsids resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceSsidsState, opts?: pulumi.CustomResourceOptions): ApplianceSsids {
        return new ApplianceSsids(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/applianceSsids:ApplianceSsids';

    /**
     * Returns true if the given object is an instance of ApplianceSsids.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceSsids {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceSsids.__pulumiType;
    }

    /**
     * The association control method for the SSID.
     */
    public readonly authMode!: pulumi.Output<string>;
    /**
     * The VLAN ID of the VLAN associated to this SSID.
     */
    public readonly defaultVlanId!: pulumi.Output<number>;
    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     */
    public readonly dhcpEnforcedDeauthentication!: pulumi.Output<outputs.networks.ApplianceSsidsDhcpEnforcedDeauthentication>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    public readonly dot11w!: pulumi.Output<outputs.networks.ApplianceSsidsDot11w>;
    /**
     * Whether or not the SSID is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The psk encryption mode for the SSID.
     */
    public readonly encryptionMode!: pulumi.Output<string>;
    /**
     * The name of the SSID.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * The number of the SSID.
     */
    public readonly number!: pulumi.Output<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'.
     */
    public readonly psk!: pulumi.Output<string>;
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     */
    public readonly radiusServers!: pulumi.Output<outputs.networks.ApplianceSsidsRadiusServer[]>;
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     */
    public /*out*/ readonly radiusServersResponses!: pulumi.Output<outputs.networks.ApplianceSsidsRadiusServersResponse[]>;
    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     */
    public readonly visible!: pulumi.Output<boolean>;
    /**
     * WPA encryption mode for the SSID.
     */
    public readonly wpaEncryptionMode!: pulumi.Output<string>;

    /**
     * Create a ApplianceSsids resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceSsidsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceSsidsArgs | ApplianceSsidsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceSsidsState | undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["defaultVlanId"] = state ? state.defaultVlanId : undefined;
            resourceInputs["dhcpEnforcedDeauthentication"] = state ? state.dhcpEnforcedDeauthentication : undefined;
            resourceInputs["dot11w"] = state ? state.dot11w : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["encryptionMode"] = state ? state.encryptionMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["number"] = state ? state.number : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["radiusServers"] = state ? state.radiusServers : undefined;
            resourceInputs["radiusServersResponses"] = state ? state.radiusServersResponses : undefined;
            resourceInputs["visible"] = state ? state.visible : undefined;
            resourceInputs["wpaEncryptionMode"] = state ? state.wpaEncryptionMode : undefined;
        } else {
            const args = argsOrState as ApplianceSsidsArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.number === undefined) && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultVlanId"] = args ? args.defaultVlanId : undefined;
            resourceInputs["dhcpEnforcedDeauthentication"] = args ? args.dhcpEnforcedDeauthentication : undefined;
            resourceInputs["dot11w"] = args ? args.dot11w : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["encryptionMode"] = args ? args.encryptionMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["number"] = args ? args.number : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["radiusServers"] = args ? args.radiusServers : undefined;
            resourceInputs["visible"] = args ? args.visible : undefined;
            resourceInputs["wpaEncryptionMode"] = args ? args.wpaEncryptionMode : undefined;
            resourceInputs["radiusServersResponses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceSsids.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceSsids resources.
 */
export interface ApplianceSsidsState {
    /**
     * The association control method for the SSID.
     */
    authMode?: pulumi.Input<string>;
    /**
     * The VLAN ID of the VLAN associated to this SSID.
     */
    defaultVlanId?: pulumi.Input<number>;
    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     */
    dhcpEnforcedDeauthentication?: pulumi.Input<inputs.networks.ApplianceSsidsDhcpEnforcedDeauthentication>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    dot11w?: pulumi.Input<inputs.networks.ApplianceSsidsDot11w>;
    /**
     * Whether or not the SSID is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The psk encryption mode for the SSID.
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * The name of the SSID.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * The number of the SSID.
     */
    number?: pulumi.Input<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'.
     */
    psk?: pulumi.Input<string>;
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     */
    radiusServers?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSsidsRadiusServer>[]>;
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     */
    radiusServersResponses?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSsidsRadiusServersResponse>[]>;
    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     */
    visible?: pulumi.Input<boolean>;
    /**
     * WPA encryption mode for the SSID.
     */
    wpaEncryptionMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplianceSsids resource.
 */
export interface ApplianceSsidsArgs {
    /**
     * The association control method for the SSID.
     */
    authMode?: pulumi.Input<string>;
    /**
     * The VLAN ID of the VLAN associated to this SSID.
     */
    defaultVlanId?: pulumi.Input<number>;
    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     */
    dhcpEnforcedDeauthentication?: pulumi.Input<inputs.networks.ApplianceSsidsDhcpEnforcedDeauthentication>;
    /**
     * The current setting for Protected Management Frames (802.11w).
     */
    dot11w?: pulumi.Input<inputs.networks.ApplianceSsidsDot11w>;
    /**
     * Whether or not the SSID is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The psk encryption mode for the SSID.
     */
    encryptionMode?: pulumi.Input<string>;
    /**
     * The name of the SSID.
     */
    name?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * The number of the SSID.
     */
    number: pulumi.Input<number>;
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'.
     */
    psk?: pulumi.Input<string>;
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     */
    radiusServers?: pulumi.Input<pulumi.Input<inputs.networks.ApplianceSsidsRadiusServer>[]>;
    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     */
    visible?: pulumi.Input<boolean>;
    /**
     * WPA encryption mode for the SSID.
     */
    wpaEncryptionMode?: pulumi.Input<string>;
}
