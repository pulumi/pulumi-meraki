// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.networks.SwitchStacksRoutingInterfacesDhcp("example", {
 *     bootFileName: "home_boot_file",
 *     bootNextServer: "1.2.3.4",
 *     bootOptionsEnabled: true,
 *     dhcpLeaseTime: "1 day",
 *     dhcpMode: "dhcpServer",
 *     dhcpOptions: [{
 *         code: "5",
 *         type: "text",
 *         value: "five",
 *     }],
 *     dhcpRelayServerIps: ["1.2.3.4"],
 *     dnsCustomNameservers: ["8.8.8.8, 8.8.4.4"],
 *     dnsNameserversOption: "custom",
 *     fixedIpAssignments: [{
 *         ip: "192.168.1.12",
 *         mac: "22:33:44:55:66:77",
 *         name: "Cisco Meraki valued client",
 *     }],
 *     interfaceId: "string",
 *     networkId: "string",
 *     reservedIpRanges: [{
 *         comment: "A reserved IP range",
 *         end: "192.168.1.10",
 *         start: "192.168.1.1",
 *     }],
 *     switchStackId: "string",
 * });
 * export const merakiNetworksSwitchStacksRoutingInterfacesDhcpExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp example "interface_id,network_id,switch_stack_id"
 * ```
 */
export class SwitchStacksRoutingInterfacesDhcp extends pulumi.CustomResource {
    /**
     * Get an existing SwitchStacksRoutingInterfacesDhcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchStacksRoutingInterfacesDhcpState, opts?: pulumi.CustomResourceOptions): SwitchStacksRoutingInterfacesDhcp {
        return new SwitchStacksRoutingInterfacesDhcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp';

    /**
     * Returns true if the given object is an instance of SwitchStacksRoutingInterfacesDhcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchStacksRoutingInterfacesDhcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchStacksRoutingInterfacesDhcp.__pulumiType;
    }

    /**
     * The PXE boot server file name for the DHCP server running on the switch stack interface
     */
    declare public readonly bootFileName: pulumi.Output<string>;
    /**
     * The PXE boot server IP for the DHCP server running on the switch stack interface
     */
    declare public readonly bootNextServer: pulumi.Output<string>;
    /**
     * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     */
    declare public readonly bootOptionsEnabled: pulumi.Output<boolean>;
    /**
     * The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
     */
    declare public readonly dhcpLeaseTime: pulumi.Output<string>;
    /**
     * The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
     */
    declare public readonly dhcpMode: pulumi.Output<string>;
    /**
     * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     */
    declare public readonly dhcpOptions: pulumi.Output<outputs.networks.SwitchStacksRoutingInterfacesDhcpDhcpOption[]>;
    /**
     * The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     */
    declare public readonly dhcpRelayServerIps: pulumi.Output<string[]>;
    /**
     * The DHCP name server IPs when DHCP name server option is 'custom'
     */
    declare public readonly dnsCustomNameservers: pulumi.Output<string[]>;
    /**
     * The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
     */
    declare public readonly dnsNameserversOption: pulumi.Output<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    declare public readonly fixedIpAssignments: pulumi.Output<outputs.networks.SwitchStacksRoutingInterfacesDhcpFixedIpAssignment[]>;
    /**
     * interfaceId path parameter. Interface ID
     */
    declare public readonly interfaceId: pulumi.Output<string>;
    /**
     * networkId path parameter. Network ID
     */
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    declare public readonly reservedIpRanges: pulumi.Output<outputs.networks.SwitchStacksRoutingInterfacesDhcpReservedIpRange[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    declare public readonly switchStackId: pulumi.Output<string>;

    /**
     * Create a SwitchStacksRoutingInterfacesDhcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchStacksRoutingInterfacesDhcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchStacksRoutingInterfacesDhcpArgs | SwitchStacksRoutingInterfacesDhcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchStacksRoutingInterfacesDhcpState | undefined;
            resourceInputs["bootFileName"] = state?.bootFileName;
            resourceInputs["bootNextServer"] = state?.bootNextServer;
            resourceInputs["bootOptionsEnabled"] = state?.bootOptionsEnabled;
            resourceInputs["dhcpLeaseTime"] = state?.dhcpLeaseTime;
            resourceInputs["dhcpMode"] = state?.dhcpMode;
            resourceInputs["dhcpOptions"] = state?.dhcpOptions;
            resourceInputs["dhcpRelayServerIps"] = state?.dhcpRelayServerIps;
            resourceInputs["dnsCustomNameservers"] = state?.dnsCustomNameservers;
            resourceInputs["dnsNameserversOption"] = state?.dnsNameserversOption;
            resourceInputs["fixedIpAssignments"] = state?.fixedIpAssignments;
            resourceInputs["interfaceId"] = state?.interfaceId;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["reservedIpRanges"] = state?.reservedIpRanges;
            resourceInputs["switchStackId"] = state?.switchStackId;
        } else {
            const args = argsOrState as SwitchStacksRoutingInterfacesDhcpArgs | undefined;
            if (args?.interfaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'interfaceId'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.switchStackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'switchStackId'");
            }
            resourceInputs["bootFileName"] = args?.bootFileName;
            resourceInputs["bootNextServer"] = args?.bootNextServer;
            resourceInputs["bootOptionsEnabled"] = args?.bootOptionsEnabled;
            resourceInputs["dhcpLeaseTime"] = args?.dhcpLeaseTime;
            resourceInputs["dhcpMode"] = args?.dhcpMode;
            resourceInputs["dhcpOptions"] = args?.dhcpOptions;
            resourceInputs["dhcpRelayServerIps"] = args?.dhcpRelayServerIps;
            resourceInputs["dnsCustomNameservers"] = args?.dnsCustomNameservers;
            resourceInputs["dnsNameserversOption"] = args?.dnsNameserversOption;
            resourceInputs["fixedIpAssignments"] = args?.fixedIpAssignments;
            resourceInputs["interfaceId"] = args?.interfaceId;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["reservedIpRanges"] = args?.reservedIpRanges;
            resourceInputs["switchStackId"] = args?.switchStackId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchStacksRoutingInterfacesDhcp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchStacksRoutingInterfacesDhcp resources.
 */
export interface SwitchStacksRoutingInterfacesDhcpState {
    /**
     * The PXE boot server file name for the DHCP server running on the switch stack interface
     */
    bootFileName?: pulumi.Input<string>;
    /**
     * The PXE boot server IP for the DHCP server running on the switch stack interface
     */
    bootNextServer?: pulumi.Input<string>;
    /**
     * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     */
    bootOptionsEnabled?: pulumi.Input<boolean>;
    /**
     * The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
     */
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
     */
    dhcpMode?: pulumi.Input<string>;
    /**
     * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     */
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpDhcpOption>[]>;
    /**
     * The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     */
    dhcpRelayServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DHCP name server IPs when DHCP name server option is 'custom'
     */
    dnsCustomNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
     */
    dnsNameserversOption?: pulumi.Input<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    fixedIpAssignments?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpFixedIpAssignment>[]>;
    /**
     * interfaceId path parameter. Interface ID
     */
    interfaceId?: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    reservedIpRanges?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpReservedIpRange>[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    switchStackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchStacksRoutingInterfacesDhcp resource.
 */
export interface SwitchStacksRoutingInterfacesDhcpArgs {
    /**
     * The PXE boot server file name for the DHCP server running on the switch stack interface
     */
    bootFileName?: pulumi.Input<string>;
    /**
     * The PXE boot server IP for the DHCP server running on the switch stack interface
     */
    bootNextServer?: pulumi.Input<string>;
    /**
     * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     */
    bootOptionsEnabled?: pulumi.Input<boolean>;
    /**
     * The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
     */
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
     */
    dhcpMode?: pulumi.Input<string>;
    /**
     * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     */
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpDhcpOption>[]>;
    /**
     * The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     */
    dhcpRelayServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DHCP name server IPs when DHCP name server option is 'custom'
     */
    dnsCustomNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
     */
    dnsNameserversOption?: pulumi.Input<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    fixedIpAssignments?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpFixedIpAssignment>[]>;
    /**
     * interfaceId path parameter. Interface ID
     */
    interfaceId: pulumi.Input<string>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     */
    reservedIpRanges?: pulumi.Input<pulumi.Input<inputs.networks.SwitchStacksRoutingInterfacesDhcpReservedIpRange>[]>;
    /**
     * switchStackId path parameter. Switch stack ID
     */
    switchStackId: pulumi.Input<string>;
}
