// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.networks.getSmUsers({
 *     emails: ["string"],
 *     ids: ["string"],
 *     networkId: "string",
 *     scopes: ["string"],
 *     usernames: ["string"],
 * });
 * export const merakiNetworksSmUsersExample = example.then(example => example.items);
 * ```
 */
export function getSmUsers(args: GetSmUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetSmUsersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("meraki:networks/getSmUsers:getSmUsers", {
        "emails": args.emails,
        "ids": args.ids,
        "networkId": args.networkId,
        "scopes": args.scopes,
        "usernames": args.usernames,
    }, opts);
}

/**
 * A collection of arguments for invoking getSmUsers.
 */
export interface GetSmUsersArgs {
    /**
     * emails query parameter. Filter users by email(s).
     */
    emails?: string[];
    /**
     * ids query parameter. Filter users by id(s).
     */
    ids?: string[];
    /**
     * networkId path parameter. Network ID
     */
    networkId: string;
    /**
     * scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     */
    scopes?: string[];
    /**
     * usernames query parameter. Filter users by username(s).
     */
    usernames?: string[];
}

/**
 * A collection of values returned by getSmUsers.
 */
export interface GetSmUsersResult {
    /**
     * emails query parameter. Filter users by email(s).
     */
    readonly emails?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ids query parameter. Filter users by id(s).
     */
    readonly ids?: string[];
    /**
     * Array of ResponseSmGetNetworkSmUsers
     */
    readonly items: outputs.networks.GetSmUsersItem[];
    /**
     * networkId path parameter. Network ID
     */
    readonly networkId: string;
    /**
     * scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     */
    readonly scopes?: string[];
    /**
     * usernames query parameter. Filter users by username(s).
     */
    readonly usernames?: string[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.networks.getSmUsers({
 *     emails: ["string"],
 *     ids: ["string"],
 *     networkId: "string",
 *     scopes: ["string"],
 *     usernames: ["string"],
 * });
 * export const merakiNetworksSmUsersExample = example.then(example => example.items);
 * ```
 */
export function getSmUsersOutput(args: GetSmUsersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSmUsersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("meraki:networks/getSmUsers:getSmUsers", {
        "emails": args.emails,
        "ids": args.ids,
        "networkId": args.networkId,
        "scopes": args.scopes,
        "usernames": args.usernames,
    }, opts);
}

/**
 * A collection of arguments for invoking getSmUsers.
 */
export interface GetSmUsersOutputArgs {
    /**
     * emails query parameter. Filter users by email(s).
     */
    emails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ids query parameter. Filter users by id(s).
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * networkId path parameter. Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * usernames query parameter. Filter users by username(s).
     */
    usernames?: pulumi.Input<pulumi.Input<string>[]>;
}
