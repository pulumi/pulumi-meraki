// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getSwitchPortsBySwitch({
 *     configurationUpdatedAfter: "string",
 *     endingBefore: "string",
 *     mac: "string",
 *     macs: ["string"],
 *     name: "string",
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     portProfileIds: ["string"],
 *     serial: "string",
 *     serials: ["string"],
 *     startingAfter: "string",
 * });
 * export const merakiOrganizationsSwitchPortsBySwitchExample = example.then(example => example.items);
 * ```
 */
export function getSwitchPortsBySwitch(args: GetSwitchPortsBySwitchArgs, opts?: pulumi.InvokeOptions): Promise<GetSwitchPortsBySwitchResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("meraki:organizations/getSwitchPortsBySwitch:getSwitchPortsBySwitch", {
        "configurationUpdatedAfter": args.configurationUpdatedAfter,
        "endingBefore": args.endingBefore,
        "mac": args.mac,
        "macs": args.macs,
        "name": args.name,
        "networkIds": args.networkIds,
        "organizationId": args.organizationId,
        "perPage": args.perPage,
        "portProfileIds": args.portProfileIds,
        "serial": args.serial,
        "serials": args.serials,
        "startingAfter": args.startingAfter,
    }, opts);
}

/**
 * A collection of arguments for invoking getSwitchPortsBySwitch.
 */
export interface GetSwitchPortsBySwitchArgs {
    /**
     * configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     */
    configurationUpdatedAfter?: string;
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: string;
    /**
     * mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     */
    mac?: string;
    /**
     * macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     */
    macs?: string[];
    /**
     * name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     */
    name?: string;
    /**
     * networkIds query parameter. Optional parameter to filter switchports by network.
     */
    networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     */
    perPage?: number;
    /**
     * portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     */
    portProfileIds?: string[];
    /**
     * serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     */
    serial?: string;
    /**
     * serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     */
    serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: string;
}

/**
 * A collection of values returned by getSwitchPortsBySwitch.
 */
export interface GetSwitchPortsBySwitchResult {
    /**
     * configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     */
    readonly configurationUpdatedAfter?: string;
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly endingBefore?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Array of ResponseSwitchGetOrganizationSwitchPortsBySwitch
     */
    readonly items: outputs.organizations.GetSwitchPortsBySwitchItem[];
    /**
     * mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     */
    readonly mac?: string;
    /**
     * macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     */
    readonly macs?: string[];
    /**
     * name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     */
    readonly name?: string;
    /**
     * networkIds query parameter. Optional parameter to filter switchports by network.
     */
    readonly networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    readonly organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     */
    readonly perPage?: number;
    /**
     * portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     */
    readonly portProfileIds?: string[];
    /**
     * serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     */
    readonly serial?: string;
    /**
     * serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     */
    readonly serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly startingAfter?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getSwitchPortsBySwitch({
 *     configurationUpdatedAfter: "string",
 *     endingBefore: "string",
 *     mac: "string",
 *     macs: ["string"],
 *     name: "string",
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     portProfileIds: ["string"],
 *     serial: "string",
 *     serials: ["string"],
 *     startingAfter: "string",
 * });
 * export const merakiOrganizationsSwitchPortsBySwitchExample = example.then(example => example.items);
 * ```
 */
export function getSwitchPortsBySwitchOutput(args: GetSwitchPortsBySwitchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSwitchPortsBySwitchResult> {
    return pulumi.output(args).apply((a: any) => getSwitchPortsBySwitch(a, opts))
}

/**
 * A collection of arguments for invoking getSwitchPortsBySwitch.
 */
export interface GetSwitchPortsBySwitchOutputArgs {
    /**
     * configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     */
    configurationUpdatedAfter?: pulumi.Input<string>;
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: pulumi.Input<string>;
    /**
     * mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     */
    mac?: pulumi.Input<string>;
    /**
     * macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     */
    macs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     */
    name?: pulumi.Input<string>;
    /**
     * networkIds query parameter. Optional parameter to filter switchports by network.
     */
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     */
    perPage?: pulumi.Input<number>;
    /**
     * portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     */
    portProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     */
    serial?: pulumi.Input<string>;
    /**
     * serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     */
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: pulumi.Input<string>;
}
