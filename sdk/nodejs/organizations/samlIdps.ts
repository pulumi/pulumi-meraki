// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.SamlIdps("example", {
 *     organizationId: "string",
 *     sloLogoutUrl: "https://somewhere.com",
 *     x509certSha1Fingerprint: "00:11:22:33:44:55:66:77:88:99:00:11:22:33:44:55:66:77:88:99",
 * });
 * export const merakiOrganizationsSamlIdpsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/samlIdps:SamlIdps example "idp_id,organization_id"
 * ```
 */
export class SamlIdps extends pulumi.CustomResource {
    /**
     * Get an existing SamlIdps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlIdpsState, opts?: pulumi.CustomResourceOptions): SamlIdps {
        return new SamlIdps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/samlIdps:SamlIdps';

    /**
     * Returns true if the given object is an instance of SamlIdps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlIdps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlIdps.__pulumiType;
    }

    /**
     * URL that is consuming SAML Identity Provider (IdP)
     */
    declare public /*out*/ readonly consumerUrl: pulumi.Output<string>;
    /**
     * ID associated with the SAML Identity Provider (IdP)
     */
    declare public readonly idpId: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * Dashboard will redirect users to this URL when they sign out.
     */
    declare public readonly sloLogoutUrl: pulumi.Output<string>;
    /**
     * Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     */
    declare public readonly x509certSha1Fingerprint: pulumi.Output<string>;

    /**
     * Create a SamlIdps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlIdpsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlIdpsArgs | SamlIdpsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlIdpsState | undefined;
            resourceInputs["consumerUrl"] = state?.consumerUrl;
            resourceInputs["idpId"] = state?.idpId;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["sloLogoutUrl"] = state?.sloLogoutUrl;
            resourceInputs["x509certSha1Fingerprint"] = state?.x509certSha1Fingerprint;
        } else {
            const args = argsOrState as SamlIdpsArgs | undefined;
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["idpId"] = args?.idpId;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["sloLogoutUrl"] = args?.sloLogoutUrl;
            resourceInputs["x509certSha1Fingerprint"] = args?.x509certSha1Fingerprint;
            resourceInputs["consumerUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlIdps.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlIdps resources.
 */
export interface SamlIdpsState {
    /**
     * URL that is consuming SAML Identity Provider (IdP)
     */
    consumerUrl?: pulumi.Input<string>;
    /**
     * ID associated with the SAML Identity Provider (IdP)
     */
    idpId?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Dashboard will redirect users to this URL when they sign out.
     */
    sloLogoutUrl?: pulumi.Input<string>;
    /**
     * Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     */
    x509certSha1Fingerprint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SamlIdps resource.
 */
export interface SamlIdpsArgs {
    /**
     * ID associated with the SAML Identity Provider (IdP)
     */
    idpId?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * Dashboard will redirect users to this URL when they sign out.
     */
    sloLogoutUrl?: pulumi.Input<string>;
    /**
     * Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     */
    x509certSha1Fingerprint?: pulumi.Input<string>;
}
