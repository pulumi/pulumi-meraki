// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.LoginSecurity("example", {
 *     accountLockoutAttempts: 3,
 *     apiAuthentication: {
 *         ip_restrictions_for_keys: {
 *             enabled: true,
 *             ranges: [
 *                 "192.195.83.1",
 *                 "192.168.33.33",
 *             ],
 *         },
 *     },
 *     enforceAccountLockout: true,
 *     enforceDifferentPasswords: true,
 *     enforceIdleTimeout: true,
 *     enforceLoginIpRanges: true,
 *     enforcePasswordExpiration: true,
 *     enforceStrongPasswords: true,
 *     enforceTwoFactorAuth: true,
 *     idleTimeoutMinutes: 30,
 *     loginIpRanges: [
 *         "192.195.83.1",
 *         "192.195.83.255",
 *     ],
 *     numDifferentPasswords: 3,
 *     organizationId: "string",
 *     passwordExpirationDays: 90,
 * });
 * export const merakiOrganizationsLoginSecurityExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/loginSecurity:LoginSecurity example "organization_id"
 * ```
 */
export class LoginSecurity extends pulumi.CustomResource {
    /**
     * Get an existing LoginSecurity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoginSecurityState, opts?: pulumi.CustomResourceOptions): LoginSecurity {
        return new LoginSecurity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/loginSecurity:LoginSecurity';

    /**
     * Returns true if the given object is an instance of LoginSecurity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoginSecurity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoginSecurity.__pulumiType;
    }

    /**
     * Number of consecutive failed login attempts after which users' accounts will be locked.
     */
    declare public readonly accountLockoutAttempts: pulumi.Output<number>;
    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     */
    declare public readonly apiAuthentication: pulumi.Output<outputs.organizations.LoginSecurityApiAuthentication>;
    /**
     * Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     */
    declare public readonly enforceAccountLockout: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     */
    declare public readonly enforceDifferentPasswords: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     */
    declare public readonly enforceIdleTimeout: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     */
    declare public readonly enforceLoginIpRanges: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     */
    declare public readonly enforcePasswordExpiration: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     */
    declare public readonly enforceStrongPasswords: pulumi.Output<boolean>;
    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     */
    declare public readonly enforceTwoFactorAuth: pulumi.Output<boolean>;
    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     */
    declare public readonly idleTimeoutMinutes: pulumi.Output<number>;
    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     */
    declare public readonly loginIpRanges: pulumi.Output<string[]>;
    /**
     * Number of recent passwords that new password must be distinct from.
     */
    declare public readonly numDifferentPasswords: pulumi.Output<number>;
    /**
     * organizationId path parameter. Organization ID
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * Number of days after which users will be forced to change their password.
     */
    declare public readonly passwordExpirationDays: pulumi.Output<number>;

    /**
     * Create a LoginSecurity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoginSecurityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoginSecurityArgs | LoginSecurityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoginSecurityState | undefined;
            resourceInputs["accountLockoutAttempts"] = state?.accountLockoutAttempts;
            resourceInputs["apiAuthentication"] = state?.apiAuthentication;
            resourceInputs["enforceAccountLockout"] = state?.enforceAccountLockout;
            resourceInputs["enforceDifferentPasswords"] = state?.enforceDifferentPasswords;
            resourceInputs["enforceIdleTimeout"] = state?.enforceIdleTimeout;
            resourceInputs["enforceLoginIpRanges"] = state?.enforceLoginIpRanges;
            resourceInputs["enforcePasswordExpiration"] = state?.enforcePasswordExpiration;
            resourceInputs["enforceStrongPasswords"] = state?.enforceStrongPasswords;
            resourceInputs["enforceTwoFactorAuth"] = state?.enforceTwoFactorAuth;
            resourceInputs["idleTimeoutMinutes"] = state?.idleTimeoutMinutes;
            resourceInputs["loginIpRanges"] = state?.loginIpRanges;
            resourceInputs["numDifferentPasswords"] = state?.numDifferentPasswords;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["passwordExpirationDays"] = state?.passwordExpirationDays;
        } else {
            const args = argsOrState as LoginSecurityArgs | undefined;
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["accountLockoutAttempts"] = args?.accountLockoutAttempts;
            resourceInputs["apiAuthentication"] = args?.apiAuthentication;
            resourceInputs["enforceAccountLockout"] = args?.enforceAccountLockout;
            resourceInputs["enforceDifferentPasswords"] = args?.enforceDifferentPasswords;
            resourceInputs["enforceIdleTimeout"] = args?.enforceIdleTimeout;
            resourceInputs["enforceLoginIpRanges"] = args?.enforceLoginIpRanges;
            resourceInputs["enforcePasswordExpiration"] = args?.enforcePasswordExpiration;
            resourceInputs["enforceStrongPasswords"] = args?.enforceStrongPasswords;
            resourceInputs["enforceTwoFactorAuth"] = args?.enforceTwoFactorAuth;
            resourceInputs["idleTimeoutMinutes"] = args?.idleTimeoutMinutes;
            resourceInputs["loginIpRanges"] = args?.loginIpRanges;
            resourceInputs["numDifferentPasswords"] = args?.numDifferentPasswords;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["passwordExpirationDays"] = args?.passwordExpirationDays;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoginSecurity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoginSecurity resources.
 */
export interface LoginSecurityState {
    /**
     * Number of consecutive failed login attempts after which users' accounts will be locked.
     */
    accountLockoutAttempts?: pulumi.Input<number>;
    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     */
    apiAuthentication?: pulumi.Input<inputs.organizations.LoginSecurityApiAuthentication>;
    /**
     * Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     */
    enforceAccountLockout?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     */
    enforceDifferentPasswords?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     */
    enforceIdleTimeout?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     */
    enforceLoginIpRanges?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     */
    enforcePasswordExpiration?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     */
    enforceStrongPasswords?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     */
    enforceTwoFactorAuth?: pulumi.Input<boolean>;
    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     */
    idleTimeoutMinutes?: pulumi.Input<number>;
    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     */
    loginIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of recent passwords that new password must be distinct from.
     */
    numDifferentPasswords?: pulumi.Input<number>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Number of days after which users will be forced to change their password.
     */
    passwordExpirationDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoginSecurity resource.
 */
export interface LoginSecurityArgs {
    /**
     * Number of consecutive failed login attempts after which users' accounts will be locked.
     */
    accountLockoutAttempts?: pulumi.Input<number>;
    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     */
    apiAuthentication?: pulumi.Input<inputs.organizations.LoginSecurityApiAuthentication>;
    /**
     * Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     */
    enforceAccountLockout?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     */
    enforceDifferentPasswords?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     */
    enforceIdleTimeout?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     */
    enforceLoginIpRanges?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     */
    enforcePasswordExpiration?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     */
    enforceStrongPasswords?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     */
    enforceTwoFactorAuth?: pulumi.Input<boolean>;
    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     */
    idleTimeoutMinutes?: pulumi.Input<number>;
    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     */
    loginIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of recent passwords that new password must be distinct from.
     */
    numDifferentPasswords?: pulumi.Input<number>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * Number of days after which users will be forced to change their password.
     */
    passwordExpirationDays?: pulumi.Input<number>;
}
