// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
 * already existed previously.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.LicensingCotermLicensesMove("example", {
 *     organizationId: "string",
 *     parameters: {
 *         destination: {
 *             mode: "addDevices",
 *             organizationId: "123",
 *         },
 *         licenses: [{
 *             counts: [{
 *                 count: 5,
 *                 model: "MR Enterprise",
 *             }],
 *             key: "Z2AA-BBBB-CCCC",
 *         }],
 *     },
 * });
 * export const merakiOrganizationsLicensingCotermLicensesMoveExample = example;
 * ```
 */
export class LicensingCotermLicensesMove extends pulumi.CustomResource {
    /**
     * Get an existing LicensingCotermLicensesMove resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensingCotermLicensesMoveState, opts?: pulumi.CustomResourceOptions): LicensingCotermLicensesMove {
        return new LicensingCotermLicensesMove(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/licensingCotermLicensesMove:LicensingCotermLicensesMove';

    /**
     * Returns true if the given object is an instance of LicensingCotermLicensesMove.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicensingCotermLicensesMove {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicensingCotermLicensesMove.__pulumiType;
    }

    public /*out*/ readonly item!: pulumi.Output<outputs.organizations.LicensingCotermLicensesMoveItem>;
    /**
     * organizationId path parameter. Organization ID
     */
    public readonly organizationId!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<outputs.organizations.LicensingCotermLicensesMoveParameters>;

    /**
     * Create a LicensingCotermLicensesMove resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicensingCotermLicensesMoveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensingCotermLicensesMoveArgs | LicensingCotermLicensesMoveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensingCotermLicensesMoveState | undefined;
            resourceInputs["item"] = state ? state.item : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
        } else {
            const args = argsOrState as LicensingCotermLicensesMoveArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["item"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicensingCotermLicensesMove.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LicensingCotermLicensesMove resources.
 */
export interface LicensingCotermLicensesMoveState {
    item?: pulumi.Input<inputs.organizations.LicensingCotermLicensesMoveItem>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.organizations.LicensingCotermLicensesMoveParameters>;
}

/**
 * The set of arguments for constructing a LicensingCotermLicensesMove resource.
 */
export interface LicensingCotermLicensesMoveArgs {
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    parameters: pulumi.Input<inputs.organizations.LicensingCotermLicensesMoveParameters>;
}
