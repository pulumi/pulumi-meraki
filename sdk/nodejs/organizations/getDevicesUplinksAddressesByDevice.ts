// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getDevicesUplinksAddressesByDevice({
 *     endingBefore: "string",
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     productTypes: ["string"],
 *     serials: ["string"],
 *     startingAfter: "string",
 *     tags: ["string"],
 *     tagsFilterType: "string",
 * });
 * export const merakiOrganizationsDevicesUplinksAddressesByDeviceExample = example.then(example => example.items);
 * ```
 */
export function getDevicesUplinksAddressesByDevice(args: GetDevicesUplinksAddressesByDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetDevicesUplinksAddressesByDeviceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("meraki:organizations/getDevicesUplinksAddressesByDevice:getDevicesUplinksAddressesByDevice", {
        "endingBefore": args.endingBefore,
        "networkIds": args.networkIds,
        "organizationId": args.organizationId,
        "perPage": args.perPage,
        "productTypes": args.productTypes,
        "serials": args.serials,
        "startingAfter": args.startingAfter,
        "tags": args.tags,
        "tagsFilterType": args.tagsFilterType,
    }, opts);
}

/**
 * A collection of arguments for invoking getDevicesUplinksAddressesByDevice.
 */
export interface GetDevicesUplinksAddressesByDeviceArgs {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: string;
    /**
     * networkIds query parameter. Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     */
    networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    perPage?: number;
    /**
     * productTypes query parameter. Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     */
    productTypes?: string[];
    /**
     * serials query parameter. Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     */
    serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: string;
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     */
    tags?: string[];
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    tagsFilterType?: string;
}

/**
 * A collection of values returned by getDevicesUplinksAddressesByDevice.
 */
export interface GetDevicesUplinksAddressesByDeviceResult {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly endingBefore?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Array of ResponseOrganizationsGetOrganizationDevicesUplinksAddressesByDevice
     */
    readonly items: outputs.organizations.GetDevicesUplinksAddressesByDeviceItem[];
    /**
     * networkIds query parameter. Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     */
    readonly networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    readonly organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    readonly perPage?: number;
    /**
     * productTypes query parameter. Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     */
    readonly productTypes?: string[];
    /**
     * serials query parameter. Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     */
    readonly serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly startingAfter?: string;
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     */
    readonly tags?: string[];
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    readonly tagsFilterType?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getDevicesUplinksAddressesByDevice({
 *     endingBefore: "string",
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     productTypes: ["string"],
 *     serials: ["string"],
 *     startingAfter: "string",
 *     tags: ["string"],
 *     tagsFilterType: "string",
 * });
 * export const merakiOrganizationsDevicesUplinksAddressesByDeviceExample = example.then(example => example.items);
 * ```
 */
export function getDevicesUplinksAddressesByDeviceOutput(args: GetDevicesUplinksAddressesByDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevicesUplinksAddressesByDeviceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("meraki:organizations/getDevicesUplinksAddressesByDevice:getDevicesUplinksAddressesByDevice", {
        "endingBefore": args.endingBefore,
        "networkIds": args.networkIds,
        "organizationId": args.organizationId,
        "perPage": args.perPage,
        "productTypes": args.productTypes,
        "serials": args.serials,
        "startingAfter": args.startingAfter,
        "tags": args.tags,
        "tagsFilterType": args.tagsFilterType,
    }, opts);
}

/**
 * A collection of arguments for invoking getDevicesUplinksAddressesByDevice.
 */
export interface GetDevicesUplinksAddressesByDeviceOutputArgs {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: pulumi.Input<string>;
    /**
     * networkIds query parameter. Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches.
     */
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    perPage?: pulumi.Input<number>;
    /**
     * productTypes query parameter. Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches.
     */
    productTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * serials query parameter. Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
     */
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: pulumi.Input<string>;
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    tagsFilterType?: pulumi.Input<string>;
}
