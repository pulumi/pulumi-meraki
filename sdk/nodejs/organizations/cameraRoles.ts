// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.CameraRoles("example", {
 *     appliedOnDevices: [{
 *         id: "",
 *         permission_scope_id: "1",
 *         tag: "reception-desk",
 *     }],
 *     appliedOnNetworks: [{
 *         id: "",
 *         permission_scope_id: "2",
 *         tag: "building-a",
 *     }],
 *     appliedOrgWides: [{
 *         permission_scope_id: "2",
 *     }],
 *     name: "Security_Guard",
 *     organizationId: "string",
 * });
 * export const merakiOrganizationsCameraRolesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/cameraRoles:CameraRoles example "organization_id,role_id"
 * ```
 */
export class CameraRoles extends pulumi.CustomResource {
    /**
     * Get an existing CameraRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CameraRolesState, opts?: pulumi.CustomResourceOptions): CameraRoles {
        return new CameraRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/cameraRoles:CameraRoles';

    /**
     * Returns true if the given object is an instance of CameraRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CameraRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CameraRoles.__pulumiType;
    }

    /**
     * Device tag on which this specified permission is applied.
     */
    declare public readonly appliedOnDevices: pulumi.Output<outputs.organizations.CameraRolesAppliedOnDevice[]>;
    /**
     * Network tag on which this specified permission is applied.
     */
    declare public readonly appliedOnNetworks: pulumi.Output<outputs.organizations.CameraRolesAppliedOnNetwork[]>;
    /**
     * Permissions to be applied org wide.
     */
    declare public readonly appliedOrgWides: pulumi.Output<outputs.organizations.CameraRolesAppliedOrgWide[]>;
    /**
     * The name of the new role. Must be unique. This parameter is required.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * roleId path parameter. Role ID
     */
    declare public readonly roleId: pulumi.Output<string | undefined>;

    /**
     * Create a CameraRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CameraRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CameraRolesArgs | CameraRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CameraRolesState | undefined;
            resourceInputs["appliedOnDevices"] = state?.appliedOnDevices;
            resourceInputs["appliedOnNetworks"] = state?.appliedOnNetworks;
            resourceInputs["appliedOrgWides"] = state?.appliedOrgWides;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["roleId"] = state?.roleId;
        } else {
            const args = argsOrState as CameraRolesArgs | undefined;
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["appliedOnDevices"] = args?.appliedOnDevices;
            resourceInputs["appliedOnNetworks"] = args?.appliedOnNetworks;
            resourceInputs["appliedOrgWides"] = args?.appliedOrgWides;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["roleId"] = args?.roleId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CameraRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CameraRoles resources.
 */
export interface CameraRolesState {
    /**
     * Device tag on which this specified permission is applied.
     */
    appliedOnDevices?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOnDevice>[]>;
    /**
     * Network tag on which this specified permission is applied.
     */
    appliedOnNetworks?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOnNetwork>[]>;
    /**
     * Permissions to be applied org wide.
     */
    appliedOrgWides?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOrgWide>[]>;
    /**
     * The name of the new role. Must be unique. This parameter is required.
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * roleId path parameter. Role ID
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CameraRoles resource.
 */
export interface CameraRolesArgs {
    /**
     * Device tag on which this specified permission is applied.
     */
    appliedOnDevices?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOnDevice>[]>;
    /**
     * Network tag on which this specified permission is applied.
     */
    appliedOnNetworks?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOnNetwork>[]>;
    /**
     * Permissions to be applied org wide.
     */
    appliedOrgWides?: pulumi.Input<pulumi.Input<inputs.organizations.CameraRolesAppliedOrgWide>[]>;
    /**
     * The name of the new role. Must be unique. This parameter is required.
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * roleId path parameter. Role ID
     */
    roleId?: pulumi.Input<string>;
}
