// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getDevicesStatuses({
 *     endingBefore: "string",
 *     models: ["string"],
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     productTypes: ["string"],
 *     serials: ["string"],
 *     startingAfter: "string",
 *     statuses: ["string"],
 *     tags: ["string"],
 *     tagsFilterType: "string",
 * });
 * export const merakiOrganizationsDevicesStatusesExample = example.then(example => example.items);
 * ```
 */
export function getDevicesStatuses(args: GetDevicesStatusesArgs, opts?: pulumi.InvokeOptions): Promise<GetDevicesStatusesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("meraki:organizations/getDevicesStatuses:getDevicesStatuses", {
        "endingBefore": args.endingBefore,
        "models": args.models,
        "networkIds": args.networkIds,
        "organizationId": args.organizationId,
        "perPage": args.perPage,
        "productTypes": args.productTypes,
        "serials": args.serials,
        "startingAfter": args.startingAfter,
        "statuses": args.statuses,
        "tags": args.tags,
        "tagsFilterType": args.tagsFilterType,
    }, opts);
}

/**
 * A collection of arguments for invoking getDevicesStatuses.
 */
export interface GetDevicesStatusesArgs {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: string;
    /**
     * models query parameter. Optional parameter to filter devices by models.
     */
    models?: string[];
    /**
     * networkIds query parameter. Optional parameter to filter devices by network ids.
     */
    networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    perPage?: number;
    /**
     * productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     */
    productTypes?: string[];
    /**
     * serials query parameter. Optional parameter to filter devices by serials.
     */
    serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: string;
    /**
     * statuses query parameter. Optional parameter to filter devices by statuses. Valid statuses are ["online", "alerting", "offline", "dormant"].
     */
    statuses?: string[];
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     */
    tags?: string[];
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    tagsFilterType?: string;
}

/**
 * A collection of values returned by getDevicesStatuses.
 */
export interface GetDevicesStatusesResult {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly endingBefore?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Array of ResponseOrganizationsGetOrganizationDevicesStatuses
     */
    readonly items: outputs.organizations.GetDevicesStatusesItem[];
    /**
     * models query parameter. Optional parameter to filter devices by models.
     */
    readonly models?: string[];
    /**
     * networkIds query parameter. Optional parameter to filter devices by network ids.
     */
    readonly networkIds?: string[];
    /**
     * organizationId path parameter. Organization ID
     */
    readonly organizationId: string;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    readonly perPage?: number;
    /**
     * productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     */
    readonly productTypes?: string[];
    /**
     * serials query parameter. Optional parameter to filter devices by serials.
     */
    readonly serials?: string[];
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    readonly startingAfter?: string;
    /**
     * statuses query parameter. Optional parameter to filter devices by statuses. Valid statuses are ["online", "alerting", "offline", "dormant"].
     */
    readonly statuses?: string[];
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     */
    readonly tags?: string[];
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    readonly tagsFilterType?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = meraki.organizations.getDevicesStatuses({
 *     endingBefore: "string",
 *     models: ["string"],
 *     networkIds: ["string"],
 *     organizationId: "string",
 *     perPage: 1,
 *     productTypes: ["string"],
 *     serials: ["string"],
 *     startingAfter: "string",
 *     statuses: ["string"],
 *     tags: ["string"],
 *     tagsFilterType: "string",
 * });
 * export const merakiOrganizationsDevicesStatusesExample = example.then(example => example.items);
 * ```
 */
export function getDevicesStatusesOutput(args: GetDevicesStatusesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDevicesStatusesResult> {
    return pulumi.output(args).apply((a: any) => getDevicesStatuses(a, opts))
}

/**
 * A collection of arguments for invoking getDevicesStatuses.
 */
export interface GetDevicesStatusesOutputArgs {
    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    endingBefore?: pulumi.Input<string>;
    /**
     * models query parameter. Optional parameter to filter devices by models.
     */
    models?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * networkIds query parameter. Optional parameter to filter devices by network ids.
     */
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     */
    perPage?: pulumi.Input<number>;
    /**
     * productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     */
    productTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * serials query parameter. Optional parameter to filter devices by serials.
     */
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    startingAfter?: pulumi.Input<string>;
    /**
     * statuses query parameter. Optional parameter to filter devices by statuses. Valid statuses are ["online", "alerting", "offline", "dormant"].
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tags query parameter. An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tagsFilterType query parameter. An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     */
    tagsFilterType?: pulumi.Input<string>;
}
