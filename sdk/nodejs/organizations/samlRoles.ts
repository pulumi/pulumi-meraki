// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.SamlRoles("example", {
 *     networks: [{
 *         access: "full",
 *         id: "N_24329156",
 *     }],
 *     orgAccess: "none",
 *     organizationId: "string",
 *     role: "myrole",
 *     tags: [{
 *         access: "read-only",
 *         tag: "west",
 *     }],
 * });
 * export const merakiOrganizationsSamlRolesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/samlRoles:SamlRoles example "organization_id,saml_role_id"
 * ```
 */
export class SamlRoles extends pulumi.CustomResource {
    /**
     * Get an existing SamlRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlRolesState, opts?: pulumi.CustomResourceOptions): SamlRoles {
        return new SamlRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/samlRoles:SamlRoles';

    /**
     * Returns true if the given object is an instance of SamlRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlRoles.__pulumiType;
    }

    /**
     * The list of camera access privileges for SAML administrator
     */
    public /*out*/ readonly cameras!: pulumi.Output<outputs.organizations.SamlRolesCamera[]>;
    /**
     * The list of networks that the SAML administrator has privileges on
     */
    public readonly networks!: pulumi.Output<outputs.organizations.SamlRolesNetwork[]>;
    /**
     * The privilege of the SAML administrator on the organization
     */
    public readonly orgAccess!: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The role of the SAML administrator
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * samlRoleId path parameter. Saml role ID
     */
    public readonly samlRoleId!: pulumi.Output<string | undefined>;
    /**
     * The list of tags that the SAML administrator has privleges on
     */
    public readonly tags!: pulumi.Output<outputs.organizations.SamlRolesTag[]>;

    /**
     * Create a SamlRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlRolesArgs | SamlRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlRolesState | undefined;
            resourceInputs["cameras"] = state ? state.cameras : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["orgAccess"] = state ? state.orgAccess : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["samlRoleId"] = state ? state.samlRoleId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SamlRolesArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["orgAccess"] = args ? args.orgAccess : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["samlRoleId"] = args ? args.samlRoleId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cameras"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SamlRoles resources.
 */
export interface SamlRolesState {
    /**
     * The list of camera access privileges for SAML administrator
     */
    cameras?: pulumi.Input<pulumi.Input<inputs.organizations.SamlRolesCamera>[]>;
    /**
     * The list of networks that the SAML administrator has privileges on
     */
    networks?: pulumi.Input<pulumi.Input<inputs.organizations.SamlRolesNetwork>[]>;
    /**
     * The privilege of the SAML administrator on the organization
     */
    orgAccess?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The role of the SAML administrator
     */
    role?: pulumi.Input<string>;
    /**
     * samlRoleId path parameter. Saml role ID
     */
    samlRoleId?: pulumi.Input<string>;
    /**
     * The list of tags that the SAML administrator has privleges on
     */
    tags?: pulumi.Input<pulumi.Input<inputs.organizations.SamlRolesTag>[]>;
}

/**
 * The set of arguments for constructing a SamlRoles resource.
 */
export interface SamlRolesArgs {
    /**
     * The list of networks that the SAML administrator has privileges on
     */
    networks?: pulumi.Input<pulumi.Input<inputs.organizations.SamlRolesNetwork>[]>;
    /**
     * The privilege of the SAML administrator on the organization
     */
    orgAccess?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * The role of the SAML administrator
     */
    role?: pulumi.Input<string>;
    /**
     * samlRoleId path parameter. Saml role ID
     */
    samlRoleId?: pulumi.Input<string>;
    /**
     * The list of tags that the SAML administrator has privleges on
     */
    tags?: pulumi.Input<pulumi.Input<inputs.organizations.SamlRolesTag>[]>;
}
