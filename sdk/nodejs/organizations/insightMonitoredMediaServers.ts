// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.InsightMonitoredMediaServers("example", {
 *     address: "123.123.123.1",
 *     bestEffortMonitoringEnabled: true,
 *     name: "Sample VoIP Provider",
 *     organizationId: "string",
 * });
 * export const merakiOrganizationsInsightMonitoredMediaServersExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/insightMonitoredMediaServers:InsightMonitoredMediaServers example "monitored_media_server_id,organization_id"
 * ```
 */
export class InsightMonitoredMediaServers extends pulumi.CustomResource {
    /**
     * Get an existing InsightMonitoredMediaServers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InsightMonitoredMediaServersState, opts?: pulumi.CustomResourceOptions): InsightMonitoredMediaServers {
        return new InsightMonitoredMediaServers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/insightMonitoredMediaServers:InsightMonitoredMediaServers';

    /**
     * Returns true if the given object is an instance of InsightMonitoredMediaServers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InsightMonitoredMediaServers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InsightMonitoredMediaServers.__pulumiType;
    }

    /**
     * The IP address (IPv4 only) or hostname of the media server to monitor
     */
    declare public readonly address: pulumi.Output<string>;
    /**
     * Indicates that if the media server doesn't respond to ICMP pings, the nearest hop will be used in its stead
     */
    declare public readonly bestEffortMonitoringEnabled: pulumi.Output<boolean>;
    /**
     * monitoredMediaServerId path parameter. Monitored media server ID
     */
    declare public readonly monitoredMediaServerId: pulumi.Output<string | undefined>;
    /**
     * The name of the VoIP provider
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    declare public readonly organizationId: pulumi.Output<string>;

    /**
     * Create a InsightMonitoredMediaServers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InsightMonitoredMediaServersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InsightMonitoredMediaServersArgs | InsightMonitoredMediaServersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InsightMonitoredMediaServersState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["bestEffortMonitoringEnabled"] = state?.bestEffortMonitoringEnabled;
            resourceInputs["monitoredMediaServerId"] = state?.monitoredMediaServerId;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
        } else {
            const args = argsOrState as InsightMonitoredMediaServersArgs | undefined;
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["address"] = args?.address;
            resourceInputs["bestEffortMonitoringEnabled"] = args?.bestEffortMonitoringEnabled;
            resourceInputs["monitoredMediaServerId"] = args?.monitoredMediaServerId;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationId"] = args?.organizationId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InsightMonitoredMediaServers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InsightMonitoredMediaServers resources.
 */
export interface InsightMonitoredMediaServersState {
    /**
     * The IP address (IPv4 only) or hostname of the media server to monitor
     */
    address?: pulumi.Input<string>;
    /**
     * Indicates that if the media server doesn't respond to ICMP pings, the nearest hop will be used in its stead
     */
    bestEffortMonitoringEnabled?: pulumi.Input<boolean>;
    /**
     * monitoredMediaServerId path parameter. Monitored media server ID
     */
    monitoredMediaServerId?: pulumi.Input<string>;
    /**
     * The name of the VoIP provider
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InsightMonitoredMediaServers resource.
 */
export interface InsightMonitoredMediaServersArgs {
    /**
     * The IP address (IPv4 only) or hostname of the media server to monitor
     */
    address?: pulumi.Input<string>;
    /**
     * Indicates that if the media server doesn't respond to ICMP pings, the nearest hop will be used in its stead
     */
    bestEffortMonitoringEnabled?: pulumi.Input<boolean>;
    /**
     * monitoredMediaServerId path parameter. Monitored media server ID
     */
    monitoredMediaServerId?: pulumi.Input<string>;
    /**
     * The name of the VoIP provider
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
}
