// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.Admins("example", {
 *     authenticationMethod: "Email",
 *     email: "miles@meraki.com",
 *     name: "Miles Meraki",
 *     networks: [{
 *         access: "full",
 *         id: "N_24329156",
 *     }],
 *     orgAccess: "none",
 *     organizationId: "string",
 *     tags: [{
 *         access: "read-only",
 *         tag: "west",
 *     }],
 * });
 * export const merakiOrganizationsAdminsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/admins:Admins example "organization_id"
 * ```
 */
export class Admins extends pulumi.CustomResource {
    /**
     * Get an existing Admins resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminsState, opts?: pulumi.CustomResourceOptions): Admins {
        return new Admins(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/admins:Admins';

    /**
     * Returns true if the given object is an instance of Admins.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Admins {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Admins.__pulumiType;
    }

    /**
     * Status of the admin's account
     */
    declare public /*out*/ readonly accountStatus: pulumi.Output<string>;
    /**
     * adminId path parameter. Admin ID
     */
    declare public readonly adminId: pulumi.Output<string | undefined>;
    /**
     * Admin's authentication method
     */
    declare public readonly authenticationMethod: pulumi.Output<string>;
    /**
     * Admin's email address
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * Indicates whether the admin has an API key
     */
    declare public /*out*/ readonly hasApiKey: pulumi.Output<boolean>;
    /**
     * Time when the admin was last active
     */
    declare public /*out*/ readonly lastActive: pulumi.Output<string>;
    /**
     * Admin's username
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Admin network access information
     */
    declare public readonly networks: pulumi.Output<outputs.organizations.AdminsNetwork[]>;
    /**
     * Admin's level of access to the organization
     */
    declare public readonly orgAccess: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    declare public readonly organizationId: pulumi.Output<string>;
    /**
     * Admin tag information
     */
    declare public readonly tags: pulumi.Output<outputs.organizations.AdminsTag[]>;
    /**
     * Indicates whether two-factor authentication is enabled
     */
    declare public /*out*/ readonly twoFactorAuthEnabled: pulumi.Output<boolean>;

    /**
     * Create a Admins resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdminsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminsArgs | AdminsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminsState | undefined;
            resourceInputs["accountStatus"] = state?.accountStatus;
            resourceInputs["adminId"] = state?.adminId;
            resourceInputs["authenticationMethod"] = state?.authenticationMethod;
            resourceInputs["email"] = state?.email;
            resourceInputs["hasApiKey"] = state?.hasApiKey;
            resourceInputs["lastActive"] = state?.lastActive;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["orgAccess"] = state?.orgAccess;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["twoFactorAuthEnabled"] = state?.twoFactorAuthEnabled;
        } else {
            const args = argsOrState as AdminsArgs | undefined;
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["adminId"] = args?.adminId;
            resourceInputs["authenticationMethod"] = args?.authenticationMethod;
            resourceInputs["email"] = args?.email;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["orgAccess"] = args?.orgAccess;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["accountStatus"] = undefined /*out*/;
            resourceInputs["hasApiKey"] = undefined /*out*/;
            resourceInputs["lastActive"] = undefined /*out*/;
            resourceInputs["twoFactorAuthEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Admins.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Admins resources.
 */
export interface AdminsState {
    /**
     * Status of the admin's account
     */
    accountStatus?: pulumi.Input<string>;
    /**
     * adminId path parameter. Admin ID
     */
    adminId?: pulumi.Input<string>;
    /**
     * Admin's authentication method
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Admin's email address
     */
    email?: pulumi.Input<string>;
    /**
     * Indicates whether the admin has an API key
     */
    hasApiKey?: pulumi.Input<boolean>;
    /**
     * Time when the admin was last active
     */
    lastActive?: pulumi.Input<string>;
    /**
     * Admin's username
     */
    name?: pulumi.Input<string>;
    /**
     * Admin network access information
     */
    networks?: pulumi.Input<pulumi.Input<inputs.organizations.AdminsNetwork>[]>;
    /**
     * Admin's level of access to the organization
     */
    orgAccess?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Admin tag information
     */
    tags?: pulumi.Input<pulumi.Input<inputs.organizations.AdminsTag>[]>;
    /**
     * Indicates whether two-factor authentication is enabled
     */
    twoFactorAuthEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Admins resource.
 */
export interface AdminsArgs {
    /**
     * adminId path parameter. Admin ID
     */
    adminId?: pulumi.Input<string>;
    /**
     * Admin's authentication method
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Admin's email address
     */
    email?: pulumi.Input<string>;
    /**
     * Admin's username
     */
    name?: pulumi.Input<string>;
    /**
     * Admin network access information
     */
    networks?: pulumi.Input<pulumi.Input<inputs.organizations.AdminsNetwork>[]>;
    /**
     * Admin's level of access to the organization
     */
    orgAccess?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * Admin tag information
     */
    tags?: pulumi.Input<pulumi.Input<inputs.organizations.AdminsTag>[]>;
}
