// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.Licenses("example", {
 *     deviceSerial: "Q234-ABCD-5678",
 *     licenseId: "string",
 *     organizationId: "string",
 * });
 * export const merakiOrganizationsLicensesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/licenses:Licenses example "license_id,organization_id"
 * ```
 */
export class Licenses extends pulumi.CustomResource {
    /**
     * Get an existing Licenses resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensesState, opts?: pulumi.CustomResourceOptions): Licenses {
        return new Licenses(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/licenses:Licenses';

    /**
     * Returns true if the given object is an instance of Licenses.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Licenses {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Licenses.__pulumiType;
    }

    /**
     * The date the license started burning
     */
    public /*out*/ readonly activationDate!: pulumi.Output<string>;
    /**
     * The date the license was claimed into the organization
     */
    public /*out*/ readonly claimDate!: pulumi.Output<string>;
    /**
     * Serial number of the device the license is assigned to
     */
    public readonly deviceSerial!: pulumi.Output<string>;
    /**
     * The duration of the individual license
     */
    public /*out*/ readonly durationInDays!: pulumi.Output<number>;
    /**
     * The date the license will expire
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * The id of the head license this license is queued behind. If there is no head license, it returns nil.
     */
    public /*out*/ readonly headLicenseId!: pulumi.Output<string>;
    /**
     * licenseId path parameter. License ID
     */
    public readonly licenseId!: pulumi.Output<string>;
    /**
     * License key
     */
    public /*out*/ readonly licenseKey!: pulumi.Output<string>;
    /**
     * License type
     */
    public /*out*/ readonly licenseType!: pulumi.Output<string>;
    /**
     * ID of the network the license is assigned to
     */
    public /*out*/ readonly networkId!: pulumi.Output<string>;
    /**
     * Order number
     */
    public /*out*/ readonly orderNumber!: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     */
    public /*out*/ readonly permanentlyQueuedLicenses!: pulumi.Output<outputs.organizations.LicensesPermanentlyQueuedLicense[]>;
    /**
     * The number of seats of the license. Only applicable to SM licenses.
     */
    public /*out*/ readonly seatCount!: pulumi.Output<number>;
    /**
     * The state of the license. All queued licenses have a status of *recentlyQueued*.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The duration of the license plus all permanently queued licenses associated with it
     */
    public /*out*/ readonly totalDurationInDays!: pulumi.Output<number>;

    /**
     * Create a Licenses resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicensesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensesArgs | LicensesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensesState | undefined;
            resourceInputs["activationDate"] = state ? state.activationDate : undefined;
            resourceInputs["claimDate"] = state ? state.claimDate : undefined;
            resourceInputs["deviceSerial"] = state ? state.deviceSerial : undefined;
            resourceInputs["durationInDays"] = state ? state.durationInDays : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["headLicenseId"] = state ? state.headLicenseId : undefined;
            resourceInputs["licenseId"] = state ? state.licenseId : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["orderNumber"] = state ? state.orderNumber : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["permanentlyQueuedLicenses"] = state ? state.permanentlyQueuedLicenses : undefined;
            resourceInputs["seatCount"] = state ? state.seatCount : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["totalDurationInDays"] = state ? state.totalDurationInDays : undefined;
        } else {
            const args = argsOrState as LicensesArgs | undefined;
            if ((!args || args.licenseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["deviceSerial"] = args ? args.deviceSerial : undefined;
            resourceInputs["licenseId"] = args ? args.licenseId : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["activationDate"] = undefined /*out*/;
            resourceInputs["claimDate"] = undefined /*out*/;
            resourceInputs["durationInDays"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["headLicenseId"] = undefined /*out*/;
            resourceInputs["licenseKey"] = undefined /*out*/;
            resourceInputs["licenseType"] = undefined /*out*/;
            resourceInputs["networkId"] = undefined /*out*/;
            resourceInputs["orderNumber"] = undefined /*out*/;
            resourceInputs["permanentlyQueuedLicenses"] = undefined /*out*/;
            resourceInputs["seatCount"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["totalDurationInDays"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Licenses.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Licenses resources.
 */
export interface LicensesState {
    /**
     * The date the license started burning
     */
    activationDate?: pulumi.Input<string>;
    /**
     * The date the license was claimed into the organization
     */
    claimDate?: pulumi.Input<string>;
    /**
     * Serial number of the device the license is assigned to
     */
    deviceSerial?: pulumi.Input<string>;
    /**
     * The duration of the individual license
     */
    durationInDays?: pulumi.Input<number>;
    /**
     * The date the license will expire
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The id of the head license this license is queued behind. If there is no head license, it returns nil.
     */
    headLicenseId?: pulumi.Input<string>;
    /**
     * licenseId path parameter. License ID
     */
    licenseId?: pulumi.Input<string>;
    /**
     * License key
     */
    licenseKey?: pulumi.Input<string>;
    /**
     * License type
     */
    licenseType?: pulumi.Input<string>;
    /**
     * ID of the network the license is assigned to
     */
    networkId?: pulumi.Input<string>;
    /**
     * Order number
     */
    orderNumber?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     */
    permanentlyQueuedLicenses?: pulumi.Input<pulumi.Input<inputs.organizations.LicensesPermanentlyQueuedLicense>[]>;
    /**
     * The number of seats of the license. Only applicable to SM licenses.
     */
    seatCount?: pulumi.Input<number>;
    /**
     * The state of the license. All queued licenses have a status of *recentlyQueued*.
     */
    state?: pulumi.Input<string>;
    /**
     * The duration of the license plus all permanently queued licenses associated with it
     */
    totalDurationInDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Licenses resource.
 */
export interface LicensesArgs {
    /**
     * Serial number of the device the license is assigned to
     */
    deviceSerial?: pulumi.Input<string>;
    /**
     * licenseId path parameter. License ID
     */
    licenseId: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
}
