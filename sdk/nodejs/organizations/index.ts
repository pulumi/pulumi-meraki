// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ActionBatchesArgs, ActionBatchesState } from "./actionBatches";
export type ActionBatches = import("./actionBatches").ActionBatches;
export const ActionBatches: typeof import("./actionBatches").ActionBatches = null as any;
utilities.lazyLoad(exports, ["ActionBatches"], () => require("./actionBatches"));

export { AdaptivePolicyAclsArgs, AdaptivePolicyAclsState } from "./adaptivePolicyAcls";
export type AdaptivePolicyAcls = import("./adaptivePolicyAcls").AdaptivePolicyAcls;
export const AdaptivePolicyAcls: typeof import("./adaptivePolicyAcls").AdaptivePolicyAcls = null as any;
utilities.lazyLoad(exports, ["AdaptivePolicyAcls"], () => require("./adaptivePolicyAcls"));

export { AdaptivePolicyGroupsArgs, AdaptivePolicyGroupsState } from "./adaptivePolicyGroups";
export type AdaptivePolicyGroups = import("./adaptivePolicyGroups").AdaptivePolicyGroups;
export const AdaptivePolicyGroups: typeof import("./adaptivePolicyGroups").AdaptivePolicyGroups = null as any;
utilities.lazyLoad(exports, ["AdaptivePolicyGroups"], () => require("./adaptivePolicyGroups"));

export { AdaptivePolicyPoliciesArgs, AdaptivePolicyPoliciesState } from "./adaptivePolicyPolicies";
export type AdaptivePolicyPolicies = import("./adaptivePolicyPolicies").AdaptivePolicyPolicies;
export const AdaptivePolicyPolicies: typeof import("./adaptivePolicyPolicies").AdaptivePolicyPolicies = null as any;
utilities.lazyLoad(exports, ["AdaptivePolicyPolicies"], () => require("./adaptivePolicyPolicies"));

export { AdaptivePolicySettingsArgs, AdaptivePolicySettingsState } from "./adaptivePolicySettings";
export type AdaptivePolicySettings = import("./adaptivePolicySettings").AdaptivePolicySettings;
export const AdaptivePolicySettings: typeof import("./adaptivePolicySettings").AdaptivePolicySettings = null as any;
utilities.lazyLoad(exports, ["AdaptivePolicySettings"], () => require("./adaptivePolicySettings"));

export { AdminsArgs, AdminsState } from "./admins";
export type Admins = import("./admins").Admins;
export const Admins: typeof import("./admins").Admins = null as any;
utilities.lazyLoad(exports, ["Admins"], () => require("./admins"));

export { AlertsProfilesArgs, AlertsProfilesState } from "./alertsProfiles";
export type AlertsProfiles = import("./alertsProfiles").AlertsProfiles;
export const AlertsProfiles: typeof import("./alertsProfiles").AlertsProfiles = null as any;
utilities.lazyLoad(exports, ["AlertsProfiles"], () => require("./alertsProfiles"));

export { ApplianceSecurityIntrusionArgs, ApplianceSecurityIntrusionState } from "./applianceSecurityIntrusion";
export type ApplianceSecurityIntrusion = import("./applianceSecurityIntrusion").ApplianceSecurityIntrusion;
export const ApplianceSecurityIntrusion: typeof import("./applianceSecurityIntrusion").ApplianceSecurityIntrusion = null as any;
utilities.lazyLoad(exports, ["ApplianceSecurityIntrusion"], () => require("./applianceSecurityIntrusion"));

export { ApplianceVpnThirdPartyVpnpeersArgs, ApplianceVpnThirdPartyVpnpeersState } from "./applianceVpnThirdPartyVpnpeers";
export type ApplianceVpnThirdPartyVpnpeers = import("./applianceVpnThirdPartyVpnpeers").ApplianceVpnThirdPartyVpnpeers;
export const ApplianceVpnThirdPartyVpnpeers: typeof import("./applianceVpnThirdPartyVpnpeers").ApplianceVpnThirdPartyVpnpeers = null as any;
utilities.lazyLoad(exports, ["ApplianceVpnThirdPartyVpnpeers"], () => require("./applianceVpnThirdPartyVpnpeers"));

export { ApplianceVpnVpnFirewallRulesArgs, ApplianceVpnVpnFirewallRulesState } from "./applianceVpnVpnFirewallRules";
export type ApplianceVpnVpnFirewallRules = import("./applianceVpnVpnFirewallRules").ApplianceVpnVpnFirewallRules;
export const ApplianceVpnVpnFirewallRules: typeof import("./applianceVpnVpnFirewallRules").ApplianceVpnVpnFirewallRules = null as any;
utilities.lazyLoad(exports, ["ApplianceVpnVpnFirewallRules"], () => require("./applianceVpnVpnFirewallRules"));

export { BaseArgs, BaseState } from "./base";
export type Base = import("./base").Base;
export const Base: typeof import("./base").Base = null as any;
utilities.lazyLoad(exports, ["Base"], () => require("./base"));

export { BrandingPoliciesArgs, BrandingPoliciesState } from "./brandingPolicies";
export type BrandingPolicies = import("./brandingPolicies").BrandingPolicies;
export const BrandingPolicies: typeof import("./brandingPolicies").BrandingPolicies = null as any;
utilities.lazyLoad(exports, ["BrandingPolicies"], () => require("./brandingPolicies"));

export { BrandingPoliciesPrioritiesArgs, BrandingPoliciesPrioritiesState } from "./brandingPoliciesPriorities";
export type BrandingPoliciesPriorities = import("./brandingPoliciesPriorities").BrandingPoliciesPriorities;
export const BrandingPoliciesPriorities: typeof import("./brandingPoliciesPriorities").BrandingPoliciesPriorities = null as any;
utilities.lazyLoad(exports, ["BrandingPoliciesPriorities"], () => require("./brandingPoliciesPriorities"));

export { CameraCustomAnalyticsArtifactsArgs, CameraCustomAnalyticsArtifactsState } from "./cameraCustomAnalyticsArtifacts";
export type CameraCustomAnalyticsArtifacts = import("./cameraCustomAnalyticsArtifacts").CameraCustomAnalyticsArtifacts;
export const CameraCustomAnalyticsArtifacts: typeof import("./cameraCustomAnalyticsArtifacts").CameraCustomAnalyticsArtifacts = null as any;
utilities.lazyLoad(exports, ["CameraCustomAnalyticsArtifacts"], () => require("./cameraCustomAnalyticsArtifacts"));

export { CameraRolesArgs, CameraRolesState } from "./cameraRoles";
export type CameraRoles = import("./cameraRoles").CameraRoles;
export const CameraRoles: typeof import("./cameraRoles").CameraRoles = null as any;
utilities.lazyLoad(exports, ["CameraRoles"], () => require("./cameraRoles"));

export { ClaimArgs, ClaimState } from "./claim";
export type Claim = import("./claim").Claim;
export const Claim: typeof import("./claim").Claim = null as any;
utilities.lazyLoad(exports, ["Claim"], () => require("./claim"));

export { CloneArgs, CloneState } from "./clone";
export type Clone = import("./clone").Clone;
export const Clone: typeof import("./clone").Clone = null as any;
utilities.lazyLoad(exports, ["Clone"], () => require("./clone"));

export { ConfigTemplatesArgs, ConfigTemplatesState } from "./configTemplates";
export type ConfigTemplates = import("./configTemplates").ConfigTemplates;
export const ConfigTemplates: typeof import("./configTemplates").ConfigTemplates = null as any;
utilities.lazyLoad(exports, ["ConfigTemplates"], () => require("./configTemplates"));

export { ConfigTemplatesSwitchProfilesPortsArgs, ConfigTemplatesSwitchProfilesPortsState } from "./configTemplatesSwitchProfilesPorts";
export type ConfigTemplatesSwitchProfilesPorts = import("./configTemplatesSwitchProfilesPorts").ConfigTemplatesSwitchProfilesPorts;
export const ConfigTemplatesSwitchProfilesPorts: typeof import("./configTemplatesSwitchProfilesPorts").ConfigTemplatesSwitchProfilesPorts = null as any;
utilities.lazyLoad(exports, ["ConfigTemplatesSwitchProfilesPorts"], () => require("./configTemplatesSwitchProfilesPorts"));

export { EarlyAccessFeaturesOptInsArgs, EarlyAccessFeaturesOptInsState } from "./earlyAccessFeaturesOptIns";
export type EarlyAccessFeaturesOptIns = import("./earlyAccessFeaturesOptIns").EarlyAccessFeaturesOptIns;
export const EarlyAccessFeaturesOptIns: typeof import("./earlyAccessFeaturesOptIns").EarlyAccessFeaturesOptIns = null as any;
utilities.lazyLoad(exports, ["EarlyAccessFeaturesOptIns"], () => require("./earlyAccessFeaturesOptIns"));

export { GetActionBatchesArgs, GetActionBatchesResult, GetActionBatchesOutputArgs } from "./getActionBatches";
export const getActionBatches: typeof import("./getActionBatches").getActionBatches = null as any;
export const getActionBatchesOutput: typeof import("./getActionBatches").getActionBatchesOutput = null as any;
utilities.lazyLoad(exports, ["getActionBatches","getActionBatchesOutput"], () => require("./getActionBatches"));

export { GetAdaptivePolicyAclsArgs, GetAdaptivePolicyAclsResult, GetAdaptivePolicyAclsOutputArgs } from "./getAdaptivePolicyAcls";
export const getAdaptivePolicyAcls: typeof import("./getAdaptivePolicyAcls").getAdaptivePolicyAcls = null as any;
export const getAdaptivePolicyAclsOutput: typeof import("./getAdaptivePolicyAcls").getAdaptivePolicyAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAdaptivePolicyAcls","getAdaptivePolicyAclsOutput"], () => require("./getAdaptivePolicyAcls"));

export { GetAdaptivePolicyGroupsArgs, GetAdaptivePolicyGroupsResult, GetAdaptivePolicyGroupsOutputArgs } from "./getAdaptivePolicyGroups";
export const getAdaptivePolicyGroups: typeof import("./getAdaptivePolicyGroups").getAdaptivePolicyGroups = null as any;
export const getAdaptivePolicyGroupsOutput: typeof import("./getAdaptivePolicyGroups").getAdaptivePolicyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAdaptivePolicyGroups","getAdaptivePolicyGroupsOutput"], () => require("./getAdaptivePolicyGroups"));

export { GetAdaptivePolicyOverviewArgs, GetAdaptivePolicyOverviewResult, GetAdaptivePolicyOverviewOutputArgs } from "./getAdaptivePolicyOverview";
export const getAdaptivePolicyOverview: typeof import("./getAdaptivePolicyOverview").getAdaptivePolicyOverview = null as any;
export const getAdaptivePolicyOverviewOutput: typeof import("./getAdaptivePolicyOverview").getAdaptivePolicyOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getAdaptivePolicyOverview","getAdaptivePolicyOverviewOutput"], () => require("./getAdaptivePolicyOverview"));

export { GetAdaptivePolicyPoliciesArgs, GetAdaptivePolicyPoliciesResult, GetAdaptivePolicyPoliciesOutputArgs } from "./getAdaptivePolicyPolicies";
export const getAdaptivePolicyPolicies: typeof import("./getAdaptivePolicyPolicies").getAdaptivePolicyPolicies = null as any;
export const getAdaptivePolicyPoliciesOutput: typeof import("./getAdaptivePolicyPolicies").getAdaptivePolicyPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAdaptivePolicyPolicies","getAdaptivePolicyPoliciesOutput"], () => require("./getAdaptivePolicyPolicies"));

export { GetAdaptivePolicySettingsArgs, GetAdaptivePolicySettingsResult, GetAdaptivePolicySettingsOutputArgs } from "./getAdaptivePolicySettings";
export const getAdaptivePolicySettings: typeof import("./getAdaptivePolicySettings").getAdaptivePolicySettings = null as any;
export const getAdaptivePolicySettingsOutput: typeof import("./getAdaptivePolicySettings").getAdaptivePolicySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAdaptivePolicySettings","getAdaptivePolicySettingsOutput"], () => require("./getAdaptivePolicySettings"));

export { GetAdminsArgs, GetAdminsResult, GetAdminsOutputArgs } from "./getAdmins";
export const getAdmins: typeof import("./getAdmins").getAdmins = null as any;
export const getAdminsOutput: typeof import("./getAdmins").getAdminsOutput = null as any;
utilities.lazyLoad(exports, ["getAdmins","getAdminsOutput"], () => require("./getAdmins"));

export { GetAlertsProfilesArgs, GetAlertsProfilesResult, GetAlertsProfilesOutputArgs } from "./getAlertsProfiles";
export const getAlertsProfiles: typeof import("./getAlertsProfiles").getAlertsProfiles = null as any;
export const getAlertsProfilesOutput: typeof import("./getAlertsProfiles").getAlertsProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsProfiles","getAlertsProfilesOutput"], () => require("./getAlertsProfiles"));

export { GetApiRequestsArgs, GetApiRequestsResult, GetApiRequestsOutputArgs } from "./getApiRequests";
export const getApiRequests: typeof import("./getApiRequests").getApiRequests = null as any;
export const getApiRequestsOutput: typeof import("./getApiRequests").getApiRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getApiRequests","getApiRequestsOutput"], () => require("./getApiRequests"));

export { GetApiRequestsOverviewArgs, GetApiRequestsOverviewResult, GetApiRequestsOverviewOutputArgs } from "./getApiRequestsOverview";
export const getApiRequestsOverview: typeof import("./getApiRequestsOverview").getApiRequestsOverview = null as any;
export const getApiRequestsOverviewOutput: typeof import("./getApiRequestsOverview").getApiRequestsOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getApiRequestsOverview","getApiRequestsOverviewOutput"], () => require("./getApiRequestsOverview"));

export { GetApiRequestsOverviewResponseCodesByIntervalArgs, GetApiRequestsOverviewResponseCodesByIntervalResult, GetApiRequestsOverviewResponseCodesByIntervalOutputArgs } from "./getApiRequestsOverviewResponseCodesByInterval";
export const getApiRequestsOverviewResponseCodesByInterval: typeof import("./getApiRequestsOverviewResponseCodesByInterval").getApiRequestsOverviewResponseCodesByInterval = null as any;
export const getApiRequestsOverviewResponseCodesByIntervalOutput: typeof import("./getApiRequestsOverviewResponseCodesByInterval").getApiRequestsOverviewResponseCodesByIntervalOutput = null as any;
utilities.lazyLoad(exports, ["getApiRequestsOverviewResponseCodesByInterval","getApiRequestsOverviewResponseCodesByIntervalOutput"], () => require("./getApiRequestsOverviewResponseCodesByInterval"));

export { GetApplianceSecurityIntrusionArgs, GetApplianceSecurityIntrusionResult, GetApplianceSecurityIntrusionOutputArgs } from "./getApplianceSecurityIntrusion";
export const getApplianceSecurityIntrusion: typeof import("./getApplianceSecurityIntrusion").getApplianceSecurityIntrusion = null as any;
export const getApplianceSecurityIntrusionOutput: typeof import("./getApplianceSecurityIntrusion").getApplianceSecurityIntrusionOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSecurityIntrusion","getApplianceSecurityIntrusionOutput"], () => require("./getApplianceSecurityIntrusion"));

export { GetApplianceTrafficShapingVpnExclusionsByNetworkArgs, GetApplianceTrafficShapingVpnExclusionsByNetworkResult, GetApplianceTrafficShapingVpnExclusionsByNetworkOutputArgs } from "./getApplianceTrafficShapingVpnExclusionsByNetwork";
export const getApplianceTrafficShapingVpnExclusionsByNetwork: typeof import("./getApplianceTrafficShapingVpnExclusionsByNetwork").getApplianceTrafficShapingVpnExclusionsByNetwork = null as any;
export const getApplianceTrafficShapingVpnExclusionsByNetworkOutput: typeof import("./getApplianceTrafficShapingVpnExclusionsByNetwork").getApplianceTrafficShapingVpnExclusionsByNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceTrafficShapingVpnExclusionsByNetwork","getApplianceTrafficShapingVpnExclusionsByNetworkOutput"], () => require("./getApplianceTrafficShapingVpnExclusionsByNetwork"));

export { GetApplianceUplinksStatusesOverviewArgs, GetApplianceUplinksStatusesOverviewResult, GetApplianceUplinksStatusesOverviewOutputArgs } from "./getApplianceUplinksStatusesOverview";
export const getApplianceUplinksStatusesOverview: typeof import("./getApplianceUplinksStatusesOverview").getApplianceUplinksStatusesOverview = null as any;
export const getApplianceUplinksStatusesOverviewOutput: typeof import("./getApplianceUplinksStatusesOverview").getApplianceUplinksStatusesOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUplinksStatusesOverview","getApplianceUplinksStatusesOverviewOutput"], () => require("./getApplianceUplinksStatusesOverview"));

export { GetApplianceUplinksUsageByNetworkArgs, GetApplianceUplinksUsageByNetworkResult, GetApplianceUplinksUsageByNetworkOutputArgs } from "./getApplianceUplinksUsageByNetwork";
export const getApplianceUplinksUsageByNetwork: typeof import("./getApplianceUplinksUsageByNetwork").getApplianceUplinksUsageByNetwork = null as any;
export const getApplianceUplinksUsageByNetworkOutput: typeof import("./getApplianceUplinksUsageByNetwork").getApplianceUplinksUsageByNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUplinksUsageByNetwork","getApplianceUplinksUsageByNetworkOutput"], () => require("./getApplianceUplinksUsageByNetwork"));

export { GetApplianceVpnThirdPartyVpnpeersArgs, GetApplianceVpnThirdPartyVpnpeersResult, GetApplianceVpnThirdPartyVpnpeersOutputArgs } from "./getApplianceVpnThirdPartyVpnpeers";
export const getApplianceVpnThirdPartyVpnpeers: typeof import("./getApplianceVpnThirdPartyVpnpeers").getApplianceVpnThirdPartyVpnpeers = null as any;
export const getApplianceVpnThirdPartyVpnpeersOutput: typeof import("./getApplianceVpnThirdPartyVpnpeers").getApplianceVpnThirdPartyVpnpeersOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVpnThirdPartyVpnpeers","getApplianceVpnThirdPartyVpnpeersOutput"], () => require("./getApplianceVpnThirdPartyVpnpeers"));

export { GetApplianceVpnVpnFirewallRulesArgs, GetApplianceVpnVpnFirewallRulesResult, GetApplianceVpnVpnFirewallRulesOutputArgs } from "./getApplianceVpnVpnFirewallRules";
export const getApplianceVpnVpnFirewallRules: typeof import("./getApplianceVpnVpnFirewallRules").getApplianceVpnVpnFirewallRules = null as any;
export const getApplianceVpnVpnFirewallRulesOutput: typeof import("./getApplianceVpnVpnFirewallRules").getApplianceVpnVpnFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceVpnVpnFirewallRules","getApplianceVpnVpnFirewallRulesOutput"], () => require("./getApplianceVpnVpnFirewallRules"));

export { GetBrandingPoliciesArgs, GetBrandingPoliciesResult, GetBrandingPoliciesOutputArgs } from "./getBrandingPolicies";
export const getBrandingPolicies: typeof import("./getBrandingPolicies").getBrandingPolicies = null as any;
export const getBrandingPoliciesOutput: typeof import("./getBrandingPolicies").getBrandingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getBrandingPolicies","getBrandingPoliciesOutput"], () => require("./getBrandingPolicies"));

export { GetBrandingPoliciesPrioritiesArgs, GetBrandingPoliciesPrioritiesResult, GetBrandingPoliciesPrioritiesOutputArgs } from "./getBrandingPoliciesPriorities";
export const getBrandingPoliciesPriorities: typeof import("./getBrandingPoliciesPriorities").getBrandingPoliciesPriorities = null as any;
export const getBrandingPoliciesPrioritiesOutput: typeof import("./getBrandingPoliciesPriorities").getBrandingPoliciesPrioritiesOutput = null as any;
utilities.lazyLoad(exports, ["getBrandingPoliciesPriorities","getBrandingPoliciesPrioritiesOutput"], () => require("./getBrandingPoliciesPriorities"));

export { GetCameraBoundariesAreasByDeviceArgs, GetCameraBoundariesAreasByDeviceResult, GetCameraBoundariesAreasByDeviceOutputArgs } from "./getCameraBoundariesAreasByDevice";
export const getCameraBoundariesAreasByDevice: typeof import("./getCameraBoundariesAreasByDevice").getCameraBoundariesAreasByDevice = null as any;
export const getCameraBoundariesAreasByDeviceOutput: typeof import("./getCameraBoundariesAreasByDevice").getCameraBoundariesAreasByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getCameraBoundariesAreasByDevice","getCameraBoundariesAreasByDeviceOutput"], () => require("./getCameraBoundariesAreasByDevice"));

export { GetCameraBoundariesLinesByDeviceArgs, GetCameraBoundariesLinesByDeviceResult, GetCameraBoundariesLinesByDeviceOutputArgs } from "./getCameraBoundariesLinesByDevice";
export const getCameraBoundariesLinesByDevice: typeof import("./getCameraBoundariesLinesByDevice").getCameraBoundariesLinesByDevice = null as any;
export const getCameraBoundariesLinesByDeviceOutput: typeof import("./getCameraBoundariesLinesByDevice").getCameraBoundariesLinesByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getCameraBoundariesLinesByDevice","getCameraBoundariesLinesByDeviceOutput"], () => require("./getCameraBoundariesLinesByDevice"));

export { GetCameraCustomAnalyticsArtifactsArgs, GetCameraCustomAnalyticsArtifactsResult, GetCameraCustomAnalyticsArtifactsOutputArgs } from "./getCameraCustomAnalyticsArtifacts";
export const getCameraCustomAnalyticsArtifacts: typeof import("./getCameraCustomAnalyticsArtifacts").getCameraCustomAnalyticsArtifacts = null as any;
export const getCameraCustomAnalyticsArtifactsOutput: typeof import("./getCameraCustomAnalyticsArtifacts").getCameraCustomAnalyticsArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getCameraCustomAnalyticsArtifacts","getCameraCustomAnalyticsArtifactsOutput"], () => require("./getCameraCustomAnalyticsArtifacts"));

export { GetCameraDetectionsHistoryByBoundaryByIntervalArgs, GetCameraDetectionsHistoryByBoundaryByIntervalResult, GetCameraDetectionsHistoryByBoundaryByIntervalOutputArgs } from "./getCameraDetectionsHistoryByBoundaryByInterval";
export const getCameraDetectionsHistoryByBoundaryByInterval: typeof import("./getCameraDetectionsHistoryByBoundaryByInterval").getCameraDetectionsHistoryByBoundaryByInterval = null as any;
export const getCameraDetectionsHistoryByBoundaryByIntervalOutput: typeof import("./getCameraDetectionsHistoryByBoundaryByInterval").getCameraDetectionsHistoryByBoundaryByIntervalOutput = null as any;
utilities.lazyLoad(exports, ["getCameraDetectionsHistoryByBoundaryByInterval","getCameraDetectionsHistoryByBoundaryByIntervalOutput"], () => require("./getCameraDetectionsHistoryByBoundaryByInterval"));

export { GetCameraPermissionsArgs, GetCameraPermissionsResult, GetCameraPermissionsOutputArgs } from "./getCameraPermissions";
export const getCameraPermissions: typeof import("./getCameraPermissions").getCameraPermissions = null as any;
export const getCameraPermissionsOutput: typeof import("./getCameraPermissions").getCameraPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getCameraPermissions","getCameraPermissionsOutput"], () => require("./getCameraPermissions"));

export { GetCameraRolesArgs, GetCameraRolesResult, GetCameraRolesOutputArgs } from "./getCameraRoles";
export const getCameraRoles: typeof import("./getCameraRoles").getCameraRoles = null as any;
export const getCameraRolesOutput: typeof import("./getCameraRoles").getCameraRolesOutput = null as any;
utilities.lazyLoad(exports, ["getCameraRoles","getCameraRolesOutput"], () => require("./getCameraRoles"));

export { GetCellularGatewayUplinkStatusesArgs, GetCellularGatewayUplinkStatusesResult, GetCellularGatewayUplinkStatusesOutputArgs } from "./getCellularGatewayUplinkStatuses";
export const getCellularGatewayUplinkStatuses: typeof import("./getCellularGatewayUplinkStatuses").getCellularGatewayUplinkStatuses = null as any;
export const getCellularGatewayUplinkStatusesOutput: typeof import("./getCellularGatewayUplinkStatuses").getCellularGatewayUplinkStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayUplinkStatuses","getCellularGatewayUplinkStatusesOutput"], () => require("./getCellularGatewayUplinkStatuses"));

export { GetClientsBandwidthUsageHistoryArgs, GetClientsBandwidthUsageHistoryResult, GetClientsBandwidthUsageHistoryOutputArgs } from "./getClientsBandwidthUsageHistory";
export const getClientsBandwidthUsageHistory: typeof import("./getClientsBandwidthUsageHistory").getClientsBandwidthUsageHistory = null as any;
export const getClientsBandwidthUsageHistoryOutput: typeof import("./getClientsBandwidthUsageHistory").getClientsBandwidthUsageHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getClientsBandwidthUsageHistory","getClientsBandwidthUsageHistoryOutput"], () => require("./getClientsBandwidthUsageHistory"));

export { GetClientsOverviewArgs, GetClientsOverviewResult, GetClientsOverviewOutputArgs } from "./getClientsOverview";
export const getClientsOverview: typeof import("./getClientsOverview").getClientsOverview = null as any;
export const getClientsOverviewOutput: typeof import("./getClientsOverview").getClientsOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getClientsOverview","getClientsOverviewOutput"], () => require("./getClientsOverview"));

export { GetClientsSearchArgs, GetClientsSearchResult, GetClientsSearchOutputArgs } from "./getClientsSearch";
export const getClientsSearch: typeof import("./getClientsSearch").getClientsSearch = null as any;
export const getClientsSearchOutput: typeof import("./getClientsSearch").getClientsSearchOutput = null as any;
utilities.lazyLoad(exports, ["getClientsSearch","getClientsSearchOutput"], () => require("./getClientsSearch"));

export { GetConfigTemplatesArgs, GetConfigTemplatesResult, GetConfigTemplatesOutputArgs } from "./getConfigTemplates";
export const getConfigTemplates: typeof import("./getConfigTemplates").getConfigTemplates = null as any;
export const getConfigTemplatesOutput: typeof import("./getConfigTemplates").getConfigTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigTemplates","getConfigTemplatesOutput"], () => require("./getConfigTemplates"));

export { GetConfigTemplatesSwitchProfilesArgs, GetConfigTemplatesSwitchProfilesResult, GetConfigTemplatesSwitchProfilesOutputArgs } from "./getConfigTemplatesSwitchProfiles";
export const getConfigTemplatesSwitchProfiles: typeof import("./getConfigTemplatesSwitchProfiles").getConfigTemplatesSwitchProfiles = null as any;
export const getConfigTemplatesSwitchProfilesOutput: typeof import("./getConfigTemplatesSwitchProfiles").getConfigTemplatesSwitchProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigTemplatesSwitchProfiles","getConfigTemplatesSwitchProfilesOutput"], () => require("./getConfigTemplatesSwitchProfiles"));

export { GetConfigTemplatesSwitchProfilesPortsArgs, GetConfigTemplatesSwitchProfilesPortsResult, GetConfigTemplatesSwitchProfilesPortsOutputArgs } from "./getConfigTemplatesSwitchProfilesPorts";
export const getConfigTemplatesSwitchProfilesPorts: typeof import("./getConfigTemplatesSwitchProfilesPorts").getConfigTemplatesSwitchProfilesPorts = null as any;
export const getConfigTemplatesSwitchProfilesPortsOutput: typeof import("./getConfigTemplatesSwitchProfilesPorts").getConfigTemplatesSwitchProfilesPortsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigTemplatesSwitchProfilesPorts","getConfigTemplatesSwitchProfilesPortsOutput"], () => require("./getConfigTemplatesSwitchProfilesPorts"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetDevicesAvailabilitiesArgs, GetDevicesAvailabilitiesResult, GetDevicesAvailabilitiesOutputArgs } from "./getDevicesAvailabilities";
export const getDevicesAvailabilities: typeof import("./getDevicesAvailabilities").getDevicesAvailabilities = null as any;
export const getDevicesAvailabilitiesOutput: typeof import("./getDevicesAvailabilities").getDevicesAvailabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesAvailabilities","getDevicesAvailabilitiesOutput"], () => require("./getDevicesAvailabilities"));

export { GetDevicesAvailabilitiesChangeHistoryArgs, GetDevicesAvailabilitiesChangeHistoryResult, GetDevicesAvailabilitiesChangeHistoryOutputArgs } from "./getDevicesAvailabilitiesChangeHistory";
export const getDevicesAvailabilitiesChangeHistory: typeof import("./getDevicesAvailabilitiesChangeHistory").getDevicesAvailabilitiesChangeHistory = null as any;
export const getDevicesAvailabilitiesChangeHistoryOutput: typeof import("./getDevicesAvailabilitiesChangeHistory").getDevicesAvailabilitiesChangeHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesAvailabilitiesChangeHistory","getDevicesAvailabilitiesChangeHistoryOutput"], () => require("./getDevicesAvailabilitiesChangeHistory"));

export { GetDevicesBootsHistoryArgs, GetDevicesBootsHistoryResult, GetDevicesBootsHistoryOutputArgs } from "./getDevicesBootsHistory";
export const getDevicesBootsHistory: typeof import("./getDevicesBootsHistory").getDevicesBootsHistory = null as any;
export const getDevicesBootsHistoryOutput: typeof import("./getDevicesBootsHistory").getDevicesBootsHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesBootsHistory","getDevicesBootsHistoryOutput"], () => require("./getDevicesBootsHistory"));

export { GetDevicesPowerModulesStatusesByDeviceArgs, GetDevicesPowerModulesStatusesByDeviceResult, GetDevicesPowerModulesStatusesByDeviceOutputArgs } from "./getDevicesPowerModulesStatusesByDevice";
export const getDevicesPowerModulesStatusesByDevice: typeof import("./getDevicesPowerModulesStatusesByDevice").getDevicesPowerModulesStatusesByDevice = null as any;
export const getDevicesPowerModulesStatusesByDeviceOutput: typeof import("./getDevicesPowerModulesStatusesByDevice").getDevicesPowerModulesStatusesByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesPowerModulesStatusesByDevice","getDevicesPowerModulesStatusesByDeviceOutput"], () => require("./getDevicesPowerModulesStatusesByDevice"));

export { GetDevicesProvisioningStatusesArgs, GetDevicesProvisioningStatusesResult, GetDevicesProvisioningStatusesOutputArgs } from "./getDevicesProvisioningStatuses";
export const getDevicesProvisioningStatuses: typeof import("./getDevicesProvisioningStatuses").getDevicesProvisioningStatuses = null as any;
export const getDevicesProvisioningStatusesOutput: typeof import("./getDevicesProvisioningStatuses").getDevicesProvisioningStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesProvisioningStatuses","getDevicesProvisioningStatusesOutput"], () => require("./getDevicesProvisioningStatuses"));

export { GetDevicesStatusesArgs, GetDevicesStatusesResult, GetDevicesStatusesOutputArgs } from "./getDevicesStatuses";
export const getDevicesStatuses: typeof import("./getDevicesStatuses").getDevicesStatuses = null as any;
export const getDevicesStatusesOutput: typeof import("./getDevicesStatuses").getDevicesStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesStatuses","getDevicesStatusesOutput"], () => require("./getDevicesStatuses"));

export { GetDevicesStatusesOverviewArgs, GetDevicesStatusesOverviewResult, GetDevicesStatusesOverviewOutputArgs } from "./getDevicesStatusesOverview";
export const getDevicesStatusesOverview: typeof import("./getDevicesStatusesOverview").getDevicesStatusesOverview = null as any;
export const getDevicesStatusesOverviewOutput: typeof import("./getDevicesStatusesOverview").getDevicesStatusesOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesStatusesOverview","getDevicesStatusesOverviewOutput"], () => require("./getDevicesStatusesOverview"));

export { GetDevicesUplinksAddressesByDeviceArgs, GetDevicesUplinksAddressesByDeviceResult, GetDevicesUplinksAddressesByDeviceOutputArgs } from "./getDevicesUplinksAddressesByDevice";
export const getDevicesUplinksAddressesByDevice: typeof import("./getDevicesUplinksAddressesByDevice").getDevicesUplinksAddressesByDevice = null as any;
export const getDevicesUplinksAddressesByDeviceOutput: typeof import("./getDevicesUplinksAddressesByDevice").getDevicesUplinksAddressesByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesUplinksAddressesByDevice","getDevicesUplinksAddressesByDeviceOutput"], () => require("./getDevicesUplinksAddressesByDevice"));

export { GetDevicesUplinksLossAndLatencyArgs, GetDevicesUplinksLossAndLatencyResult, GetDevicesUplinksLossAndLatencyOutputArgs } from "./getDevicesUplinksLossAndLatency";
export const getDevicesUplinksLossAndLatency: typeof import("./getDevicesUplinksLossAndLatency").getDevicesUplinksLossAndLatency = null as any;
export const getDevicesUplinksLossAndLatencyOutput: typeof import("./getDevicesUplinksLossAndLatency").getDevicesUplinksLossAndLatencyOutput = null as any;
utilities.lazyLoad(exports, ["getDevicesUplinksLossAndLatency","getDevicesUplinksLossAndLatencyOutput"], () => require("./getDevicesUplinksLossAndLatency"));

export { GetEarlyAccessFeaturesArgs, GetEarlyAccessFeaturesResult, GetEarlyAccessFeaturesOutputArgs } from "./getEarlyAccessFeatures";
export const getEarlyAccessFeatures: typeof import("./getEarlyAccessFeatures").getEarlyAccessFeatures = null as any;
export const getEarlyAccessFeaturesOutput: typeof import("./getEarlyAccessFeatures").getEarlyAccessFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getEarlyAccessFeatures","getEarlyAccessFeaturesOutput"], () => require("./getEarlyAccessFeatures"));

export { GetEarlyAccessFeaturesOptInsArgs, GetEarlyAccessFeaturesOptInsResult, GetEarlyAccessFeaturesOptInsOutputArgs } from "./getEarlyAccessFeaturesOptIns";
export const getEarlyAccessFeaturesOptIns: typeof import("./getEarlyAccessFeaturesOptIns").getEarlyAccessFeaturesOptIns = null as any;
export const getEarlyAccessFeaturesOptInsOutput: typeof import("./getEarlyAccessFeaturesOptIns").getEarlyAccessFeaturesOptInsOutput = null as any;
utilities.lazyLoad(exports, ["getEarlyAccessFeaturesOptIns","getEarlyAccessFeaturesOptInsOutput"], () => require("./getEarlyAccessFeaturesOptIns"));

export { GetFirmwareUpgradesArgs, GetFirmwareUpgradesResult, GetFirmwareUpgradesOutputArgs } from "./getFirmwareUpgrades";
export const getFirmwareUpgrades: typeof import("./getFirmwareUpgrades").getFirmwareUpgrades = null as any;
export const getFirmwareUpgradesOutput: typeof import("./getFirmwareUpgrades").getFirmwareUpgradesOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgrades","getFirmwareUpgradesOutput"], () => require("./getFirmwareUpgrades"));

export { GetFirmwareUpgradesByDeviceArgs, GetFirmwareUpgradesByDeviceResult, GetFirmwareUpgradesByDeviceOutputArgs } from "./getFirmwareUpgradesByDevice";
export const getFirmwareUpgradesByDevice: typeof import("./getFirmwareUpgradesByDevice").getFirmwareUpgradesByDevice = null as any;
export const getFirmwareUpgradesByDeviceOutput: typeof import("./getFirmwareUpgradesByDevice").getFirmwareUpgradesByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradesByDevice","getFirmwareUpgradesByDeviceOutput"], () => require("./getFirmwareUpgradesByDevice"));

export { GetInsightApplicationsArgs, GetInsightApplicationsResult, GetInsightApplicationsOutputArgs } from "./getInsightApplications";
export const getInsightApplications: typeof import("./getInsightApplications").getInsightApplications = null as any;
export const getInsightApplicationsOutput: typeof import("./getInsightApplications").getInsightApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getInsightApplications","getInsightApplicationsOutput"], () => require("./getInsightApplications"));

export { GetInsightMonitoredMediaServersArgs, GetInsightMonitoredMediaServersResult, GetInsightMonitoredMediaServersOutputArgs } from "./getInsightMonitoredMediaServers";
export const getInsightMonitoredMediaServers: typeof import("./getInsightMonitoredMediaServers").getInsightMonitoredMediaServers = null as any;
export const getInsightMonitoredMediaServersOutput: typeof import("./getInsightMonitoredMediaServers").getInsightMonitoredMediaServersOutput = null as any;
utilities.lazyLoad(exports, ["getInsightMonitoredMediaServers","getInsightMonitoredMediaServersOutput"], () => require("./getInsightMonitoredMediaServers"));

export { GetInventoryDevicesArgs, GetInventoryDevicesResult, GetInventoryDevicesOutputArgs } from "./getInventoryDevices";
export const getInventoryDevices: typeof import("./getInventoryDevices").getInventoryDevices = null as any;
export const getInventoryDevicesOutput: typeof import("./getInventoryDevices").getInventoryDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryDevices","getInventoryDevicesOutput"], () => require("./getInventoryDevices"));

export { GetInventoryOnboardingCloudMonitoringImportsArgs, GetInventoryOnboardingCloudMonitoringImportsResult, GetInventoryOnboardingCloudMonitoringImportsOutputArgs } from "./getInventoryOnboardingCloudMonitoringImports";
export const getInventoryOnboardingCloudMonitoringImports: typeof import("./getInventoryOnboardingCloudMonitoringImports").getInventoryOnboardingCloudMonitoringImports = null as any;
export const getInventoryOnboardingCloudMonitoringImportsOutput: typeof import("./getInventoryOnboardingCloudMonitoringImports").getInventoryOnboardingCloudMonitoringImportsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryOnboardingCloudMonitoringImports","getInventoryOnboardingCloudMonitoringImportsOutput"], () => require("./getInventoryOnboardingCloudMonitoringImports"));

export { GetInventoryOnboardingCloudMonitoringNetworksArgs, GetInventoryOnboardingCloudMonitoringNetworksResult, GetInventoryOnboardingCloudMonitoringNetworksOutputArgs } from "./getInventoryOnboardingCloudMonitoringNetworks";
export const getInventoryOnboardingCloudMonitoringNetworks: typeof import("./getInventoryOnboardingCloudMonitoringNetworks").getInventoryOnboardingCloudMonitoringNetworks = null as any;
export const getInventoryOnboardingCloudMonitoringNetworksOutput: typeof import("./getInventoryOnboardingCloudMonitoringNetworks").getInventoryOnboardingCloudMonitoringNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryOnboardingCloudMonitoringNetworks","getInventoryOnboardingCloudMonitoringNetworksOutput"], () => require("./getInventoryOnboardingCloudMonitoringNetworks"));

export { GetLicensesArgs, GetLicensesResult, GetLicensesOutputArgs } from "./getLicenses";
export const getLicenses: typeof import("./getLicenses").getLicenses = null as any;
export const getLicensesOutput: typeof import("./getLicenses").getLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenses","getLicensesOutput"], () => require("./getLicenses"));

export { GetLicensesOverviewArgs, GetLicensesOverviewResult, GetLicensesOverviewOutputArgs } from "./getLicensesOverview";
export const getLicensesOverview: typeof import("./getLicensesOverview").getLicensesOverview = null as any;
export const getLicensesOverviewOutput: typeof import("./getLicensesOverview").getLicensesOverviewOutput = null as any;
utilities.lazyLoad(exports, ["getLicensesOverview","getLicensesOverviewOutput"], () => require("./getLicensesOverview"));

export { GetLicensingCotermLicensesArgs, GetLicensingCotermLicensesResult, GetLicensingCotermLicensesOutputArgs } from "./getLicensingCotermLicenses";
export const getLicensingCotermLicenses: typeof import("./getLicensingCotermLicenses").getLicensingCotermLicenses = null as any;
export const getLicensingCotermLicensesOutput: typeof import("./getLicensingCotermLicenses").getLicensingCotermLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicensingCotermLicenses","getLicensingCotermLicensesOutput"], () => require("./getLicensingCotermLicenses"));

export { GetLoginSecurityArgs, GetLoginSecurityResult, GetLoginSecurityOutputArgs } from "./getLoginSecurity";
export const getLoginSecurity: typeof import("./getLoginSecurity").getLoginSecurity = null as any;
export const getLoginSecurityOutput: typeof import("./getLoginSecurity").getLoginSecurityOutput = null as any;
utilities.lazyLoad(exports, ["getLoginSecurity","getLoginSecurityOutput"], () => require("./getLoginSecurity"));

export { GetOpenapiSpecArgs, GetOpenapiSpecResult, GetOpenapiSpecOutputArgs } from "./getOpenapiSpec";
export const getOpenapiSpec: typeof import("./getOpenapiSpec").getOpenapiSpec = null as any;
export const getOpenapiSpecOutput: typeof import("./getOpenapiSpec").getOpenapiSpecOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiSpec","getOpenapiSpecOutput"], () => require("./getOpenapiSpec"));

export { GetPolicyObjectsArgs, GetPolicyObjectsResult, GetPolicyObjectsOutputArgs } from "./getPolicyObjects";
export const getPolicyObjects: typeof import("./getPolicyObjects").getPolicyObjects = null as any;
export const getPolicyObjectsOutput: typeof import("./getPolicyObjects").getPolicyObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjects","getPolicyObjectsOutput"], () => require("./getPolicyObjects"));

export { GetPolicyObjectsGroupsArgs, GetPolicyObjectsGroupsResult, GetPolicyObjectsGroupsOutputArgs } from "./getPolicyObjectsGroups";
export const getPolicyObjectsGroups: typeof import("./getPolicyObjectsGroups").getPolicyObjectsGroups = null as any;
export const getPolicyObjectsGroupsOutput: typeof import("./getPolicyObjectsGroups").getPolicyObjectsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectsGroups","getPolicyObjectsGroupsOutput"], () => require("./getPolicyObjectsGroups"));

export { GetSamlArgs, GetSamlResult, GetSamlOutputArgs } from "./getSaml";
export const getSaml: typeof import("./getSaml").getSaml = null as any;
export const getSamlOutput: typeof import("./getSaml").getSamlOutput = null as any;
utilities.lazyLoad(exports, ["getSaml","getSamlOutput"], () => require("./getSaml"));

export { GetSamlIdpsArgs, GetSamlIdpsResult, GetSamlIdpsOutputArgs } from "./getSamlIdps";
export const getSamlIdps: typeof import("./getSamlIdps").getSamlIdps = null as any;
export const getSamlIdpsOutput: typeof import("./getSamlIdps").getSamlIdpsOutput = null as any;
utilities.lazyLoad(exports, ["getSamlIdps","getSamlIdpsOutput"], () => require("./getSamlIdps"));

export { GetSamlRolesArgs, GetSamlRolesResult, GetSamlRolesOutputArgs } from "./getSamlRoles";
export const getSamlRoles: typeof import("./getSamlRoles").getSamlRoles = null as any;
export const getSamlRolesOutput: typeof import("./getSamlRoles").getSamlRolesOutput = null as any;
utilities.lazyLoad(exports, ["getSamlRoles","getSamlRolesOutput"], () => require("./getSamlRoles"));

export { GetSensorReadingsHistoryArgs, GetSensorReadingsHistoryResult, GetSensorReadingsHistoryOutputArgs } from "./getSensorReadingsHistory";
export const getSensorReadingsHistory: typeof import("./getSensorReadingsHistory").getSensorReadingsHistory = null as any;
export const getSensorReadingsHistoryOutput: typeof import("./getSensorReadingsHistory").getSensorReadingsHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getSensorReadingsHistory","getSensorReadingsHistoryOutput"], () => require("./getSensorReadingsHistory"));

export { GetSensorReadingsLatestArgs, GetSensorReadingsLatestResult, GetSensorReadingsLatestOutputArgs } from "./getSensorReadingsLatest";
export const getSensorReadingsLatest: typeof import("./getSensorReadingsLatest").getSensorReadingsLatest = null as any;
export const getSensorReadingsLatestOutput: typeof import("./getSensorReadingsLatest").getSensorReadingsLatestOutput = null as any;
utilities.lazyLoad(exports, ["getSensorReadingsLatest","getSensorReadingsLatestOutput"], () => require("./getSensorReadingsLatest"));

export { GetSmAdminsRolesArgs, GetSmAdminsRolesResult, GetSmAdminsRolesOutputArgs } from "./getSmAdminsRoles";
export const getSmAdminsRoles: typeof import("./getSmAdminsRoles").getSmAdminsRoles = null as any;
export const getSmAdminsRolesOutput: typeof import("./getSmAdminsRoles").getSmAdminsRolesOutput = null as any;
utilities.lazyLoad(exports, ["getSmAdminsRoles","getSmAdminsRolesOutput"], () => require("./getSmAdminsRoles"));

export { GetSmApnsCertArgs, GetSmApnsCertResult, GetSmApnsCertOutputArgs } from "./getSmApnsCert";
export const getSmApnsCert: typeof import("./getSmApnsCert").getSmApnsCert = null as any;
export const getSmApnsCertOutput: typeof import("./getSmApnsCert").getSmApnsCertOutput = null as any;
utilities.lazyLoad(exports, ["getSmApnsCert","getSmApnsCertOutput"], () => require("./getSmApnsCert"));

export { GetSmSentryPoliciesAssignmentsByNetworkArgs, GetSmSentryPoliciesAssignmentsByNetworkResult, GetSmSentryPoliciesAssignmentsByNetworkOutputArgs } from "./getSmSentryPoliciesAssignmentsByNetwork";
export const getSmSentryPoliciesAssignmentsByNetwork: typeof import("./getSmSentryPoliciesAssignmentsByNetwork").getSmSentryPoliciesAssignmentsByNetwork = null as any;
export const getSmSentryPoliciesAssignmentsByNetworkOutput: typeof import("./getSmSentryPoliciesAssignmentsByNetwork").getSmSentryPoliciesAssignmentsByNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getSmSentryPoliciesAssignmentsByNetwork","getSmSentryPoliciesAssignmentsByNetworkOutput"], () => require("./getSmSentryPoliciesAssignmentsByNetwork"));

export { GetSmVppAccountsArgs, GetSmVppAccountsResult, GetSmVppAccountsOutputArgs } from "./getSmVppAccounts";
export const getSmVppAccounts: typeof import("./getSmVppAccounts").getSmVppAccounts = null as any;
export const getSmVppAccountsOutput: typeof import("./getSmVppAccounts").getSmVppAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getSmVppAccounts","getSmVppAccountsOutput"], () => require("./getSmVppAccounts"));

export { GetSnmpArgs, GetSnmpResult, GetSnmpOutputArgs } from "./getSnmp";
export const getSnmp: typeof import("./getSnmp").getSnmp = null as any;
export const getSnmpOutput: typeof import("./getSnmp").getSnmpOutput = null as any;
utilities.lazyLoad(exports, ["getSnmp","getSnmpOutput"], () => require("./getSnmp"));

export { GetSummaryTopAppliancesByUtilizationArgs, GetSummaryTopAppliancesByUtilizationResult, GetSummaryTopAppliancesByUtilizationOutputArgs } from "./getSummaryTopAppliancesByUtilization";
export const getSummaryTopAppliancesByUtilization: typeof import("./getSummaryTopAppliancesByUtilization").getSummaryTopAppliancesByUtilization = null as any;
export const getSummaryTopAppliancesByUtilizationOutput: typeof import("./getSummaryTopAppliancesByUtilization").getSummaryTopAppliancesByUtilizationOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopAppliancesByUtilization","getSummaryTopAppliancesByUtilizationOutput"], () => require("./getSummaryTopAppliancesByUtilization"));

export { GetSummaryTopClientsByUsageArgs, GetSummaryTopClientsByUsageResult, GetSummaryTopClientsByUsageOutputArgs } from "./getSummaryTopClientsByUsage";
export const getSummaryTopClientsByUsage: typeof import("./getSummaryTopClientsByUsage").getSummaryTopClientsByUsage = null as any;
export const getSummaryTopClientsByUsageOutput: typeof import("./getSummaryTopClientsByUsage").getSummaryTopClientsByUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopClientsByUsage","getSummaryTopClientsByUsageOutput"], () => require("./getSummaryTopClientsByUsage"));

export { GetSummaryTopClientsManufacturersByUsageArgs, GetSummaryTopClientsManufacturersByUsageResult, GetSummaryTopClientsManufacturersByUsageOutputArgs } from "./getSummaryTopClientsManufacturersByUsage";
export const getSummaryTopClientsManufacturersByUsage: typeof import("./getSummaryTopClientsManufacturersByUsage").getSummaryTopClientsManufacturersByUsage = null as any;
export const getSummaryTopClientsManufacturersByUsageOutput: typeof import("./getSummaryTopClientsManufacturersByUsage").getSummaryTopClientsManufacturersByUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopClientsManufacturersByUsage","getSummaryTopClientsManufacturersByUsageOutput"], () => require("./getSummaryTopClientsManufacturersByUsage"));

export { GetSummaryTopDevicesByUsageArgs, GetSummaryTopDevicesByUsageResult, GetSummaryTopDevicesByUsageOutputArgs } from "./getSummaryTopDevicesByUsage";
export const getSummaryTopDevicesByUsage: typeof import("./getSummaryTopDevicesByUsage").getSummaryTopDevicesByUsage = null as any;
export const getSummaryTopDevicesByUsageOutput: typeof import("./getSummaryTopDevicesByUsage").getSummaryTopDevicesByUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopDevicesByUsage","getSummaryTopDevicesByUsageOutput"], () => require("./getSummaryTopDevicesByUsage"));

export { GetSummaryTopDevicesModelsByUsageArgs, GetSummaryTopDevicesModelsByUsageResult, GetSummaryTopDevicesModelsByUsageOutputArgs } from "./getSummaryTopDevicesModelsByUsage";
export const getSummaryTopDevicesModelsByUsage: typeof import("./getSummaryTopDevicesModelsByUsage").getSummaryTopDevicesModelsByUsage = null as any;
export const getSummaryTopDevicesModelsByUsageOutput: typeof import("./getSummaryTopDevicesModelsByUsage").getSummaryTopDevicesModelsByUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopDevicesModelsByUsage","getSummaryTopDevicesModelsByUsageOutput"], () => require("./getSummaryTopDevicesModelsByUsage"));

export { GetSummaryTopNetworksByStatusArgs, GetSummaryTopNetworksByStatusResult, GetSummaryTopNetworksByStatusOutputArgs } from "./getSummaryTopNetworksByStatus";
export const getSummaryTopNetworksByStatus: typeof import("./getSummaryTopNetworksByStatus").getSummaryTopNetworksByStatus = null as any;
export const getSummaryTopNetworksByStatusOutput: typeof import("./getSummaryTopNetworksByStatus").getSummaryTopNetworksByStatusOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopNetworksByStatus","getSummaryTopNetworksByStatusOutput"], () => require("./getSummaryTopNetworksByStatus"));

export { GetSummaryTopSsidsByUsageArgs, GetSummaryTopSsidsByUsageResult, GetSummaryTopSsidsByUsageOutputArgs } from "./getSummaryTopSsidsByUsage";
export const getSummaryTopSsidsByUsage: typeof import("./getSummaryTopSsidsByUsage").getSummaryTopSsidsByUsage = null as any;
export const getSummaryTopSsidsByUsageOutput: typeof import("./getSummaryTopSsidsByUsage").getSummaryTopSsidsByUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopSsidsByUsage","getSummaryTopSsidsByUsageOutput"], () => require("./getSummaryTopSsidsByUsage"));

export { GetSummaryTopSwitchesByEnergyUsageArgs, GetSummaryTopSwitchesByEnergyUsageResult, GetSummaryTopSwitchesByEnergyUsageOutputArgs } from "./getSummaryTopSwitchesByEnergyUsage";
export const getSummaryTopSwitchesByEnergyUsage: typeof import("./getSummaryTopSwitchesByEnergyUsage").getSummaryTopSwitchesByEnergyUsage = null as any;
export const getSummaryTopSwitchesByEnergyUsageOutput: typeof import("./getSummaryTopSwitchesByEnergyUsage").getSummaryTopSwitchesByEnergyUsageOutput = null as any;
utilities.lazyLoad(exports, ["getSummaryTopSwitchesByEnergyUsage","getSummaryTopSwitchesByEnergyUsageOutput"], () => require("./getSummaryTopSwitchesByEnergyUsage"));

export { GetSwitchPortsBySwitchArgs, GetSwitchPortsBySwitchResult, GetSwitchPortsBySwitchOutputArgs } from "./getSwitchPortsBySwitch";
export const getSwitchPortsBySwitch: typeof import("./getSwitchPortsBySwitch").getSwitchPortsBySwitch = null as any;
export const getSwitchPortsBySwitchOutput: typeof import("./getSwitchPortsBySwitch").getSwitchPortsBySwitchOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchPortsBySwitch","getSwitchPortsBySwitchOutput"], () => require("./getSwitchPortsBySwitch"));

export { GetUplinksStatusesArgs, GetUplinksStatusesResult, GetUplinksStatusesOutputArgs } from "./getUplinksStatuses";
export const getUplinksStatuses: typeof import("./getUplinksStatuses").getUplinksStatuses = null as any;
export const getUplinksStatusesOutput: typeof import("./getUplinksStatuses").getUplinksStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getUplinksStatuses","getUplinksStatusesOutput"], () => require("./getUplinksStatuses"));

export { GetWebhooksCallbacksStatusesArgs, GetWebhooksCallbacksStatusesResult, GetWebhooksCallbacksStatusesOutputArgs } from "./getWebhooksCallbacksStatuses";
export const getWebhooksCallbacksStatuses: typeof import("./getWebhooksCallbacksStatuses").getWebhooksCallbacksStatuses = null as any;
export const getWebhooksCallbacksStatusesOutput: typeof import("./getWebhooksCallbacksStatuses").getWebhooksCallbacksStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooksCallbacksStatuses","getWebhooksCallbacksStatusesOutput"], () => require("./getWebhooksCallbacksStatuses"));

export { GetWebhooksLogsArgs, GetWebhooksLogsResult, GetWebhooksLogsOutputArgs } from "./getWebhooksLogs";
export const getWebhooksLogs: typeof import("./getWebhooksLogs").getWebhooksLogs = null as any;
export const getWebhooksLogsOutput: typeof import("./getWebhooksLogs").getWebhooksLogsOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooksLogs","getWebhooksLogsOutput"], () => require("./getWebhooksLogs"));

export { GetWirelessDevicesChannelUtilizationByDeviceArgs, GetWirelessDevicesChannelUtilizationByDeviceResult, GetWirelessDevicesChannelUtilizationByDeviceOutputArgs } from "./getWirelessDevicesChannelUtilizationByDevice";
export const getWirelessDevicesChannelUtilizationByDevice: typeof import("./getWirelessDevicesChannelUtilizationByDevice").getWirelessDevicesChannelUtilizationByDevice = null as any;
export const getWirelessDevicesChannelUtilizationByDeviceOutput: typeof import("./getWirelessDevicesChannelUtilizationByDevice").getWirelessDevicesChannelUtilizationByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesChannelUtilizationByDevice","getWirelessDevicesChannelUtilizationByDeviceOutput"], () => require("./getWirelessDevicesChannelUtilizationByDevice"));

export { GetWirelessDevicesChannelUtilizationByNetworkArgs, GetWirelessDevicesChannelUtilizationByNetworkResult, GetWirelessDevicesChannelUtilizationByNetworkOutputArgs } from "./getWirelessDevicesChannelUtilizationByNetwork";
export const getWirelessDevicesChannelUtilizationByNetwork: typeof import("./getWirelessDevicesChannelUtilizationByNetwork").getWirelessDevicesChannelUtilizationByNetwork = null as any;
export const getWirelessDevicesChannelUtilizationByNetworkOutput: typeof import("./getWirelessDevicesChannelUtilizationByNetwork").getWirelessDevicesChannelUtilizationByNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesChannelUtilizationByNetwork","getWirelessDevicesChannelUtilizationByNetworkOutput"], () => require("./getWirelessDevicesChannelUtilizationByNetwork"));

export { GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalArgs, GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalResult, GetWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalOutputArgs } from "./getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval";
export const getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval: typeof import("./getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval").getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval = null as any;
export const getWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalOutput: typeof import("./getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval").getWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval","getWirelessDevicesChannelUtilizationHistoryByDeviceByIntervalOutput"], () => require("./getWirelessDevicesChannelUtilizationHistoryByDeviceByInterval"));

export { GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalArgs, GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalResult, GetWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalOutputArgs } from "./getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval";
export const getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval: typeof import("./getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval").getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval = null as any;
export const getWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalOutput: typeof import("./getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval").getWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval","getWirelessDevicesChannelUtilizationHistoryByNetworkByIntervalOutput"], () => require("./getWirelessDevicesChannelUtilizationHistoryByNetworkByInterval"));

export { GetWirelessDevicesEthernetStatusesArgs, GetWirelessDevicesEthernetStatusesResult, GetWirelessDevicesEthernetStatusesOutputArgs } from "./getWirelessDevicesEthernetStatuses";
export const getWirelessDevicesEthernetStatuses: typeof import("./getWirelessDevicesEthernetStatuses").getWirelessDevicesEthernetStatuses = null as any;
export const getWirelessDevicesEthernetStatusesOutput: typeof import("./getWirelessDevicesEthernetStatuses").getWirelessDevicesEthernetStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesEthernetStatuses","getWirelessDevicesEthernetStatusesOutput"], () => require("./getWirelessDevicesEthernetStatuses"));

export { GetWirelessDevicesPacketLossByClientArgs, GetWirelessDevicesPacketLossByClientResult, GetWirelessDevicesPacketLossByClientOutputArgs } from "./getWirelessDevicesPacketLossByClient";
export const getWirelessDevicesPacketLossByClient: typeof import("./getWirelessDevicesPacketLossByClient").getWirelessDevicesPacketLossByClient = null as any;
export const getWirelessDevicesPacketLossByClientOutput: typeof import("./getWirelessDevicesPacketLossByClient").getWirelessDevicesPacketLossByClientOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesPacketLossByClient","getWirelessDevicesPacketLossByClientOutput"], () => require("./getWirelessDevicesPacketLossByClient"));

export { GetWirelessDevicesPacketLossByDeviceArgs, GetWirelessDevicesPacketLossByDeviceResult, GetWirelessDevicesPacketLossByDeviceOutputArgs } from "./getWirelessDevicesPacketLossByDevice";
export const getWirelessDevicesPacketLossByDevice: typeof import("./getWirelessDevicesPacketLossByDevice").getWirelessDevicesPacketLossByDevice = null as any;
export const getWirelessDevicesPacketLossByDeviceOutput: typeof import("./getWirelessDevicesPacketLossByDevice").getWirelessDevicesPacketLossByDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesPacketLossByDevice","getWirelessDevicesPacketLossByDeviceOutput"], () => require("./getWirelessDevicesPacketLossByDevice"));

export { GetWirelessDevicesPacketLossByNetworkArgs, GetWirelessDevicesPacketLossByNetworkResult, GetWirelessDevicesPacketLossByNetworkOutputArgs } from "./getWirelessDevicesPacketLossByNetwork";
export const getWirelessDevicesPacketLossByNetwork: typeof import("./getWirelessDevicesPacketLossByNetwork").getWirelessDevicesPacketLossByNetwork = null as any;
export const getWirelessDevicesPacketLossByNetworkOutput: typeof import("./getWirelessDevicesPacketLossByNetwork").getWirelessDevicesPacketLossByNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessDevicesPacketLossByNetwork","getWirelessDevicesPacketLossByNetworkOutput"], () => require("./getWirelessDevicesPacketLossByNetwork"));

export { InsightMonitoredMediaServersArgs, InsightMonitoredMediaServersState } from "./insightMonitoredMediaServers";
export type InsightMonitoredMediaServers = import("./insightMonitoredMediaServers").InsightMonitoredMediaServers;
export const InsightMonitoredMediaServers: typeof import("./insightMonitoredMediaServers").InsightMonitoredMediaServers = null as any;
utilities.lazyLoad(exports, ["InsightMonitoredMediaServers"], () => require("./insightMonitoredMediaServers"));

export { InventoryClaimArgs, InventoryClaimState } from "./inventoryClaim";
export type InventoryClaim = import("./inventoryClaim").InventoryClaim;
export const InventoryClaim: typeof import("./inventoryClaim").InventoryClaim = null as any;
utilities.lazyLoad(exports, ["InventoryClaim"], () => require("./inventoryClaim"));

export { InventoryOnboardingCloudMonitoringExportEventsArgs, InventoryOnboardingCloudMonitoringExportEventsState } from "./inventoryOnboardingCloudMonitoringExportEvents";
export type InventoryOnboardingCloudMonitoringExportEvents = import("./inventoryOnboardingCloudMonitoringExportEvents").InventoryOnboardingCloudMonitoringExportEvents;
export const InventoryOnboardingCloudMonitoringExportEvents: typeof import("./inventoryOnboardingCloudMonitoringExportEvents").InventoryOnboardingCloudMonitoringExportEvents = null as any;
utilities.lazyLoad(exports, ["InventoryOnboardingCloudMonitoringExportEvents"], () => require("./inventoryOnboardingCloudMonitoringExportEvents"));

export { InventoryOnboardingCloudMonitoringImportsArgs, InventoryOnboardingCloudMonitoringImportsState } from "./inventoryOnboardingCloudMonitoringImports";
export type InventoryOnboardingCloudMonitoringImports = import("./inventoryOnboardingCloudMonitoringImports").InventoryOnboardingCloudMonitoringImports;
export const InventoryOnboardingCloudMonitoringImports: typeof import("./inventoryOnboardingCloudMonitoringImports").InventoryOnboardingCloudMonitoringImports = null as any;
utilities.lazyLoad(exports, ["InventoryOnboardingCloudMonitoringImports"], () => require("./inventoryOnboardingCloudMonitoringImports"));

export { InventoryOnboardingCloudMonitoringPrepareArgs, InventoryOnboardingCloudMonitoringPrepareState } from "./inventoryOnboardingCloudMonitoringPrepare";
export type InventoryOnboardingCloudMonitoringPrepare = import("./inventoryOnboardingCloudMonitoringPrepare").InventoryOnboardingCloudMonitoringPrepare;
export const InventoryOnboardingCloudMonitoringPrepare: typeof import("./inventoryOnboardingCloudMonitoringPrepare").InventoryOnboardingCloudMonitoringPrepare = null as any;
utilities.lazyLoad(exports, ["InventoryOnboardingCloudMonitoringPrepare"], () => require("./inventoryOnboardingCloudMonitoringPrepare"));

export { InventoryReleaseArgs, InventoryReleaseState } from "./inventoryRelease";
export type InventoryRelease = import("./inventoryRelease").InventoryRelease;
export const InventoryRelease: typeof import("./inventoryRelease").InventoryRelease = null as any;
utilities.lazyLoad(exports, ["InventoryRelease"], () => require("./inventoryRelease"));

export { LicensesArgs, LicensesState } from "./licenses";
export type Licenses = import("./licenses").Licenses;
export const Licenses: typeof import("./licenses").Licenses = null as any;
utilities.lazyLoad(exports, ["Licenses"], () => require("./licenses"));

export { LicensesAssignSeatsArgs, LicensesAssignSeatsState } from "./licensesAssignSeats";
export type LicensesAssignSeats = import("./licensesAssignSeats").LicensesAssignSeats;
export const LicensesAssignSeats: typeof import("./licensesAssignSeats").LicensesAssignSeats = null as any;
utilities.lazyLoad(exports, ["LicensesAssignSeats"], () => require("./licensesAssignSeats"));

export { LicensesMoveArgs, LicensesMoveState } from "./licensesMove";
export type LicensesMove = import("./licensesMove").LicensesMove;
export const LicensesMove: typeof import("./licensesMove").LicensesMove = null as any;
utilities.lazyLoad(exports, ["LicensesMove"], () => require("./licensesMove"));

export { LicensesMoveSeatsArgs, LicensesMoveSeatsState } from "./licensesMoveSeats";
export type LicensesMoveSeats = import("./licensesMoveSeats").LicensesMoveSeats;
export const LicensesMoveSeats: typeof import("./licensesMoveSeats").LicensesMoveSeats = null as any;
utilities.lazyLoad(exports, ["LicensesMoveSeats"], () => require("./licensesMoveSeats"));

export { LicensesRenewSeatsArgs, LicensesRenewSeatsState } from "./licensesRenewSeats";
export type LicensesRenewSeats = import("./licensesRenewSeats").LicensesRenewSeats;
export const LicensesRenewSeats: typeof import("./licensesRenewSeats").LicensesRenewSeats = null as any;
utilities.lazyLoad(exports, ["LicensesRenewSeats"], () => require("./licensesRenewSeats"));

export { LicensingCotermLicensesMoveArgs, LicensingCotermLicensesMoveState } from "./licensingCotermLicensesMove";
export type LicensingCotermLicensesMove = import("./licensingCotermLicensesMove").LicensingCotermLicensesMove;
export const LicensingCotermLicensesMove: typeof import("./licensingCotermLicensesMove").LicensingCotermLicensesMove = null as any;
utilities.lazyLoad(exports, ["LicensingCotermLicensesMove"], () => require("./licensingCotermLicensesMove"));

export { LoginSecurityArgs, LoginSecurityState } from "./loginSecurity";
export type LoginSecurity = import("./loginSecurity").LoginSecurity;
export const LoginSecurity: typeof import("./loginSecurity").LoginSecurity = null as any;
utilities.lazyLoad(exports, ["LoginSecurity"], () => require("./loginSecurity"));

export { NetworksCombineArgs, NetworksCombineState } from "./networksCombine";
export type NetworksCombine = import("./networksCombine").NetworksCombine;
export const NetworksCombine: typeof import("./networksCombine").NetworksCombine = null as any;
utilities.lazyLoad(exports, ["NetworksCombine"], () => require("./networksCombine"));

export { PolicyObjectsArgs, PolicyObjectsState } from "./policyObjects";
export type PolicyObjects = import("./policyObjects").PolicyObjects;
export const PolicyObjects: typeof import("./policyObjects").PolicyObjects = null as any;
utilities.lazyLoad(exports, ["PolicyObjects"], () => require("./policyObjects"));

export { PolicyObjectsGroupsArgs, PolicyObjectsGroupsState } from "./policyObjectsGroups";
export type PolicyObjectsGroups = import("./policyObjectsGroups").PolicyObjectsGroups;
export const PolicyObjectsGroups: typeof import("./policyObjectsGroups").PolicyObjectsGroups = null as any;
utilities.lazyLoad(exports, ["PolicyObjectsGroups"], () => require("./policyObjectsGroups"));

export { SamlArgs, SamlState } from "./saml";
export type Saml = import("./saml").Saml;
export const Saml: typeof import("./saml").Saml = null as any;
utilities.lazyLoad(exports, ["Saml"], () => require("./saml"));

export { SamlIdpsArgs, SamlIdpsState } from "./samlIdps";
export type SamlIdps = import("./samlIdps").SamlIdps;
export const SamlIdps: typeof import("./samlIdps").SamlIdps = null as any;
utilities.lazyLoad(exports, ["SamlIdps"], () => require("./samlIdps"));

export { SamlRolesArgs, SamlRolesState } from "./samlRoles";
export type SamlRoles = import("./samlRoles").SamlRoles;
export const SamlRoles: typeof import("./samlRoles").SamlRoles = null as any;
utilities.lazyLoad(exports, ["SamlRoles"], () => require("./samlRoles"));

export { SmAdminsRolesArgs, SmAdminsRolesState } from "./smAdminsRoles";
export type SmAdminsRoles = import("./smAdminsRoles").SmAdminsRoles;
export const SmAdminsRoles: typeof import("./smAdminsRoles").SmAdminsRoles = null as any;
utilities.lazyLoad(exports, ["SmAdminsRoles"], () => require("./smAdminsRoles"));

export { SmSentryPoliciesAssignmentsArgs, SmSentryPoliciesAssignmentsState } from "./smSentryPoliciesAssignments";
export type SmSentryPoliciesAssignments = import("./smSentryPoliciesAssignments").SmSentryPoliciesAssignments;
export const SmSentryPoliciesAssignments: typeof import("./smSentryPoliciesAssignments").SmSentryPoliciesAssignments = null as any;
utilities.lazyLoad(exports, ["SmSentryPoliciesAssignments"], () => require("./smSentryPoliciesAssignments"));

export { SnmpArgs, SnmpState } from "./snmp";
export type Snmp = import("./snmp").Snmp;
export const Snmp: typeof import("./snmp").Snmp = null as any;
utilities.lazyLoad(exports, ["Snmp"], () => require("./snmp"));

export { SwitchDevicesCloneArgs, SwitchDevicesCloneState } from "./switchDevicesClone";
export type SwitchDevicesClone = import("./switchDevicesClone").SwitchDevicesClone;
export const SwitchDevicesClone: typeof import("./switchDevicesClone").SwitchDevicesClone = null as any;
utilities.lazyLoad(exports, ["SwitchDevicesClone"], () => require("./switchDevicesClone"));

export { UsersArgs, UsersState } from "./users";
export type Users = import("./users").Users;
export const Users: typeof import("./users").Users = null as any;
utilities.lazyLoad(exports, ["Users"], () => require("./users"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "meraki:organizations/actionBatches:ActionBatches":
                return new ActionBatches(name, <any>undefined, { urn })
            case "meraki:organizations/adaptivePolicyAcls:AdaptivePolicyAcls":
                return new AdaptivePolicyAcls(name, <any>undefined, { urn })
            case "meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups":
                return new AdaptivePolicyGroups(name, <any>undefined, { urn })
            case "meraki:organizations/adaptivePolicyPolicies:AdaptivePolicyPolicies":
                return new AdaptivePolicyPolicies(name, <any>undefined, { urn })
            case "meraki:organizations/adaptivePolicySettings:AdaptivePolicySettings":
                return new AdaptivePolicySettings(name, <any>undefined, { urn })
            case "meraki:organizations/admins:Admins":
                return new Admins(name, <any>undefined, { urn })
            case "meraki:organizations/alertsProfiles:AlertsProfiles":
                return new AlertsProfiles(name, <any>undefined, { urn })
            case "meraki:organizations/applianceSecurityIntrusion:ApplianceSecurityIntrusion":
                return new ApplianceSecurityIntrusion(name, <any>undefined, { urn })
            case "meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers":
                return new ApplianceVpnThirdPartyVpnpeers(name, <any>undefined, { urn })
            case "meraki:organizations/applianceVpnVpnFirewallRules:ApplianceVpnVpnFirewallRules":
                return new ApplianceVpnVpnFirewallRules(name, <any>undefined, { urn })
            case "meraki:organizations/base:base":
                return new Base(name, <any>undefined, { urn })
            case "meraki:organizations/brandingPolicies:BrandingPolicies":
                return new BrandingPolicies(name, <any>undefined, { urn })
            case "meraki:organizations/brandingPoliciesPriorities:BrandingPoliciesPriorities":
                return new BrandingPoliciesPriorities(name, <any>undefined, { urn })
            case "meraki:organizations/cameraCustomAnalyticsArtifacts:CameraCustomAnalyticsArtifacts":
                return new CameraCustomAnalyticsArtifacts(name, <any>undefined, { urn })
            case "meraki:organizations/cameraRoles:CameraRoles":
                return new CameraRoles(name, <any>undefined, { urn })
            case "meraki:organizations/claim:Claim":
                return new Claim(name, <any>undefined, { urn })
            case "meraki:organizations/clone:Clone":
                return new Clone(name, <any>undefined, { urn })
            case "meraki:organizations/configTemplates:ConfigTemplates":
                return new ConfigTemplates(name, <any>undefined, { urn })
            case "meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts":
                return new ConfigTemplatesSwitchProfilesPorts(name, <any>undefined, { urn })
            case "meraki:organizations/earlyAccessFeaturesOptIns:EarlyAccessFeaturesOptIns":
                return new EarlyAccessFeaturesOptIns(name, <any>undefined, { urn })
            case "meraki:organizations/insightMonitoredMediaServers:InsightMonitoredMediaServers":
                return new InsightMonitoredMediaServers(name, <any>undefined, { urn })
            case "meraki:organizations/inventoryClaim:InventoryClaim":
                return new InventoryClaim(name, <any>undefined, { urn })
            case "meraki:organizations/inventoryOnboardingCloudMonitoringExportEvents:InventoryOnboardingCloudMonitoringExportEvents":
                return new InventoryOnboardingCloudMonitoringExportEvents(name, <any>undefined, { urn })
            case "meraki:organizations/inventoryOnboardingCloudMonitoringImports:InventoryOnboardingCloudMonitoringImports":
                return new InventoryOnboardingCloudMonitoringImports(name, <any>undefined, { urn })
            case "meraki:organizations/inventoryOnboardingCloudMonitoringPrepare:InventoryOnboardingCloudMonitoringPrepare":
                return new InventoryOnboardingCloudMonitoringPrepare(name, <any>undefined, { urn })
            case "meraki:organizations/inventoryRelease:InventoryRelease":
                return new InventoryRelease(name, <any>undefined, { urn })
            case "meraki:organizations/licenses:Licenses":
                return new Licenses(name, <any>undefined, { urn })
            case "meraki:organizations/licensesAssignSeats:LicensesAssignSeats":
                return new LicensesAssignSeats(name, <any>undefined, { urn })
            case "meraki:organizations/licensesMove:LicensesMove":
                return new LicensesMove(name, <any>undefined, { urn })
            case "meraki:organizations/licensesMoveSeats:LicensesMoveSeats":
                return new LicensesMoveSeats(name, <any>undefined, { urn })
            case "meraki:organizations/licensesRenewSeats:LicensesRenewSeats":
                return new LicensesRenewSeats(name, <any>undefined, { urn })
            case "meraki:organizations/licensingCotermLicensesMove:LicensingCotermLicensesMove":
                return new LicensingCotermLicensesMove(name, <any>undefined, { urn })
            case "meraki:organizations/loginSecurity:LoginSecurity":
                return new LoginSecurity(name, <any>undefined, { urn })
            case "meraki:organizations/networksCombine:NetworksCombine":
                return new NetworksCombine(name, <any>undefined, { urn })
            case "meraki:organizations/policyObjects:PolicyObjects":
                return new PolicyObjects(name, <any>undefined, { urn })
            case "meraki:organizations/policyObjectsGroups:PolicyObjectsGroups":
                return new PolicyObjectsGroups(name, <any>undefined, { urn })
            case "meraki:organizations/saml:Saml":
                return new Saml(name, <any>undefined, { urn })
            case "meraki:organizations/samlIdps:SamlIdps":
                return new SamlIdps(name, <any>undefined, { urn })
            case "meraki:organizations/samlRoles:SamlRoles":
                return new SamlRoles(name, <any>undefined, { urn })
            case "meraki:organizations/smAdminsRoles:SmAdminsRoles":
                return new SmAdminsRoles(name, <any>undefined, { urn })
            case "meraki:organizations/smSentryPoliciesAssignments:SmSentryPoliciesAssignments":
                return new SmSentryPoliciesAssignments(name, <any>undefined, { urn })
            case "meraki:organizations/snmp:Snmp":
                return new Snmp(name, <any>undefined, { urn })
            case "meraki:organizations/switchDevicesClone:SwitchDevicesClone":
                return new SwitchDevicesClone(name, <any>undefined, { urn })
            case "meraki:organizations/users:Users":
                return new Users(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("meraki", "organizations/actionBatches", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/adaptivePolicyAcls", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/adaptivePolicyGroups", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/adaptivePolicyPolicies", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/adaptivePolicySettings", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/admins", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/alertsProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/applianceSecurityIntrusion", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/applianceVpnThirdPartyVpnpeers", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/applianceVpnVpnFirewallRules", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/base", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/brandingPolicies", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/brandingPoliciesPriorities", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/cameraCustomAnalyticsArtifacts", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/cameraRoles", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/claim", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/clone", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/configTemplates", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/configTemplatesSwitchProfilesPorts", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/earlyAccessFeaturesOptIns", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/insightMonitoredMediaServers", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/inventoryClaim", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/inventoryOnboardingCloudMonitoringExportEvents", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/inventoryOnboardingCloudMonitoringImports", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/inventoryOnboardingCloudMonitoringPrepare", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/inventoryRelease", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licenses", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licensesAssignSeats", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licensesMove", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licensesMoveSeats", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licensesRenewSeats", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/licensingCotermLicensesMove", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/loginSecurity", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/networksCombine", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/policyObjects", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/policyObjectsGroups", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/saml", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/samlIdps", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/samlRoles", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/smAdminsRoles", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/smSentryPoliciesAssignments", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/snmp", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/switchDevicesClone", _module)
pulumi.runtime.registerResourceModule("meraki", "organizations/users", _module)
