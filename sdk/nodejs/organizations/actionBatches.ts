// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/actionBatches:ActionBatches example "action_batch_id,organization_id"
 * ```
 */
export class ActionBatches extends pulumi.CustomResource {
    /**
     * Get an existing ActionBatches resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionBatchesState, opts?: pulumi.CustomResourceOptions): ActionBatches {
        return new ActionBatches(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/actionBatches:ActionBatches';

    /**
     * Returns true if the given object is an instance of ActionBatches.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActionBatches {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionBatches.__pulumiType;
    }

    /**
     * actionBatchId path parameter. Action batch ID
     */
    public readonly actionBatchId!: pulumi.Output<string>;
    /**
     * A set of changes made as part of this action (\n\nmore details\n\n)
     */
    public readonly actions!: pulumi.Output<outputs.organizations.ActionBatchesAction[]>;
    /**
     * Information for callback used to send back results
     */
    public readonly callback!: pulumi.Output<outputs.organizations.ActionBatchesCallback>;
    /**
     * Flag describing whether the action should be previewed before executing or not
     */
    public readonly confirmed!: pulumi.Output<boolean>;
    /**
     * ID of the organization this action batch belongs to
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Status of action batch
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.organizations.ActionBatchesStatus>;
    /**
     * Flag describing whether actions should run synchronously or asynchronously
     */
    public readonly synchronous!: pulumi.Output<boolean>;

    /**
     * Create a ActionBatches resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionBatchesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionBatchesArgs | ActionBatchesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionBatchesState | undefined;
            resourceInputs["actionBatchId"] = state ? state.actionBatchId : undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["callback"] = state ? state.callback : undefined;
            resourceInputs["confirmed"] = state ? state.confirmed : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["synchronous"] = state ? state.synchronous : undefined;
        } else {
            const args = argsOrState as ActionBatchesArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["actionBatchId"] = args ? args.actionBatchId : undefined;
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["callback"] = args ? args.callback : undefined;
            resourceInputs["confirmed"] = args ? args.confirmed : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["synchronous"] = args ? args.synchronous : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActionBatches.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActionBatches resources.
 */
export interface ActionBatchesState {
    /**
     * actionBatchId path parameter. Action batch ID
     */
    actionBatchId?: pulumi.Input<string>;
    /**
     * A set of changes made as part of this action (\n\nmore details\n\n)
     */
    actions?: pulumi.Input<pulumi.Input<inputs.organizations.ActionBatchesAction>[]>;
    /**
     * Information for callback used to send back results
     */
    callback?: pulumi.Input<inputs.organizations.ActionBatchesCallback>;
    /**
     * Flag describing whether the action should be previewed before executing or not
     */
    confirmed?: pulumi.Input<boolean>;
    /**
     * ID of the organization this action batch belongs to
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Status of action batch
     */
    status?: pulumi.Input<inputs.organizations.ActionBatchesStatus>;
    /**
     * Flag describing whether actions should run synchronously or asynchronously
     */
    synchronous?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ActionBatches resource.
 */
export interface ActionBatchesArgs {
    /**
     * actionBatchId path parameter. Action batch ID
     */
    actionBatchId?: pulumi.Input<string>;
    /**
     * A set of changes made as part of this action (\n\nmore details\n\n)
     */
    actions?: pulumi.Input<pulumi.Input<inputs.organizations.ActionBatchesAction>[]>;
    /**
     * Information for callback used to send back results
     */
    callback?: pulumi.Input<inputs.organizations.ActionBatchesCallback>;
    /**
     * Flag describing whether the action should be previewed before executing or not
     */
    confirmed?: pulumi.Input<boolean>;
    /**
     * ID of the organization this action batch belongs to
     */
    organizationId: pulumi.Input<string>;
    /**
     * Flag describing whether actions should run synchronously or asynchronously
     */
    synchronous?: pulumi.Input<boolean>;
}
