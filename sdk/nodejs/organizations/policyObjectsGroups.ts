// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.PolicyObjectsGroups("example", {
 *     category: "NetworkObjectGroup",
 *     name: "Web Servers - Datacenter 10",
 *     objectIds: ["100"],
 *     organizationId: "string",
 * });
 * export const merakiOrganizationsPolicyObjectsGroupsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/policyObjectsGroups:PolicyObjectsGroups example "organization_id,policy_object_group_id"
 * ```
 */
export class PolicyObjectsGroups extends pulumi.CustomResource {
    /**
     * Get an existing PolicyObjectsGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyObjectsGroupsState, opts?: pulumi.CustomResourceOptions): PolicyObjectsGroups {
        return new PolicyObjectsGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/policyObjectsGroups:PolicyObjectsGroups';

    /**
     * Returns true if the given object is an instance of PolicyObjectsGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyObjectsGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyObjectsGroups.__pulumiType;
    }

    /**
     * Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
     */
    public readonly category!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly networkIds!: pulumi.Output<string[]>;
    /**
     * A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
     */
    public readonly objectIds!: pulumi.Output<string[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * policyObjectGroupId path parameter. Policy object group ID
     */
    public readonly policyObjectGroupId!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a PolicyObjectsGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyObjectsGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyObjectsGroupsArgs | PolicyObjectsGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyObjectsGroupsState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkIds"] = state ? state.networkIds : undefined;
            resourceInputs["objectIds"] = state ? state.objectIds : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["policyObjectGroupId"] = state ? state.policyObjectGroupId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PolicyObjectsGroupsArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectIds"] = args ? args.objectIds : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["policyObjectGroupId"] = args ? args.policyObjectGroupId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["networkIds"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyObjectsGroups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyObjectsGroups resources.
 */
export interface PolicyObjectsGroupsState {
    /**
     * Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
     */
    category?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     */
    name?: pulumi.Input<string>;
    networkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
     */
    objectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * policyObjectGroupId path parameter. Policy object group ID
     */
    policyObjectGroupId?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyObjectsGroups resource.
 */
export interface PolicyObjectsGroupsArgs {
    /**
     * Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
     */
    category?: pulumi.Input<string>;
    /**
     * A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     */
    name?: pulumi.Input<string>;
    /**
     * A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
     */
    objectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * policyObjectGroupId path parameter. Policy object group ID
     */
    policyObjectGroupId?: pulumi.Input<string>;
}
