// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.organizations.AdaptivePolicyGroups("example", {
 *     description: "Group of XYZ Corp Employees",
 *     name: "Employee Group",
 *     organizationId: "string",
 *     policyObjects: [{
 *         id: "2345",
 *         name: "Example Policy Object",
 *     }],
 *     sgt: 1000,
 * });
 * export const merakiOrganizationsAdaptivePolicyGroupsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups example "id,organization_id"
 * ```
 */
export class AdaptivePolicyGroups extends pulumi.CustomResource {
    /**
     * Get an existing AdaptivePolicyGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdaptivePolicyGroupsState, opts?: pulumi.CustomResourceOptions): AdaptivePolicyGroups {
        return new AdaptivePolicyGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups';

    /**
     * Returns true if the given object is an instance of AdaptivePolicyGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdaptivePolicyGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdaptivePolicyGroups.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the group (default: "")
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    public /*out*/ readonly isDefaultGroup!: pulumi.Output<boolean>;
    /**
     * Name of the group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
     */
    public readonly policyObjects!: pulumi.Output<outputs.organizations.AdaptivePolicyGroupsPolicyObject[]>;
    public /*out*/ readonly requiredIpMappings!: pulumi.Output<string[]>;
    /**
     * SGT value of the group
     */
    public readonly sgt!: pulumi.Output<number>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a AdaptivePolicyGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdaptivePolicyGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdaptivePolicyGroupsArgs | AdaptivePolicyGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdaptivePolicyGroupsState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["isDefaultGroup"] = state ? state.isDefaultGroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["policyObjects"] = state ? state.policyObjects : undefined;
            resourceInputs["requiredIpMappings"] = state ? state.requiredIpMappings : undefined;
            resourceInputs["sgt"] = state ? state.sgt : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as AdaptivePolicyGroupsArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["policyObjects"] = args ? args.policyObjects : undefined;
            resourceInputs["sgt"] = args ? args.sgt : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["isDefaultGroup"] = undefined /*out*/;
            resourceInputs["requiredIpMappings"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdaptivePolicyGroups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdaptivePolicyGroups resources.
 */
export interface AdaptivePolicyGroupsState {
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the group (default: "")
     */
    description?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    isDefaultGroup?: pulumi.Input<boolean>;
    /**
     * Name of the group
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
     */
    policyObjects?: pulumi.Input<pulumi.Input<inputs.organizations.AdaptivePolicyGroupsPolicyObject>[]>;
    requiredIpMappings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SGT value of the group
     */
    sgt?: pulumi.Input<number>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdaptivePolicyGroups resource.
 */
export interface AdaptivePolicyGroupsArgs {
    /**
     * Description of the group (default: "")
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the group
     */
    name?: pulumi.Input<string>;
    /**
     * organizationId path parameter. Organization ID
     */
    organizationId: pulumi.Input<string>;
    /**
     * The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
     */
    policyObjects?: pulumi.Input<pulumi.Input<inputs.organizations.AdaptivePolicyGroupsPolicyObject>[]>;
    /**
     * SGT value of the group
     */
    sgt?: pulumi.Input<number>;
}
