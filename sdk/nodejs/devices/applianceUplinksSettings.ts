// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.ApplianceUplinksSettings("example", {
 *     interfaces: {
 *         wan1: {
 *             enabled: true,
 *             pppoe: {
 *                 authentication: {
 *                     enabled: true,
 *                     password: "password",
 *                     username: "username",
 *                 },
 *                 enabled: true,
 *             },
 *             svis: {
 *                 ipv4: {
 *                     address: "9.10.11.10/16",
 *                     assignmentMode: "static",
 *                     gateway: "13.14.15.16",
 *                     nameservers: {
 *                         addresses: ["1.2.3.4"],
 *                     },
 *                 },
 *                 ipv6: {
 *                     address: "1:2:3::4",
 *                     assignmentMode: "static",
 *                     gateway: "1:2:3::5",
 *                     nameservers: {
 *                         addresses: [
 *                             "1001:4860:4860::8888",
 *                             "1001:4860:4860::8844",
 *                         ],
 *                     },
 *                 },
 *             },
 *             vlanTagging: {
 *                 enabled: true,
 *                 vlanId: 1,
 *             },
 *         },
 *         wan2: {
 *             enabled: true,
 *             pppoe: {
 *                 authentication: {
 *                     enabled: true,
 *                     password: "password",
 *                     username: "username",
 *                 },
 *                 enabled: true,
 *             },
 *             svis: {
 *                 ipv4: {
 *                     address: "9.10.11.10/16",
 *                     assignmentMode: "static",
 *                     gateway: "13.14.15.16",
 *                     nameservers: {
 *                         addresses: ["1.2.3.4"],
 *                     },
 *                 },
 *                 ipv6: {
 *                     address: "1:2:3::4",
 *                     assignmentMode: "static",
 *                     gateway: "1:2:3::5",
 *                     nameservers: {
 *                         addresses: [
 *                             "1001:4860:4860::8888",
 *                             "1001:4860:4860::8844",
 *                         ],
 *                     },
 *                 },
 *             },
 *             vlanTagging: {
 *                 enabled: true,
 *                 vlanId: 1,
 *             },
 *         },
 *     },
 *     serial: "string",
 * });
 * export const merakiDevicesApplianceUplinksSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/applianceUplinksSettings:ApplianceUplinksSettings example "serial"
 * ```
 */
export class ApplianceUplinksSettings extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceUplinksSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceUplinksSettingsState, opts?: pulumi.CustomResourceOptions): ApplianceUplinksSettings {
        return new ApplianceUplinksSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/applianceUplinksSettings:ApplianceUplinksSettings';

    /**
     * Returns true if the given object is an instance of ApplianceUplinksSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceUplinksSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceUplinksSettings.__pulumiType;
    }

    /**
     * Interface settings.
     */
    public readonly interfaces!: pulumi.Output<outputs.devices.ApplianceUplinksSettingsInterfaces>;
    /**
     * serial path parameter.
     */
    public readonly serial!: pulumi.Output<string>;

    /**
     * Create a ApplianceUplinksSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceUplinksSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceUplinksSettingsArgs | ApplianceUplinksSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceUplinksSettingsState | undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
        } else {
            const args = argsOrState as ApplianceUplinksSettingsArgs | undefined;
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceUplinksSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplianceUplinksSettings resources.
 */
export interface ApplianceUplinksSettingsState {
    /**
     * Interface settings.
     */
    interfaces?: pulumi.Input<inputs.devices.ApplianceUplinksSettingsInterfaces>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplianceUplinksSettings resource.
 */
export interface ApplianceUplinksSettingsArgs {
    /**
     * Interface settings.
     */
    interfaces?: pulumi.Input<inputs.devices.ApplianceUplinksSettingsInterfaces>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
