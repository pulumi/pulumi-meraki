// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.SensorRelationships("example", {
 *     livestream: {
 *         related_devices: [{
 *             serial: "string",
 *         }],
 *     },
 *     serial: "string",
 * });
 * export const merakiDevicesSensorRelationshipsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/sensorRelationships:SensorRelationships example "serial"
 * ```
 */
export class SensorRelationships extends pulumi.CustomResource {
    /**
     * Get an existing SensorRelationships resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SensorRelationshipsState, opts?: pulumi.CustomResourceOptions): SensorRelationships {
        return new SensorRelationships(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/sensorRelationships:SensorRelationships';

    /**
     * Returns true if the given object is an instance of SensorRelationships.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SensorRelationships {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SensorRelationships.__pulumiType;
    }

    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    declare public readonly livestream: pulumi.Output<outputs.devices.SensorRelationshipsLivestream>;
    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's r.Livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    declare public readonly livestreamRequests: pulumi.Output<outputs.devices.SensorRelationshipsLivestreamRequest[]>;
    /**
     * serial path parameter.
     */
    declare public readonly serial: pulumi.Output<string>;

    /**
     * Create a SensorRelationships resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SensorRelationshipsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SensorRelationshipsArgs | SensorRelationshipsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SensorRelationshipsState | undefined;
            resourceInputs["livestream"] = state?.livestream;
            resourceInputs["livestreamRequests"] = state?.livestreamRequests;
            resourceInputs["serial"] = state?.serial;
        } else {
            const args = argsOrState as SensorRelationshipsArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["livestream"] = args?.livestream;
            resourceInputs["livestreamRequests"] = args?.livestreamRequests;
            resourceInputs["serial"] = args?.serial;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SensorRelationships.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SensorRelationships resources.
 */
export interface SensorRelationshipsState {
    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    livestream?: pulumi.Input<inputs.devices.SensorRelationshipsLivestream>;
    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's r.Livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    livestreamRequests?: pulumi.Input<pulumi.Input<inputs.devices.SensorRelationshipsLivestreamRequest>[]>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SensorRelationships resource.
 */
export interface SensorRelationshipsArgs {
    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    livestream?: pulumi.Input<inputs.devices.SensorRelationshipsLivestream>;
    /**
     * A role defined between an MT sensor and an MV camera that adds the camera's r.Livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     */
    livestreamRequests?: pulumi.Input<pulumi.Input<inputs.devices.SensorRelationshipsLivestreamRequest>[]>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
