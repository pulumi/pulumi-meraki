// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.Base("example", {
 *     lat: 37.4180951010362,
 *     lng: -122.098531723022,
 *     name: "My AP",
 *     serial: "string",
 *     tags: ["recently-added"],
 * });
 * export const merakiDevicesExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/base:base example "organization_id,serial"
 * ```
 */
export class Base extends pulumi.CustomResource {
    /**
     * Get an existing Base resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BaseState, opts?: pulumi.CustomResourceOptions): Base {
        return new Base(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/base:base';

    /**
     * Returns true if the given object is an instance of Base.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Base {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Base.__pulumiType;
    }

    /**
     * Physical address of the device
     */
    declare public readonly address: pulumi.Output<string>;
    /**
     * Additional device information
     */
    declare public /*out*/ readonly details: pulumi.Output<outputs.devices.BaseDetail[]>;
    /**
     * Firmware version of the device
     */
    declare public /*out*/ readonly firmware: pulumi.Output<string>;
    /**
     * The floor plan to associate to this device. null disassociates the device from the floorplan.
     */
    declare public readonly floorPlanId: pulumi.Output<string>;
    /**
     * IMEI of the device, if applicable
     */
    declare public /*out*/ readonly imei: pulumi.Output<string>;
    /**
     * LAN IP address of the device
     */
    declare public /*out*/ readonly lanIp: pulumi.Output<string>;
    /**
     * Latitude of the device
     */
    declare public readonly lat: pulumi.Output<number>;
    /**
     * Longitude of the device
     */
    declare public readonly lng: pulumi.Output<number>;
    /**
     * MAC address of the device
     */
    declare public /*out*/ readonly mac: pulumi.Output<string>;
    /**
     * Model of the device
     */
    declare public /*out*/ readonly model: pulumi.Output<string>;
    /**
     * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
     */
    declare public readonly moveMapMarker: pulumi.Output<boolean>;
    /**
     * Name of the device
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * ID of the network the device belongs to
     */
    declare public /*out*/ readonly networkId: pulumi.Output<string>;
    /**
     * Notes for the device, limited to 255 characters
     */
    declare public readonly notes: pulumi.Output<string>;
    /**
     * Product type of the device
     */
    declare public /*out*/ readonly productType: pulumi.Output<string>;
    /**
     * Serial number of the device
     */
    declare public readonly serial: pulumi.Output<string>;
    /**
     * The ID of a switch template to bind to the device (for available switch templates, see the 'Switch Templates' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
     */
    declare public readonly switchProfileId: pulumi.Output<string>;
    /**
     * List of tags assigned to the device
     */
    declare public readonly tags: pulumi.Output<string[]>;

    /**
     * Create a Base resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BaseArgs | BaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BaseState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["details"] = state?.details;
            resourceInputs["firmware"] = state?.firmware;
            resourceInputs["floorPlanId"] = state?.floorPlanId;
            resourceInputs["imei"] = state?.imei;
            resourceInputs["lanIp"] = state?.lanIp;
            resourceInputs["lat"] = state?.lat;
            resourceInputs["lng"] = state?.lng;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["model"] = state?.model;
            resourceInputs["moveMapMarker"] = state?.moveMapMarker;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["productType"] = state?.productType;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["switchProfileId"] = state?.switchProfileId;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as BaseArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["address"] = args?.address;
            resourceInputs["floorPlanId"] = args?.floorPlanId;
            resourceInputs["lat"] = args?.lat;
            resourceInputs["lng"] = args?.lng;
            resourceInputs["moveMapMarker"] = args?.moveMapMarker;
            resourceInputs["name"] = args?.name;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["serial"] = args?.serial;
            resourceInputs["switchProfileId"] = args?.switchProfileId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["firmware"] = undefined /*out*/;
            resourceInputs["imei"] = undefined /*out*/;
            resourceInputs["lanIp"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["model"] = undefined /*out*/;
            resourceInputs["networkId"] = undefined /*out*/;
            resourceInputs["productType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Base.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering base resources.
 */
export interface BaseState {
    /**
     * Physical address of the device
     */
    address?: pulumi.Input<string>;
    /**
     * Additional device information
     */
    details?: pulumi.Input<pulumi.Input<inputs.devices.BaseDetail>[]>;
    /**
     * Firmware version of the device
     */
    firmware?: pulumi.Input<string>;
    /**
     * The floor plan to associate to this device. null disassociates the device from the floorplan.
     */
    floorPlanId?: pulumi.Input<string>;
    /**
     * IMEI of the device, if applicable
     */
    imei?: pulumi.Input<string>;
    /**
     * LAN IP address of the device
     */
    lanIp?: pulumi.Input<string>;
    /**
     * Latitude of the device
     */
    lat?: pulumi.Input<number>;
    /**
     * Longitude of the device
     */
    lng?: pulumi.Input<number>;
    /**
     * MAC address of the device
     */
    mac?: pulumi.Input<string>;
    /**
     * Model of the device
     */
    model?: pulumi.Input<string>;
    /**
     * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
     */
    moveMapMarker?: pulumi.Input<boolean>;
    /**
     * Name of the device
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the network the device belongs to
     */
    networkId?: pulumi.Input<string>;
    /**
     * Notes for the device, limited to 255 characters
     */
    notes?: pulumi.Input<string>;
    /**
     * Product type of the device
     */
    productType?: pulumi.Input<string>;
    /**
     * Serial number of the device
     */
    serial?: pulumi.Input<string>;
    /**
     * The ID of a switch template to bind to the device (for available switch templates, see the 'Switch Templates' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
     */
    switchProfileId?: pulumi.Input<string>;
    /**
     * List of tags assigned to the device
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Base resource.
 */
export interface BaseArgs {
    /**
     * Physical address of the device
     */
    address?: pulumi.Input<string>;
    /**
     * The floor plan to associate to this device. null disassociates the device from the floorplan.
     */
    floorPlanId?: pulumi.Input<string>;
    /**
     * Latitude of the device
     */
    lat?: pulumi.Input<number>;
    /**
     * Longitude of the device
     */
    lng?: pulumi.Input<number>;
    /**
     * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
     */
    moveMapMarker?: pulumi.Input<boolean>;
    /**
     * Name of the device
     */
    name?: pulumi.Input<string>;
    /**
     * Notes for the device, limited to 255 characters
     */
    notes?: pulumi.Input<string>;
    /**
     * Serial number of the device
     */
    serial: pulumi.Input<string>;
    /**
     * The ID of a switch template to bind to the device (for available switch templates, see the 'Switch Templates' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
     */
    switchProfileId?: pulumi.Input<string>;
    /**
     * List of tags assigned to the device
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
