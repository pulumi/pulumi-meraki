// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.WirelessRadioSettings("example", {
 *     fiveGhzSettings: {
 *         channel: 149,
 *         channel_width: 20,
 *         target_power: 15,
 *     },
 *     rfProfileId: "1234",
 *     serial: "string",
 *     twoFourGhzSettings: {
 *         channel: 11,
 *         target_power: 21,
 *     },
 * });
 * export const merakiDevicesWirelessRadioSettingsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/wirelessRadioSettings:WirelessRadioSettings example "serial"
 * ```
 */
export class WirelessRadioSettings extends pulumi.CustomResource {
    /**
     * Get an existing WirelessRadioSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelessRadioSettingsState, opts?: pulumi.CustomResourceOptions): WirelessRadioSettings {
        return new WirelessRadioSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/wirelessRadioSettings:WirelessRadioSettings';

    /**
     * Returns true if the given object is an instance of WirelessRadioSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelessRadioSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelessRadioSettings.__pulumiType;
    }

    /**
     * Manual radio settings for 5 GHz.
     */
    declare public readonly fiveGhzSettings: pulumi.Output<outputs.devices.WirelessRadioSettingsFiveGhzSettings>;
    /**
     * The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
     */
    declare public readonly rfProfileId: pulumi.Output<string>;
    /**
     * serial path parameter.
     */
    declare public readonly serial: pulumi.Output<string>;
    /**
     * Manual radio settings for 2.4 GHz.
     */
    declare public readonly twoFourGhzSettings: pulumi.Output<outputs.devices.WirelessRadioSettingsTwoFourGhzSettings>;

    /**
     * Create a WirelessRadioSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelessRadioSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelessRadioSettingsArgs | WirelessRadioSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelessRadioSettingsState | undefined;
            resourceInputs["fiveGhzSettings"] = state?.fiveGhzSettings;
            resourceInputs["rfProfileId"] = state?.rfProfileId;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["twoFourGhzSettings"] = state?.twoFourGhzSettings;
        } else {
            const args = argsOrState as WirelessRadioSettingsArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["fiveGhzSettings"] = args?.fiveGhzSettings;
            resourceInputs["rfProfileId"] = args?.rfProfileId;
            resourceInputs["serial"] = args?.serial;
            resourceInputs["twoFourGhzSettings"] = args?.twoFourGhzSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelessRadioSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WirelessRadioSettings resources.
 */
export interface WirelessRadioSettingsState {
    /**
     * Manual radio settings for 5 GHz.
     */
    fiveGhzSettings?: pulumi.Input<inputs.devices.WirelessRadioSettingsFiveGhzSettings>;
    /**
     * The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
     */
    rfProfileId?: pulumi.Input<string>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * Manual radio settings for 2.4 GHz.
     */
    twoFourGhzSettings?: pulumi.Input<inputs.devices.WirelessRadioSettingsTwoFourGhzSettings>;
}

/**
 * The set of arguments for constructing a WirelessRadioSettings resource.
 */
export interface WirelessRadioSettingsArgs {
    /**
     * Manual radio settings for 5 GHz.
     */
    fiveGhzSettings?: pulumi.Input<inputs.devices.WirelessRadioSettingsFiveGhzSettings>;
    /**
     * The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
     */
    rfProfileId?: pulumi.Input<string>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
    /**
     * Manual radio settings for 2.4 GHz.
     */
    twoFourGhzSettings?: pulumi.Input<inputs.devices.WirelessRadioSettingsTwoFourGhzSettings>;
}
