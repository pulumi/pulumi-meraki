// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
 * already existed previously.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.LiveToolsPing("example", {
 *     serial: "string",
 *     parameters: {
 *         callback: {
 *             httpServer: {
 *                 id: "aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M=",
 *             },
 *             payloadTemplate: {
 *                 id: "wpt_2100",
 *             },
 *             sharedSecret: "secret",
 *             url: "https://webhook.site/28efa24e-f830-4d9f-a12b-fbb9e5035031",
 *         },
 *         count: 2,
 *         target: "75.75.75.75",
 *     },
 * });
 * export const merakiDevicesLiveToolsPingExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/liveToolsPing:LiveToolsPing example "id,serial"
 * ```
 */
export class LiveToolsPing extends pulumi.CustomResource {
    /**
     * Get an existing LiveToolsPing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LiveToolsPingState, opts?: pulumi.CustomResourceOptions): LiveToolsPing {
        return new LiveToolsPing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/liveToolsPing:LiveToolsPing';

    /**
     * Returns true if the given object is an instance of LiveToolsPing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LiveToolsPing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LiveToolsPing.__pulumiType;
    }

    public /*out*/ readonly item!: pulumi.Output<outputs.devices.LiveToolsPingItem>;
    public readonly parameters!: pulumi.Output<outputs.devices.LiveToolsPingParameters>;
    /**
     * serial path parameter.
     */
    public readonly serial!: pulumi.Output<string>;

    /**
     * Create a LiveToolsPing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiveToolsPingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LiveToolsPingArgs | LiveToolsPingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LiveToolsPingState | undefined;
            resourceInputs["item"] = state ? state.item : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
        } else {
            const args = argsOrState as LiveToolsPingArgs | undefined;
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["item"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LiveToolsPing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LiveToolsPing resources.
 */
export interface LiveToolsPingState {
    item?: pulumi.Input<inputs.devices.LiveToolsPingItem>;
    parameters?: pulumi.Input<inputs.devices.LiveToolsPingParameters>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LiveToolsPing resource.
 */
export interface LiveToolsPingArgs {
    parameters: pulumi.Input<inputs.devices.LiveToolsPingParameters>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
