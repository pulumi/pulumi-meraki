// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.CellularSims("example", {serial: "string"});
 * export const merakiDevicesCellularSimsExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/cellularSims:CellularSims example "serial"
 * ```
 */
export class CellularSims extends pulumi.CustomResource {
    /**
     * Get an existing CellularSims resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CellularSimsState, opts?: pulumi.CustomResourceOptions): CellularSims {
        return new CellularSims(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/cellularSims:CellularSims';

    /**
     * Returns true if the given object is an instance of CellularSims.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CellularSims {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CellularSims.__pulumiType;
    }

    /**
     * serial path parameter.
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * SIM Failover settings.
     */
    public readonly simFailover!: pulumi.Output<outputs.devices.CellularSimsSimFailover>;
    /**
     * List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
     */
    public readonly sims!: pulumi.Output<outputs.devices.CellularSimsSim[]>;

    /**
     * Create a CellularSims resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CellularSimsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CellularSimsArgs | CellularSimsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CellularSimsState | undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["simFailover"] = state ? state.simFailover : undefined;
            resourceInputs["sims"] = state ? state.sims : undefined;
        } else {
            const args = argsOrState as CellularSimsArgs | undefined;
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["simFailover"] = args ? args.simFailover : undefined;
            resourceInputs["sims"] = args ? args.sims : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CellularSims.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CellularSims resources.
 */
export interface CellularSimsState {
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * SIM Failover settings.
     */
    simFailover?: pulumi.Input<inputs.devices.CellularSimsSimFailover>;
    /**
     * List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
     */
    sims?: pulumi.Input<pulumi.Input<inputs.devices.CellularSimsSim>[]>;
}

/**
 * The set of arguments for constructing a CellularSims resource.
 */
export interface CellularSimsArgs {
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
    /**
     * SIM Failover settings.
     */
    simFailover?: pulumi.Input<inputs.devices.CellularSimsSimFailover>;
    /**
     * List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
     */
    sims?: pulumi.Input<pulumi.Input<inputs.devices.CellularSimsSim>[]>;
}
