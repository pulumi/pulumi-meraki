// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/managementInterface:ManagementInterface example "serial"
 * ```
 */
export class ManagementInterface extends pulumi.CustomResource {
    /**
     * Get an existing ManagementInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementInterfaceState, opts?: pulumi.CustomResourceOptions): ManagementInterface {
        return new ManagementInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/managementInterface:ManagementInterface';

    /**
     * Returns true if the given object is an instance of ManagementInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementInterface.__pulumiType;
    }

    /**
     * Dynamic DNS hostnames.
     */
    public /*out*/ readonly ddnsHostnames!: pulumi.Output<outputs.devices.ManagementInterfaceDdnsHostnames>;
    /**
     * serial path parameter.
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * WAN 1 settings
     */
    public readonly wan1!: pulumi.Output<outputs.devices.ManagementInterfaceWan1>;
    /**
     * WAN 2 settings (only for MX devices)
     */
    public readonly wan2!: pulumi.Output<outputs.devices.ManagementInterfaceWan2>;

    /**
     * Create a ManagementInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementInterfaceArgs | ManagementInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementInterfaceState | undefined;
            resourceInputs["ddnsHostnames"] = state ? state.ddnsHostnames : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["wan1"] = state ? state.wan1 : undefined;
            resourceInputs["wan2"] = state ? state.wan2 : undefined;
        } else {
            const args = argsOrState as ManagementInterfaceArgs | undefined;
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["wan1"] = args ? args.wan1 : undefined;
            resourceInputs["wan2"] = args ? args.wan2 : undefined;
            resourceInputs["ddnsHostnames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagementInterface resources.
 */
export interface ManagementInterfaceState {
    /**
     * Dynamic DNS hostnames.
     */
    ddnsHostnames?: pulumi.Input<inputs.devices.ManagementInterfaceDdnsHostnames>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * WAN 1 settings
     */
    wan1?: pulumi.Input<inputs.devices.ManagementInterfaceWan1>;
    /**
     * WAN 2 settings (only for MX devices)
     */
    wan2?: pulumi.Input<inputs.devices.ManagementInterfaceWan2>;
}

/**
 * The set of arguments for constructing a ManagementInterface resource.
 */
export interface ManagementInterfaceArgs {
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
    /**
     * WAN 1 settings
     */
    wan1?: pulumi.Input<inputs.devices.ManagementInterfaceWan1>;
    /**
     * WAN 2 settings (only for MX devices)
     */
    wan2?: pulumi.Input<inputs.devices.ManagementInterfaceWan2>;
}
