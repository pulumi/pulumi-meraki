// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as meraki from "@pulumi/meraki";
 *
 * const example = new meraki.devices.CameraSense("example", {
 *     audioDetection: {
 *         enabled: false,
 *     },
 *     mqttBrokerId: "1234",
 *     senseEnabled: true,
 *     serial: "string",
 * });
 * export const merakiDevicesCameraSenseExample = example;
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/cameraSense:CameraSense example "serial"
 * ```
 */
export class CameraSense extends pulumi.CustomResource {
    /**
     * Get an existing CameraSense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CameraSenseState, opts?: pulumi.CustomResourceOptions): CameraSense {
        return new CameraSense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/cameraSense:CameraSense';

    /**
     * Returns true if the given object is an instance of CameraSense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CameraSense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CameraSense.__pulumiType;
    }

    /**
     * The details of the audio detection config.
     */
    declare public readonly audioDetection: pulumi.Output<outputs.devices.CameraSenseAudioDetection>;
    /**
     * The ID of the object detection model
     */
    declare public readonly detectionModelId: pulumi.Output<string>;
    /**
     * The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
     */
    declare public readonly mqttBrokerId: pulumi.Output<string>;
    declare public /*out*/ readonly mqttTopics: pulumi.Output<string[]>;
    /**
     * Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
     */
    declare public readonly senseEnabled: pulumi.Output<boolean>;
    /**
     * serial path parameter.
     */
    declare public readonly serial: pulumi.Output<string>;

    /**
     * Create a CameraSense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CameraSenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CameraSenseArgs | CameraSenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CameraSenseState | undefined;
            resourceInputs["audioDetection"] = state?.audioDetection;
            resourceInputs["detectionModelId"] = state?.detectionModelId;
            resourceInputs["mqttBrokerId"] = state?.mqttBrokerId;
            resourceInputs["mqttTopics"] = state?.mqttTopics;
            resourceInputs["senseEnabled"] = state?.senseEnabled;
            resourceInputs["serial"] = state?.serial;
        } else {
            const args = argsOrState as CameraSenseArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["audioDetection"] = args?.audioDetection;
            resourceInputs["detectionModelId"] = args?.detectionModelId;
            resourceInputs["mqttBrokerId"] = args?.mqttBrokerId;
            resourceInputs["senseEnabled"] = args?.senseEnabled;
            resourceInputs["serial"] = args?.serial;
            resourceInputs["mqttTopics"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CameraSense.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CameraSense resources.
 */
export interface CameraSenseState {
    /**
     * The details of the audio detection config.
     */
    audioDetection?: pulumi.Input<inputs.devices.CameraSenseAudioDetection>;
    /**
     * The ID of the object detection model
     */
    detectionModelId?: pulumi.Input<string>;
    /**
     * The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
     */
    mqttBrokerId?: pulumi.Input<string>;
    mqttTopics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
     */
    senseEnabled?: pulumi.Input<boolean>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CameraSense resource.
 */
export interface CameraSenseArgs {
    /**
     * The details of the audio detection config.
     */
    audioDetection?: pulumi.Input<inputs.devices.CameraSenseAudioDetection>;
    /**
     * The ID of the object detection model
     */
    detectionModelId?: pulumi.Input<string>;
    /**
     * The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
     */
    mqttBrokerId?: pulumi.Input<string>;
    /**
     * Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
     */
    senseEnabled?: pulumi.Input<boolean>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
