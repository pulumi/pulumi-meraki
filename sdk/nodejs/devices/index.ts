// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplianceRadioSettingsArgs, ApplianceRadioSettingsState } from "./applianceRadioSettings";
export type ApplianceRadioSettings = import("./applianceRadioSettings").ApplianceRadioSettings;
export const ApplianceRadioSettings: typeof import("./applianceRadioSettings").ApplianceRadioSettings = null as any;
utilities.lazyLoad(exports, ["ApplianceRadioSettings"], () => require("./applianceRadioSettings"));

export { ApplianceUplinksSettingsArgs, ApplianceUplinksSettingsState } from "./applianceUplinksSettings";
export type ApplianceUplinksSettings = import("./applianceUplinksSettings").ApplianceUplinksSettings;
export const ApplianceUplinksSettings: typeof import("./applianceUplinksSettings").ApplianceUplinksSettings = null as any;
utilities.lazyLoad(exports, ["ApplianceUplinksSettings"], () => require("./applianceUplinksSettings"));

export { ApplianceVmxAuthenticationTokenArgs, ApplianceVmxAuthenticationTokenState } from "./applianceVmxAuthenticationToken";
export type ApplianceVmxAuthenticationToken = import("./applianceVmxAuthenticationToken").ApplianceVmxAuthenticationToken;
export const ApplianceVmxAuthenticationToken: typeof import("./applianceVmxAuthenticationToken").ApplianceVmxAuthenticationToken = null as any;
utilities.lazyLoad(exports, ["ApplianceVmxAuthenticationToken"], () => require("./applianceVmxAuthenticationToken"));

export { BaseArgs, BaseState } from "./base";
export type Base = import("./base").Base;
export const Base: typeof import("./base").Base = null as any;
utilities.lazyLoad(exports, ["Base"], () => require("./base"));

export { BlinkLedsArgs, BlinkLedsState } from "./blinkLeds";
export type BlinkLeds = import("./blinkLeds").BlinkLeds;
export const BlinkLeds: typeof import("./blinkLeds").BlinkLeds = null as any;
utilities.lazyLoad(exports, ["BlinkLeds"], () => require("./blinkLeds"));

export { CameraCustomAnalyticsArgs, CameraCustomAnalyticsState } from "./cameraCustomAnalytics";
export type CameraCustomAnalytics = import("./cameraCustomAnalytics").CameraCustomAnalytics;
export const CameraCustomAnalytics: typeof import("./cameraCustomAnalytics").CameraCustomAnalytics = null as any;
utilities.lazyLoad(exports, ["CameraCustomAnalytics"], () => require("./cameraCustomAnalytics"));

export { CameraGenerateSnapshotArgs, CameraGenerateSnapshotState } from "./cameraGenerateSnapshot";
export type CameraGenerateSnapshot = import("./cameraGenerateSnapshot").CameraGenerateSnapshot;
export const CameraGenerateSnapshot: typeof import("./cameraGenerateSnapshot").CameraGenerateSnapshot = null as any;
utilities.lazyLoad(exports, ["CameraGenerateSnapshot"], () => require("./cameraGenerateSnapshot"));

export { CameraQualityAndRetentionArgs, CameraQualityAndRetentionState } from "./cameraQualityAndRetention";
export type CameraQualityAndRetention = import("./cameraQualityAndRetention").CameraQualityAndRetention;
export const CameraQualityAndRetention: typeof import("./cameraQualityAndRetention").CameraQualityAndRetention = null as any;
utilities.lazyLoad(exports, ["CameraQualityAndRetention"], () => require("./cameraQualityAndRetention"));

export { CameraSenseArgs, CameraSenseState } from "./cameraSense";
export type CameraSense = import("./cameraSense").CameraSense;
export const CameraSense: typeof import("./cameraSense").CameraSense = null as any;
utilities.lazyLoad(exports, ["CameraSense"], () => require("./cameraSense"));

export { CameraVideoSettingsArgs, CameraVideoSettingsState } from "./cameraVideoSettings";
export type CameraVideoSettings = import("./cameraVideoSettings").CameraVideoSettings;
export const CameraVideoSettings: typeof import("./cameraVideoSettings").CameraVideoSettings = null as any;
utilities.lazyLoad(exports, ["CameraVideoSettings"], () => require("./cameraVideoSettings"));

export { CameraWirelessProfilesArgs, CameraWirelessProfilesState } from "./cameraWirelessProfiles";
export type CameraWirelessProfiles = import("./cameraWirelessProfiles").CameraWirelessProfiles;
export const CameraWirelessProfiles: typeof import("./cameraWirelessProfiles").CameraWirelessProfiles = null as any;
utilities.lazyLoad(exports, ["CameraWirelessProfiles"], () => require("./cameraWirelessProfiles"));

export { CellularGatewayLanArgs, CellularGatewayLanState } from "./cellularGatewayLan";
export type CellularGatewayLan = import("./cellularGatewayLan").CellularGatewayLan;
export const CellularGatewayLan: typeof import("./cellularGatewayLan").CellularGatewayLan = null as any;
utilities.lazyLoad(exports, ["CellularGatewayLan"], () => require("./cellularGatewayLan"));

export { CellularGatewayPortForwardingRulesArgs, CellularGatewayPortForwardingRulesState } from "./cellularGatewayPortForwardingRules";
export type CellularGatewayPortForwardingRules = import("./cellularGatewayPortForwardingRules").CellularGatewayPortForwardingRules;
export const CellularGatewayPortForwardingRules: typeof import("./cellularGatewayPortForwardingRules").CellularGatewayPortForwardingRules = null as any;
utilities.lazyLoad(exports, ["CellularGatewayPortForwardingRules"], () => require("./cellularGatewayPortForwardingRules"));

export { CellularSimsArgs, CellularSimsState } from "./cellularSims";
export type CellularSims = import("./cellularSims").CellularSims;
export const CellularSims: typeof import("./cellularSims").CellularSims = null as any;
utilities.lazyLoad(exports, ["CellularSims"], () => require("./cellularSims"));

export { GetAppliancePerformanceArgs, GetAppliancePerformanceResult, GetAppliancePerformanceOutputArgs } from "./getAppliancePerformance";
export const getAppliancePerformance: typeof import("./getAppliancePerformance").getAppliancePerformance = null as any;
export const getAppliancePerformanceOutput: typeof import("./getAppliancePerformance").getAppliancePerformanceOutput = null as any;
utilities.lazyLoad(exports, ["getAppliancePerformance","getAppliancePerformanceOutput"], () => require("./getAppliancePerformance"));

export { GetApplianceRadioSettingsArgs, GetApplianceRadioSettingsResult, GetApplianceRadioSettingsOutputArgs } from "./getApplianceRadioSettings";
export const getApplianceRadioSettings: typeof import("./getApplianceRadioSettings").getApplianceRadioSettings = null as any;
export const getApplianceRadioSettingsOutput: typeof import("./getApplianceRadioSettings").getApplianceRadioSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceRadioSettings","getApplianceRadioSettingsOutput"], () => require("./getApplianceRadioSettings"));

export { GetApplianceUplinksSettingsArgs, GetApplianceUplinksSettingsResult, GetApplianceUplinksSettingsOutputArgs } from "./getApplianceUplinksSettings";
export const getApplianceUplinksSettings: typeof import("./getApplianceUplinksSettings").getApplianceUplinksSettings = null as any;
export const getApplianceUplinksSettingsOutput: typeof import("./getApplianceUplinksSettings").getApplianceUplinksSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUplinksSettings","getApplianceUplinksSettingsOutput"], () => require("./getApplianceUplinksSettings"));

export { GetCameraAnalyticsLiveArgs, GetCameraAnalyticsLiveResult, GetCameraAnalyticsLiveOutputArgs } from "./getCameraAnalyticsLive";
export const getCameraAnalyticsLive: typeof import("./getCameraAnalyticsLive").getCameraAnalyticsLive = null as any;
export const getCameraAnalyticsLiveOutput: typeof import("./getCameraAnalyticsLive").getCameraAnalyticsLiveOutput = null as any;
utilities.lazyLoad(exports, ["getCameraAnalyticsLive","getCameraAnalyticsLiveOutput"], () => require("./getCameraAnalyticsLive"));

export { GetCameraCustomAnalyticsArgs, GetCameraCustomAnalyticsResult, GetCameraCustomAnalyticsOutputArgs } from "./getCameraCustomAnalytics";
export const getCameraCustomAnalytics: typeof import("./getCameraCustomAnalytics").getCameraCustomAnalytics = null as any;
export const getCameraCustomAnalyticsOutput: typeof import("./getCameraCustomAnalytics").getCameraCustomAnalyticsOutput = null as any;
utilities.lazyLoad(exports, ["getCameraCustomAnalytics","getCameraCustomAnalyticsOutput"], () => require("./getCameraCustomAnalytics"));

export { GetCameraQualityAndRetentionArgs, GetCameraQualityAndRetentionResult, GetCameraQualityAndRetentionOutputArgs } from "./getCameraQualityAndRetention";
export const getCameraQualityAndRetention: typeof import("./getCameraQualityAndRetention").getCameraQualityAndRetention = null as any;
export const getCameraQualityAndRetentionOutput: typeof import("./getCameraQualityAndRetention").getCameraQualityAndRetentionOutput = null as any;
utilities.lazyLoad(exports, ["getCameraQualityAndRetention","getCameraQualityAndRetentionOutput"], () => require("./getCameraQualityAndRetention"));

export { GetCameraSenseArgs, GetCameraSenseResult, GetCameraSenseOutputArgs } from "./getCameraSense";
export const getCameraSense: typeof import("./getCameraSense").getCameraSense = null as any;
export const getCameraSenseOutput: typeof import("./getCameraSense").getCameraSenseOutput = null as any;
utilities.lazyLoad(exports, ["getCameraSense","getCameraSenseOutput"], () => require("./getCameraSense"));

export { GetCameraVideoLinkArgs, GetCameraVideoLinkResult, GetCameraVideoLinkOutputArgs } from "./getCameraVideoLink";
export const getCameraVideoLink: typeof import("./getCameraVideoLink").getCameraVideoLink = null as any;
export const getCameraVideoLinkOutput: typeof import("./getCameraVideoLink").getCameraVideoLinkOutput = null as any;
utilities.lazyLoad(exports, ["getCameraVideoLink","getCameraVideoLinkOutput"], () => require("./getCameraVideoLink"));

export { GetCameraVideoSettingsArgs, GetCameraVideoSettingsResult, GetCameraVideoSettingsOutputArgs } from "./getCameraVideoSettings";
export const getCameraVideoSettings: typeof import("./getCameraVideoSettings").getCameraVideoSettings = null as any;
export const getCameraVideoSettingsOutput: typeof import("./getCameraVideoSettings").getCameraVideoSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getCameraVideoSettings","getCameraVideoSettingsOutput"], () => require("./getCameraVideoSettings"));

export { GetCameraWirelessProfilesArgs, GetCameraWirelessProfilesResult, GetCameraWirelessProfilesOutputArgs } from "./getCameraWirelessProfiles";
export const getCameraWirelessProfiles: typeof import("./getCameraWirelessProfiles").getCameraWirelessProfiles = null as any;
export const getCameraWirelessProfilesOutput: typeof import("./getCameraWirelessProfiles").getCameraWirelessProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getCameraWirelessProfiles","getCameraWirelessProfilesOutput"], () => require("./getCameraWirelessProfiles"));

export { GetCellularGatewayLanArgs, GetCellularGatewayLanResult, GetCellularGatewayLanOutputArgs } from "./getCellularGatewayLan";
export const getCellularGatewayLan: typeof import("./getCellularGatewayLan").getCellularGatewayLan = null as any;
export const getCellularGatewayLanOutput: typeof import("./getCellularGatewayLan").getCellularGatewayLanOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayLan","getCellularGatewayLanOutput"], () => require("./getCellularGatewayLan"));

export { GetCellularGatewayPortForwardingRulesArgs, GetCellularGatewayPortForwardingRulesResult, GetCellularGatewayPortForwardingRulesOutputArgs } from "./getCellularGatewayPortForwardingRules";
export const getCellularGatewayPortForwardingRules: typeof import("./getCellularGatewayPortForwardingRules").getCellularGatewayPortForwardingRules = null as any;
export const getCellularGatewayPortForwardingRulesOutput: typeof import("./getCellularGatewayPortForwardingRules").getCellularGatewayPortForwardingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCellularGatewayPortForwardingRules","getCellularGatewayPortForwardingRulesOutput"], () => require("./getCellularGatewayPortForwardingRules"));

export { GetCellularSimsArgs, GetCellularSimsResult, GetCellularSimsOutputArgs } from "./getCellularSims";
export const getCellularSims: typeof import("./getCellularSims").getCellularSims = null as any;
export const getCellularSimsOutput: typeof import("./getCellularSims").getCellularSimsOutput = null as any;
utilities.lazyLoad(exports, ["getCellularSims","getCellularSimsOutput"], () => require("./getCellularSims"));

export { GetLiveToolsArpTableArgs, GetLiveToolsArpTableResult, GetLiveToolsArpTableOutputArgs } from "./getLiveToolsArpTable";
export const getLiveToolsArpTable: typeof import("./getLiveToolsArpTable").getLiveToolsArpTable = null as any;
export const getLiveToolsArpTableOutput: typeof import("./getLiveToolsArpTable").getLiveToolsArpTableOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsArpTable","getLiveToolsArpTableOutput"], () => require("./getLiveToolsArpTable"));

export { GetLiveToolsCableTestArgs, GetLiveToolsCableTestResult, GetLiveToolsCableTestOutputArgs } from "./getLiveToolsCableTest";
export const getLiveToolsCableTest: typeof import("./getLiveToolsCableTest").getLiveToolsCableTest = null as any;
export const getLiveToolsCableTestOutput: typeof import("./getLiveToolsCableTest").getLiveToolsCableTestOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsCableTest","getLiveToolsCableTestOutput"], () => require("./getLiveToolsCableTest"));

export { GetLiveToolsPingArgs, GetLiveToolsPingResult, GetLiveToolsPingOutputArgs } from "./getLiveToolsPing";
export const getLiveToolsPing: typeof import("./getLiveToolsPing").getLiveToolsPing = null as any;
export const getLiveToolsPingOutput: typeof import("./getLiveToolsPing").getLiveToolsPingOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsPing","getLiveToolsPingOutput"], () => require("./getLiveToolsPing"));

export { GetLiveToolsPingDeviceArgs, GetLiveToolsPingDeviceResult, GetLiveToolsPingDeviceOutputArgs } from "./getLiveToolsPingDevice";
export const getLiveToolsPingDevice: typeof import("./getLiveToolsPingDevice").getLiveToolsPingDevice = null as any;
export const getLiveToolsPingDeviceOutput: typeof import("./getLiveToolsPingDevice").getLiveToolsPingDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsPingDevice","getLiveToolsPingDeviceOutput"], () => require("./getLiveToolsPingDevice"));

export { GetLiveToolsThroughputTestArgs, GetLiveToolsThroughputTestResult, GetLiveToolsThroughputTestOutputArgs } from "./getLiveToolsThroughputTest";
export const getLiveToolsThroughputTest: typeof import("./getLiveToolsThroughputTest").getLiveToolsThroughputTest = null as any;
export const getLiveToolsThroughputTestOutput: typeof import("./getLiveToolsThroughputTest").getLiveToolsThroughputTestOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsThroughputTest","getLiveToolsThroughputTestOutput"], () => require("./getLiveToolsThroughputTest"));

export { GetLiveToolsWakeOnLanArgs, GetLiveToolsWakeOnLanResult, GetLiveToolsWakeOnLanOutputArgs } from "./getLiveToolsWakeOnLan";
export const getLiveToolsWakeOnLan: typeof import("./getLiveToolsWakeOnLan").getLiveToolsWakeOnLan = null as any;
export const getLiveToolsWakeOnLanOutput: typeof import("./getLiveToolsWakeOnLan").getLiveToolsWakeOnLanOutput = null as any;
utilities.lazyLoad(exports, ["getLiveToolsWakeOnLan","getLiveToolsWakeOnLanOutput"], () => require("./getLiveToolsWakeOnLan"));

export { GetLldpCdpArgs, GetLldpCdpResult, GetLldpCdpOutputArgs } from "./getLldpCdp";
export const getLldpCdp: typeof import("./getLldpCdp").getLldpCdp = null as any;
export const getLldpCdpOutput: typeof import("./getLldpCdp").getLldpCdpOutput = null as any;
utilities.lazyLoad(exports, ["getLldpCdp","getLldpCdpOutput"], () => require("./getLldpCdp"));

export { GetManagementInterfaceArgs, GetManagementInterfaceResult, GetManagementInterfaceOutputArgs } from "./getManagementInterface";
export const getManagementInterface: typeof import("./getManagementInterface").getManagementInterface = null as any;
export const getManagementInterfaceOutput: typeof import("./getManagementInterface").getManagementInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getManagementInterface","getManagementInterfaceOutput"], () => require("./getManagementInterface"));

export { GetSensorRelationshipsArgs, GetSensorRelationshipsResult, GetSensorRelationshipsOutputArgs } from "./getSensorRelationships";
export const getSensorRelationships: typeof import("./getSensorRelationships").getSensorRelationships = null as any;
export const getSensorRelationshipsOutput: typeof import("./getSensorRelationships").getSensorRelationshipsOutput = null as any;
utilities.lazyLoad(exports, ["getSensorRelationships","getSensorRelationshipsOutput"], () => require("./getSensorRelationships"));

export { GetSwitchPortsArgs, GetSwitchPortsResult, GetSwitchPortsOutputArgs } from "./getSwitchPorts";
export const getSwitchPorts: typeof import("./getSwitchPorts").getSwitchPorts = null as any;
export const getSwitchPortsOutput: typeof import("./getSwitchPorts").getSwitchPortsOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchPorts","getSwitchPortsOutput"], () => require("./getSwitchPorts"));

export { GetSwitchPortsStatusesArgs, GetSwitchPortsStatusesResult, GetSwitchPortsStatusesOutputArgs } from "./getSwitchPortsStatuses";
export const getSwitchPortsStatuses: typeof import("./getSwitchPortsStatuses").getSwitchPortsStatuses = null as any;
export const getSwitchPortsStatusesOutput: typeof import("./getSwitchPortsStatuses").getSwitchPortsStatusesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchPortsStatuses","getSwitchPortsStatusesOutput"], () => require("./getSwitchPortsStatuses"));

export { GetSwitchRoutingInterfacesArgs, GetSwitchRoutingInterfacesResult, GetSwitchRoutingInterfacesOutputArgs } from "./getSwitchRoutingInterfaces";
export const getSwitchRoutingInterfaces: typeof import("./getSwitchRoutingInterfaces").getSwitchRoutingInterfaces = null as any;
export const getSwitchRoutingInterfacesOutput: typeof import("./getSwitchRoutingInterfaces").getSwitchRoutingInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingInterfaces","getSwitchRoutingInterfacesOutput"], () => require("./getSwitchRoutingInterfaces"));

export { GetSwitchRoutingInterfacesDhcpArgs, GetSwitchRoutingInterfacesDhcpResult, GetSwitchRoutingInterfacesDhcpOutputArgs } from "./getSwitchRoutingInterfacesDhcp";
export const getSwitchRoutingInterfacesDhcp: typeof import("./getSwitchRoutingInterfacesDhcp").getSwitchRoutingInterfacesDhcp = null as any;
export const getSwitchRoutingInterfacesDhcpOutput: typeof import("./getSwitchRoutingInterfacesDhcp").getSwitchRoutingInterfacesDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingInterfacesDhcp","getSwitchRoutingInterfacesDhcpOutput"], () => require("./getSwitchRoutingInterfacesDhcp"));

export { GetSwitchRoutingStaticRoutesArgs, GetSwitchRoutingStaticRoutesResult, GetSwitchRoutingStaticRoutesOutputArgs } from "./getSwitchRoutingStaticRoutes";
export const getSwitchRoutingStaticRoutes: typeof import("./getSwitchRoutingStaticRoutes").getSwitchRoutingStaticRoutes = null as any;
export const getSwitchRoutingStaticRoutesOutput: typeof import("./getSwitchRoutingStaticRoutes").getSwitchRoutingStaticRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchRoutingStaticRoutes","getSwitchRoutingStaticRoutesOutput"], () => require("./getSwitchRoutingStaticRoutes"));

export { GetSwitchWarmSpareArgs, GetSwitchWarmSpareResult, GetSwitchWarmSpareOutputArgs } from "./getSwitchWarmSpare";
export const getSwitchWarmSpare: typeof import("./getSwitchWarmSpare").getSwitchWarmSpare = null as any;
export const getSwitchWarmSpareOutput: typeof import("./getSwitchWarmSpare").getSwitchWarmSpareOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchWarmSpare","getSwitchWarmSpareOutput"], () => require("./getSwitchWarmSpare"));

export { GetWirelessBluetoothSettingsArgs, GetWirelessBluetoothSettingsResult, GetWirelessBluetoothSettingsOutputArgs } from "./getWirelessBluetoothSettings";
export const getWirelessBluetoothSettings: typeof import("./getWirelessBluetoothSettings").getWirelessBluetoothSettings = null as any;
export const getWirelessBluetoothSettingsOutput: typeof import("./getWirelessBluetoothSettings").getWirelessBluetoothSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessBluetoothSettings","getWirelessBluetoothSettingsOutput"], () => require("./getWirelessBluetoothSettings"));

export { GetWirelessConnectionStatsArgs, GetWirelessConnectionStatsResult, GetWirelessConnectionStatsOutputArgs } from "./getWirelessConnectionStats";
export const getWirelessConnectionStats: typeof import("./getWirelessConnectionStats").getWirelessConnectionStats = null as any;
export const getWirelessConnectionStatsOutput: typeof import("./getWirelessConnectionStats").getWirelessConnectionStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessConnectionStats","getWirelessConnectionStatsOutput"], () => require("./getWirelessConnectionStats"));

export { GetWirelessLatencyStatsArgs, GetWirelessLatencyStatsResult, GetWirelessLatencyStatsOutputArgs } from "./getWirelessLatencyStats";
export const getWirelessLatencyStats: typeof import("./getWirelessLatencyStats").getWirelessLatencyStats = null as any;
export const getWirelessLatencyStatsOutput: typeof import("./getWirelessLatencyStats").getWirelessLatencyStatsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessLatencyStats","getWirelessLatencyStatsOutput"], () => require("./getWirelessLatencyStats"));

export { GetWirelessRadioSettingsArgs, GetWirelessRadioSettingsResult, GetWirelessRadioSettingsOutputArgs } from "./getWirelessRadioSettings";
export const getWirelessRadioSettings: typeof import("./getWirelessRadioSettings").getWirelessRadioSettings = null as any;
export const getWirelessRadioSettingsOutput: typeof import("./getWirelessRadioSettings").getWirelessRadioSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessRadioSettings","getWirelessRadioSettingsOutput"], () => require("./getWirelessRadioSettings"));

export { GetWirelessStatusArgs, GetWirelessStatusResult, GetWirelessStatusOutputArgs } from "./getWirelessStatus";
export const getWirelessStatus: typeof import("./getWirelessStatus").getWirelessStatus = null as any;
export const getWirelessStatusOutput: typeof import("./getWirelessStatus").getWirelessStatusOutput = null as any;
utilities.lazyLoad(exports, ["getWirelessStatus","getWirelessStatusOutput"], () => require("./getWirelessStatus"));

export { LiveToolsArpTableArgs, LiveToolsArpTableState } from "./liveToolsArpTable";
export type LiveToolsArpTable = import("./liveToolsArpTable").LiveToolsArpTable;
export const LiveToolsArpTable: typeof import("./liveToolsArpTable").LiveToolsArpTable = null as any;
utilities.lazyLoad(exports, ["LiveToolsArpTable"], () => require("./liveToolsArpTable"));

export { LiveToolsCableArgs, LiveToolsCableState } from "./liveToolsCable";
export type LiveToolsCable = import("./liveToolsCable").LiveToolsCable;
export const LiveToolsCable: typeof import("./liveToolsCable").LiveToolsCable = null as any;
utilities.lazyLoad(exports, ["LiveToolsCable"], () => require("./liveToolsCable"));

export { LiveToolsPingArgs, LiveToolsPingState } from "./liveToolsPing";
export type LiveToolsPing = import("./liveToolsPing").LiveToolsPing;
export const LiveToolsPing: typeof import("./liveToolsPing").LiveToolsPing = null as any;
utilities.lazyLoad(exports, ["LiveToolsPing"], () => require("./liveToolsPing"));

export { LiveToolsPingDeviceArgs, LiveToolsPingDeviceState } from "./liveToolsPingDevice";
export type LiveToolsPingDevice = import("./liveToolsPingDevice").LiveToolsPingDevice;
export const LiveToolsPingDevice: typeof import("./liveToolsPingDevice").LiveToolsPingDevice = null as any;
utilities.lazyLoad(exports, ["LiveToolsPingDevice"], () => require("./liveToolsPingDevice"));

export { LiveToolsThroughputTestArgs, LiveToolsThroughputTestState } from "./liveToolsThroughputTest";
export type LiveToolsThroughputTest = import("./liveToolsThroughputTest").LiveToolsThroughputTest;
export const LiveToolsThroughputTest: typeof import("./liveToolsThroughputTest").LiveToolsThroughputTest = null as any;
utilities.lazyLoad(exports, ["LiveToolsThroughputTest"], () => require("./liveToolsThroughputTest"));

export { LiveToolsWakeOnLanArgs, LiveToolsWakeOnLanState } from "./liveToolsWakeOnLan";
export type LiveToolsWakeOnLan = import("./liveToolsWakeOnLan").LiveToolsWakeOnLan;
export const LiveToolsWakeOnLan: typeof import("./liveToolsWakeOnLan").LiveToolsWakeOnLan = null as any;
utilities.lazyLoad(exports, ["LiveToolsWakeOnLan"], () => require("./liveToolsWakeOnLan"));

export { ManagementInterfaceArgs, ManagementInterfaceState } from "./managementInterface";
export type ManagementInterface = import("./managementInterface").ManagementInterface;
export const ManagementInterface: typeof import("./managementInterface").ManagementInterface = null as any;
utilities.lazyLoad(exports, ["ManagementInterface"], () => require("./managementInterface"));

export { SensorRelationshipsArgs, SensorRelationshipsState } from "./sensorRelationships";
export type SensorRelationships = import("./sensorRelationships").SensorRelationships;
export const SensorRelationships: typeof import("./sensorRelationships").SensorRelationships = null as any;
utilities.lazyLoad(exports, ["SensorRelationships"], () => require("./sensorRelationships"));

export { SwitchPortsArgs, SwitchPortsState } from "./switchPorts";
export type SwitchPorts = import("./switchPorts").SwitchPorts;
export const SwitchPorts: typeof import("./switchPorts").SwitchPorts = null as any;
utilities.lazyLoad(exports, ["SwitchPorts"], () => require("./switchPorts"));

export { SwitchPortsCycleArgs, SwitchPortsCycleState } from "./switchPortsCycle";
export type SwitchPortsCycle = import("./switchPortsCycle").SwitchPortsCycle;
export const SwitchPortsCycle: typeof import("./switchPortsCycle").SwitchPortsCycle = null as any;
utilities.lazyLoad(exports, ["SwitchPortsCycle"], () => require("./switchPortsCycle"));

export { SwitchRoutingInterfacesArgs, SwitchRoutingInterfacesState } from "./switchRoutingInterfaces";
export type SwitchRoutingInterfaces = import("./switchRoutingInterfaces").SwitchRoutingInterfaces;
export const SwitchRoutingInterfaces: typeof import("./switchRoutingInterfaces").SwitchRoutingInterfaces = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingInterfaces"], () => require("./switchRoutingInterfaces"));

export { SwitchRoutingInterfacesDhcpArgs, SwitchRoutingInterfacesDhcpState } from "./switchRoutingInterfacesDhcp";
export type SwitchRoutingInterfacesDhcp = import("./switchRoutingInterfacesDhcp").SwitchRoutingInterfacesDhcp;
export const SwitchRoutingInterfacesDhcp: typeof import("./switchRoutingInterfacesDhcp").SwitchRoutingInterfacesDhcp = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingInterfacesDhcp"], () => require("./switchRoutingInterfacesDhcp"));

export { SwitchRoutingStaticRoutesArgs, SwitchRoutingStaticRoutesState } from "./switchRoutingStaticRoutes";
export type SwitchRoutingStaticRoutes = import("./switchRoutingStaticRoutes").SwitchRoutingStaticRoutes;
export const SwitchRoutingStaticRoutes: typeof import("./switchRoutingStaticRoutes").SwitchRoutingStaticRoutes = null as any;
utilities.lazyLoad(exports, ["SwitchRoutingStaticRoutes"], () => require("./switchRoutingStaticRoutes"));

export { SwitchWarmSpareArgs, SwitchWarmSpareState } from "./switchWarmSpare";
export type SwitchWarmSpare = import("./switchWarmSpare").SwitchWarmSpare;
export const SwitchWarmSpare: typeof import("./switchWarmSpare").SwitchWarmSpare = null as any;
utilities.lazyLoad(exports, ["SwitchWarmSpare"], () => require("./switchWarmSpare"));

export { WirelessAlternateManagementInterfaceIpv6Args, WirelessAlternateManagementInterfaceIpv6State } from "./wirelessAlternateManagementInterfaceIpv6";
export type WirelessAlternateManagementInterfaceIpv6 = import("./wirelessAlternateManagementInterfaceIpv6").WirelessAlternateManagementInterfaceIpv6;
export const WirelessAlternateManagementInterfaceIpv6: typeof import("./wirelessAlternateManagementInterfaceIpv6").WirelessAlternateManagementInterfaceIpv6 = null as any;
utilities.lazyLoad(exports, ["WirelessAlternateManagementInterfaceIpv6"], () => require("./wirelessAlternateManagementInterfaceIpv6"));

export { WirelessBluetoothSettingsArgs, WirelessBluetoothSettingsState } from "./wirelessBluetoothSettings";
export type WirelessBluetoothSettings = import("./wirelessBluetoothSettings").WirelessBluetoothSettings;
export const WirelessBluetoothSettings: typeof import("./wirelessBluetoothSettings").WirelessBluetoothSettings = null as any;
utilities.lazyLoad(exports, ["WirelessBluetoothSettings"], () => require("./wirelessBluetoothSettings"));

export { WirelessRadioSettingsArgs, WirelessRadioSettingsState } from "./wirelessRadioSettings";
export type WirelessRadioSettings = import("./wirelessRadioSettings").WirelessRadioSettings;
export const WirelessRadioSettings: typeof import("./wirelessRadioSettings").WirelessRadioSettings = null as any;
utilities.lazyLoad(exports, ["WirelessRadioSettings"], () => require("./wirelessRadioSettings"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "meraki:devices/applianceRadioSettings:ApplianceRadioSettings":
                return new ApplianceRadioSettings(name, <any>undefined, { urn })
            case "meraki:devices/applianceUplinksSettings:ApplianceUplinksSettings":
                return new ApplianceUplinksSettings(name, <any>undefined, { urn })
            case "meraki:devices/applianceVmxAuthenticationToken:ApplianceVmxAuthenticationToken":
                return new ApplianceVmxAuthenticationToken(name, <any>undefined, { urn })
            case "meraki:devices/base:base":
                return new Base(name, <any>undefined, { urn })
            case "meraki:devices/blinkLeds:BlinkLeds":
                return new BlinkLeds(name, <any>undefined, { urn })
            case "meraki:devices/cameraCustomAnalytics:CameraCustomAnalytics":
                return new CameraCustomAnalytics(name, <any>undefined, { urn })
            case "meraki:devices/cameraGenerateSnapshot:CameraGenerateSnapshot":
                return new CameraGenerateSnapshot(name, <any>undefined, { urn })
            case "meraki:devices/cameraQualityAndRetention:CameraQualityAndRetention":
                return new CameraQualityAndRetention(name, <any>undefined, { urn })
            case "meraki:devices/cameraSense:CameraSense":
                return new CameraSense(name, <any>undefined, { urn })
            case "meraki:devices/cameraVideoSettings:CameraVideoSettings":
                return new CameraVideoSettings(name, <any>undefined, { urn })
            case "meraki:devices/cameraWirelessProfiles:CameraWirelessProfiles":
                return new CameraWirelessProfiles(name, <any>undefined, { urn })
            case "meraki:devices/cellularGatewayLan:CellularGatewayLan":
                return new CellularGatewayLan(name, <any>undefined, { urn })
            case "meraki:devices/cellularGatewayPortForwardingRules:CellularGatewayPortForwardingRules":
                return new CellularGatewayPortForwardingRules(name, <any>undefined, { urn })
            case "meraki:devices/cellularSims:CellularSims":
                return new CellularSims(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsArpTable:LiveToolsArpTable":
                return new LiveToolsArpTable(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsCable:LiveToolsCable":
                return new LiveToolsCable(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsPing:LiveToolsPing":
                return new LiveToolsPing(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsPingDevice:LiveToolsPingDevice":
                return new LiveToolsPingDevice(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest":
                return new LiveToolsThroughputTest(name, <any>undefined, { urn })
            case "meraki:devices/liveToolsWakeOnLan:LiveToolsWakeOnLan":
                return new LiveToolsWakeOnLan(name, <any>undefined, { urn })
            case "meraki:devices/managementInterface:ManagementInterface":
                return new ManagementInterface(name, <any>undefined, { urn })
            case "meraki:devices/sensorRelationships:SensorRelationships":
                return new SensorRelationships(name, <any>undefined, { urn })
            case "meraki:devices/switchPorts:SwitchPorts":
                return new SwitchPorts(name, <any>undefined, { urn })
            case "meraki:devices/switchPortsCycle:SwitchPortsCycle":
                return new SwitchPortsCycle(name, <any>undefined, { urn })
            case "meraki:devices/switchRoutingInterfaces:SwitchRoutingInterfaces":
                return new SwitchRoutingInterfaces(name, <any>undefined, { urn })
            case "meraki:devices/switchRoutingInterfacesDhcp:SwitchRoutingInterfacesDhcp":
                return new SwitchRoutingInterfacesDhcp(name, <any>undefined, { urn })
            case "meraki:devices/switchRoutingStaticRoutes:SwitchRoutingStaticRoutes":
                return new SwitchRoutingStaticRoutes(name, <any>undefined, { urn })
            case "meraki:devices/switchWarmSpare:SwitchWarmSpare":
                return new SwitchWarmSpare(name, <any>undefined, { urn })
            case "meraki:devices/wirelessAlternateManagementInterfaceIpv6:WirelessAlternateManagementInterfaceIpv6":
                return new WirelessAlternateManagementInterfaceIpv6(name, <any>undefined, { urn })
            case "meraki:devices/wirelessBluetoothSettings:WirelessBluetoothSettings":
                return new WirelessBluetoothSettings(name, <any>undefined, { urn })
            case "meraki:devices/wirelessRadioSettings:WirelessRadioSettings":
                return new WirelessRadioSettings(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("meraki", "devices/applianceRadioSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/applianceUplinksSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/applianceVmxAuthenticationToken", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/base", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/blinkLeds", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraCustomAnalytics", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraGenerateSnapshot", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraQualityAndRetention", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraSense", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraVideoSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cameraWirelessProfiles", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cellularGatewayLan", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cellularGatewayPortForwardingRules", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/cellularSims", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsArpTable", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsCable", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsPing", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsPingDevice", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsThroughputTest", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/liveToolsWakeOnLan", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/managementInterface", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/sensorRelationships", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchPorts", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchPortsCycle", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchRoutingInterfaces", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchRoutingInterfacesDhcp", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchRoutingStaticRoutes", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/switchWarmSpare", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/wirelessAlternateManagementInterfaceIpv6", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/wirelessBluetoothSettings", _module)
pulumi.runtime.registerResourceModule("meraki", "devices/wirelessRadioSettings", _module)
