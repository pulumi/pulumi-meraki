// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class LiveToolsCable extends pulumi.CustomResource {
    /**
     * Get an existing LiveToolsCable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LiveToolsCableState, opts?: pulumi.CustomResourceOptions): LiveToolsCable {
        return new LiveToolsCable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/liveToolsCable:LiveToolsCable';

    /**
     * Returns true if the given object is an instance of LiveToolsCable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LiveToolsCable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LiveToolsCable.__pulumiType;
    }

    /**
     * Id of the cable test request. Used to check the status of the request.
     */
    declare public /*out*/ readonly cableTestId: pulumi.Output<string>;
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    declare public readonly callback: pulumi.Output<outputs.devices.LiveToolsCableCallback>;
    /**
     * An error message for a failed execution
     */
    declare public /*out*/ readonly error: pulumi.Output<string>;
    /**
     * A list of ports for which to perform the cable test.
     */
    declare public readonly ports: pulumi.Output<string[]>;
    /**
     * Cable test request parameters
     */
    declare public /*out*/ readonly request: pulumi.Output<outputs.devices.LiveToolsCableRequest>;
    /**
     * Results of the cable test request, one for each requested port.
     */
    declare public /*out*/ readonly results: pulumi.Output<outputs.devices.LiveToolsCableResult[]>;
    /**
     * serial path parameter.
     */
    declare public readonly serial: pulumi.Output<string>;
    /**
     * Status of the cable test request.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * GET this url to check the status of your cable test request.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a LiveToolsCable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiveToolsCableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LiveToolsCableArgs | LiveToolsCableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LiveToolsCableState | undefined;
            resourceInputs["cableTestId"] = state?.cableTestId;
            resourceInputs["callback"] = state?.callback;
            resourceInputs["error"] = state?.error;
            resourceInputs["ports"] = state?.ports;
            resourceInputs["request"] = state?.request;
            resourceInputs["results"] = state?.results;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["status"] = state?.status;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as LiveToolsCableArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["callback"] = args?.callback;
            resourceInputs["ports"] = args?.ports;
            resourceInputs["serial"] = args?.serial;
            resourceInputs["cableTestId"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["request"] = undefined /*out*/;
            resourceInputs["results"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LiveToolsCable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LiveToolsCable resources.
 */
export interface LiveToolsCableState {
    /**
     * Id of the cable test request. Used to check the status of the request.
     */
    cableTestId?: pulumi.Input<string>;
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    callback?: pulumi.Input<inputs.devices.LiveToolsCableCallback>;
    /**
     * An error message for a failed execution
     */
    error?: pulumi.Input<string>;
    /**
     * A list of ports for which to perform the cable test.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cable test request parameters
     */
    request?: pulumi.Input<inputs.devices.LiveToolsCableRequest>;
    /**
     * Results of the cable test request, one for each requested port.
     */
    results?: pulumi.Input<pulumi.Input<inputs.devices.LiveToolsCableResult>[]>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * Status of the cable test request.
     */
    status?: pulumi.Input<string>;
    /**
     * GET this url to check the status of your cable test request.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LiveToolsCable resource.
 */
export interface LiveToolsCableArgs {
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    callback?: pulumi.Input<inputs.devices.LiveToolsCableCallback>;
    /**
     * A list of ports for which to perform the cable test.
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
