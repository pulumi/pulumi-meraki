// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/switchRoutingInterfaces:SwitchRoutingInterfaces example "interface_id,serial"
 * ```
 */
export class SwitchRoutingInterfaces extends pulumi.CustomResource {
    /**
     * Get an existing SwitchRoutingInterfaces resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchRoutingInterfacesState, opts?: pulumi.CustomResourceOptions): SwitchRoutingInterfaces {
        return new SwitchRoutingInterfaces(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/switchRoutingInterfaces:SwitchRoutingInterfaces';

    /**
     * Returns true if the given object is an instance of SwitchRoutingInterfaces.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchRoutingInterfaces {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchRoutingInterfaces.__pulumiType;
    }

    /**
     * IPv4 default gateway
     */
    declare public readonly defaultGateway: pulumi.Output<string>;
    /**
     * The id
     */
    declare public readonly interfaceId: pulumi.Output<string>;
    /**
     * IPv4 address
     */
    declare public readonly interfaceIp: pulumi.Output<string>;
    /**
     * IPv6 addressing
     */
    declare public readonly ipv6: pulumi.Output<outputs.devices.SwitchRoutingInterfacesIpv6>;
    /**
     * Multicast routing status
     */
    declare public readonly multicastRouting: pulumi.Output<string>;
    /**
     * The name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * IPv4 OSPF Settings
     */
    declare public readonly ospfSettings: pulumi.Output<outputs.devices.SwitchRoutingInterfacesOspfSettings>;
    /**
     * IPv6 OSPF Settings
     */
    declare public readonly ospfV3: pulumi.Output<outputs.devices.SwitchRoutingInterfacesOspfV3>;
    /**
     * serial path parameter.
     */
    declare public readonly serial: pulumi.Output<string>;
    /**
     * IPv4 subnet
     */
    declare public readonly subnet: pulumi.Output<string>;
    /**
     * VLAN id
     */
    declare public readonly vlanId: pulumi.Output<number>;

    /**
     * Create a SwitchRoutingInterfaces resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchRoutingInterfacesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchRoutingInterfacesArgs | SwitchRoutingInterfacesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchRoutingInterfacesState | undefined;
            resourceInputs["defaultGateway"] = state?.defaultGateway;
            resourceInputs["interfaceId"] = state?.interfaceId;
            resourceInputs["interfaceIp"] = state?.interfaceIp;
            resourceInputs["ipv6"] = state?.ipv6;
            resourceInputs["multicastRouting"] = state?.multicastRouting;
            resourceInputs["name"] = state?.name;
            resourceInputs["ospfSettings"] = state?.ospfSettings;
            resourceInputs["ospfV3"] = state?.ospfV3;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["subnet"] = state?.subnet;
            resourceInputs["vlanId"] = state?.vlanId;
        } else {
            const args = argsOrState as SwitchRoutingInterfacesArgs | undefined;
            if (args?.serial === undefined && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["defaultGateway"] = args?.defaultGateway;
            resourceInputs["interfaceId"] = args?.interfaceId;
            resourceInputs["interfaceIp"] = args?.interfaceIp;
            resourceInputs["ipv6"] = args?.ipv6;
            resourceInputs["multicastRouting"] = args?.multicastRouting;
            resourceInputs["name"] = args?.name;
            resourceInputs["ospfSettings"] = args?.ospfSettings;
            resourceInputs["ospfV3"] = args?.ospfV3;
            resourceInputs["serial"] = args?.serial;
            resourceInputs["subnet"] = args?.subnet;
            resourceInputs["vlanId"] = args?.vlanId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchRoutingInterfaces.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchRoutingInterfaces resources.
 */
export interface SwitchRoutingInterfacesState {
    /**
     * IPv4 default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * The id
     */
    interfaceId?: pulumi.Input<string>;
    /**
     * IPv4 address
     */
    interfaceIp?: pulumi.Input<string>;
    /**
     * IPv6 addressing
     */
    ipv6?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesIpv6>;
    /**
     * Multicast routing status
     */
    multicastRouting?: pulumi.Input<string>;
    /**
     * The name
     */
    name?: pulumi.Input<string>;
    /**
     * IPv4 OSPF Settings
     */
    ospfSettings?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesOspfSettings>;
    /**
     * IPv6 OSPF Settings
     */
    ospfV3?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesOspfV3>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * IPv4 subnet
     */
    subnet?: pulumi.Input<string>;
    /**
     * VLAN id
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SwitchRoutingInterfaces resource.
 */
export interface SwitchRoutingInterfacesArgs {
    /**
     * IPv4 default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * The id
     */
    interfaceId?: pulumi.Input<string>;
    /**
     * IPv4 address
     */
    interfaceIp?: pulumi.Input<string>;
    /**
     * IPv6 addressing
     */
    ipv6?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesIpv6>;
    /**
     * Multicast routing status
     */
    multicastRouting?: pulumi.Input<string>;
    /**
     * The name
     */
    name?: pulumi.Input<string>;
    /**
     * IPv4 OSPF Settings
     */
    ospfSettings?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesOspfSettings>;
    /**
     * IPv6 OSPF Settings
     */
    ospfV3?: pulumi.Input<inputs.devices.SwitchRoutingInterfacesOspfV3>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
    /**
     * IPv4 subnet
     */
    subnet?: pulumi.Input<string>;
    /**
     * VLAN id
     */
    vlanId?: pulumi.Input<number>;
}
