// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import meraki:devices/liveToolsArpTable:LiveToolsArpTable example "arp_table_id,serial"
 * ```
 */
export class LiveToolsArpTable extends pulumi.CustomResource {
    /**
     * Get an existing LiveToolsArpTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LiveToolsArpTableState, opts?: pulumi.CustomResourceOptions): LiveToolsArpTable {
        return new LiveToolsArpTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'meraki:devices/liveToolsArpTable:LiveToolsArpTable';

    /**
     * Returns true if the given object is an instance of LiveToolsArpTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LiveToolsArpTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LiveToolsArpTable.__pulumiType;
    }

    /**
     * Id of the ARP table request. Used to check the status of the request.
     */
    public readonly arpTableId!: pulumi.Output<string>;
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    public readonly callback!: pulumi.Output<outputs.devices.LiveToolsArpTableCallback>;
    /**
     * The ARP table entries
     */
    public /*out*/ readonly entries!: pulumi.Output<outputs.devices.LiveToolsArpTableEntry[]>;
    /**
     * An error message for a failed execution
     */
    public /*out*/ readonly error!: pulumi.Output<string>;
    /**
     * ARP table request parameters
     */
    public /*out*/ readonly request!: pulumi.Output<outputs.devices.LiveToolsArpTableRequest>;
    /**
     * serial path parameter.
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * Status of the ARP table request.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * GET this url to check the status of your ARP table request.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a LiveToolsArpTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LiveToolsArpTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LiveToolsArpTableArgs | LiveToolsArpTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LiveToolsArpTableState | undefined;
            resourceInputs["arpTableId"] = state ? state.arpTableId : undefined;
            resourceInputs["callback"] = state ? state.callback : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["error"] = state ? state.error : undefined;
            resourceInputs["request"] = state ? state.request : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as LiveToolsArpTableArgs | undefined;
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["arpTableId"] = args ? args.arpTableId : undefined;
            resourceInputs["callback"] = args ? args.callback : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["entries"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["request"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LiveToolsArpTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LiveToolsArpTable resources.
 */
export interface LiveToolsArpTableState {
    /**
     * Id of the ARP table request. Used to check the status of the request.
     */
    arpTableId?: pulumi.Input<string>;
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    callback?: pulumi.Input<inputs.devices.LiveToolsArpTableCallback>;
    /**
     * The ARP table entries
     */
    entries?: pulumi.Input<pulumi.Input<inputs.devices.LiveToolsArpTableEntry>[]>;
    /**
     * An error message for a failed execution
     */
    error?: pulumi.Input<string>;
    /**
     * ARP table request parameters
     */
    request?: pulumi.Input<inputs.devices.LiveToolsArpTableRequest>;
    /**
     * serial path parameter.
     */
    serial?: pulumi.Input<string>;
    /**
     * Status of the ARP table request.
     */
    status?: pulumi.Input<string>;
    /**
     * GET this url to check the status of your ARP table request.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LiveToolsArpTable resource.
 */
export interface LiveToolsArpTableArgs {
    /**
     * Id of the ARP table request. Used to check the status of the request.
     */
    arpTableId?: pulumi.Input<string>;
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     */
    callback?: pulumi.Input<inputs.devices.LiveToolsArpTableCallback>;
    /**
     * serial path parameter.
     */
    serial: pulumi.Input<string>;
}
