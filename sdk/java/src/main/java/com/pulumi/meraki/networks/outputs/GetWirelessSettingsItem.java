// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessSettingsItemNamedVlans;
import com.pulumi.meraki.networks.outputs.GetWirelessSettingsItemRegulatoryDomain;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWirelessSettingsItem {
    /**
     * @return Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     * 
     */
    private Boolean ipv6BridgeEnabled;
    /**
     * @return Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     * 
     */
    private Boolean ledLightsOn;
    /**
     * @return Toggle for enabling or disabling location analytics for your network
     * 
     */
    private Boolean locationAnalyticsEnabled;
    /**
     * @return Toggle for enabling or disabling meshing in a network
     * 
     */
    private Boolean meshingEnabled;
    /**
     * @return Named VLAN settings for wireless networks.
     * 
     */
    private GetWirelessSettingsItemNamedVlans namedVlans;
    /**
     * @return Regulatory domain information for this network.
     * 
     */
    private GetWirelessSettingsItemRegulatoryDomain regulatoryDomain;
    /**
     * @return The upgrade strategy to apply to the network. Must be one of &#39;minimizeUpgradeTime&#39; or &#39;minimizeClientDowntime&#39;. Requires firmware version MR 26.8 or higher&#39;
     * 
     */
    private String upgradestrategy;

    private GetWirelessSettingsItem() {}
    /**
     * @return Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
     * 
     */
    public Boolean ipv6BridgeEnabled() {
        return this.ipv6BridgeEnabled;
    }
    /**
     * @return Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
     * 
     */
    public Boolean ledLightsOn() {
        return this.ledLightsOn;
    }
    /**
     * @return Toggle for enabling or disabling location analytics for your network
     * 
     */
    public Boolean locationAnalyticsEnabled() {
        return this.locationAnalyticsEnabled;
    }
    /**
     * @return Toggle for enabling or disabling meshing in a network
     * 
     */
    public Boolean meshingEnabled() {
        return this.meshingEnabled;
    }
    /**
     * @return Named VLAN settings for wireless networks.
     * 
     */
    public GetWirelessSettingsItemNamedVlans namedVlans() {
        return this.namedVlans;
    }
    /**
     * @return Regulatory domain information for this network.
     * 
     */
    public GetWirelessSettingsItemRegulatoryDomain regulatoryDomain() {
        return this.regulatoryDomain;
    }
    /**
     * @return The upgrade strategy to apply to the network. Must be one of &#39;minimizeUpgradeTime&#39; or &#39;minimizeClientDowntime&#39;. Requires firmware version MR 26.8 or higher&#39;
     * 
     */
    public String upgradestrategy() {
        return this.upgradestrategy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSettingsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean ipv6BridgeEnabled;
        private Boolean ledLightsOn;
        private Boolean locationAnalyticsEnabled;
        private Boolean meshingEnabled;
        private GetWirelessSettingsItemNamedVlans namedVlans;
        private GetWirelessSettingsItemRegulatoryDomain regulatoryDomain;
        private String upgradestrategy;
        public Builder() {}
        public Builder(GetWirelessSettingsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipv6BridgeEnabled = defaults.ipv6BridgeEnabled;
    	      this.ledLightsOn = defaults.ledLightsOn;
    	      this.locationAnalyticsEnabled = defaults.locationAnalyticsEnabled;
    	      this.meshingEnabled = defaults.meshingEnabled;
    	      this.namedVlans = defaults.namedVlans;
    	      this.regulatoryDomain = defaults.regulatoryDomain;
    	      this.upgradestrategy = defaults.upgradestrategy;
        }

        @CustomType.Setter
        public Builder ipv6BridgeEnabled(Boolean ipv6BridgeEnabled) {
            if (ipv6BridgeEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "ipv6BridgeEnabled");
            }
            this.ipv6BridgeEnabled = ipv6BridgeEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ledLightsOn(Boolean ledLightsOn) {
            if (ledLightsOn == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "ledLightsOn");
            }
            this.ledLightsOn = ledLightsOn;
            return this;
        }
        @CustomType.Setter
        public Builder locationAnalyticsEnabled(Boolean locationAnalyticsEnabled) {
            if (locationAnalyticsEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "locationAnalyticsEnabled");
            }
            this.locationAnalyticsEnabled = locationAnalyticsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder meshingEnabled(Boolean meshingEnabled) {
            if (meshingEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "meshingEnabled");
            }
            this.meshingEnabled = meshingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder namedVlans(GetWirelessSettingsItemNamedVlans namedVlans) {
            if (namedVlans == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "namedVlans");
            }
            this.namedVlans = namedVlans;
            return this;
        }
        @CustomType.Setter
        public Builder regulatoryDomain(GetWirelessSettingsItemRegulatoryDomain regulatoryDomain) {
            if (regulatoryDomain == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "regulatoryDomain");
            }
            this.regulatoryDomain = regulatoryDomain;
            return this;
        }
        @CustomType.Setter
        public Builder upgradestrategy(String upgradestrategy) {
            if (upgradestrategy == null) {
              throw new MissingRequiredPropertyException("GetWirelessSettingsItem", "upgradestrategy");
            }
            this.upgradestrategy = upgradestrategy;
            return this;
        }
        public GetWirelessSettingsItem build() {
            final var _resultValue = new GetWirelessSettingsItem();
            _resultValue.ipv6BridgeEnabled = ipv6BridgeEnabled;
            _resultValue.ledLightsOn = ledLightsOn;
            _resultValue.locationAnalyticsEnabled = locationAnalyticsEnabled;
            _resultValue.meshingEnabled = meshingEnabled;
            _resultValue.namedVlans = namedVlans;
            _resultValue.regulatoryDomain = regulatoryDomain;
            _resultValue.upgradestrategy = upgradestrategy;
            return _resultValue;
        }
    }
}
