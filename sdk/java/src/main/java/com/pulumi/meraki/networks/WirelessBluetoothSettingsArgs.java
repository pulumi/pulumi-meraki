// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessBluetoothSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessBluetoothSettingsArgs Empty = new WirelessBluetoothSettingsArgs();

    /**
     * Whether APs will advertise beacons.
     * 
     */
    @Import(name="advertisingEnabled")
    private @Nullable Output<Boolean> advertisingEnabled;

    /**
     * @return Whether APs will advertise beacons.
     * 
     */
    public Optional<Output<Boolean>> advertisingEnabled() {
        return Optional.ofNullable(this.advertisingEnabled);
    }

    /**
     * The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
     * 
     */
    @Import(name="major")
    private @Nullable Output<Integer> major;

    /**
     * @return The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
     * 
     */
    public Optional<Output<Integer>> major() {
        return Optional.ofNullable(this.major);
    }

    /**
     * The way major and minor number should be assigned to nodes in the network. (&#39;Unique&#39;, &#39;Non-unique&#39;)
     * 
     */
    @Import(name="majorMinorAssignmentMode")
    private @Nullable Output<String> majorMinorAssignmentMode;

    /**
     * @return The way major and minor number should be assigned to nodes in the network. (&#39;Unique&#39;, &#39;Non-unique&#39;)
     * 
     */
    public Optional<Output<String>> majorMinorAssignmentMode() {
        return Optional.ofNullable(this.majorMinorAssignmentMode);
    }

    /**
     * The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
     * 
     */
    @Import(name="minor")
    private @Nullable Output<Integer> minor;

    /**
     * @return The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
     * 
     */
    public Optional<Output<Integer>> minor() {
        return Optional.ofNullable(this.minor);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Whether APs will scan for Bluetooth enabled clients.
     * 
     */
    @Import(name="scanningEnabled")
    private @Nullable Output<Boolean> scanningEnabled;

    /**
     * @return Whether APs will scan for Bluetooth enabled clients.
     * 
     */
    public Optional<Output<Boolean>> scanningEnabled() {
        return Optional.ofNullable(this.scanningEnabled);
    }

    /**
     * The UUID to be used in the beacon identifier.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID to be used in the beacon identifier.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private WirelessBluetoothSettingsArgs() {}

    private WirelessBluetoothSettingsArgs(WirelessBluetoothSettingsArgs $) {
        this.advertisingEnabled = $.advertisingEnabled;
        this.major = $.major;
        this.majorMinorAssignmentMode = $.majorMinorAssignmentMode;
        this.minor = $.minor;
        this.networkId = $.networkId;
        this.scanningEnabled = $.scanningEnabled;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessBluetoothSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessBluetoothSettingsArgs $;

        public Builder() {
            $ = new WirelessBluetoothSettingsArgs();
        }

        public Builder(WirelessBluetoothSettingsArgs defaults) {
            $ = new WirelessBluetoothSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advertisingEnabled Whether APs will advertise beacons.
         * 
         * @return builder
         * 
         */
        public Builder advertisingEnabled(@Nullable Output<Boolean> advertisingEnabled) {
            $.advertisingEnabled = advertisingEnabled;
            return this;
        }

        /**
         * @param advertisingEnabled Whether APs will advertise beacons.
         * 
         * @return builder
         * 
         */
        public Builder advertisingEnabled(Boolean advertisingEnabled) {
            return advertisingEnabled(Output.of(advertisingEnabled));
        }

        /**
         * @param major The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
         * 
         * @return builder
         * 
         */
        public Builder major(@Nullable Output<Integer> major) {
            $.major = major;
            return this;
        }

        /**
         * @param major The major number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
         * 
         * @return builder
         * 
         */
        public Builder major(Integer major) {
            return major(Output.of(major));
        }

        /**
         * @param majorMinorAssignmentMode The way major and minor number should be assigned to nodes in the network. (&#39;Unique&#39;, &#39;Non-unique&#39;)
         * 
         * @return builder
         * 
         */
        public Builder majorMinorAssignmentMode(@Nullable Output<String> majorMinorAssignmentMode) {
            $.majorMinorAssignmentMode = majorMinorAssignmentMode;
            return this;
        }

        /**
         * @param majorMinorAssignmentMode The way major and minor number should be assigned to nodes in the network. (&#39;Unique&#39;, &#39;Non-unique&#39;)
         * 
         * @return builder
         * 
         */
        public Builder majorMinorAssignmentMode(String majorMinorAssignmentMode) {
            return majorMinorAssignmentMode(Output.of(majorMinorAssignmentMode));
        }

        /**
         * @param minor The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
         * 
         * @return builder
         * 
         */
        public Builder minor(@Nullable Output<Integer> minor) {
            $.minor = minor;
            return this;
        }

        /**
         * @param minor The minor number to be used in the beacon identifier. Only valid in &#39;Non-unique&#39; mode.
         * 
         * @return builder
         * 
         */
        public Builder minor(Integer minor) {
            return minor(Output.of(minor));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param scanningEnabled Whether APs will scan for Bluetooth enabled clients.
         * 
         * @return builder
         * 
         */
        public Builder scanningEnabled(@Nullable Output<Boolean> scanningEnabled) {
            $.scanningEnabled = scanningEnabled;
            return this;
        }

        /**
         * @param scanningEnabled Whether APs will scan for Bluetooth enabled clients.
         * 
         * @return builder
         * 
         */
        public Builder scanningEnabled(Boolean scanningEnabled) {
            return scanningEnabled(Output.of(scanningEnabled));
        }

        /**
         * @param uuid The UUID to be used in the beacon identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID to be used in the beacon identifier.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public WirelessBluetoothSettingsArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("WirelessBluetoothSettingsArgs", "networkId");
            }
            return $;
        }
    }

}
