// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetManagementInterfaceItemDdnsHostnames {
    /**
     * @return Active dynamic DNS hostname.
     * 
     */
    private String activeDdnsHostname;
    /**
     * @return WAN 1 dynamic DNS hostname.
     * 
     */
    private String ddnsHostnameWan1;
    /**
     * @return WAN 2 dynamic DNS hostname.
     * 
     */
    private String ddnsHostnameWan2;

    private GetManagementInterfaceItemDdnsHostnames() {}
    /**
     * @return Active dynamic DNS hostname.
     * 
     */
    public String activeDdnsHostname() {
        return this.activeDdnsHostname;
    }
    /**
     * @return WAN 1 dynamic DNS hostname.
     * 
     */
    public String ddnsHostnameWan1() {
        return this.ddnsHostnameWan1;
    }
    /**
     * @return WAN 2 dynamic DNS hostname.
     * 
     */
    public String ddnsHostnameWan2() {
        return this.ddnsHostnameWan2;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetManagementInterfaceItemDdnsHostnames defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activeDdnsHostname;
        private String ddnsHostnameWan1;
        private String ddnsHostnameWan2;
        public Builder() {}
        public Builder(GetManagementInterfaceItemDdnsHostnames defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDdnsHostname = defaults.activeDdnsHostname;
    	      this.ddnsHostnameWan1 = defaults.ddnsHostnameWan1;
    	      this.ddnsHostnameWan2 = defaults.ddnsHostnameWan2;
        }

        @CustomType.Setter
        public Builder activeDdnsHostname(String activeDdnsHostname) {
            if (activeDdnsHostname == null) {
              throw new MissingRequiredPropertyException("GetManagementInterfaceItemDdnsHostnames", "activeDdnsHostname");
            }
            this.activeDdnsHostname = activeDdnsHostname;
            return this;
        }
        @CustomType.Setter
        public Builder ddnsHostnameWan1(String ddnsHostnameWan1) {
            if (ddnsHostnameWan1 == null) {
              throw new MissingRequiredPropertyException("GetManagementInterfaceItemDdnsHostnames", "ddnsHostnameWan1");
            }
            this.ddnsHostnameWan1 = ddnsHostnameWan1;
            return this;
        }
        @CustomType.Setter
        public Builder ddnsHostnameWan2(String ddnsHostnameWan2) {
            if (ddnsHostnameWan2 == null) {
              throw new MissingRequiredPropertyException("GetManagementInterfaceItemDdnsHostnames", "ddnsHostnameWan2");
            }
            this.ddnsHostnameWan2 = ddnsHostnameWan2;
            return this;
        }
        public GetManagementInterfaceItemDdnsHostnames build() {
            final var _resultValue = new GetManagementInterfaceItemDdnsHostnames();
            _resultValue.activeDdnsHostname = activeDdnsHostname;
            _resultValue.ddnsHostnameWan1 = ddnsHostnameWan1;
            _resultValue.ddnsHostnameWan2 = ddnsHostnameWan2;
            return _resultValue;
        }
    }
}
