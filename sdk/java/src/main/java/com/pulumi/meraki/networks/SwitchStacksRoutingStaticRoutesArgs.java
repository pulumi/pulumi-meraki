// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchStacksRoutingStaticRoutesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchStacksRoutingStaticRoutesArgs Empty = new SwitchStacksRoutingStaticRoutesArgs();

    /**
     * Option to advertise static routes via OSPF
     * 
     */
    @Import(name="advertiseViaOspfEnabled")
    private @Nullable Output<Boolean> advertiseViaOspfEnabled;

    /**
     * @return Option to advertise static routes via OSPF
     * 
     */
    public Optional<Output<Boolean>> advertiseViaOspfEnabled() {
        return Optional.ofNullable(this.advertiseViaOspfEnabled);
    }

    /**
     * The name or description of the layer 3 static route
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name or description of the layer 3 static route
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The IP address of the router to which traffic for this destination network should be sent
     * 
     */
    @Import(name="nextHopIp")
    private @Nullable Output<String> nextHopIp;

    /**
     * @return The IP address of the router to which traffic for this destination network should be sent
     * 
     */
    public Optional<Output<String>> nextHopIp() {
        return Optional.ofNullable(this.nextHopIp);
    }

    /**
     * Option to prefer static routes over OSPF routes
     * 
     */
    @Import(name="preferOverOspfRoutesEnabled")
    private @Nullable Output<Boolean> preferOverOspfRoutesEnabled;

    /**
     * @return Option to prefer static routes over OSPF routes
     * 
     */
    public Optional<Output<Boolean>> preferOverOspfRoutesEnabled() {
        return Optional.ofNullable(this.preferOverOspfRoutesEnabled);
    }

    /**
     * The identifier of a layer 3 static route
     * 
     */
    @Import(name="staticRouteId")
    private @Nullable Output<String> staticRouteId;

    /**
     * @return The identifier of a layer 3 static route
     * 
     */
    public Optional<Output<String>> staticRouteId() {
        return Optional.ofNullable(this.staticRouteId);
    }

    /**
     * The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * switchStackId path parameter. Switch stack ID
     * 
     */
    @Import(name="switchStackId", required=true)
    private Output<String> switchStackId;

    /**
     * @return switchStackId path parameter. Switch stack ID
     * 
     */
    public Output<String> switchStackId() {
        return this.switchStackId;
    }

    private SwitchStacksRoutingStaticRoutesArgs() {}

    private SwitchStacksRoutingStaticRoutesArgs(SwitchStacksRoutingStaticRoutesArgs $) {
        this.advertiseViaOspfEnabled = $.advertiseViaOspfEnabled;
        this.name = $.name;
        this.networkId = $.networkId;
        this.nextHopIp = $.nextHopIp;
        this.preferOverOspfRoutesEnabled = $.preferOverOspfRoutesEnabled;
        this.staticRouteId = $.staticRouteId;
        this.subnet = $.subnet;
        this.switchStackId = $.switchStackId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchStacksRoutingStaticRoutesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchStacksRoutingStaticRoutesArgs $;

        public Builder() {
            $ = new SwitchStacksRoutingStaticRoutesArgs();
        }

        public Builder(SwitchStacksRoutingStaticRoutesArgs defaults) {
            $ = new SwitchStacksRoutingStaticRoutesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advertiseViaOspfEnabled Option to advertise static routes via OSPF
         * 
         * @return builder
         * 
         */
        public Builder advertiseViaOspfEnabled(@Nullable Output<Boolean> advertiseViaOspfEnabled) {
            $.advertiseViaOspfEnabled = advertiseViaOspfEnabled;
            return this;
        }

        /**
         * @param advertiseViaOspfEnabled Option to advertise static routes via OSPF
         * 
         * @return builder
         * 
         */
        public Builder advertiseViaOspfEnabled(Boolean advertiseViaOspfEnabled) {
            return advertiseViaOspfEnabled(Output.of(advertiseViaOspfEnabled));
        }

        /**
         * @param name The name or description of the layer 3 static route
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name or description of the layer 3 static route
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param nextHopIp The IP address of the router to which traffic for this destination network should be sent
         * 
         * @return builder
         * 
         */
        public Builder nextHopIp(@Nullable Output<String> nextHopIp) {
            $.nextHopIp = nextHopIp;
            return this;
        }

        /**
         * @param nextHopIp The IP address of the router to which traffic for this destination network should be sent
         * 
         * @return builder
         * 
         */
        public Builder nextHopIp(String nextHopIp) {
            return nextHopIp(Output.of(nextHopIp));
        }

        /**
         * @param preferOverOspfRoutesEnabled Option to prefer static routes over OSPF routes
         * 
         * @return builder
         * 
         */
        public Builder preferOverOspfRoutesEnabled(@Nullable Output<Boolean> preferOverOspfRoutesEnabled) {
            $.preferOverOspfRoutesEnabled = preferOverOspfRoutesEnabled;
            return this;
        }

        /**
         * @param preferOverOspfRoutesEnabled Option to prefer static routes over OSPF routes
         * 
         * @return builder
         * 
         */
        public Builder preferOverOspfRoutesEnabled(Boolean preferOverOspfRoutesEnabled) {
            return preferOverOspfRoutesEnabled(Output.of(preferOverOspfRoutesEnabled));
        }

        /**
         * @param staticRouteId The identifier of a layer 3 static route
         * 
         * @return builder
         * 
         */
        public Builder staticRouteId(@Nullable Output<String> staticRouteId) {
            $.staticRouteId = staticRouteId;
            return this;
        }

        /**
         * @param staticRouteId The identifier of a layer 3 static route
         * 
         * @return builder
         * 
         */
        public Builder staticRouteId(String staticRouteId) {
            return staticRouteId(Output.of(staticRouteId));
        }

        /**
         * @param subnet The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param switchStackId switchStackId path parameter. Switch stack ID
         * 
         * @return builder
         * 
         */
        public Builder switchStackId(Output<String> switchStackId) {
            $.switchStackId = switchStackId;
            return this;
        }

        /**
         * @param switchStackId switchStackId path parameter. Switch stack ID
         * 
         * @return builder
         * 
         */
        public Builder switchStackId(String switchStackId) {
            return switchStackId(Output.of(switchStackId));
        }

        public SwitchStacksRoutingStaticRoutesArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("SwitchStacksRoutingStaticRoutesArgs", "networkId");
            }
            if ($.switchStackId == null) {
                throw new MissingRequiredPropertyException("SwitchStacksRoutingStaticRoutesArgs", "switchStackId");
            }
            return $;
        }
    }

}
