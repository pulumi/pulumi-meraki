// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBluetoothClientsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBluetoothClientsArgs Empty = new GetBluetoothClientsArgs();

    /**
     * bluetoothClientId path parameter. Bluetooth client ID
     * 
     */
    @Import(name="bluetoothClientId", required=true)
    private Output<String> bluetoothClientId;

    /**
     * @return bluetoothClientId path parameter. Bluetooth client ID
     * 
     */
    public Output<String> bluetoothClientId() {
        return this.bluetoothClientId;
    }

    /**
     * connectivityHistoryTimespan query parameter. The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
     * 
     */
    @Import(name="connectivityHistoryTimespan")
    private @Nullable Output<Integer> connectivityHistoryTimespan;

    /**
     * @return connectivityHistoryTimespan query parameter. The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
     * 
     */
    public Optional<Output<Integer>> connectivityHistoryTimespan() {
        return Optional.ofNullable(this.connectivityHistoryTimespan);
    }

    /**
     * includeConnectivityHistory query parameter. Include the connectivity history for this client
     * 
     */
    @Import(name="includeConnectivityHistory")
    private @Nullable Output<Boolean> includeConnectivityHistory;

    /**
     * @return includeConnectivityHistory query parameter. Include the connectivity history for this client
     * 
     */
    public Optional<Output<Boolean>> includeConnectivityHistory() {
        return Optional.ofNullable(this.includeConnectivityHistory);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    private GetBluetoothClientsArgs() {}

    private GetBluetoothClientsArgs(GetBluetoothClientsArgs $) {
        this.bluetoothClientId = $.bluetoothClientId;
        this.connectivityHistoryTimespan = $.connectivityHistoryTimespan;
        this.includeConnectivityHistory = $.includeConnectivityHistory;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBluetoothClientsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBluetoothClientsArgs $;

        public Builder() {
            $ = new GetBluetoothClientsArgs();
        }

        public Builder(GetBluetoothClientsArgs defaults) {
            $ = new GetBluetoothClientsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bluetoothClientId bluetoothClientId path parameter. Bluetooth client ID
         * 
         * @return builder
         * 
         */
        public Builder bluetoothClientId(Output<String> bluetoothClientId) {
            $.bluetoothClientId = bluetoothClientId;
            return this;
        }

        /**
         * @param bluetoothClientId bluetoothClientId path parameter. Bluetooth client ID
         * 
         * @return builder
         * 
         */
        public Builder bluetoothClientId(String bluetoothClientId) {
            return bluetoothClientId(Output.of(bluetoothClientId));
        }

        /**
         * @param connectivityHistoryTimespan connectivityHistoryTimespan query parameter. The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
         * 
         * @return builder
         * 
         */
        public Builder connectivityHistoryTimespan(@Nullable Output<Integer> connectivityHistoryTimespan) {
            $.connectivityHistoryTimespan = connectivityHistoryTimespan;
            return this;
        }

        /**
         * @param connectivityHistoryTimespan connectivityHistoryTimespan query parameter. The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
         * 
         * @return builder
         * 
         */
        public Builder connectivityHistoryTimespan(Integer connectivityHistoryTimespan) {
            return connectivityHistoryTimespan(Output.of(connectivityHistoryTimespan));
        }

        /**
         * @param includeConnectivityHistory includeConnectivityHistory query parameter. Include the connectivity history for this client
         * 
         * @return builder
         * 
         */
        public Builder includeConnectivityHistory(@Nullable Output<Boolean> includeConnectivityHistory) {
            $.includeConnectivityHistory = includeConnectivityHistory;
            return this;
        }

        /**
         * @param includeConnectivityHistory includeConnectivityHistory query parameter. Include the connectivity history for this client
         * 
         * @return builder
         * 
         */
        public Builder includeConnectivityHistory(Boolean includeConnectivityHistory) {
            return includeConnectivityHistory(Output.of(includeConnectivityHistory));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public GetBluetoothClientsArgs build() {
            if ($.bluetoothClientId == null) {
                throw new MissingRequiredPropertyException("GetBluetoothClientsArgs", "bluetoothClientId");
            }
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetBluetoothClientsArgs", "networkId");
            }
            return $;
        }
    }

}
