// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorAlertsProfilesConditionThresholdHumidityArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorAlertsProfilesConditionThresholdHumidityArgs Empty = new SensorAlertsProfilesConditionThresholdHumidityArgs();

    /**
     * Alerting threshold as a qualitative humidity level.
     * 
     */
    @Import(name="quality")
    private @Nullable Output<String> quality;

    /**
     * @return Alerting threshold as a qualitative humidity level.
     * 
     */
    public Optional<Output<String>> quality() {
        return Optional.ofNullable(this.quality);
    }

    /**
     * Alerting threshold in %RH.
     * 
     */
    @Import(name="relativePercentage")
    private @Nullable Output<Integer> relativePercentage;

    /**
     * @return Alerting threshold in %RH.
     * 
     */
    public Optional<Output<Integer>> relativePercentage() {
        return Optional.ofNullable(this.relativePercentage);
    }

    private SensorAlertsProfilesConditionThresholdHumidityArgs() {}

    private SensorAlertsProfilesConditionThresholdHumidityArgs(SensorAlertsProfilesConditionThresholdHumidityArgs $) {
        this.quality = $.quality;
        this.relativePercentage = $.relativePercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorAlertsProfilesConditionThresholdHumidityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorAlertsProfilesConditionThresholdHumidityArgs $;

        public Builder() {
            $ = new SensorAlertsProfilesConditionThresholdHumidityArgs();
        }

        public Builder(SensorAlertsProfilesConditionThresholdHumidityArgs defaults) {
            $ = new SensorAlertsProfilesConditionThresholdHumidityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param quality Alerting threshold as a qualitative humidity level.
         * 
         * @return builder
         * 
         */
        public Builder quality(@Nullable Output<String> quality) {
            $.quality = quality;
            return this;
        }

        /**
         * @param quality Alerting threshold as a qualitative humidity level.
         * 
         * @return builder
         * 
         */
        public Builder quality(String quality) {
            return quality(Output.of(quality));
        }

        /**
         * @param relativePercentage Alerting threshold in %RH.
         * 
         * @return builder
         * 
         */
        public Builder relativePercentage(@Nullable Output<Integer> relativePercentage) {
            $.relativePercentage = relativePercentage;
            return this;
        }

        /**
         * @param relativePercentage Alerting threshold in %RH.
         * 
         * @return builder
         * 
         */
        public Builder relativePercentage(Integer relativePercentage) {
            return relativePercentage(Output.of(relativePercentage));
        }

        public SensorAlertsProfilesConditionThresholdHumidityArgs build() {
            return $;
        }
    }

}
