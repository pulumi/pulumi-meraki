// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSchedulesRangeArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSchedulesRangesInSecondArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsSchedulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsSchedulesArgs Empty = new WirelessSsidsSchedulesArgs();

    /**
     * If true, the SSID outage schedule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If true, the SSID outage schedule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * number path parameter.
     * 
     */
    @Import(name="number", required=true)
    private Output<String> number;

    /**
     * @return number path parameter.
     * 
     */
    public Output<String> number() {
        return this.number;
    }

    /**
     * List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
     * 
     */
    @Import(name="ranges")
    private @Nullable Output<List<WirelessSsidsSchedulesRangeArgs>> ranges;

    /**
     * @return List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
     * 
     */
    public Optional<Output<List<WirelessSsidsSchedulesRangeArgs>>> ranges() {
        return Optional.ofNullable(this.ranges);
    }

    /**
     * List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
     * 
     */
    @Import(name="rangesInSeconds")
    private @Nullable Output<List<WirelessSsidsSchedulesRangesInSecondArgs>> rangesInSeconds;

    /**
     * @return List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
     * 
     */
    public Optional<Output<List<WirelessSsidsSchedulesRangesInSecondArgs>>> rangesInSeconds() {
        return Optional.ofNullable(this.rangesInSeconds);
    }

    private WirelessSsidsSchedulesArgs() {}

    private WirelessSsidsSchedulesArgs(WirelessSsidsSchedulesArgs $) {
        this.enabled = $.enabled;
        this.networkId = $.networkId;
        this.number = $.number;
        this.ranges = $.ranges;
        this.rangesInSeconds = $.rangesInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsSchedulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsSchedulesArgs $;

        public Builder() {
            $ = new WirelessSsidsSchedulesArgs();
        }

        public Builder(WirelessSsidsSchedulesArgs defaults) {
            $ = new WirelessSsidsSchedulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled If true, the SSID outage schedule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If true, the SSID outage schedule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param ranges List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder ranges(@Nullable Output<List<WirelessSsidsSchedulesRangeArgs>> ranges) {
            $.ranges = ranges;
            return this;
        }

        /**
         * @param ranges List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder ranges(List<WirelessSsidsSchedulesRangeArgs> ranges) {
            return ranges(Output.of(ranges));
        }

        /**
         * @param ranges List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder ranges(WirelessSsidsSchedulesRangeArgs... ranges) {
            return ranges(List.of(ranges));
        }

        /**
         * @param rangesInSeconds List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder rangesInSeconds(@Nullable Output<List<WirelessSsidsSchedulesRangesInSecondArgs>> rangesInSeconds) {
            $.rangesInSeconds = rangesInSeconds;
            return this;
        }

        /**
         * @param rangesInSeconds List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder rangesInSeconds(List<WirelessSsidsSchedulesRangesInSecondArgs> rangesInSeconds) {
            return rangesInSeconds(Output.of(rangesInSeconds));
        }

        /**
         * @param rangesInSeconds List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
         * 
         * @return builder
         * 
         */
        public Builder rangesInSeconds(WirelessSsidsSchedulesRangesInSecondArgs... rangesInSeconds) {
            return rangesInSeconds(List.of(rangesInSeconds));
        }

        public WirelessSsidsSchedulesArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("WirelessSsidsSchedulesArgs", "networkId");
            }
            if ($.number == null) {
                throw new MissingRequiredPropertyException("WirelessSsidsSchedulesArgs", "number");
            }
            return $;
        }
    }

}
