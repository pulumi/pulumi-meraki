// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWirelessAlternateManagementInterfaceItemAccessPoint {
    private String alternateManagementIp;
    private String dns1;
    private String dns2;
    private String gateway;
    private String serial;
    private String subnetMask;

    private GetWirelessAlternateManagementInterfaceItemAccessPoint() {}
    public String alternateManagementIp() {
        return this.alternateManagementIp;
    }
    public String dns1() {
        return this.dns1;
    }
    public String dns2() {
        return this.dns2;
    }
    public String gateway() {
        return this.gateway;
    }
    public String serial() {
        return this.serial;
    }
    public String subnetMask() {
        return this.subnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessAlternateManagementInterfaceItemAccessPoint defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alternateManagementIp;
        private String dns1;
        private String dns2;
        private String gateway;
        private String serial;
        private String subnetMask;
        public Builder() {}
        public Builder(GetWirelessAlternateManagementInterfaceItemAccessPoint defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateManagementIp = defaults.alternateManagementIp;
    	      this.dns1 = defaults.dns1;
    	      this.dns2 = defaults.dns2;
    	      this.gateway = defaults.gateway;
    	      this.serial = defaults.serial;
    	      this.subnetMask = defaults.subnetMask;
        }

        @CustomType.Setter
        public Builder alternateManagementIp(String alternateManagementIp) {
            if (alternateManagementIp == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "alternateManagementIp");
            }
            this.alternateManagementIp = alternateManagementIp;
            return this;
        }
        @CustomType.Setter
        public Builder dns1(String dns1) {
            if (dns1 == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "dns1");
            }
            this.dns1 = dns1;
            return this;
        }
        @CustomType.Setter
        public Builder dns2(String dns2) {
            if (dns2 == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "dns2");
            }
            this.dns2 = dns2;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMask(String subnetMask) {
            if (subnetMask == null) {
              throw new MissingRequiredPropertyException("GetWirelessAlternateManagementInterfaceItemAccessPoint", "subnetMask");
            }
            this.subnetMask = subnetMask;
            return this;
        }
        public GetWirelessAlternateManagementInterfaceItemAccessPoint build() {
            final var _resultValue = new GetWirelessAlternateManagementInterfaceItemAccessPoint();
            _resultValue.alternateManagementIp = alternateManagementIp;
            _resultValue.dns1 = dns1;
            _resultValue.dns2 = dns2;
            _resultValue.gateway = gateway;
            _resultValue.serial = serial;
            _resultValue.subnetMask = subnetMask;
            return _resultValue;
        }
    }
}
