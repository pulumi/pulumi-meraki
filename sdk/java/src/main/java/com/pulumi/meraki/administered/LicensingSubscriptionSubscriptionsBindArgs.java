// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.administered;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.administered.inputs.LicensingSubscriptionSubscriptionsBindParametersArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensingSubscriptionSubscriptionsBindArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensingSubscriptionSubscriptionsBindArgs Empty = new LicensingSubscriptionSubscriptionsBindArgs();

    @Import(name="parameters", required=true)
    private Output<LicensingSubscriptionSubscriptionsBindParametersArgs> parameters;

    public Output<LicensingSubscriptionSubscriptionsBindParametersArgs> parameters() {
        return this.parameters;
    }

    /**
     * subscriptionId path parameter. Subscription ID
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return subscriptionId path parameter. Subscription ID
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
     * 
     */
    @Import(name="validate")
    private @Nullable Output<Boolean> validate;

    /**
     * @return validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    private LicensingSubscriptionSubscriptionsBindArgs() {}

    private LicensingSubscriptionSubscriptionsBindArgs(LicensingSubscriptionSubscriptionsBindArgs $) {
        this.parameters = $.parameters;
        this.subscriptionId = $.subscriptionId;
        this.validate = $.validate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensingSubscriptionSubscriptionsBindArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensingSubscriptionSubscriptionsBindArgs $;

        public Builder() {
            $ = new LicensingSubscriptionSubscriptionsBindArgs();
        }

        public Builder(LicensingSubscriptionSubscriptionsBindArgs defaults) {
            $ = new LicensingSubscriptionSubscriptionsBindArgs(Objects.requireNonNull(defaults));
        }

        public Builder parameters(Output<LicensingSubscriptionSubscriptionsBindParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(LicensingSubscriptionSubscriptionsBindParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param subscriptionId subscriptionId path parameter. Subscription ID
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId subscriptionId path parameter. Subscription ID
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param validate validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public LicensingSubscriptionSubscriptionsBindArgs build() {
            if ($.parameters == null) {
                throw new MissingRequiredPropertyException("LicensingSubscriptionSubscriptionsBindArgs", "parameters");
            }
            if ($.subscriptionId == null) {
                throw new MissingRequiredPropertyException("LicensingSubscriptionSubscriptionsBindArgs", "subscriptionId");
            }
            return $;
        }
    }

}
