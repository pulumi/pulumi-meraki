// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CameraVideoSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final CameraVideoSettingsState Empty = new CameraVideoSettingsState();

    /**
     * Boolean indicating if external rtsp stream is exposed
     * 
     */
    @Import(name="externalRtspEnabled")
    private @Nullable Output<Boolean> externalRtspEnabled;

    /**
     * @return Boolean indicating if external rtsp stream is exposed
     * 
     */
    public Optional<Output<Boolean>> externalRtspEnabled() {
        return Optional.ofNullable(this.externalRtspEnabled);
    }

    /**
     * External rstp url. Will only be returned if external rtsp stream is exposed
     * 
     */
    @Import(name="rtspUrl")
    private @Nullable Output<String> rtspUrl;

    /**
     * @return External rstp url. Will only be returned if external rtsp stream is exposed
     * 
     */
    public Optional<Output<String>> rtspUrl() {
        return Optional.ofNullable(this.rtspUrl);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    private CameraVideoSettingsState() {}

    private CameraVideoSettingsState(CameraVideoSettingsState $) {
        this.externalRtspEnabled = $.externalRtspEnabled;
        this.rtspUrl = $.rtspUrl;
        this.serial = $.serial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CameraVideoSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CameraVideoSettingsState $;

        public Builder() {
            $ = new CameraVideoSettingsState();
        }

        public Builder(CameraVideoSettingsState defaults) {
            $ = new CameraVideoSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalRtspEnabled Boolean indicating if external rtsp stream is exposed
         * 
         * @return builder
         * 
         */
        public Builder externalRtspEnabled(@Nullable Output<Boolean> externalRtspEnabled) {
            $.externalRtspEnabled = externalRtspEnabled;
            return this;
        }

        /**
         * @param externalRtspEnabled Boolean indicating if external rtsp stream is exposed
         * 
         * @return builder
         * 
         */
        public Builder externalRtspEnabled(Boolean externalRtspEnabled) {
            return externalRtspEnabled(Output.of(externalRtspEnabled));
        }

        /**
         * @param rtspUrl External rstp url. Will only be returned if external rtsp stream is exposed
         * 
         * @return builder
         * 
         */
        public Builder rtspUrl(@Nullable Output<String> rtspUrl) {
            $.rtspUrl = rtspUrl;
            return this;
        }

        /**
         * @param rtspUrl External rstp url. Will only be returned if external rtsp stream is exposed
         * 
         * @return builder
         * 
         */
        public Builder rtspUrl(String rtspUrl) {
            return rtspUrl(Output.of(rtspUrl));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public CameraVideoSettingsState build() {
            return $;
        }
    }

}
