// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsVpnItemConcentrator;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsVpnItemFailover;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsVpnItemSplitTunnel;
import java.util.Objects;

@CustomType
public final class GetWirelessSsidsVpnItem {
    private GetWirelessSsidsVpnItemConcentrator concentrator;
    private GetWirelessSsidsVpnItemFailover failover;
    private GetWirelessSsidsVpnItemSplitTunnel splitTunnel;

    private GetWirelessSsidsVpnItem() {}
    public GetWirelessSsidsVpnItemConcentrator concentrator() {
        return this.concentrator;
    }
    public GetWirelessSsidsVpnItemFailover failover() {
        return this.failover;
    }
    public GetWirelessSsidsVpnItemSplitTunnel splitTunnel() {
        return this.splitTunnel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSsidsVpnItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetWirelessSsidsVpnItemConcentrator concentrator;
        private GetWirelessSsidsVpnItemFailover failover;
        private GetWirelessSsidsVpnItemSplitTunnel splitTunnel;
        public Builder() {}
        public Builder(GetWirelessSsidsVpnItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.concentrator = defaults.concentrator;
    	      this.failover = defaults.failover;
    	      this.splitTunnel = defaults.splitTunnel;
        }

        @CustomType.Setter
        public Builder concentrator(GetWirelessSsidsVpnItemConcentrator concentrator) {
            if (concentrator == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsVpnItem", "concentrator");
            }
            this.concentrator = concentrator;
            return this;
        }
        @CustomType.Setter
        public Builder failover(GetWirelessSsidsVpnItemFailover failover) {
            if (failover == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsVpnItem", "failover");
            }
            this.failover = failover;
            return this;
        }
        @CustomType.Setter
        public Builder splitTunnel(GetWirelessSsidsVpnItemSplitTunnel splitTunnel) {
            if (splitTunnel == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsVpnItem", "splitTunnel");
            }
            this.splitTunnel = splitTunnel;
            return this;
        }
        public GetWirelessSsidsVpnItem build() {
            final var _resultValue = new GetWirelessSsidsVpnItem();
            _resultValue.concentrator = concentrator;
            _resultValue.failover = failover;
            _resultValue.splitTunnel = splitTunnel;
            return _resultValue;
        }
    }
}
