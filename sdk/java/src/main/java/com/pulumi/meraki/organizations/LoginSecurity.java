// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.organizations.LoginSecurityArgs;
import com.pulumi.meraki.organizations.inputs.LoginSecurityState;
import com.pulumi.meraki.organizations.outputs.LoginSecurityApiAuthentication;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.organizations.LoginSecurity;
 * import com.pulumi.meraki.organizations.LoginSecurityArgs;
 * import com.pulumi.meraki.organizations.inputs.LoginSecurityApiAuthenticationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new LoginSecurity("example", LoginSecurityArgs.builder()
 *             .accountLockoutAttempts(3)
 *             .apiAuthentication(LoginSecurityApiAuthenticationArgs.builder()
 *                 .ip_restrictions_for_keys(Map.ofEntries(
 *                     Map.entry("enabled", true),
 *                     Map.entry("ranges", List.of(                    
 *                         "192.195.83.1",
 *                         "192.168.33.33"))
 *                 ))
 *                 .build())
 *             .enforceAccountLockout(true)
 *             .enforceDifferentPasswords(true)
 *             .enforceIdleTimeout(true)
 *             .enforceLoginIpRanges(true)
 *             .enforcePasswordExpiration(true)
 *             .enforceStrongPasswords(true)
 *             .enforceTwoFactorAuth(true)
 *             .idleTimeoutMinutes(30)
 *             .loginIpRanges(            
 *                 "192.195.83.1",
 *                 "192.195.83.255")
 *             .numDifferentPasswords(3)
 *             .organizationId("string")
 *             .passwordExpirationDays(90)
 *             .build());
 * 
 *         ctx.export("merakiOrganizationsLoginSecurityExample", example);
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:organizations/loginSecurity:LoginSecurity example &#34;organization_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:organizations/loginSecurity:LoginSecurity")
public class LoginSecurity extends com.pulumi.resources.CustomResource {
    /**
     * Number of consecutive failed login attempts after which users&#39; accounts will be locked.
     * 
     */
    @Export(name="accountLockoutAttempts", refs={Integer.class}, tree="[0]")
    private Output<Integer> accountLockoutAttempts;

    /**
     * @return Number of consecutive failed login attempts after which users&#39; accounts will be locked.
     * 
     */
    public Output<Integer> accountLockoutAttempts() {
        return this.accountLockoutAttempts;
    }
    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     * 
     */
    @Export(name="apiAuthentication", refs={LoginSecurityApiAuthentication.class}, tree="[0]")
    private Output<LoginSecurityApiAuthentication> apiAuthentication;

    /**
     * @return Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     * 
     */
    public Output<LoginSecurityApiAuthentication> apiAuthentication() {
        return this.apiAuthentication;
    }
    /**
     * Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     * 
     */
    @Export(name="enforceAccountLockout", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceAccountLockout;

    /**
     * @return Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     * 
     */
    public Output<Boolean> enforceAccountLockout() {
        return this.enforceAccountLockout;
    }
    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     * 
     */
    @Export(name="enforceDifferentPasswords", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceDifferentPasswords;

    /**
     * @return Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     * 
     */
    public Output<Boolean> enforceDifferentPasswords() {
        return this.enforceDifferentPasswords;
    }
    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     * 
     */
    @Export(name="enforceIdleTimeout", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceIdleTimeout;

    /**
     * @return Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     * 
     */
    public Output<Boolean> enforceIdleTimeout() {
        return this.enforceIdleTimeout;
    }
    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     * 
     */
    @Export(name="enforceLoginIpRanges", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceLoginIpRanges;

    /**
     * @return Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     * 
     */
    public Output<Boolean> enforceLoginIpRanges() {
        return this.enforceLoginIpRanges;
    }
    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     * 
     */
    @Export(name="enforcePasswordExpiration", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforcePasswordExpiration;

    /**
     * @return Boolean indicating whether users are forced to change their password every X number of days.
     * 
     */
    public Output<Boolean> enforcePasswordExpiration() {
        return this.enforcePasswordExpiration;
    }
    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     * 
     */
    @Export(name="enforceStrongPasswords", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceStrongPasswords;

    /**
     * @return Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     * 
     */
    public Output<Boolean> enforceStrongPasswords() {
        return this.enforceStrongPasswords;
    }
    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     * 
     */
    @Export(name="enforceTwoFactorAuth", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enforceTwoFactorAuth;

    /**
     * @return Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     * 
     */
    public Output<Boolean> enforceTwoFactorAuth() {
        return this.enforceTwoFactorAuth;
    }
    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     * 
     */
    @Export(name="idleTimeoutMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> idleTimeoutMinutes;

    /**
     * @return Number of minutes users can remain idle before being logged out of their accounts.
     * 
     */
    public Output<Integer> idleTimeoutMinutes() {
        return this.idleTimeoutMinutes;
    }
    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     * 
     */
    @Export(name="loginIpRanges", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> loginIpRanges;

    /**
     * @return List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     * 
     */
    public Output<List<String>> loginIpRanges() {
        return this.loginIpRanges;
    }
    /**
     * Number of recent passwords that new password must be distinct from.
     * 
     */
    @Export(name="numDifferentPasswords", refs={Integer.class}, tree="[0]")
    private Output<Integer> numDifferentPasswords;

    /**
     * @return Number of recent passwords that new password must be distinct from.
     * 
     */
    public Output<Integer> numDifferentPasswords() {
        return this.numDifferentPasswords;
    }
    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * Number of days after which users will be forced to change their password.
     * 
     */
    @Export(name="passwordExpirationDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> passwordExpirationDays;

    /**
     * @return Number of days after which users will be forced to change their password.
     * 
     */
    public Output<Integer> passwordExpirationDays() {
        return this.passwordExpirationDays;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoginSecurity(java.lang.String name) {
        this(name, LoginSecurityArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoginSecurity(java.lang.String name, LoginSecurityArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoginSecurity(java.lang.String name, LoginSecurityArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:organizations/loginSecurity:LoginSecurity", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoginSecurity(java.lang.String name, Output<java.lang.String> id, @Nullable LoginSecurityState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:organizations/loginSecurity:LoginSecurity", name, state, makeResourceOptions(options, id), false);
    }

    private static LoginSecurityArgs makeArgs(LoginSecurityArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoginSecurityArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-meraki")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoginSecurity get(java.lang.String name, Output<java.lang.String> id, @Nullable LoginSecurityState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoginSecurity(name, id, state, options);
    }
}
