// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsVpnSplitTunnelRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsVpnSplitTunnelRuleArgs Empty = new WirelessSsidsVpnSplitTunnelRuleArgs();

    /**
     * Description for this split tunnel rule (optional).
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Description for this split tunnel rule (optional).
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or &#39;any&#39;.
     * 
     */
    @Import(name="destCidr")
    private @Nullable Output<String> destCidr;

    /**
     * @return Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or &#39;any&#39;.
     * 
     */
    public Optional<Output<String>> destCidr() {
        return Optional.ofNullable(this.destCidr);
    }

    /**
     * Destination port for this split tunnel rule, (integer in the range 1-65535), or &#39;any&#39;.
     * 
     */
    @Import(name="destPort")
    private @Nullable Output<String> destPort;

    /**
     * @return Destination port for this split tunnel rule, (integer in the range 1-65535), or &#39;any&#39;.
     * 
     */
    public Optional<Output<String>> destPort() {
        return Optional.ofNullable(this.destPort);
    }

    /**
     * Traffic policy specified for this split tunnel rule, &#39;allow&#39; or &#39;deny&#39;.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return Traffic policy specified for this split tunnel rule, &#39;allow&#39; or &#39;deny&#39;.
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Protocol for this split tunnel rule.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol for this split tunnel rule.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private WirelessSsidsVpnSplitTunnelRuleArgs() {}

    private WirelessSsidsVpnSplitTunnelRuleArgs(WirelessSsidsVpnSplitTunnelRuleArgs $) {
        this.comment = $.comment;
        this.destCidr = $.destCidr;
        this.destPort = $.destPort;
        this.policy = $.policy;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsVpnSplitTunnelRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsVpnSplitTunnelRuleArgs $;

        public Builder() {
            $ = new WirelessSsidsVpnSplitTunnelRuleArgs();
        }

        public Builder(WirelessSsidsVpnSplitTunnelRuleArgs defaults) {
            $ = new WirelessSsidsVpnSplitTunnelRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Description for this split tunnel rule (optional).
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Description for this split tunnel rule (optional).
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param destCidr Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder destCidr(@Nullable Output<String> destCidr) {
            $.destCidr = destCidr;
            return this;
        }

        /**
         * @param destCidr Destination for this split tunnel rule. IP address, fully-qualified domain names (FQDN) or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder destCidr(String destCidr) {
            return destCidr(Output.of(destCidr));
        }

        /**
         * @param destPort Destination port for this split tunnel rule, (integer in the range 1-65535), or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder destPort(@Nullable Output<String> destPort) {
            $.destPort = destPort;
            return this;
        }

        /**
         * @param destPort Destination port for this split tunnel rule, (integer in the range 1-65535), or &#39;any&#39;.
         * 
         * @return builder
         * 
         */
        public Builder destPort(String destPort) {
            return destPort(Output.of(destPort));
        }

        /**
         * @param policy Traffic policy specified for this split tunnel rule, &#39;allow&#39; or &#39;deny&#39;.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Traffic policy specified for this split tunnel rule, &#39;allow&#39; or &#39;deny&#39;.
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param protocol Protocol for this split tunnel rule.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for this split tunnel rule.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public WirelessSsidsVpnSplitTunnelRuleArgs build() {
            return $;
        }
    }

}
