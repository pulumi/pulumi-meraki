// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdApparentPower;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdCurrent;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdDoor;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdFrequency;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdHumidity;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdIndoorAirQuality;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdNoise;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdPm25;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdPowerFactor;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdRealPower;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdTemperature;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdTvoc;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdUpstreamPower;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdVoltage;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdWater;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SensorAlertsProfilesConditionsResponseThreshold {
    /**
     * @return Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdApparentPower apparentPower;
    /**
     * @return Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdCurrent current;
    /**
     * @return Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdDoor door;
    /**
     * @return Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdFrequency frequency;
    /**
     * @return Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdHumidity humidity;
    /**
     * @return Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdIndoorAirQuality indoorAirQuality;
    /**
     * @return Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdNoise noise;
    /**
     * @return PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdPm25 pm25;
    /**
     * @return Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdPowerFactor powerFactor;
    /**
     * @return Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdRealPower realPower;
    /**
     * @return Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdTemperature temperature;
    /**
     * @return TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdTvoc tvoc;
    /**
     * @return Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdUpstreamPower upstreamPower;
    /**
     * @return Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdVoltage voltage;
    /**
     * @return Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdWater water;

    private SensorAlertsProfilesConditionsResponseThreshold() {}
    /**
     * @return Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdApparentPower> apparentPower() {
        return Optional.ofNullable(this.apparentPower);
    }
    /**
     * @return Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdCurrent> current() {
        return Optional.ofNullable(this.current);
    }
    /**
     * @return Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdDoor> door() {
        return Optional.ofNullable(this.door);
    }
    /**
     * @return Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdFrequency> frequency() {
        return Optional.ofNullable(this.frequency);
    }
    /**
     * @return Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdHumidity> humidity() {
        return Optional.ofNullable(this.humidity);
    }
    /**
     * @return Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdIndoorAirQuality> indoorAirQuality() {
        return Optional.ofNullable(this.indoorAirQuality);
    }
    /**
     * @return Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdNoise> noise() {
        return Optional.ofNullable(this.noise);
    }
    /**
     * @return PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdPm25> pm25() {
        return Optional.ofNullable(this.pm25);
    }
    /**
     * @return Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdPowerFactor> powerFactor() {
        return Optional.ofNullable(this.powerFactor);
    }
    /**
     * @return Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdRealPower> realPower() {
        return Optional.ofNullable(this.realPower);
    }
    /**
     * @return Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdTemperature> temperature() {
        return Optional.ofNullable(this.temperature);
    }
    /**
     * @return TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdTvoc> tvoc() {
        return Optional.ofNullable(this.tvoc);
    }
    /**
     * @return Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdUpstreamPower> upstreamPower() {
        return Optional.ofNullable(this.upstreamPower);
    }
    /**
     * @return Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdVoltage> voltage() {
        return Optional.ofNullable(this.voltage);
    }
    /**
     * @return Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdWater> water() {
        return Optional.ofNullable(this.water);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SensorAlertsProfilesConditionsResponseThreshold defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdApparentPower apparentPower;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdCurrent current;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdDoor door;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdFrequency frequency;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdHumidity humidity;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdIndoorAirQuality indoorAirQuality;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdNoise noise;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdPm25 pm25;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdPowerFactor powerFactor;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdRealPower realPower;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdTemperature temperature;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdTvoc tvoc;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdUpstreamPower upstreamPower;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdVoltage voltage;
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdWater water;
        public Builder() {}
        public Builder(SensorAlertsProfilesConditionsResponseThreshold defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apparentPower = defaults.apparentPower;
    	      this.current = defaults.current;
    	      this.door = defaults.door;
    	      this.frequency = defaults.frequency;
    	      this.humidity = defaults.humidity;
    	      this.indoorAirQuality = defaults.indoorAirQuality;
    	      this.noise = defaults.noise;
    	      this.pm25 = defaults.pm25;
    	      this.powerFactor = defaults.powerFactor;
    	      this.realPower = defaults.realPower;
    	      this.temperature = defaults.temperature;
    	      this.tvoc = defaults.tvoc;
    	      this.upstreamPower = defaults.upstreamPower;
    	      this.voltage = defaults.voltage;
    	      this.water = defaults.water;
        }

        @CustomType.Setter
        public Builder apparentPower(@Nullable SensorAlertsProfilesConditionsResponseThresholdApparentPower apparentPower) {

            this.apparentPower = apparentPower;
            return this;
        }
        @CustomType.Setter
        public Builder current(@Nullable SensorAlertsProfilesConditionsResponseThresholdCurrent current) {

            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder door(@Nullable SensorAlertsProfilesConditionsResponseThresholdDoor door) {

            this.door = door;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(@Nullable SensorAlertsProfilesConditionsResponseThresholdFrequency frequency) {

            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder humidity(@Nullable SensorAlertsProfilesConditionsResponseThresholdHumidity humidity) {

            this.humidity = humidity;
            return this;
        }
        @CustomType.Setter
        public Builder indoorAirQuality(@Nullable SensorAlertsProfilesConditionsResponseThresholdIndoorAirQuality indoorAirQuality) {

            this.indoorAirQuality = indoorAirQuality;
            return this;
        }
        @CustomType.Setter
        public Builder noise(@Nullable SensorAlertsProfilesConditionsResponseThresholdNoise noise) {

            this.noise = noise;
            return this;
        }
        @CustomType.Setter
        public Builder pm25(@Nullable SensorAlertsProfilesConditionsResponseThresholdPm25 pm25) {

            this.pm25 = pm25;
            return this;
        }
        @CustomType.Setter
        public Builder powerFactor(@Nullable SensorAlertsProfilesConditionsResponseThresholdPowerFactor powerFactor) {

            this.powerFactor = powerFactor;
            return this;
        }
        @CustomType.Setter
        public Builder realPower(@Nullable SensorAlertsProfilesConditionsResponseThresholdRealPower realPower) {

            this.realPower = realPower;
            return this;
        }
        @CustomType.Setter
        public Builder temperature(@Nullable SensorAlertsProfilesConditionsResponseThresholdTemperature temperature) {

            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder tvoc(@Nullable SensorAlertsProfilesConditionsResponseThresholdTvoc tvoc) {

            this.tvoc = tvoc;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamPower(@Nullable SensorAlertsProfilesConditionsResponseThresholdUpstreamPower upstreamPower) {

            this.upstreamPower = upstreamPower;
            return this;
        }
        @CustomType.Setter
        public Builder voltage(@Nullable SensorAlertsProfilesConditionsResponseThresholdVoltage voltage) {

            this.voltage = voltage;
            return this;
        }
        @CustomType.Setter
        public Builder water(@Nullable SensorAlertsProfilesConditionsResponseThresholdWater water) {

            this.water = water;
            return this;
        }
        public SensorAlertsProfilesConditionsResponseThreshold build() {
            final var _resultValue = new SensorAlertsProfilesConditionsResponseThreshold();
            _resultValue.apparentPower = apparentPower;
            _resultValue.current = current;
            _resultValue.door = door;
            _resultValue.frequency = frequency;
            _resultValue.humidity = humidity;
            _resultValue.indoorAirQuality = indoorAirQuality;
            _resultValue.noise = noise;
            _resultValue.pm25 = pm25;
            _resultValue.powerFactor = powerFactor;
            _resultValue.realPower = realPower;
            _resultValue.temperature = temperature;
            _resultValue.tvoc = tvoc;
            _resultValue.upstreamPower = upstreamPower;
            _resultValue.voltage = voltage;
            _resultValue.water = water;
            return _resultValue;
        }
    }
}
