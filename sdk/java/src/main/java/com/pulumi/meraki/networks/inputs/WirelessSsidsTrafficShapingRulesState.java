// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsTrafficShapingRulesRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsTrafficShapingRulesState extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsTrafficShapingRulesState Empty = new WirelessSsidsTrafficShapingRulesState();

    /**
     * Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network&#39;s traffic shaping page. Note that default rules count against the rule limit of 8.
     * 
     */
    @Import(name="defaultRulesEnabled")
    private @Nullable Output<Boolean> defaultRulesEnabled;

    /**
     * @return Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network&#39;s traffic shaping page. Note that default rules count against the rule limit of 8.
     * 
     */
    public Optional<Output<Boolean>> defaultRulesEnabled() {
        return Optional.ofNullable(this.defaultRulesEnabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * number path parameter.
     * 
     */
    @Import(name="number")
    private @Nullable Output<String> number;

    /**
     * @return number path parameter.
     * 
     */
    public Optional<Output<String>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * An array of traffic shaping rules. Rules are applied in the order that
     * they are specified in. An empty list (or null) means no rules. Note that
     * you are allowed a maximum of 8 rules.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<WirelessSsidsTrafficShapingRulesRuleArgs>> rules;

    /**
     * @return An array of traffic shaping rules. Rules are applied in the order that
     * they are specified in. An empty list (or null) means no rules. Note that
     * you are allowed a maximum of 8 rules.
     * 
     */
    public Optional<Output<List<WirelessSsidsTrafficShapingRulesRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Whether traffic shaping rules are applied to clients on your SSID.
     * 
     */
    @Import(name="trafficShapingEnabled")
    private @Nullable Output<Boolean> trafficShapingEnabled;

    /**
     * @return Whether traffic shaping rules are applied to clients on your SSID.
     * 
     */
    public Optional<Output<Boolean>> trafficShapingEnabled() {
        return Optional.ofNullable(this.trafficShapingEnabled);
    }

    private WirelessSsidsTrafficShapingRulesState() {}

    private WirelessSsidsTrafficShapingRulesState(WirelessSsidsTrafficShapingRulesState $) {
        this.defaultRulesEnabled = $.defaultRulesEnabled;
        this.networkId = $.networkId;
        this.number = $.number;
        this.rules = $.rules;
        this.trafficShapingEnabled = $.trafficShapingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsTrafficShapingRulesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsTrafficShapingRulesState $;

        public Builder() {
            $ = new WirelessSsidsTrafficShapingRulesState();
        }

        public Builder(WirelessSsidsTrafficShapingRulesState defaults) {
            $ = new WirelessSsidsTrafficShapingRulesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultRulesEnabled Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network&#39;s traffic shaping page. Note that default rules count against the rule limit of 8.
         * 
         * @return builder
         * 
         */
        public Builder defaultRulesEnabled(@Nullable Output<Boolean> defaultRulesEnabled) {
            $.defaultRulesEnabled = defaultRulesEnabled;
            return this;
        }

        /**
         * @param defaultRulesEnabled Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network&#39;s traffic shaping page. Note that default rules count against the rule limit of 8.
         * 
         * @return builder
         * 
         */
        public Builder defaultRulesEnabled(Boolean defaultRulesEnabled) {
            return defaultRulesEnabled(Output.of(defaultRulesEnabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param rules An array of traffic shaping rules. Rules are applied in the order that
         * they are specified in. An empty list (or null) means no rules. Note that
         * you are allowed a maximum of 8 rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<WirelessSsidsTrafficShapingRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules An array of traffic shaping rules. Rules are applied in the order that
         * they are specified in. An empty list (or null) means no rules. Note that
         * you are allowed a maximum of 8 rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<WirelessSsidsTrafficShapingRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules An array of traffic shaping rules. Rules are applied in the order that
         * they are specified in. An empty list (or null) means no rules. Note that
         * you are allowed a maximum of 8 rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(WirelessSsidsTrafficShapingRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param trafficShapingEnabled Whether traffic shaping rules are applied to clients on your SSID.
         * 
         * @return builder
         * 
         */
        public Builder trafficShapingEnabled(@Nullable Output<Boolean> trafficShapingEnabled) {
            $.trafficShapingEnabled = trafficShapingEnabled;
            return this;
        }

        /**
         * @param trafficShapingEnabled Whether traffic shaping rules are applied to clients on your SSID.
         * 
         * @return builder
         * 
         */
        public Builder trafficShapingEnabled(Boolean trafficShapingEnabled) {
            return trafficShapingEnabled(Output.of(trafficShapingEnabled));
        }

        public WirelessSsidsTrafficShapingRulesState build() {
            return $;
        }
    }

}
