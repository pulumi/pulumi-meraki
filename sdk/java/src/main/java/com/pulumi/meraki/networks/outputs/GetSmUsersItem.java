// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSmUsersItem {
    /**
     * @return Active Directory Groups the user belongs to.
     * 
     */
    private List<String> adGroups;
    /**
     * @return Apple School Manager Groups the user belongs to.
     * 
     */
    private List<String> asmGroups;
    /**
     * @return Azure Active Directory Groups the user belongs to.
     * 
     */
    private List<String> azureAdGroups;
    /**
     * @return The user display name.
     * 
     */
    private String displayName;
    /**
     * @return User email.
     * 
     */
    private String email;
    /**
     * @return User full name.
     * 
     */
    private String fullName;
    /**
     * @return A boolean indicating if the user has an associated identity certificate..
     * 
     */
    private Boolean hasIdentityCertificate;
    /**
     * @return A boolean denoting if the user has a password associated with the record.
     * 
     */
    private Boolean hasPassword;
    /**
     * @return The Meraki managed Id of the user record.
     * 
     */
    private String id;
    /**
     * @return Whether the user was created using an external integration, or via the Meraki Dashboard.
     * 
     */
    private Boolean isExternal;
    /**
     * @return SAML Groups the user belongs to.
     * 
     */
    private List<String> samlGroups;
    /**
     * @return The set of tags the user is scoped to.
     * 
     */
    private String tags;
    /**
     * @return The url where the users thumbnail is hosted.
     * 
     */
    private String userThumbnail;
    /**
     * @return The users username.
     * 
     */
    private String username;

    private GetSmUsersItem() {}
    /**
     * @return Active Directory Groups the user belongs to.
     * 
     */
    public List<String> adGroups() {
        return this.adGroups;
    }
    /**
     * @return Apple School Manager Groups the user belongs to.
     * 
     */
    public List<String> asmGroups() {
        return this.asmGroups;
    }
    /**
     * @return Azure Active Directory Groups the user belongs to.
     * 
     */
    public List<String> azureAdGroups() {
        return this.azureAdGroups;
    }
    /**
     * @return The user display name.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return User email.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return User full name.
     * 
     */
    public String fullName() {
        return this.fullName;
    }
    /**
     * @return A boolean indicating if the user has an associated identity certificate..
     * 
     */
    public Boolean hasIdentityCertificate() {
        return this.hasIdentityCertificate;
    }
    /**
     * @return A boolean denoting if the user has a password associated with the record.
     * 
     */
    public Boolean hasPassword() {
        return this.hasPassword;
    }
    /**
     * @return The Meraki managed Id of the user record.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the user was created using an external integration, or via the Meraki Dashboard.
     * 
     */
    public Boolean isExternal() {
        return this.isExternal;
    }
    /**
     * @return SAML Groups the user belongs to.
     * 
     */
    public List<String> samlGroups() {
        return this.samlGroups;
    }
    /**
     * @return The set of tags the user is scoped to.
     * 
     */
    public String tags() {
        return this.tags;
    }
    /**
     * @return The url where the users thumbnail is hosted.
     * 
     */
    public String userThumbnail() {
        return this.userThumbnail;
    }
    /**
     * @return The users username.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmUsersItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> adGroups;
        private List<String> asmGroups;
        private List<String> azureAdGroups;
        private String displayName;
        private String email;
        private String fullName;
        private Boolean hasIdentityCertificate;
        private Boolean hasPassword;
        private String id;
        private Boolean isExternal;
        private List<String> samlGroups;
        private String tags;
        private String userThumbnail;
        private String username;
        public Builder() {}
        public Builder(GetSmUsersItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adGroups = defaults.adGroups;
    	      this.asmGroups = defaults.asmGroups;
    	      this.azureAdGroups = defaults.azureAdGroups;
    	      this.displayName = defaults.displayName;
    	      this.email = defaults.email;
    	      this.fullName = defaults.fullName;
    	      this.hasIdentityCertificate = defaults.hasIdentityCertificate;
    	      this.hasPassword = defaults.hasPassword;
    	      this.id = defaults.id;
    	      this.isExternal = defaults.isExternal;
    	      this.samlGroups = defaults.samlGroups;
    	      this.tags = defaults.tags;
    	      this.userThumbnail = defaults.userThumbnail;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder adGroups(List<String> adGroups) {
            if (adGroups == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "adGroups");
            }
            this.adGroups = adGroups;
            return this;
        }
        public Builder adGroups(String... adGroups) {
            return adGroups(List.of(adGroups));
        }
        @CustomType.Setter
        public Builder asmGroups(List<String> asmGroups) {
            if (asmGroups == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "asmGroups");
            }
            this.asmGroups = asmGroups;
            return this;
        }
        public Builder asmGroups(String... asmGroups) {
            return asmGroups(List.of(asmGroups));
        }
        @CustomType.Setter
        public Builder azureAdGroups(List<String> azureAdGroups) {
            if (azureAdGroups == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "azureAdGroups");
            }
            this.azureAdGroups = azureAdGroups;
            return this;
        }
        public Builder azureAdGroups(String... azureAdGroups) {
            return azureAdGroups(List.of(azureAdGroups));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder fullName(String fullName) {
            if (fullName == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "fullName");
            }
            this.fullName = fullName;
            return this;
        }
        @CustomType.Setter
        public Builder hasIdentityCertificate(Boolean hasIdentityCertificate) {
            if (hasIdentityCertificate == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "hasIdentityCertificate");
            }
            this.hasIdentityCertificate = hasIdentityCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder hasPassword(Boolean hasPassword) {
            if (hasPassword == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "hasPassword");
            }
            this.hasPassword = hasPassword;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isExternal(Boolean isExternal) {
            if (isExternal == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "isExternal");
            }
            this.isExternal = isExternal;
            return this;
        }
        @CustomType.Setter
        public Builder samlGroups(List<String> samlGroups) {
            if (samlGroups == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "samlGroups");
            }
            this.samlGroups = samlGroups;
            return this;
        }
        public Builder samlGroups(String... samlGroups) {
            return samlGroups(List.of(samlGroups));
        }
        @CustomType.Setter
        public Builder tags(String tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userThumbnail(String userThumbnail) {
            if (userThumbnail == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "userThumbnail");
            }
            this.userThumbnail = userThumbnail;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetSmUsersItem", "username");
            }
            this.username = username;
            return this;
        }
        public GetSmUsersItem build() {
            final var _resultValue = new GetSmUsersItem();
            _resultValue.adGroups = adGroups;
            _resultValue.asmGroups = asmGroups;
            _resultValue.azureAdGroups = azureAdGroups;
            _resultValue.displayName = displayName;
            _resultValue.email = email;
            _resultValue.fullName = fullName;
            _resultValue.hasIdentityCertificate = hasIdentityCertificate;
            _resultValue.hasPassword = hasPassword;
            _resultValue.id = id;
            _resultValue.isExternal = isExternal;
            _resultValue.samlGroups = samlGroups;
            _resultValue.tags = tags;
            _resultValue.userThumbnail = userThumbnail;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
