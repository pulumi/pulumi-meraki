// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.ActionBatchesCallbackHttpServerArgs;
import com.pulumi.meraki.organizations.inputs.ActionBatchesCallbackPayloadTemplateArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActionBatchesCallbackArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionBatchesCallbackArgs Empty = new ActionBatchesCallbackArgs();

    /**
     * The webhook receiver used for the callback webhook.
     * 
     */
    @Import(name="httpServer")
    private @Nullable Output<ActionBatchesCallbackHttpServerArgs> httpServer;

    /**
     * @return The webhook receiver used for the callback webhook.
     * 
     */
    public Optional<Output<ActionBatchesCallbackHttpServerArgs>> httpServer() {
        return Optional.ofNullable(this.httpServer);
    }

    /**
     * The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The payload template of the webhook used for the callback
     * 
     */
    @Import(name="payloadTemplate")
    private @Nullable Output<ActionBatchesCallbackPayloadTemplateArgs> payloadTemplate;

    /**
     * @return The payload template of the webhook used for the callback
     * 
     */
    public Optional<Output<ActionBatchesCallbackPayloadTemplateArgs>> payloadTemplate() {
        return Optional.ofNullable(this.payloadTemplate);
    }

    /**
     * A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
     * 
     */
    @Import(name="sharedSecret")
    private @Nullable Output<String> sharedSecret;

    /**
     * @return A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
     * 
     */
    public Optional<Output<String>> sharedSecret() {
        return Optional.ofNullable(this.sharedSecret);
    }

    /**
     * The status of the callback
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the callback
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ActionBatchesCallbackArgs() {}

    private ActionBatchesCallbackArgs(ActionBatchesCallbackArgs $) {
        this.httpServer = $.httpServer;
        this.id = $.id;
        this.payloadTemplate = $.payloadTemplate;
        this.sharedSecret = $.sharedSecret;
        this.status = $.status;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionBatchesCallbackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionBatchesCallbackArgs $;

        public Builder() {
            $ = new ActionBatchesCallbackArgs();
        }

        public Builder(ActionBatchesCallbackArgs defaults) {
            $ = new ActionBatchesCallbackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpServer The webhook receiver used for the callback webhook.
         * 
         * @return builder
         * 
         */
        public Builder httpServer(@Nullable Output<ActionBatchesCallbackHttpServerArgs> httpServer) {
            $.httpServer = httpServer;
            return this;
        }

        /**
         * @param httpServer The webhook receiver used for the callback webhook.
         * 
         * @return builder
         * 
         */
        public Builder httpServer(ActionBatchesCallbackHttpServerArgs httpServer) {
            return httpServer(Output.of(httpServer));
        }

        /**
         * @param id The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param payloadTemplate The payload template of the webhook used for the callback
         * 
         * @return builder
         * 
         */
        public Builder payloadTemplate(@Nullable Output<ActionBatchesCallbackPayloadTemplateArgs> payloadTemplate) {
            $.payloadTemplate = payloadTemplate;
            return this;
        }

        /**
         * @param payloadTemplate The payload template of the webhook used for the callback
         * 
         * @return builder
         * 
         */
        public Builder payloadTemplate(ActionBatchesCallbackPayloadTemplateArgs payloadTemplate) {
            return payloadTemplate(Output.of(payloadTemplate));
        }

        /**
         * @param sharedSecret A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(@Nullable Output<String> sharedSecret) {
            $.sharedSecret = sharedSecret;
            return this;
        }

        /**
         * @param sharedSecret A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
         * 
         * @return builder
         * 
         */
        public Builder sharedSecret(String sharedSecret) {
            return sharedSecret(Output.of(sharedSecret));
        }

        /**
         * @param status The status of the callback
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the callback
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ActionBatchesCallbackArgs build() {
            return $;
        }
    }

}
