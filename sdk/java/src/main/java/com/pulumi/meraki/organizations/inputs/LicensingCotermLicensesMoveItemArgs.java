// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveItemMovedLicenseArgs;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveItemRemainderLicenseArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensingCotermLicensesMoveItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensingCotermLicensesMoveItemArgs Empty = new LicensingCotermLicensesMoveItemArgs();

    /**
     * Newly moved licenses created in the destination organization of the license move operation
     * 
     */
    @Import(name="movedLicenses")
    private @Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseArgs>> movedLicenses;

    /**
     * @return Newly moved licenses created in the destination organization of the license move operation
     * 
     */
    public Optional<Output<List<LicensingCotermLicensesMoveItemMovedLicenseArgs>>> movedLicenses() {
        return Optional.ofNullable(this.movedLicenses);
    }

    /**
     * Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
     * 
     */
    @Import(name="remainderLicenses")
    private @Nullable Output<List<LicensingCotermLicensesMoveItemRemainderLicenseArgs>> remainderLicenses;

    /**
     * @return Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
     * 
     */
    public Optional<Output<List<LicensingCotermLicensesMoveItemRemainderLicenseArgs>>> remainderLicenses() {
        return Optional.ofNullable(this.remainderLicenses);
    }

    private LicensingCotermLicensesMoveItemArgs() {}

    private LicensingCotermLicensesMoveItemArgs(LicensingCotermLicensesMoveItemArgs $) {
        this.movedLicenses = $.movedLicenses;
        this.remainderLicenses = $.remainderLicenses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensingCotermLicensesMoveItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensingCotermLicensesMoveItemArgs $;

        public Builder() {
            $ = new LicensingCotermLicensesMoveItemArgs();
        }

        public Builder(LicensingCotermLicensesMoveItemArgs defaults) {
            $ = new LicensingCotermLicensesMoveItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param movedLicenses Newly moved licenses created in the destination organization of the license move operation
         * 
         * @return builder
         * 
         */
        public Builder movedLicenses(@Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseArgs>> movedLicenses) {
            $.movedLicenses = movedLicenses;
            return this;
        }

        /**
         * @param movedLicenses Newly moved licenses created in the destination organization of the license move operation
         * 
         * @return builder
         * 
         */
        public Builder movedLicenses(List<LicensingCotermLicensesMoveItemMovedLicenseArgs> movedLicenses) {
            return movedLicenses(Output.of(movedLicenses));
        }

        /**
         * @param movedLicenses Newly moved licenses created in the destination organization of the license move operation
         * 
         * @return builder
         * 
         */
        public Builder movedLicenses(LicensingCotermLicensesMoveItemMovedLicenseArgs... movedLicenses) {
            return movedLicenses(List.of(movedLicenses));
        }

        /**
         * @param remainderLicenses Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
         * 
         * @return builder
         * 
         */
        public Builder remainderLicenses(@Nullable Output<List<LicensingCotermLicensesMoveItemRemainderLicenseArgs>> remainderLicenses) {
            $.remainderLicenses = remainderLicenses;
            return this;
        }

        /**
         * @param remainderLicenses Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
         * 
         * @return builder
         * 
         */
        public Builder remainderLicenses(List<LicensingCotermLicensesMoveItemRemainderLicenseArgs> remainderLicenses) {
            return remainderLicenses(Output.of(remainderLicenses));
        }

        /**
         * @param remainderLicenses Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
         * 
         * @return builder
         * 
         */
        public Builder remainderLicenses(LicensingCotermLicensesMoveItemRemainderLicenseArgs... remainderLicenses) {
            return remainderLicenses(List.of(remainderLicenses));
        }

        public LicensingCotermLicensesMoveItemArgs build() {
            return $;
        }
    }

}
