// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.networks.GroupPoliciesArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesState;
import com.pulumi.meraki.networks.outputs.GroupPoliciesBandwidth;
import com.pulumi.meraki.networks.outputs.GroupPoliciesBonjourForwarding;
import com.pulumi.meraki.networks.outputs.GroupPoliciesContentFiltering;
import com.pulumi.meraki.networks.outputs.GroupPoliciesFirewallAndTrafficShaping;
import com.pulumi.meraki.networks.outputs.GroupPoliciesScheduling;
import com.pulumi.meraki.networks.outputs.GroupPoliciesVlanTagging;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.networks.GroupPolicies;
 * import com.pulumi.meraki.networks.GroupPoliciesArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesBandwidthArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesBonjourForwardingArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesContentFilteringArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesFirewallAndTrafficShapingArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingFridayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingMondayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingSaturdayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingSundayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingThursdayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingTuesdayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingWednesdayArgs;
 * import com.pulumi.meraki.networks.inputs.GroupPoliciesVlanTaggingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new GroupPolicies("example", GroupPoliciesArgs.builder()
 *             .bandwidth(GroupPoliciesBandwidthArgs.builder()
 *                 .bandwidth_limits(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .settings("custom")
 *                 .build())
 *             .bonjourForwarding(GroupPoliciesBonjourForwardingArgs.builder()
 *                 .rules(GroupPoliciesBonjourForwardingRuleArgs.builder()
 *                     .description("A simple bonjour rule")
 *                     .services("All Services")
 *                     .vlanId("1")
 *                     .build())
 *                 .settings("custom")
 *                 .build())
 *             .contentFiltering(GroupPoliciesContentFilteringArgs.builder()
 *                 .allowed_url_patterns(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .blocked_url_categories(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .blocked_url_patterns(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .build())
 *             .firewallAndTrafficShaping(GroupPoliciesFirewallAndTrafficShapingArgs.builder()
 *                 .l3_firewall_rules(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .l7_firewall_rules(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .settings("custom")
 *                 .traffic_shaping_rules(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .build())
 *             .name("No video streaming")
 *             .networkId("string")
 *             .scheduling(GroupPoliciesSchedulingArgs.builder()
 *                 .enabled(true)
 *                 .friday(GroupPoliciesSchedulingFridayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .monday(GroupPoliciesSchedulingMondayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .saturday(GroupPoliciesSchedulingSaturdayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .sunday(GroupPoliciesSchedulingSundayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .thursday(GroupPoliciesSchedulingThursdayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .tuesday(GroupPoliciesSchedulingTuesdayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .wednesday(GroupPoliciesSchedulingWednesdayArgs.builder()
 *                     .active(true)
 *                     .from("9:00")
 *                     .to("17:00")
 *                     .build())
 *                 .build())
 *             .splashAuthSettings("bypass")
 *             .vlanTagging(GroupPoliciesVlanTaggingArgs.builder()
 *                 .settings("custom")
 *                 .vlan_id("1")
 *                 .build())
 *             .build());
 * 
 *         ctx.export("merakiNetworksGroupPoliciesExample", example);
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:networks/groupPolicies:GroupPolicies example &#34;group_policy_id,network_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:networks/groupPolicies:GroupPolicies")
public class GroupPolicies extends com.pulumi.resources.CustomResource {
    /**
     * The bandwidth settings for clients bound to your group policy.
     * 
     */
    @Export(name="bandwidth", refs={GroupPoliciesBandwidth.class}, tree="[0]")
    private Output<GroupPoliciesBandwidth> bandwidth;

    /**
     * @return The bandwidth settings for clients bound to your group policy.
     * 
     */
    public Output<GroupPoliciesBandwidth> bandwidth() {
        return this.bandwidth;
    }
    /**
     * The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     * 
     */
    @Export(name="bonjourForwarding", refs={GroupPoliciesBonjourForwarding.class}, tree="[0]")
    private Output<GroupPoliciesBonjourForwarding> bonjourForwarding;

    /**
     * @return The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     * 
     */
    public Output<GroupPoliciesBonjourForwarding> bonjourForwarding() {
        return this.bonjourForwarding;
    }
    /**
     * The content filtering settings for your group policy
     * 
     */
    @Export(name="contentFiltering", refs={GroupPoliciesContentFiltering.class}, tree="[0]")
    private Output<GroupPoliciesContentFiltering> contentFiltering;

    /**
     * @return The content filtering settings for your group policy
     * 
     */
    public Output<GroupPoliciesContentFiltering> contentFiltering() {
        return this.contentFiltering;
    }
    /**
     * The firewall and traffic shaping rules and settings for your policy.
     * 
     */
    @Export(name="firewallAndTrafficShaping", refs={GroupPoliciesFirewallAndTrafficShaping.class}, tree="[0]")
    private Output<GroupPoliciesFirewallAndTrafficShaping> firewallAndTrafficShaping;

    /**
     * @return The firewall and traffic shaping rules and settings for your policy.
     * 
     */
    public Output<GroupPoliciesFirewallAndTrafficShaping> firewallAndTrafficShaping() {
        return this.firewallAndTrafficShaping;
    }
    /**
     * The ID of the group policy
     * 
     */
    @Export(name="groupPolicyId", refs={String.class}, tree="[0]")
    private Output<String> groupPolicyId;

    /**
     * @return The ID of the group policy
     * 
     */
    public Output<String> groupPolicyId() {
        return this.groupPolicyId;
    }
    /**
     * The name for your group policy. Required.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for your group policy. Required.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * networkId path parameter. Network ID
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * The schedule for the group policy. Schedules are applied to days of the week.
     * 
     */
    @Export(name="scheduling", refs={GroupPoliciesScheduling.class}, tree="[0]")
    private Output<GroupPoliciesScheduling> scheduling;

    /**
     * @return The schedule for the group policy. Schedules are applied to days of the week.
     * 
     */
    public Output<GroupPoliciesScheduling> scheduling() {
        return this.scheduling;
    }
    /**
     * Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
     * 
     */
    @Export(name="splashAuthSettings", refs={String.class}, tree="[0]")
    private Output<String> splashAuthSettings;

    /**
     * @return Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
     * 
     */
    public Output<String> splashAuthSettings() {
        return this.splashAuthSettings;
    }
    /**
     * The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     * 
     */
    @Export(name="vlanTagging", refs={GroupPoliciesVlanTagging.class}, tree="[0]")
    private Output<GroupPoliciesVlanTagging> vlanTagging;

    /**
     * @return The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     * 
     */
    public Output<GroupPoliciesVlanTagging> vlanTagging() {
        return this.vlanTagging;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupPolicies(String name) {
        this(name, GroupPoliciesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupPolicies(String name, GroupPoliciesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupPolicies(String name, GroupPoliciesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/groupPolicies:GroupPolicies", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private GroupPolicies(String name, Output<String> id, @Nullable GroupPoliciesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/groupPolicies:GroupPolicies", name, state, makeResourceOptions(options, id));
    }

    private static GroupPoliciesArgs makeArgs(GroupPoliciesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GroupPoliciesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupPolicies get(String name, Output<String> id, @Nullable GroupPoliciesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupPolicies(name, id, state, options);
    }
}
