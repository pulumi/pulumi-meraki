// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWirelessStatusItemBasicServiceSet {
    /**
     * @return Frequency range used by wireless network
     * 
     */
    private String band;
    /**
     * @return Whether the SSID is broadcasting based on an availability schedule
     * 
     */
    private Boolean broadcasting;
    /**
     * @return Unique identifier of wireless access point
     * 
     */
    private String bssid;
    /**
     * @return Frequency channel used by wireless network
     * 
     */
    private Integer channel;
    /**
     * @return Width of frequency channel used by wireless network
     * 
     */
    private String channelWidth;
    /**
     * @return Status of wireless network
     * 
     */
    private Boolean enabled;
    /**
     * @return Strength of wireless signal
     * 
     */
    private String power;
    /**
     * @return Name of wireless network
     * 
     */
    private String ssidName;
    /**
     * @return Unique identifier of wireless network
     * 
     */
    private Integer ssidNumber;
    /**
     * @return Whether the SSID is advertised or hidden
     * 
     */
    private Boolean visible;

    private GetWirelessStatusItemBasicServiceSet() {}
    /**
     * @return Frequency range used by wireless network
     * 
     */
    public String band() {
        return this.band;
    }
    /**
     * @return Whether the SSID is broadcasting based on an availability schedule
     * 
     */
    public Boolean broadcasting() {
        return this.broadcasting;
    }
    /**
     * @return Unique identifier of wireless access point
     * 
     */
    public String bssid() {
        return this.bssid;
    }
    /**
     * @return Frequency channel used by wireless network
     * 
     */
    public Integer channel() {
        return this.channel;
    }
    /**
     * @return Width of frequency channel used by wireless network
     * 
     */
    public String channelWidth() {
        return this.channelWidth;
    }
    /**
     * @return Status of wireless network
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Strength of wireless signal
     * 
     */
    public String power() {
        return this.power;
    }
    /**
     * @return Name of wireless network
     * 
     */
    public String ssidName() {
        return this.ssidName;
    }
    /**
     * @return Unique identifier of wireless network
     * 
     */
    public Integer ssidNumber() {
        return this.ssidNumber;
    }
    /**
     * @return Whether the SSID is advertised or hidden
     * 
     */
    public Boolean visible() {
        return this.visible;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessStatusItemBasicServiceSet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String band;
        private Boolean broadcasting;
        private String bssid;
        private Integer channel;
        private String channelWidth;
        private Boolean enabled;
        private String power;
        private String ssidName;
        private Integer ssidNumber;
        private Boolean visible;
        public Builder() {}
        public Builder(GetWirelessStatusItemBasicServiceSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.band = defaults.band;
    	      this.broadcasting = defaults.broadcasting;
    	      this.bssid = defaults.bssid;
    	      this.channel = defaults.channel;
    	      this.channelWidth = defaults.channelWidth;
    	      this.enabled = defaults.enabled;
    	      this.power = defaults.power;
    	      this.ssidName = defaults.ssidName;
    	      this.ssidNumber = defaults.ssidNumber;
    	      this.visible = defaults.visible;
        }

        @CustomType.Setter
        public Builder band(String band) {
            if (band == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "band");
            }
            this.band = band;
            return this;
        }
        @CustomType.Setter
        public Builder broadcasting(Boolean broadcasting) {
            if (broadcasting == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "broadcasting");
            }
            this.broadcasting = broadcasting;
            return this;
        }
        @CustomType.Setter
        public Builder bssid(String bssid) {
            if (bssid == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "bssid");
            }
            this.bssid = bssid;
            return this;
        }
        @CustomType.Setter
        public Builder channel(Integer channel) {
            if (channel == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "channel");
            }
            this.channel = channel;
            return this;
        }
        @CustomType.Setter
        public Builder channelWidth(String channelWidth) {
            if (channelWidth == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "channelWidth");
            }
            this.channelWidth = channelWidth;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder power(String power) {
            if (power == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "power");
            }
            this.power = power;
            return this;
        }
        @CustomType.Setter
        public Builder ssidName(String ssidName) {
            if (ssidName == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "ssidName");
            }
            this.ssidName = ssidName;
            return this;
        }
        @CustomType.Setter
        public Builder ssidNumber(Integer ssidNumber) {
            if (ssidNumber == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "ssidNumber");
            }
            this.ssidNumber = ssidNumber;
            return this;
        }
        @CustomType.Setter
        public Builder visible(Boolean visible) {
            if (visible == null) {
              throw new MissingRequiredPropertyException("GetWirelessStatusItemBasicServiceSet", "visible");
            }
            this.visible = visible;
            return this;
        }
        public GetWirelessStatusItemBasicServiceSet build() {
            final var _resultValue = new GetWirelessStatusItemBasicServiceSet();
            _resultValue.band = band;
            _resultValue.broadcasting = broadcasting;
            _resultValue.bssid = bssid;
            _resultValue.channel = channel;
            _resultValue.channelWidth = channelWidth;
            _resultValue.enabled = enabled;
            _resultValue.power = power;
            _resultValue.ssidName = ssidName;
            _resultValue.ssidNumber = ssidNumber;
            _resultValue.visible = visible;
            return _resultValue;
        }
    }
}
