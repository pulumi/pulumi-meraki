// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSmDevicesNetworkAdaptersItem {
    /**
     * @return The IP address of the DCHP Server.
     * 
     */
    private String dhcpServer;
    /**
     * @return The IP address of the DNS Server.
     * 
     */
    private String dnsServer;
    /**
     * @return The IP address of the Gateway.
     * 
     */
    private String gateway;
    /**
     * @return The Meraki Id of the network adapter record.
     * 
     */
    private String id;
    /**
     * @return The IP address of the network adapter.
     * 
     */
    private String ip;
    /**
     * @return The MAC associated with the network adapter.
     * 
     */
    private String mac;
    /**
     * @return The name of the newtwork adapter.
     * 
     */
    private String name;
    /**
     * @return The subnet for the network adapter.
     * 
     */
    private String subnet;

    private GetSmDevicesNetworkAdaptersItem() {}
    /**
     * @return The IP address of the DCHP Server.
     * 
     */
    public String dhcpServer() {
        return this.dhcpServer;
    }
    /**
     * @return The IP address of the DNS Server.
     * 
     */
    public String dnsServer() {
        return this.dnsServer;
    }
    /**
     * @return The IP address of the Gateway.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The Meraki Id of the network adapter record.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP address of the network adapter.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return The MAC associated with the network adapter.
     * 
     */
    public String mac() {
        return this.mac;
    }
    /**
     * @return The name of the newtwork adapter.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The subnet for the network adapter.
     * 
     */
    public String subnet() {
        return this.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmDevicesNetworkAdaptersItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhcpServer;
        private String dnsServer;
        private String gateway;
        private String id;
        private String ip;
        private String mac;
        private String name;
        private String subnet;
        public Builder() {}
        public Builder(GetSmDevicesNetworkAdaptersItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpServer = defaults.dhcpServer;
    	      this.dnsServer = defaults.dnsServer;
    	      this.gateway = defaults.gateway;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.mac = defaults.mac;
    	      this.name = defaults.name;
    	      this.subnet = defaults.subnet;
        }

        @CustomType.Setter
        public Builder dhcpServer(String dhcpServer) {
            if (dhcpServer == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "dhcpServer");
            }
            this.dhcpServer = dhcpServer;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServer(String dnsServer) {
            if (dnsServer == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "dnsServer");
            }
            this.dnsServer = dnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesNetworkAdaptersItem", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        public GetSmDevicesNetworkAdaptersItem build() {
            final var _resultValue = new GetSmDevicesNetworkAdaptersItem();
            _resultValue.dhcpServer = dhcpServer;
            _resultValue.dnsServer = dnsServer;
            _resultValue.gateway = gateway;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.mac = mac;
            _resultValue.name = name;
            _resultValue.subnet = subnet;
            return _resultValue;
        }
    }
}
