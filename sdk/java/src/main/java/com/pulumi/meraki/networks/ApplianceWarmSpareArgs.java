// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceWarmSpareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceWarmSpareArgs Empty = new ApplianceWarmSpareArgs();

    /**
     * Enable warm spare
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable warm spare
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Serial number of the warm spare appliance
     * 
     */
    @Import(name="spareSerial")
    private @Nullable Output<String> spareSerial;

    /**
     * @return Serial number of the warm spare appliance
     * 
     */
    public Optional<Output<String>> spareSerial() {
        return Optional.ofNullable(this.spareSerial);
    }

    /**
     * Uplink mode, either virtual or public
     * 
     */
    @Import(name="uplinkMode")
    private @Nullable Output<String> uplinkMode;

    /**
     * @return Uplink mode, either virtual or public
     * 
     */
    public Optional<Output<String>> uplinkMode() {
        return Optional.ofNullable(this.uplinkMode);
    }

    /**
     * The WAN 1 shared IP
     * 
     */
    @Import(name="virtualIp1")
    private @Nullable Output<String> virtualIp1;

    /**
     * @return The WAN 1 shared IP
     * 
     */
    public Optional<Output<String>> virtualIp1() {
        return Optional.ofNullable(this.virtualIp1);
    }

    /**
     * The WAN 2 shared IP
     * 
     */
    @Import(name="virtualIp2")
    private @Nullable Output<String> virtualIp2;

    /**
     * @return The WAN 2 shared IP
     * 
     */
    public Optional<Output<String>> virtualIp2() {
        return Optional.ofNullable(this.virtualIp2);
    }

    private ApplianceWarmSpareArgs() {}

    private ApplianceWarmSpareArgs(ApplianceWarmSpareArgs $) {
        this.enabled = $.enabled;
        this.networkId = $.networkId;
        this.spareSerial = $.spareSerial;
        this.uplinkMode = $.uplinkMode;
        this.virtualIp1 = $.virtualIp1;
        this.virtualIp2 = $.virtualIp2;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceWarmSpareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceWarmSpareArgs $;

        public Builder() {
            $ = new ApplianceWarmSpareArgs();
        }

        public Builder(ApplianceWarmSpareArgs defaults) {
            $ = new ApplianceWarmSpareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable warm spare
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable warm spare
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param spareSerial Serial number of the warm spare appliance
         * 
         * @return builder
         * 
         */
        public Builder spareSerial(@Nullable Output<String> spareSerial) {
            $.spareSerial = spareSerial;
            return this;
        }

        /**
         * @param spareSerial Serial number of the warm spare appliance
         * 
         * @return builder
         * 
         */
        public Builder spareSerial(String spareSerial) {
            return spareSerial(Output.of(spareSerial));
        }

        /**
         * @param uplinkMode Uplink mode, either virtual or public
         * 
         * @return builder
         * 
         */
        public Builder uplinkMode(@Nullable Output<String> uplinkMode) {
            $.uplinkMode = uplinkMode;
            return this;
        }

        /**
         * @param uplinkMode Uplink mode, either virtual or public
         * 
         * @return builder
         * 
         */
        public Builder uplinkMode(String uplinkMode) {
            return uplinkMode(Output.of(uplinkMode));
        }

        /**
         * @param virtualIp1 The WAN 1 shared IP
         * 
         * @return builder
         * 
         */
        public Builder virtualIp1(@Nullable Output<String> virtualIp1) {
            $.virtualIp1 = virtualIp1;
            return this;
        }

        /**
         * @param virtualIp1 The WAN 1 shared IP
         * 
         * @return builder
         * 
         */
        public Builder virtualIp1(String virtualIp1) {
            return virtualIp1(Output.of(virtualIp1));
        }

        /**
         * @param virtualIp2 The WAN 2 shared IP
         * 
         * @return builder
         * 
         */
        public Builder virtualIp2(@Nullable Output<String> virtualIp2) {
            $.virtualIp2 = virtualIp2;
            return this;
        }

        /**
         * @param virtualIp2 The WAN 2 shared IP
         * 
         * @return builder
         * 
         */
        public Builder virtualIp2(String virtualIp2) {
            return virtualIp2(Output.of(virtualIp2));
        }

        public ApplianceWarmSpareArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("ApplianceWarmSpareArgs", "networkId");
            }
            return $;
        }
    }

}
