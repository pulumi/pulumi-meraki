// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetSmVppAccountsItemParsedToken;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSmVppAccountsItem {
    /**
     * @return The allowed admins for the VPP account
     * 
     */
    private String allowedAdmins;
    /**
     * @return The network IDs of the assignable networks for the VPP account
     * 
     */
    private List<String> assignableNetworkIds;
    /**
     * @return The assignable networks for the VPP account
     * 
     */
    private String assignableNetworks;
    /**
     * @return The VPP service token
     * 
     */
    private String contentToken;
    /**
     * @return The email address associated with the VPP account
     * 
     */
    private String email;
    /**
     * @return The id of the VPP Account
     * 
     */
    private String id;
    /**
     * @return The last time the VPP account was force synced
     * 
     */
    private String lastForceSyncedAt;
    /**
     * @return The last time the VPP account was synced
     * 
     */
    private String lastSyncedAt;
    /**
     * @return The name of the VPP account
     * 
     */
    private String name;
    /**
     * @return The network IDs of the admins for the VPP account
     * 
     */
    private String networkIdAdmins;
    /**
     * @return The parsed VPP service token
     * 
     */
    private GetSmVppAccountsItemParsedToken parsedToken;
    /**
     * @return The id of the VPP Account
     * 
     */
    private String vppAccountId;
    /**
     * @return The VPP location ID
     * 
     */
    private String vppLocationId;
    /**
     * @return The VPP location name
     * 
     */
    private String vppLocationName;
    /**
     * @return The VPP Account&#39;s Service Token
     * 
     */
    private String vppServiceToken;

    private GetSmVppAccountsItem() {}
    /**
     * @return The allowed admins for the VPP account
     * 
     */
    public String allowedAdmins() {
        return this.allowedAdmins;
    }
    /**
     * @return The network IDs of the assignable networks for the VPP account
     * 
     */
    public List<String> assignableNetworkIds() {
        return this.assignableNetworkIds;
    }
    /**
     * @return The assignable networks for the VPP account
     * 
     */
    public String assignableNetworks() {
        return this.assignableNetworks;
    }
    /**
     * @return The VPP service token
     * 
     */
    public String contentToken() {
        return this.contentToken;
    }
    /**
     * @return The email address associated with the VPP account
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return The id of the VPP Account
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The last time the VPP account was force synced
     * 
     */
    public String lastForceSyncedAt() {
        return this.lastForceSyncedAt;
    }
    /**
     * @return The last time the VPP account was synced
     * 
     */
    public String lastSyncedAt() {
        return this.lastSyncedAt;
    }
    /**
     * @return The name of the VPP account
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The network IDs of the admins for the VPP account
     * 
     */
    public String networkIdAdmins() {
        return this.networkIdAdmins;
    }
    /**
     * @return The parsed VPP service token
     * 
     */
    public GetSmVppAccountsItemParsedToken parsedToken() {
        return this.parsedToken;
    }
    /**
     * @return The id of the VPP Account
     * 
     */
    public String vppAccountId() {
        return this.vppAccountId;
    }
    /**
     * @return The VPP location ID
     * 
     */
    public String vppLocationId() {
        return this.vppLocationId;
    }
    /**
     * @return The VPP location name
     * 
     */
    public String vppLocationName() {
        return this.vppLocationName;
    }
    /**
     * @return The VPP Account&#39;s Service Token
     * 
     */
    public String vppServiceToken() {
        return this.vppServiceToken;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmVppAccountsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allowedAdmins;
        private List<String> assignableNetworkIds;
        private String assignableNetworks;
        private String contentToken;
        private String email;
        private String id;
        private String lastForceSyncedAt;
        private String lastSyncedAt;
        private String name;
        private String networkIdAdmins;
        private GetSmVppAccountsItemParsedToken parsedToken;
        private String vppAccountId;
        private String vppLocationId;
        private String vppLocationName;
        private String vppServiceToken;
        public Builder() {}
        public Builder(GetSmVppAccountsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedAdmins = defaults.allowedAdmins;
    	      this.assignableNetworkIds = defaults.assignableNetworkIds;
    	      this.assignableNetworks = defaults.assignableNetworks;
    	      this.contentToken = defaults.contentToken;
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.lastForceSyncedAt = defaults.lastForceSyncedAt;
    	      this.lastSyncedAt = defaults.lastSyncedAt;
    	      this.name = defaults.name;
    	      this.networkIdAdmins = defaults.networkIdAdmins;
    	      this.parsedToken = defaults.parsedToken;
    	      this.vppAccountId = defaults.vppAccountId;
    	      this.vppLocationId = defaults.vppLocationId;
    	      this.vppLocationName = defaults.vppLocationName;
    	      this.vppServiceToken = defaults.vppServiceToken;
        }

        @CustomType.Setter
        public Builder allowedAdmins(String allowedAdmins) {
            if (allowedAdmins == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "allowedAdmins");
            }
            this.allowedAdmins = allowedAdmins;
            return this;
        }
        @CustomType.Setter
        public Builder assignableNetworkIds(List<String> assignableNetworkIds) {
            if (assignableNetworkIds == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "assignableNetworkIds");
            }
            this.assignableNetworkIds = assignableNetworkIds;
            return this;
        }
        public Builder assignableNetworkIds(String... assignableNetworkIds) {
            return assignableNetworkIds(List.of(assignableNetworkIds));
        }
        @CustomType.Setter
        public Builder assignableNetworks(String assignableNetworks) {
            if (assignableNetworks == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "assignableNetworks");
            }
            this.assignableNetworks = assignableNetworks;
            return this;
        }
        @CustomType.Setter
        public Builder contentToken(String contentToken) {
            if (contentToken == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "contentToken");
            }
            this.contentToken = contentToken;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastForceSyncedAt(String lastForceSyncedAt) {
            if (lastForceSyncedAt == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "lastForceSyncedAt");
            }
            this.lastForceSyncedAt = lastForceSyncedAt;
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncedAt(String lastSyncedAt) {
            if (lastSyncedAt == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "lastSyncedAt");
            }
            this.lastSyncedAt = lastSyncedAt;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkIdAdmins(String networkIdAdmins) {
            if (networkIdAdmins == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "networkIdAdmins");
            }
            this.networkIdAdmins = networkIdAdmins;
            return this;
        }
        @CustomType.Setter
        public Builder parsedToken(GetSmVppAccountsItemParsedToken parsedToken) {
            if (parsedToken == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "parsedToken");
            }
            this.parsedToken = parsedToken;
            return this;
        }
        @CustomType.Setter
        public Builder vppAccountId(String vppAccountId) {
            if (vppAccountId == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "vppAccountId");
            }
            this.vppAccountId = vppAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder vppLocationId(String vppLocationId) {
            if (vppLocationId == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "vppLocationId");
            }
            this.vppLocationId = vppLocationId;
            return this;
        }
        @CustomType.Setter
        public Builder vppLocationName(String vppLocationName) {
            if (vppLocationName == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "vppLocationName");
            }
            this.vppLocationName = vppLocationName;
            return this;
        }
        @CustomType.Setter
        public Builder vppServiceToken(String vppServiceToken) {
            if (vppServiceToken == null) {
              throw new MissingRequiredPropertyException("GetSmVppAccountsItem", "vppServiceToken");
            }
            this.vppServiceToken = vppServiceToken;
            return this;
        }
        public GetSmVppAccountsItem build() {
            final var _resultValue = new GetSmVppAccountsItem();
            _resultValue.allowedAdmins = allowedAdmins;
            _resultValue.assignableNetworkIds = assignableNetworkIds;
            _resultValue.assignableNetworks = assignableNetworks;
            _resultValue.contentToken = contentToken;
            _resultValue.email = email;
            _resultValue.id = id;
            _resultValue.lastForceSyncedAt = lastForceSyncedAt;
            _resultValue.lastSyncedAt = lastSyncedAt;
            _resultValue.name = name;
            _resultValue.networkIdAdmins = networkIdAdmins;
            _resultValue.parsedToken = parsedToken;
            _resultValue.vppAccountId = vppAccountId;
            _resultValue.vppLocationId = vppLocationId;
            _resultValue.vppLocationName = vppLocationName;
            _resultValue.vppServiceToken = vppServiceToken;
            return _resultValue;
        }
    }
}
