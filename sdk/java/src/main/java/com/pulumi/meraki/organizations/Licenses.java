// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.organizations.LicensesArgs;
import com.pulumi.meraki.organizations.inputs.LicensesState;
import com.pulumi.meraki.organizations.outputs.LicensesPermanentlyQueuedLicense;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.organizations.Licenses;
 * import com.pulumi.meraki.organizations.LicensesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Licenses("example", LicensesArgs.builder()
 *             .deviceSerial("Q234-ABCD-5678")
 *             .licenseId("string")
 *             .organizationId("string")
 *             .build());
 * 
 *         ctx.export("merakiOrganizationsLicensesExample", example);
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:organizations/licenses:Licenses example &#34;license_id,organization_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:organizations/licenses:Licenses")
public class Licenses extends com.pulumi.resources.CustomResource {
    /**
     * The date the license started burning
     * 
     */
    @Export(name="activationDate", refs={String.class}, tree="[0]")
    private Output<String> activationDate;

    /**
     * @return The date the license started burning
     * 
     */
    public Output<String> activationDate() {
        return this.activationDate;
    }
    /**
     * The date the license was claimed into the organization
     * 
     */
    @Export(name="claimDate", refs={String.class}, tree="[0]")
    private Output<String> claimDate;

    /**
     * @return The date the license was claimed into the organization
     * 
     */
    public Output<String> claimDate() {
        return this.claimDate;
    }
    /**
     * Serial number of the device the license is assigned to
     * 
     */
    @Export(name="deviceSerial", refs={String.class}, tree="[0]")
    private Output<String> deviceSerial;

    /**
     * @return Serial number of the device the license is assigned to
     * 
     */
    public Output<String> deviceSerial() {
        return this.deviceSerial;
    }
    /**
     * The duration of the individual license
     * 
     */
    @Export(name="durationInDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> durationInDays;

    /**
     * @return The duration of the individual license
     * 
     */
    public Output<Integer> durationInDays() {
        return this.durationInDays;
    }
    /**
     * The date the license will expire
     * 
     */
    @Export(name="expirationDate", refs={String.class}, tree="[0]")
    private Output<String> expirationDate;

    /**
     * @return The date the license will expire
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }
    /**
     * The id of the head license this license is queued behind. If there is no head license, it returns nil.
     * 
     */
    @Export(name="headLicenseId", refs={String.class}, tree="[0]")
    private Output<String> headLicenseId;

    /**
     * @return The id of the head license this license is queued behind. If there is no head license, it returns nil.
     * 
     */
    public Output<String> headLicenseId() {
        return this.headLicenseId;
    }
    /**
     * licenseId path parameter. License ID
     * 
     */
    @Export(name="licenseId", refs={String.class}, tree="[0]")
    private Output<String> licenseId;

    /**
     * @return licenseId path parameter. License ID
     * 
     */
    public Output<String> licenseId() {
        return this.licenseId;
    }
    /**
     * License key
     * 
     */
    @Export(name="licenseKey", refs={String.class}, tree="[0]")
    private Output<String> licenseKey;

    /**
     * @return License key
     * 
     */
    public Output<String> licenseKey() {
        return this.licenseKey;
    }
    /**
     * License type
     * 
     */
    @Export(name="licenseType", refs={String.class}, tree="[0]")
    private Output<String> licenseType;

    /**
     * @return License type
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }
    /**
     * ID of the network the license is assigned to
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return ID of the network the license is assigned to
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * Order number
     * 
     */
    @Export(name="orderNumber", refs={String.class}, tree="[0]")
    private Output<String> orderNumber;

    /**
     * @return Order number
     * 
     */
    public Output<String> orderNumber() {
        return this.orderNumber;
    }
    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Export(name="organizationId", refs={String.class}, tree="[0]")
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }
    /**
     * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     * 
     */
    @Export(name="permanentlyQueuedLicenses", refs={List.class,LicensesPermanentlyQueuedLicense.class}, tree="[0,1]")
    private Output<List<LicensesPermanentlyQueuedLicense>> permanentlyQueuedLicenses;

    /**
     * @return DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     * 
     */
    public Output<List<LicensesPermanentlyQueuedLicense>> permanentlyQueuedLicenses() {
        return this.permanentlyQueuedLicenses;
    }
    /**
     * The number of seats of the license. Only applicable to SM licenses.
     * 
     */
    @Export(name="seatCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> seatCount;

    /**
     * @return The number of seats of the license. Only applicable to SM licenses.
     * 
     */
    public Output<Integer> seatCount() {
        return this.seatCount;
    }
    /**
     * The state of the license. All queued licenses have a status of *recentlyQueued*.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the license. All queued licenses have a status of *recentlyQueued*.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The duration of the license plus all permanently queued licenses associated with it
     * 
     */
    @Export(name="totalDurationInDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> totalDurationInDays;

    /**
     * @return The duration of the license plus all permanently queued licenses associated with it
     * 
     */
    public Output<Integer> totalDurationInDays() {
        return this.totalDurationInDays;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Licenses(java.lang.String name) {
        this(name, LicensesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Licenses(java.lang.String name, LicensesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Licenses(java.lang.String name, LicensesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:organizations/licenses:Licenses", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Licenses(java.lang.String name, Output<java.lang.String> id, @Nullable LicensesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:organizations/licenses:Licenses", name, state, makeResourceOptions(options, id), false);
    }

    private static LicensesArgs makeArgs(LicensesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LicensesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-meraki")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Licenses get(java.lang.String name, Output<java.lang.String> id, @Nullable LicensesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Licenses(name, id, state, options);
    }
}
