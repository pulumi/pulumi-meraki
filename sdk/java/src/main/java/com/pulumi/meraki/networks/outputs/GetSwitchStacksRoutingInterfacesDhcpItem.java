// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption;
import com.pulumi.meraki.networks.outputs.GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment;
import com.pulumi.meraki.networks.outputs.GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchStacksRoutingInterfacesDhcpItem {
    /**
     * @return The PXE boot server file name for the DHCP server running on the switch stack interface
     * 
     */
    private String bootFileName;
    /**
     * @return The PXE boot server IP for the DHCP server running on the switch stack interface
     * 
     */
    private String bootNextServer;
    /**
     * @return Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     * 
     */
    private Boolean bootOptionsEnabled;
    /**
     * @return The DHCP lease time config for the dhcp server running on the switch stack interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
     * 
     */
    private String dhcpLeaseTime;
    /**
     * @return The DHCP mode options for the switch stack interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
     * 
     */
    private String dhcpMode;
    /**
     * @return Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     * 
     */
    private List<GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption> dhcpOptions;
    /**
     * @return The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     * 
     */
    private List<String> dhcpRelayServerIps;
    /**
     * @return The DHCP name server IPs when DHCP name server option is &#39;custom&#39;
     * 
     */
    private List<String> dnsCustomNameservers;
    /**
     * @return The DHCP name server option for the dhcp server running on the switch stack interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
     * 
     */
    private String dnsNameserversOption;
    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    private List<GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment> fixedIpAssignments;
    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    private List<GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange> reservedIpRanges;

    private GetSwitchStacksRoutingInterfacesDhcpItem() {}
    /**
     * @return The PXE boot server file name for the DHCP server running on the switch stack interface
     * 
     */
    public String bootFileName() {
        return this.bootFileName;
    }
    /**
     * @return The PXE boot server IP for the DHCP server running on the switch stack interface
     * 
     */
    public String bootNextServer() {
        return this.bootNextServer;
    }
    /**
     * @return Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     * 
     */
    public Boolean bootOptionsEnabled() {
        return this.bootOptionsEnabled;
    }
    /**
     * @return The DHCP lease time config for the dhcp server running on the switch stack interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
     * 
     */
    public String dhcpLeaseTime() {
        return this.dhcpLeaseTime;
    }
    /**
     * @return The DHCP mode options for the switch stack interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
     * 
     */
    public String dhcpMode() {
        return this.dhcpMode;
    }
    /**
     * @return Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     * 
     */
    public List<GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption> dhcpOptions() {
        return this.dhcpOptions;
    }
    /**
     * @return The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     * 
     */
    public List<String> dhcpRelayServerIps() {
        return this.dhcpRelayServerIps;
    }
    /**
     * @return The DHCP name server IPs when DHCP name server option is &#39;custom&#39;
     * 
     */
    public List<String> dnsCustomNameservers() {
        return this.dnsCustomNameservers;
    }
    /**
     * @return The DHCP name server option for the dhcp server running on the switch stack interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
     * 
     */
    public String dnsNameserversOption() {
        return this.dnsNameserversOption;
    }
    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    public List<GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment> fixedIpAssignments() {
        return this.fixedIpAssignments;
    }
    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    public List<GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange> reservedIpRanges() {
        return this.reservedIpRanges;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchStacksRoutingInterfacesDhcpItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootFileName;
        private String bootNextServer;
        private Boolean bootOptionsEnabled;
        private String dhcpLeaseTime;
        private String dhcpMode;
        private List<GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption> dhcpOptions;
        private List<String> dhcpRelayServerIps;
        private List<String> dnsCustomNameservers;
        private String dnsNameserversOption;
        private List<GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment> fixedIpAssignments;
        private List<GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange> reservedIpRanges;
        public Builder() {}
        public Builder(GetSwitchStacksRoutingInterfacesDhcpItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootFileName = defaults.bootFileName;
    	      this.bootNextServer = defaults.bootNextServer;
    	      this.bootOptionsEnabled = defaults.bootOptionsEnabled;
    	      this.dhcpLeaseTime = defaults.dhcpLeaseTime;
    	      this.dhcpMode = defaults.dhcpMode;
    	      this.dhcpOptions = defaults.dhcpOptions;
    	      this.dhcpRelayServerIps = defaults.dhcpRelayServerIps;
    	      this.dnsCustomNameservers = defaults.dnsCustomNameservers;
    	      this.dnsNameserversOption = defaults.dnsNameserversOption;
    	      this.fixedIpAssignments = defaults.fixedIpAssignments;
    	      this.reservedIpRanges = defaults.reservedIpRanges;
        }

        @CustomType.Setter
        public Builder bootFileName(String bootFileName) {
            if (bootFileName == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "bootFileName");
            }
            this.bootFileName = bootFileName;
            return this;
        }
        @CustomType.Setter
        public Builder bootNextServer(String bootNextServer) {
            if (bootNextServer == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "bootNextServer");
            }
            this.bootNextServer = bootNextServer;
            return this;
        }
        @CustomType.Setter
        public Builder bootOptionsEnabled(Boolean bootOptionsEnabled) {
            if (bootOptionsEnabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "bootOptionsEnabled");
            }
            this.bootOptionsEnabled = bootOptionsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpLeaseTime(String dhcpLeaseTime) {
            if (dhcpLeaseTime == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dhcpLeaseTime");
            }
            this.dhcpLeaseTime = dhcpLeaseTime;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpMode(String dhcpMode) {
            if (dhcpMode == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dhcpMode");
            }
            this.dhcpMode = dhcpMode;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpOptions(List<GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption> dhcpOptions) {
            if (dhcpOptions == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dhcpOptions");
            }
            this.dhcpOptions = dhcpOptions;
            return this;
        }
        public Builder dhcpOptions(GetSwitchStacksRoutingInterfacesDhcpItemDhcpOption... dhcpOptions) {
            return dhcpOptions(List.of(dhcpOptions));
        }
        @CustomType.Setter
        public Builder dhcpRelayServerIps(List<String> dhcpRelayServerIps) {
            if (dhcpRelayServerIps == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dhcpRelayServerIps");
            }
            this.dhcpRelayServerIps = dhcpRelayServerIps;
            return this;
        }
        public Builder dhcpRelayServerIps(String... dhcpRelayServerIps) {
            return dhcpRelayServerIps(List.of(dhcpRelayServerIps));
        }
        @CustomType.Setter
        public Builder dnsCustomNameservers(List<String> dnsCustomNameservers) {
            if (dnsCustomNameservers == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dnsCustomNameservers");
            }
            this.dnsCustomNameservers = dnsCustomNameservers;
            return this;
        }
        public Builder dnsCustomNameservers(String... dnsCustomNameservers) {
            return dnsCustomNameservers(List.of(dnsCustomNameservers));
        }
        @CustomType.Setter
        public Builder dnsNameserversOption(String dnsNameserversOption) {
            if (dnsNameserversOption == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "dnsNameserversOption");
            }
            this.dnsNameserversOption = dnsNameserversOption;
            return this;
        }
        @CustomType.Setter
        public Builder fixedIpAssignments(List<GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment> fixedIpAssignments) {
            if (fixedIpAssignments == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "fixedIpAssignments");
            }
            this.fixedIpAssignments = fixedIpAssignments;
            return this;
        }
        public Builder fixedIpAssignments(GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignment... fixedIpAssignments) {
            return fixedIpAssignments(List.of(fixedIpAssignments));
        }
        @CustomType.Setter
        public Builder reservedIpRanges(List<GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange> reservedIpRanges) {
            if (reservedIpRanges == null) {
              throw new MissingRequiredPropertyException("GetSwitchStacksRoutingInterfacesDhcpItem", "reservedIpRanges");
            }
            this.reservedIpRanges = reservedIpRanges;
            return this;
        }
        public Builder reservedIpRanges(GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRange... reservedIpRanges) {
            return reservedIpRanges(List.of(reservedIpRanges));
        }
        public GetSwitchStacksRoutingInterfacesDhcpItem build() {
            final var _resultValue = new GetSwitchStacksRoutingInterfacesDhcpItem();
            _resultValue.bootFileName = bootFileName;
            _resultValue.bootNextServer = bootNextServer;
            _resultValue.bootOptionsEnabled = bootOptionsEnabled;
            _resultValue.dhcpLeaseTime = dhcpLeaseTime;
            _resultValue.dhcpMode = dhcpMode;
            _resultValue.dhcpOptions = dhcpOptions;
            _resultValue.dhcpRelayServerIps = dhcpRelayServerIps;
            _resultValue.dnsCustomNameservers = dnsCustomNameservers;
            _resultValue.dnsNameserversOption = dnsNameserversOption;
            _resultValue.fixedIpAssignments = fixedIpAssignments;
            _resultValue.reservedIpRanges = reservedIpRanges;
            return _resultValue;
        }
    }
}
