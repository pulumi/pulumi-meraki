// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetCameraDetectionsHistoryByBoundaryByIntervalItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCameraDetectionsHistoryByBoundaryByIntervalResult {
    /**
     * @return boundaryIds query parameter. A list of boundary ids. The returned cameras will be filtered to only include these ids.
     * 
     */
    private List<String> boundaryIds;
    /**
     * @return boundaryTypes query parameter. The detection types. Defaults to &#39;person&#39;.
     * 
     */
    private @Nullable List<String> boundaryTypes;
    /**
     * @return duration query parameter. The minimum time, in seconds, that the person or car remains in the area to be counted. Defaults to boundary configuration or 60.
     * 
     */
    private @Nullable Integer duration;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Array of ResponseCameraGetOrganizationCameraDetectionsHistoryByBoundaryByInterval
     * 
     */
    private List<GetCameraDetectionsHistoryByBoundaryByIntervalItem> items;
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    private String organizationId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 1 1000. Defaults to 1000.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return ranges query parameter. A list of time ranges with intervals
     * 
     */
    private List<String> ranges;

    private GetCameraDetectionsHistoryByBoundaryByIntervalResult() {}
    /**
     * @return boundaryIds query parameter. A list of boundary ids. The returned cameras will be filtered to only include these ids.
     * 
     */
    public List<String> boundaryIds() {
        return this.boundaryIds;
    }
    /**
     * @return boundaryTypes query parameter. The detection types. Defaults to &#39;person&#39;.
     * 
     */
    public List<String> boundaryTypes() {
        return this.boundaryTypes == null ? List.of() : this.boundaryTypes;
    }
    /**
     * @return duration query parameter. The minimum time, in seconds, that the person or car remains in the area to be counted. Defaults to boundary configuration or 60.
     * 
     */
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Array of ResponseCameraGetOrganizationCameraDetectionsHistoryByBoundaryByInterval
     * 
     */
    public List<GetCameraDetectionsHistoryByBoundaryByIntervalItem> items() {
        return this.items;
    }
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 1 1000. Defaults to 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return ranges query parameter. A list of time ranges with intervals
     * 
     */
    public List<String> ranges() {
        return this.ranges;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCameraDetectionsHistoryByBoundaryByIntervalResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> boundaryIds;
        private @Nullable List<String> boundaryTypes;
        private @Nullable Integer duration;
        private String id;
        private List<GetCameraDetectionsHistoryByBoundaryByIntervalItem> items;
        private String organizationId;
        private @Nullable Integer perPage;
        private List<String> ranges;
        public Builder() {}
        public Builder(GetCameraDetectionsHistoryByBoundaryByIntervalResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boundaryIds = defaults.boundaryIds;
    	      this.boundaryTypes = defaults.boundaryTypes;
    	      this.duration = defaults.duration;
    	      this.id = defaults.id;
    	      this.items = defaults.items;
    	      this.organizationId = defaults.organizationId;
    	      this.perPage = defaults.perPage;
    	      this.ranges = defaults.ranges;
        }

        @CustomType.Setter
        public Builder boundaryIds(List<String> boundaryIds) {
            if (boundaryIds == null) {
              throw new MissingRequiredPropertyException("GetCameraDetectionsHistoryByBoundaryByIntervalResult", "boundaryIds");
            }
            this.boundaryIds = boundaryIds;
            return this;
        }
        public Builder boundaryIds(String... boundaryIds) {
            return boundaryIds(List.of(boundaryIds));
        }
        @CustomType.Setter
        public Builder boundaryTypes(@Nullable List<String> boundaryTypes) {

            this.boundaryTypes = boundaryTypes;
            return this;
        }
        public Builder boundaryTypes(String... boundaryTypes) {
            return boundaryTypes(List.of(boundaryTypes));
        }
        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCameraDetectionsHistoryByBoundaryByIntervalResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetCameraDetectionsHistoryByBoundaryByIntervalItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetCameraDetectionsHistoryByBoundaryByIntervalResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetCameraDetectionsHistoryByBoundaryByIntervalItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetCameraDetectionsHistoryByBoundaryByIntervalResult", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder ranges(List<String> ranges) {
            if (ranges == null) {
              throw new MissingRequiredPropertyException("GetCameraDetectionsHistoryByBoundaryByIntervalResult", "ranges");
            }
            this.ranges = ranges;
            return this;
        }
        public Builder ranges(String... ranges) {
            return ranges(List.of(ranges));
        }
        public GetCameraDetectionsHistoryByBoundaryByIntervalResult build() {
            final var _resultValue = new GetCameraDetectionsHistoryByBoundaryByIntervalResult();
            _resultValue.boundaryIds = boundaryIds;
            _resultValue.boundaryTypes = boundaryTypes;
            _resultValue.duration = duration;
            _resultValue.id = id;
            _resultValue.items = items;
            _resultValue.organizationId = organizationId;
            _resultValue.perPage = perPage;
            _resultValue.ranges = ranges;
            return _resultValue;
        }
    }
}
