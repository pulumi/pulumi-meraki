// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetLicensesOverviewItemSystemsManagerCounts {
    /**
     * @return The number of Systems Manager seats in use
     * 
     */
    private Integer activeSeats;
    /**
     * @return The total number of enrolled Systems Manager devices
     * 
     */
    private Integer orgwideEnrolledDevices;
    /**
     * @return The total number of Systems Manager seats
     * 
     */
    private Integer totalSeats;
    /**
     * @return The number of unused Systems Manager seats
     * 
     */
    private Integer unassignedSeats;

    private GetLicensesOverviewItemSystemsManagerCounts() {}
    /**
     * @return The number of Systems Manager seats in use
     * 
     */
    public Integer activeSeats() {
        return this.activeSeats;
    }
    /**
     * @return The total number of enrolled Systems Manager devices
     * 
     */
    public Integer orgwideEnrolledDevices() {
        return this.orgwideEnrolledDevices;
    }
    /**
     * @return The total number of Systems Manager seats
     * 
     */
    public Integer totalSeats() {
        return this.totalSeats;
    }
    /**
     * @return The number of unused Systems Manager seats
     * 
     */
    public Integer unassignedSeats() {
        return this.unassignedSeats;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensesOverviewItemSystemsManagerCounts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeSeats;
        private Integer orgwideEnrolledDevices;
        private Integer totalSeats;
        private Integer unassignedSeats;
        public Builder() {}
        public Builder(GetLicensesOverviewItemSystemsManagerCounts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSeats = defaults.activeSeats;
    	      this.orgwideEnrolledDevices = defaults.orgwideEnrolledDevices;
    	      this.totalSeats = defaults.totalSeats;
    	      this.unassignedSeats = defaults.unassignedSeats;
        }

        @CustomType.Setter
        public Builder activeSeats(Integer activeSeats) {
            if (activeSeats == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemSystemsManagerCounts", "activeSeats");
            }
            this.activeSeats = activeSeats;
            return this;
        }
        @CustomType.Setter
        public Builder orgwideEnrolledDevices(Integer orgwideEnrolledDevices) {
            if (orgwideEnrolledDevices == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemSystemsManagerCounts", "orgwideEnrolledDevices");
            }
            this.orgwideEnrolledDevices = orgwideEnrolledDevices;
            return this;
        }
        @CustomType.Setter
        public Builder totalSeats(Integer totalSeats) {
            if (totalSeats == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemSystemsManagerCounts", "totalSeats");
            }
            this.totalSeats = totalSeats;
            return this;
        }
        @CustomType.Setter
        public Builder unassignedSeats(Integer unassignedSeats) {
            if (unassignedSeats == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemSystemsManagerCounts", "unassignedSeats");
            }
            this.unassignedSeats = unassignedSeats;
            return this;
        }
        public GetLicensesOverviewItemSystemsManagerCounts build() {
            final var _resultValue = new GetLicensesOverviewItemSystemsManagerCounts();
            _resultValue.activeSeats = activeSeats;
            _resultValue.orgwideEnrolledDevices = orgwideEnrolledDevices;
            _resultValue.totalSeats = totalSeats;
            _resultValue.unassignedSeats = unassignedSeats;
            return _resultValue;
        }
    }
}
