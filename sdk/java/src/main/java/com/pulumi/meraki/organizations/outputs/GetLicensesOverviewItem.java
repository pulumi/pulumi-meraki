// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetLicensesOverviewItemLicenseType;
import com.pulumi.meraki.organizations.outputs.GetLicensesOverviewItemStates;
import com.pulumi.meraki.organizations.outputs.GetLicensesOverviewItemSystemsManager;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLicensesOverviewItem {
    /**
     * @return License expiration date (Co-termination licensing only)
     * 
     */
    private String expirationDate;
    /**
     * @return Total number of licenses (Per-device licensing only)
     * 
     */
    private Integer licenseCount;
    /**
     * @return Data by license type (Per-device licensing only)
     * 
     */
    private List<GetLicensesOverviewItemLicenseType> licenseTypes;
    /**
     * @return License counts (Co-termination licensing only)
     * 
     */
    private String licensedDeviceCounts;
    /**
     * @return Aggregated data for licenses by state (Per-device licensing only)
     * 
     */
    private GetLicensesOverviewItemStates states;
    /**
     * @return License status (Co-termination licensing only)
     * 
     */
    private String status;
    /**
     * @return Aggregated data for Systems Manager licenses (Per-device licensing only)
     * 
     */
    private GetLicensesOverviewItemSystemsManager systemsManager;

    private GetLicensesOverviewItem() {}
    /**
     * @return License expiration date (Co-termination licensing only)
     * 
     */
    public String expirationDate() {
        return this.expirationDate;
    }
    /**
     * @return Total number of licenses (Per-device licensing only)
     * 
     */
    public Integer licenseCount() {
        return this.licenseCount;
    }
    /**
     * @return Data by license type (Per-device licensing only)
     * 
     */
    public List<GetLicensesOverviewItemLicenseType> licenseTypes() {
        return this.licenseTypes;
    }
    /**
     * @return License counts (Co-termination licensing only)
     * 
     */
    public String licensedDeviceCounts() {
        return this.licensedDeviceCounts;
    }
    /**
     * @return Aggregated data for licenses by state (Per-device licensing only)
     * 
     */
    public GetLicensesOverviewItemStates states() {
        return this.states;
    }
    /**
     * @return License status (Co-termination licensing only)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Aggregated data for Systems Manager licenses (Per-device licensing only)
     * 
     */
    public GetLicensesOverviewItemSystemsManager systemsManager() {
        return this.systemsManager;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensesOverviewItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expirationDate;
        private Integer licenseCount;
        private List<GetLicensesOverviewItemLicenseType> licenseTypes;
        private String licensedDeviceCounts;
        private GetLicensesOverviewItemStates states;
        private String status;
        private GetLicensesOverviewItemSystemsManager systemsManager;
        public Builder() {}
        public Builder(GetLicensesOverviewItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expirationDate = defaults.expirationDate;
    	      this.licenseCount = defaults.licenseCount;
    	      this.licenseTypes = defaults.licenseTypes;
    	      this.licensedDeviceCounts = defaults.licensedDeviceCounts;
    	      this.states = defaults.states;
    	      this.status = defaults.status;
    	      this.systemsManager = defaults.systemsManager;
        }

        @CustomType.Setter
        public Builder expirationDate(String expirationDate) {
            if (expirationDate == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "expirationDate");
            }
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder licenseCount(Integer licenseCount) {
            if (licenseCount == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "licenseCount");
            }
            this.licenseCount = licenseCount;
            return this;
        }
        @CustomType.Setter
        public Builder licenseTypes(List<GetLicensesOverviewItemLicenseType> licenseTypes) {
            if (licenseTypes == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "licenseTypes");
            }
            this.licenseTypes = licenseTypes;
            return this;
        }
        public Builder licenseTypes(GetLicensesOverviewItemLicenseType... licenseTypes) {
            return licenseTypes(List.of(licenseTypes));
        }
        @CustomType.Setter
        public Builder licensedDeviceCounts(String licensedDeviceCounts) {
            if (licensedDeviceCounts == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "licensedDeviceCounts");
            }
            this.licensedDeviceCounts = licensedDeviceCounts;
            return this;
        }
        @CustomType.Setter
        public Builder states(GetLicensesOverviewItemStates states) {
            if (states == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "states");
            }
            this.states = states;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder systemsManager(GetLicensesOverviewItemSystemsManager systemsManager) {
            if (systemsManager == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItem", "systemsManager");
            }
            this.systemsManager = systemsManager;
            return this;
        }
        public GetLicensesOverviewItem build() {
            final var _resultValue = new GetLicensesOverviewItem();
            _resultValue.expirationDate = expirationDate;
            _resultValue.licenseCount = licenseCount;
            _resultValue.licenseTypes = licenseTypes;
            _resultValue.licensedDeviceCounts = licensedDeviceCounts;
            _resultValue.states = states;
            _resultValue.status = status;
            _resultValue.systemsManager = systemsManager;
            return _resultValue;
        }
    }
}
