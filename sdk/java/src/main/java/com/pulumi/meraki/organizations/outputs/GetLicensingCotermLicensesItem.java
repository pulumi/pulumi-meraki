// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetLicensingCotermLicensesItemCount;
import com.pulumi.meraki.organizations.outputs.GetLicensingCotermLicensesItemEdition;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLicensingCotermLicensesItem {
    /**
     * @return When the license was claimed into the organization
     * 
     */
    private String claimedAt;
    /**
     * @return The counts of the license by model type
     * 
     */
    private List<GetLicensingCotermLicensesItemCount> counts;
    /**
     * @return The duration (term length) of the license, measured in days
     * 
     */
    private Integer duration;
    /**
     * @return The editions of the license for each relevant product type
     * 
     */
    private List<GetLicensingCotermLicensesItemEdition> editions;
    /**
     * @return Flag to indicate if the license is expired
     * 
     */
    private Boolean expired;
    /**
     * @return Flag to indicated that the license is invalidated
     * 
     */
    private Boolean invalidated;
    /**
     * @return When the license was invalidated. Will be null for active licenses
     * 
     */
    private String invalidatedAt;
    /**
     * @return The key of the license
     * 
     */
    private String key;
    /**
     * @return The operation mode of the license when it was claimed
     * 
     */
    private String mode;
    /**
     * @return The ID of the organization that the license is claimed in
     * 
     */
    private String organizationId;
    /**
     * @return When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    private String startedAt;

    private GetLicensingCotermLicensesItem() {}
    /**
     * @return When the license was claimed into the organization
     * 
     */
    public String claimedAt() {
        return this.claimedAt;
    }
    /**
     * @return The counts of the license by model type
     * 
     */
    public List<GetLicensingCotermLicensesItemCount> counts() {
        return this.counts;
    }
    /**
     * @return The duration (term length) of the license, measured in days
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return The editions of the license for each relevant product type
     * 
     */
    public List<GetLicensingCotermLicensesItemEdition> editions() {
        return this.editions;
    }
    /**
     * @return Flag to indicate if the license is expired
     * 
     */
    public Boolean expired() {
        return this.expired;
    }
    /**
     * @return Flag to indicated that the license is invalidated
     * 
     */
    public Boolean invalidated() {
        return this.invalidated;
    }
    /**
     * @return When the license was invalidated. Will be null for active licenses
     * 
     */
    public String invalidatedAt() {
        return this.invalidatedAt;
    }
    /**
     * @return The key of the license
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return The operation mode of the license when it was claimed
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The ID of the organization that the license is claimed in
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    public String startedAt() {
        return this.startedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensingCotermLicensesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String claimedAt;
        private List<GetLicensingCotermLicensesItemCount> counts;
        private Integer duration;
        private List<GetLicensingCotermLicensesItemEdition> editions;
        private Boolean expired;
        private Boolean invalidated;
        private String invalidatedAt;
        private String key;
        private String mode;
        private String organizationId;
        private String startedAt;
        public Builder() {}
        public Builder(GetLicensingCotermLicensesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.claimedAt = defaults.claimedAt;
    	      this.counts = defaults.counts;
    	      this.duration = defaults.duration;
    	      this.editions = defaults.editions;
    	      this.expired = defaults.expired;
    	      this.invalidated = defaults.invalidated;
    	      this.invalidatedAt = defaults.invalidatedAt;
    	      this.key = defaults.key;
    	      this.mode = defaults.mode;
    	      this.organizationId = defaults.organizationId;
    	      this.startedAt = defaults.startedAt;
        }

        @CustomType.Setter
        public Builder claimedAt(String claimedAt) {
            if (claimedAt == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "claimedAt");
            }
            this.claimedAt = claimedAt;
            return this;
        }
        @CustomType.Setter
        public Builder counts(List<GetLicensingCotermLicensesItemCount> counts) {
            if (counts == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "counts");
            }
            this.counts = counts;
            return this;
        }
        public Builder counts(GetLicensingCotermLicensesItemCount... counts) {
            return counts(List.of(counts));
        }
        @CustomType.Setter
        public Builder duration(Integer duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder editions(List<GetLicensingCotermLicensesItemEdition> editions) {
            if (editions == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "editions");
            }
            this.editions = editions;
            return this;
        }
        public Builder editions(GetLicensingCotermLicensesItemEdition... editions) {
            return editions(List.of(editions));
        }
        @CustomType.Setter
        public Builder expired(Boolean expired) {
            if (expired == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "expired");
            }
            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder invalidated(Boolean invalidated) {
            if (invalidated == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "invalidated");
            }
            this.invalidated = invalidated;
            return this;
        }
        @CustomType.Setter
        public Builder invalidatedAt(String invalidatedAt) {
            if (invalidatedAt == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "invalidatedAt");
            }
            this.invalidatedAt = invalidatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder startedAt(String startedAt) {
            if (startedAt == null) {
              throw new MissingRequiredPropertyException("GetLicensingCotermLicensesItem", "startedAt");
            }
            this.startedAt = startedAt;
            return this;
        }
        public GetLicensingCotermLicensesItem build() {
            final var _resultValue = new GetLicensingCotermLicensesItem();
            _resultValue.claimedAt = claimedAt;
            _resultValue.counts = counts;
            _resultValue.duration = duration;
            _resultValue.editions = editions;
            _resultValue.expired = expired;
            _resultValue.invalidated = invalidated;
            _resultValue.invalidatedAt = invalidatedAt;
            _resultValue.key = key;
            _resultValue.mode = mode;
            _resultValue.organizationId = organizationId;
            _resultValue.startedAt = startedAt;
            return _resultValue;
        }
    }
}
