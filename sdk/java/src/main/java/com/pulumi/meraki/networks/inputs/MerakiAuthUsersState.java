// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.MerakiAuthUsersAuthorizationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MerakiAuthUsersState extends com.pulumi.resources.ResourceArgs {

    public static final MerakiAuthUsersState Empty = new MerakiAuthUsersState();

    /**
     * Authorization type for user.
     * 
     */
    @Import(name="accountType")
    private @Nullable Output<String> accountType;

    /**
     * @return Authorization type for user.
     * 
     */
    public Optional<Output<String>> accountType() {
        return Optional.ofNullable(this.accountType);
    }

    /**
     * User authorization info
     * 
     */
    @Import(name="authorizations")
    private @Nullable Output<List<MerakiAuthUsersAuthorizationArgs>> authorizations;

    /**
     * @return User authorization info
     * 
     */
    public Optional<Output<List<MerakiAuthUsersAuthorizationArgs>>> authorizations() {
        return Optional.ofNullable(this.authorizations);
    }

    /**
     * Creation time of the user
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Creation time of the user
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Email address of the user
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email address of the user
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Whether or not Meraki should email the password to user. Default is false.
     * 
     */
    @Import(name="emailPasswordToUser")
    private @Nullable Output<Boolean> emailPasswordToUser;

    /**
     * @return Whether or not Meraki should email the password to user. Default is false.
     * 
     */
    public Optional<Output<Boolean>> emailPasswordToUser() {
        return Optional.ofNullable(this.emailPasswordToUser);
    }

    /**
     * Whether or not the user is a Dashboard administrator
     * 
     */
    @Import(name="isAdmin")
    private @Nullable Output<Boolean> isAdmin;

    /**
     * @return Whether or not the user is a Dashboard administrator
     * 
     */
    public Optional<Output<Boolean>> isAdmin() {
        return Optional.ofNullable(this.isAdmin);
    }

    /**
     * merakiAuthUserId path parameter. Meraki auth user ID
     * 
     */
    @Import(name="merakiAuthUserId")
    private @Nullable Output<String> merakiAuthUserId;

    /**
     * @return merakiAuthUserId path parameter. Meraki auth user ID
     * 
     */
    public Optional<Output<String>> merakiAuthUserId() {
        return Optional.ofNullable(this.merakiAuthUserId);
    }

    /**
     * Name of the user
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the user
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * The password for this user account. Only required If the user is not a Dashboard administrator.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for this user account. Only required If the user is not a Dashboard administrator.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    private MerakiAuthUsersState() {}

    private MerakiAuthUsersState(MerakiAuthUsersState $) {
        this.accountType = $.accountType;
        this.authorizations = $.authorizations;
        this.createdAt = $.createdAt;
        this.email = $.email;
        this.emailPasswordToUser = $.emailPasswordToUser;
        this.isAdmin = $.isAdmin;
        this.merakiAuthUserId = $.merakiAuthUserId;
        this.name = $.name;
        this.networkId = $.networkId;
        this.password = $.password;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MerakiAuthUsersState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MerakiAuthUsersState $;

        public Builder() {
            $ = new MerakiAuthUsersState();
        }

        public Builder(MerakiAuthUsersState defaults) {
            $ = new MerakiAuthUsersState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountType Authorization type for user.
         * 
         * @return builder
         * 
         */
        public Builder accountType(@Nullable Output<String> accountType) {
            $.accountType = accountType;
            return this;
        }

        /**
         * @param accountType Authorization type for user.
         * 
         * @return builder
         * 
         */
        public Builder accountType(String accountType) {
            return accountType(Output.of(accountType));
        }

        /**
         * @param authorizations User authorization info
         * 
         * @return builder
         * 
         */
        public Builder authorizations(@Nullable Output<List<MerakiAuthUsersAuthorizationArgs>> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        /**
         * @param authorizations User authorization info
         * 
         * @return builder
         * 
         */
        public Builder authorizations(List<MerakiAuthUsersAuthorizationArgs> authorizations) {
            return authorizations(Output.of(authorizations));
        }

        /**
         * @param authorizations User authorization info
         * 
         * @return builder
         * 
         */
        public Builder authorizations(MerakiAuthUsersAuthorizationArgs... authorizations) {
            return authorizations(List.of(authorizations));
        }

        /**
         * @param createdAt Creation time of the user
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Creation time of the user
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param email Email address of the user
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the user
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param emailPasswordToUser Whether or not Meraki should email the password to user. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder emailPasswordToUser(@Nullable Output<Boolean> emailPasswordToUser) {
            $.emailPasswordToUser = emailPasswordToUser;
            return this;
        }

        /**
         * @param emailPasswordToUser Whether or not Meraki should email the password to user. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder emailPasswordToUser(Boolean emailPasswordToUser) {
            return emailPasswordToUser(Output.of(emailPasswordToUser));
        }

        /**
         * @param isAdmin Whether or not the user is a Dashboard administrator
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(@Nullable Output<Boolean> isAdmin) {
            $.isAdmin = isAdmin;
            return this;
        }

        /**
         * @param isAdmin Whether or not the user is a Dashboard administrator
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(Boolean isAdmin) {
            return isAdmin(Output.of(isAdmin));
        }

        /**
         * @param merakiAuthUserId merakiAuthUserId path parameter. Meraki auth user ID
         * 
         * @return builder
         * 
         */
        public Builder merakiAuthUserId(@Nullable Output<String> merakiAuthUserId) {
            $.merakiAuthUserId = merakiAuthUserId;
            return this;
        }

        /**
         * @param merakiAuthUserId merakiAuthUserId path parameter. Meraki auth user ID
         * 
         * @return builder
         * 
         */
        public Builder merakiAuthUserId(String merakiAuthUserId) {
            return merakiAuthUserId(Output.of(merakiAuthUserId));
        }

        /**
         * @param name Name of the user
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the user
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param password The password for this user account. Only required If the user is not a Dashboard administrator.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for this user account. Only required If the user is not a Dashboard administrator.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        public MerakiAuthUsersState build() {
            return $;
        }
    }

}
