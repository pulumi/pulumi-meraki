// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.devices.inputs.LiveToolsCableCallbackArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsCableRequestArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsCableResultArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveToolsCableState extends com.pulumi.resources.ResourceArgs {

    public static final LiveToolsCableState Empty = new LiveToolsCableState();

    /**
     * Id of the cable test request. Used to check the status of the request.
     * 
     */
    @Import(name="cableTestId")
    private @Nullable Output<String> cableTestId;

    /**
     * @return Id of the cable test request. Used to check the status of the request.
     * 
     */
    public Optional<Output<String>> cableTestId() {
        return Optional.ofNullable(this.cableTestId);
    }

    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    @Import(name="callback")
    private @Nullable Output<LiveToolsCableCallbackArgs> callback;

    /**
     * @return Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    public Optional<Output<LiveToolsCableCallbackArgs>> callback() {
        return Optional.ofNullable(this.callback);
    }

    /**
     * An error message for a failed execution
     * 
     */
    @Import(name="error")
    private @Nullable Output<String> error;

    /**
     * @return An error message for a failed execution
     * 
     */
    public Optional<Output<String>> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * A list of ports for which to perform the cable test.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return A list of ports for which to perform the cable test.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Cable test request parameters
     * 
     */
    @Import(name="request")
    private @Nullable Output<LiveToolsCableRequestArgs> request;

    /**
     * @return Cable test request parameters
     * 
     */
    public Optional<Output<LiveToolsCableRequestArgs>> request() {
        return Optional.ofNullable(this.request);
    }

    /**
     * Results of the cable test request, one for each requested port.
     * 
     */
    @Import(name="results")
    private @Nullable Output<List<LiveToolsCableResultArgs>> results;

    /**
     * @return Results of the cable test request, one for each requested port.
     * 
     */
    public Optional<Output<List<LiveToolsCableResultArgs>>> results() {
        return Optional.ofNullable(this.results);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * Status of the cable test request.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the cable test request.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * GET this url to check the status of your cable test request.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return GET this url to check the status of your cable test request.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private LiveToolsCableState() {}

    private LiveToolsCableState(LiveToolsCableState $) {
        this.cableTestId = $.cableTestId;
        this.callback = $.callback;
        this.error = $.error;
        this.ports = $.ports;
        this.request = $.request;
        this.results = $.results;
        this.serial = $.serial;
        this.status = $.status;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveToolsCableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveToolsCableState $;

        public Builder() {
            $ = new LiveToolsCableState();
        }

        public Builder(LiveToolsCableState defaults) {
            $ = new LiveToolsCableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cableTestId Id of the cable test request. Used to check the status of the request.
         * 
         * @return builder
         * 
         */
        public Builder cableTestId(@Nullable Output<String> cableTestId) {
            $.cableTestId = cableTestId;
            return this;
        }

        /**
         * @param cableTestId Id of the cable test request. Used to check the status of the request.
         * 
         * @return builder
         * 
         */
        public Builder cableTestId(String cableTestId) {
            return cableTestId(Output.of(cableTestId));
        }

        /**
         * @param callback Details for the callback. Please include either an httpServerId OR url and sharedSecret
         * 
         * @return builder
         * 
         */
        public Builder callback(@Nullable Output<LiveToolsCableCallbackArgs> callback) {
            $.callback = callback;
            return this;
        }

        /**
         * @param callback Details for the callback. Please include either an httpServerId OR url and sharedSecret
         * 
         * @return builder
         * 
         */
        public Builder callback(LiveToolsCableCallbackArgs callback) {
            return callback(Output.of(callback));
        }

        /**
         * @param error An error message for a failed execution
         * 
         * @return builder
         * 
         */
        public Builder error(@Nullable Output<String> error) {
            $.error = error;
            return this;
        }

        /**
         * @param error An error message for a failed execution
         * 
         * @return builder
         * 
         */
        public Builder error(String error) {
            return error(Output.of(error));
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param request Cable test request parameters
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<LiveToolsCableRequestArgs> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request Cable test request parameters
         * 
         * @return builder
         * 
         */
        public Builder request(LiveToolsCableRequestArgs request) {
            return request(Output.of(request));
        }

        /**
         * @param results Results of the cable test request, one for each requested port.
         * 
         * @return builder
         * 
         */
        public Builder results(@Nullable Output<List<LiveToolsCableResultArgs>> results) {
            $.results = results;
            return this;
        }

        /**
         * @param results Results of the cable test request, one for each requested port.
         * 
         * @return builder
         * 
         */
        public Builder results(List<LiveToolsCableResultArgs> results) {
            return results(Output.of(results));
        }

        /**
         * @param results Results of the cable test request, one for each requested port.
         * 
         * @return builder
         * 
         */
        public Builder results(LiveToolsCableResultArgs... results) {
            return results(List.of(results));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param status Status of the cable test request.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the cable test request.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url GET this url to check the status of your cable test request.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url GET this url to check the status of your cable test request.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public LiveToolsCableState build() {
            return $;
        }
    }

}
