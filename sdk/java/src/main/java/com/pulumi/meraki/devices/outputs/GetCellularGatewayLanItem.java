// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.outputs.GetCellularGatewayLanItemFixedIpAssignment;
import com.pulumi.meraki.devices.outputs.GetCellularGatewayLanItemReservedIpRange;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCellularGatewayLanItem {
    /**
     * @return Lan IP of the MG
     * 
     */
    private String deviceLanIp;
    /**
     * @return Name of the MG.
     * 
     */
    private String deviceName;
    /**
     * @return Subnet configuration of the MG.
     * 
     */
    private String deviceSubnet;
    /**
     * @return list of all fixed IP assignments for a single MG
     * 
     */
    private List<GetCellularGatewayLanItemFixedIpAssignment> fixedIpAssignments;
    /**
     * @return list of all reserved IP ranges for a single MG
     * 
     */
    private List<GetCellularGatewayLanItemReservedIpRange> reservedIpRanges;

    private GetCellularGatewayLanItem() {}
    /**
     * @return Lan IP of the MG
     * 
     */
    public String deviceLanIp() {
        return this.deviceLanIp;
    }
    /**
     * @return Name of the MG.
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }
    /**
     * @return Subnet configuration of the MG.
     * 
     */
    public String deviceSubnet() {
        return this.deviceSubnet;
    }
    /**
     * @return list of all fixed IP assignments for a single MG
     * 
     */
    public List<GetCellularGatewayLanItemFixedIpAssignment> fixedIpAssignments() {
        return this.fixedIpAssignments;
    }
    /**
     * @return list of all reserved IP ranges for a single MG
     * 
     */
    public List<GetCellularGatewayLanItemReservedIpRange> reservedIpRanges() {
        return this.reservedIpRanges;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCellularGatewayLanItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deviceLanIp;
        private String deviceName;
        private String deviceSubnet;
        private List<GetCellularGatewayLanItemFixedIpAssignment> fixedIpAssignments;
        private List<GetCellularGatewayLanItemReservedIpRange> reservedIpRanges;
        public Builder() {}
        public Builder(GetCellularGatewayLanItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceLanIp = defaults.deviceLanIp;
    	      this.deviceName = defaults.deviceName;
    	      this.deviceSubnet = defaults.deviceSubnet;
    	      this.fixedIpAssignments = defaults.fixedIpAssignments;
    	      this.reservedIpRanges = defaults.reservedIpRanges;
        }

        @CustomType.Setter
        public Builder deviceLanIp(String deviceLanIp) {
            if (deviceLanIp == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayLanItem", "deviceLanIp");
            }
            this.deviceLanIp = deviceLanIp;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(String deviceName) {
            if (deviceName == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayLanItem", "deviceName");
            }
            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSubnet(String deviceSubnet) {
            if (deviceSubnet == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayLanItem", "deviceSubnet");
            }
            this.deviceSubnet = deviceSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder fixedIpAssignments(List<GetCellularGatewayLanItemFixedIpAssignment> fixedIpAssignments) {
            if (fixedIpAssignments == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayLanItem", "fixedIpAssignments");
            }
            this.fixedIpAssignments = fixedIpAssignments;
            return this;
        }
        public Builder fixedIpAssignments(GetCellularGatewayLanItemFixedIpAssignment... fixedIpAssignments) {
            return fixedIpAssignments(List.of(fixedIpAssignments));
        }
        @CustomType.Setter
        public Builder reservedIpRanges(List<GetCellularGatewayLanItemReservedIpRange> reservedIpRanges) {
            if (reservedIpRanges == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayLanItem", "reservedIpRanges");
            }
            this.reservedIpRanges = reservedIpRanges;
            return this;
        }
        public Builder reservedIpRanges(GetCellularGatewayLanItemReservedIpRange... reservedIpRanges) {
            return reservedIpRanges(List.of(reservedIpRanges));
        }
        public GetCellularGatewayLanItem build() {
            final var _resultValue = new GetCellularGatewayLanItem();
            _resultValue.deviceLanIp = deviceLanIp;
            _resultValue.deviceName = deviceName;
            _resultValue.deviceSubnet = deviceSubnet;
            _resultValue.fixedIpAssignments = fixedIpAssignments;
            _resultValue.reservedIpRanges = reservedIpRanges;
            return _resultValue;
        }
    }
}
