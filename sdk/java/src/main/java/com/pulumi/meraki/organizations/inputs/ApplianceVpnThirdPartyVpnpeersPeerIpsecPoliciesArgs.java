// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs Empty = new ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs();

    /**
     * This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    @Import(name="childAuthAlgos")
    private @Nullable Output<List<String>> childAuthAlgos;

    /**
     * @return This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public Optional<Output<List<String>>> childAuthAlgos() {
        return Optional.ofNullable(this.childAuthAlgos);
    }

    /**
     * This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    @Import(name="childCipherAlgos")
    private @Nullable Output<List<String>> childCipherAlgos;

    /**
     * @return This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    public Optional<Output<List<String>>> childCipherAlgos() {
        return Optional.ofNullable(this.childCipherAlgos);
    }

    /**
     * The lifetime of the Phase 2 SA in seconds.
     * 
     */
    @Import(name="childLifetime")
    private @Nullable Output<Integer> childLifetime;

    /**
     * @return The lifetime of the Phase 2 SA in seconds.
     * 
     */
    public Optional<Output<Integer>> childLifetime() {
        return Optional.ofNullable(this.childLifetime);
    }

    /**
     * This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    @Import(name="childPfsGroups")
    private @Nullable Output<List<String>> childPfsGroups;

    /**
     * @return This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public Optional<Output<List<String>>> childPfsGroups() {
        return Optional.ofNullable(this.childPfsGroups);
    }

    /**
     * This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    @Import(name="ikeAuthAlgos")
    private @Nullable Output<List<String>> ikeAuthAlgos;

    /**
     * @return This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public Optional<Output<List<String>>> ikeAuthAlgos() {
        return Optional.ofNullable(this.ikeAuthAlgos);
    }

    /**
     * This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    @Import(name="ikeCipherAlgos")
    private @Nullable Output<List<String>> ikeCipherAlgos;

    /**
     * @return This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    public Optional<Output<List<String>>> ikeCipherAlgos() {
        return Optional.ofNullable(this.ikeCipherAlgos);
    }

    /**
     * This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    @Import(name="ikeDiffieHellmanGroups")
    private @Nullable Output<List<String>> ikeDiffieHellmanGroups;

    /**
     * @return This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public Optional<Output<List<String>>> ikeDiffieHellmanGroups() {
        return Optional.ofNullable(this.ikeDiffieHellmanGroups);
    }

    /**
     * The lifetime of the Phase 1 SA in seconds.
     * 
     */
    @Import(name="ikeLifetime")
    private @Nullable Output<Integer> ikeLifetime;

    /**
     * @return The lifetime of the Phase 1 SA in seconds.
     * 
     */
    public Optional<Output<Integer>> ikeLifetime() {
        return Optional.ofNullable(this.ikeLifetime);
    }

    /**
     * [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    @Import(name="ikePrfAlgos")
    private @Nullable Output<List<String>> ikePrfAlgos;

    /**
     * @return [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    public Optional<Output<List<String>>> ikePrfAlgos() {
        return Optional.ofNullable(this.ikePrfAlgos);
    }

    private ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs() {}

    private ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs(ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs $) {
        this.childAuthAlgos = $.childAuthAlgos;
        this.childCipherAlgos = $.childCipherAlgos;
        this.childLifetime = $.childLifetime;
        this.childPfsGroups = $.childPfsGroups;
        this.ikeAuthAlgos = $.ikeAuthAlgos;
        this.ikeCipherAlgos = $.ikeCipherAlgos;
        this.ikeDiffieHellmanGroups = $.ikeDiffieHellmanGroups;
        this.ikeLifetime = $.ikeLifetime;
        this.ikePrfAlgos = $.ikePrfAlgos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs $;

        public Builder() {
            $ = new ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs();
        }

        public Builder(ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs defaults) {
            $ = new ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childAuthAlgos This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder childAuthAlgos(@Nullable Output<List<String>> childAuthAlgos) {
            $.childAuthAlgos = childAuthAlgos;
            return this;
        }

        /**
         * @param childAuthAlgos This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder childAuthAlgos(List<String> childAuthAlgos) {
            return childAuthAlgos(Output.of(childAuthAlgos));
        }

        /**
         * @param childAuthAlgos This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder childAuthAlgos(String... childAuthAlgos) {
            return childAuthAlgos(List.of(childAuthAlgos));
        }

        /**
         * @param childCipherAlgos This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
         * 
         * @return builder
         * 
         */
        public Builder childCipherAlgos(@Nullable Output<List<String>> childCipherAlgos) {
            $.childCipherAlgos = childCipherAlgos;
            return this;
        }

        /**
         * @param childCipherAlgos This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
         * 
         * @return builder
         * 
         */
        public Builder childCipherAlgos(List<String> childCipherAlgos) {
            return childCipherAlgos(Output.of(childCipherAlgos));
        }

        /**
         * @param childCipherAlgos This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
         * 
         * @return builder
         * 
         */
        public Builder childCipherAlgos(String... childCipherAlgos) {
            return childCipherAlgos(List.of(childCipherAlgos));
        }

        /**
         * @param childLifetime The lifetime of the Phase 2 SA in seconds.
         * 
         * @return builder
         * 
         */
        public Builder childLifetime(@Nullable Output<Integer> childLifetime) {
            $.childLifetime = childLifetime;
            return this;
        }

        /**
         * @param childLifetime The lifetime of the Phase 2 SA in seconds.
         * 
         * @return builder
         * 
         */
        public Builder childLifetime(Integer childLifetime) {
            return childLifetime(Output.of(childLifetime));
        }

        /**
         * @param childPfsGroups This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder childPfsGroups(@Nullable Output<List<String>> childPfsGroups) {
            $.childPfsGroups = childPfsGroups;
            return this;
        }

        /**
         * @param childPfsGroups This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder childPfsGroups(List<String> childPfsGroups) {
            return childPfsGroups(Output.of(childPfsGroups));
        }

        /**
         * @param childPfsGroups This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder childPfsGroups(String... childPfsGroups) {
            return childPfsGroups(List.of(childPfsGroups));
        }

        /**
         * @param ikeAuthAlgos This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeAuthAlgos(@Nullable Output<List<String>> ikeAuthAlgos) {
            $.ikeAuthAlgos = ikeAuthAlgos;
            return this;
        }

        /**
         * @param ikeAuthAlgos This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeAuthAlgos(List<String> ikeAuthAlgos) {
            return ikeAuthAlgos(Output.of(ikeAuthAlgos));
        }

        /**
         * @param ikeAuthAlgos This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeAuthAlgos(String... ikeAuthAlgos) {
            return ikeAuthAlgos(List.of(ikeAuthAlgos));
        }

        /**
         * @param ikeCipherAlgos This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeCipherAlgos(@Nullable Output<List<String>> ikeCipherAlgos) {
            $.ikeCipherAlgos = ikeCipherAlgos;
            return this;
        }

        /**
         * @param ikeCipherAlgos This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeCipherAlgos(List<String> ikeCipherAlgos) {
            return ikeCipherAlgos(Output.of(ikeCipherAlgos));
        }

        /**
         * @param ikeCipherAlgos This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeCipherAlgos(String... ikeCipherAlgos) {
            return ikeCipherAlgos(List.of(ikeCipherAlgos));
        }

        /**
         * @param ikeDiffieHellmanGroups This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroups(@Nullable Output<List<String>> ikeDiffieHellmanGroups) {
            $.ikeDiffieHellmanGroups = ikeDiffieHellmanGroups;
            return this;
        }

        /**
         * @param ikeDiffieHellmanGroups This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroups(List<String> ikeDiffieHellmanGroups) {
            return ikeDiffieHellmanGroups(Output.of(ikeDiffieHellmanGroups));
        }

        /**
         * @param ikeDiffieHellmanGroups This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroups(String... ikeDiffieHellmanGroups) {
            return ikeDiffieHellmanGroups(List.of(ikeDiffieHellmanGroups));
        }

        /**
         * @param ikeLifetime The lifetime of the Phase 1 SA in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ikeLifetime(@Nullable Output<Integer> ikeLifetime) {
            $.ikeLifetime = ikeLifetime;
            return this;
        }

        /**
         * @param ikeLifetime The lifetime of the Phase 1 SA in seconds.
         * 
         * @return builder
         * 
         */
        public Builder ikeLifetime(Integer ikeLifetime) {
            return ikeLifetime(Output.of(ikeLifetime));
        }

        /**
         * @param ikePrfAlgos [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
         * 
         * @return builder
         * 
         */
        public Builder ikePrfAlgos(@Nullable Output<List<String>> ikePrfAlgos) {
            $.ikePrfAlgos = ikePrfAlgos;
            return this;
        }

        /**
         * @param ikePrfAlgos [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
         * 
         * @return builder
         * 
         */
        public Builder ikePrfAlgos(List<String> ikePrfAlgos) {
            return ikePrfAlgos(Output.of(ikePrfAlgos));
        }

        /**
         * @param ikePrfAlgos [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
         * 
         * @return builder
         * 
         */
        public Builder ikePrfAlgos(String... ikePrfAlgos) {
            return ikePrfAlgos(List.of(ikePrfAlgos));
        }

        public ApplianceVpnThirdPartyVpnpeersPeerIpsecPoliciesArgs build() {
            return $;
        }
    }

}
