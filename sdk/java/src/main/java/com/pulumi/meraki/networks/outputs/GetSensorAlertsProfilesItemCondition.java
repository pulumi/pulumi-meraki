// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThreshold;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensorAlertsProfilesItemCondition {
    /**
     * @return If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
     * 
     */
    private String direction;
    /**
     * @return Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
     * 
     */
    private Integer duration;
    /**
     * @return The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
     * 
     */
    private String metric;
    /**
     * @return Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThreshold threshold;

    private GetSensorAlertsProfilesItemCondition() {}
    /**
     * @return If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThreshold threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorAlertsProfilesItemCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String direction;
        private Integer duration;
        private String metric;
        private GetSensorAlertsProfilesItemConditionThreshold threshold;
        public Builder() {}
        public Builder(GetSensorAlertsProfilesItemCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.duration = defaults.duration;
    	      this.metric = defaults.metric;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemCondition", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder duration(Integer duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemCondition", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemCondition", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(GetSensorAlertsProfilesItemConditionThreshold threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemCondition", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetSensorAlertsProfilesItemCondition build() {
            final var _resultValue = new GetSensorAlertsProfilesItemCondition();
            _resultValue.direction = direction;
            _resultValue.duration = duration;
            _resultValue.metric = metric;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
