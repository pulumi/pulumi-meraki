// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchWarmSpareState extends com.pulumi.resources.ResourceArgs {

    public static final SwitchWarmSpareState Empty = new SwitchWarmSpareState();

    /**
     * Enable or disable warm spare for a switch
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable or disable warm spare for a switch
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Serial number of the primary switch
     * 
     */
    @Import(name="primarySerial")
    private @Nullable Output<String> primarySerial;

    /**
     * @return Serial number of the primary switch
     * 
     */
    public Optional<Output<String>> primarySerial() {
        return Optional.ofNullable(this.primarySerial);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * Serial number of the warm spare switch
     * 
     */
    @Import(name="spareSerial")
    private @Nullable Output<String> spareSerial;

    /**
     * @return Serial number of the warm spare switch
     * 
     */
    public Optional<Output<String>> spareSerial() {
        return Optional.ofNullable(this.spareSerial);
    }

    private SwitchWarmSpareState() {}

    private SwitchWarmSpareState(SwitchWarmSpareState $) {
        this.enabled = $.enabled;
        this.primarySerial = $.primarySerial;
        this.serial = $.serial;
        this.spareSerial = $.spareSerial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchWarmSpareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchWarmSpareState $;

        public Builder() {
            $ = new SwitchWarmSpareState();
        }

        public Builder(SwitchWarmSpareState defaults) {
            $ = new SwitchWarmSpareState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable or disable warm spare for a switch
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable or disable warm spare for a switch
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param primarySerial Serial number of the primary switch
         * 
         * @return builder
         * 
         */
        public Builder primarySerial(@Nullable Output<String> primarySerial) {
            $.primarySerial = primarySerial;
            return this;
        }

        /**
         * @param primarySerial Serial number of the primary switch
         * 
         * @return builder
         * 
         */
        public Builder primarySerial(String primarySerial) {
            return primarySerial(Output.of(primarySerial));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param spareSerial Serial number of the warm spare switch
         * 
         * @return builder
         * 
         */
        public Builder spareSerial(@Nullable Output<String> spareSerial) {
            $.spareSerial = spareSerial;
            return this;
        }

        /**
         * @param spareSerial Serial number of the warm spare switch
         * 
         * @return builder
         * 
         */
        public Builder spareSerial(String spareSerial) {
            return spareSerial(Output.of(spareSerial));
        }

        public SwitchWarmSpareState build() {
            return $;
        }
    }

}
