// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsOverviewByMetricItemCounts;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensorAlertsOverviewByMetricItem {
    /**
     * @return Counts of sensor alerts over the timespan, by reading metric
     * 
     */
    private GetSensorAlertsOverviewByMetricItemCounts counts;
    /**
     * @return End of the timespan over which sensor alerts are counted
     * 
     */
    private String endTs;
    /**
     * @return Start of the timespan over which sensor alerts are counted
     * 
     */
    private String startTs;

    private GetSensorAlertsOverviewByMetricItem() {}
    /**
     * @return Counts of sensor alerts over the timespan, by reading metric
     * 
     */
    public GetSensorAlertsOverviewByMetricItemCounts counts() {
        return this.counts;
    }
    /**
     * @return End of the timespan over which sensor alerts are counted
     * 
     */
    public String endTs() {
        return this.endTs;
    }
    /**
     * @return Start of the timespan over which sensor alerts are counted
     * 
     */
    public String startTs() {
        return this.startTs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorAlertsOverviewByMetricItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorAlertsOverviewByMetricItemCounts counts;
        private String endTs;
        private String startTs;
        public Builder() {}
        public Builder(GetSensorAlertsOverviewByMetricItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counts = defaults.counts;
    	      this.endTs = defaults.endTs;
    	      this.startTs = defaults.startTs;
        }

        @CustomType.Setter
        public Builder counts(GetSensorAlertsOverviewByMetricItemCounts counts) {
            if (counts == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsOverviewByMetricItem", "counts");
            }
            this.counts = counts;
            return this;
        }
        @CustomType.Setter
        public Builder endTs(String endTs) {
            if (endTs == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsOverviewByMetricItem", "endTs");
            }
            this.endTs = endTs;
            return this;
        }
        @CustomType.Setter
        public Builder startTs(String startTs) {
            if (startTs == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsOverviewByMetricItem", "startTs");
            }
            this.startTs = startTs;
            return this;
        }
        public GetSensorAlertsOverviewByMetricItem build() {
            final var _resultValue = new GetSensorAlertsOverviewByMetricItem();
            _resultValue.counts = counts;
            _resultValue.endTs = endTs;
            _resultValue.startTs = startTs;
            return _resultValue;
        }
    }
}
