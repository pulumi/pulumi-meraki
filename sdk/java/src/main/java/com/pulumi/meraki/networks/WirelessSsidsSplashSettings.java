// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.networks.WirelessSsidsSplashSettingsArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsState;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsBilling;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsGuestSponsorship;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsSelfRegistration;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsSentryEnrollment;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsSplashImage;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsSplashLogo;
import com.pulumi.meraki.networks.outputs.WirelessSsidsSplashSettingsSplashPrepaidFront;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.networks.WirelessSsidsSplashSettings;
 * import com.pulumi.meraki.networks.WirelessSsidsSplashSettingsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsBillingArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsGuestSponsorshipArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSentryEnrollmentArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashImageArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashImageImageArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashLogoArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashLogoImageArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new WirelessSsidsSplashSettings(&#34;example&#34;, WirelessSsidsSplashSettingsArgs.builder()        
 *             .allowSimultaneousLogins(false)
 *             .billing(WirelessSsidsSplashSettingsBillingArgs.builder()
 *                 .free_access(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .prepaid_access_fast_login_enabled(true)
 *                 .reply_to_email_address(&#34;user@email.com&#34;)
 *                 .build())
 *             .blockAllTrafficBeforeSignOn(false)
 *             .controllerDisconnectionBehavior(&#34;default&#34;)
 *             .guestSponsorship(WirelessSsidsSplashSettingsGuestSponsorshipArgs.builder()
 *                 .duration_in_minutes(30)
 *                 .guest_can_request_timeframe(false)
 *                 .build())
 *             .networkId(&#34;string&#34;)
 *             .number(&#34;string&#34;)
 *             .redirectUrl(&#34;https://example.com&#34;)
 *             .sentryEnrollment(WirelessSsidsSplashSettingsSentryEnrollmentArgs.builder()
 *                 .enforced_systems(&#34;iOS&#34;)
 *                 .strength(&#34;focused&#34;)
 *                 .systems_manager_network(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .build())
 *             .splashImage(WirelessSsidsSplashSettingsSplashImageArgs.builder()
 *                 .extension(&#34;jpg&#34;)
 *                 .image(WirelessSsidsSplashSettingsSplashImageImageArgs.builder()
 *                     .contents(&#34;Q2lzY28gTWVyYWtp&#34;)
 *                     .format(&#34;jpg&#34;)
 *                     .build())
 *                 .md5(&#34;542cccac8d7dedee0f185311d154d194&#34;)
 *                 .build())
 *             .splashLogo(WirelessSsidsSplashSettingsSplashLogoArgs.builder()
 *                 .extension(&#34;jpg&#34;)
 *                 .image(WirelessSsidsSplashSettingsSplashLogoImageArgs.builder()
 *                     .contents(&#34;Q2lzY28gTWVyYWtp&#34;)
 *                     .format(&#34;jpg&#34;)
 *                     .build())
 *                 .md5(&#34;abcd1234&#34;)
 *                 .build())
 *             .splashPrepaidFront(WirelessSsidsSplashSettingsSplashPrepaidFrontArgs.builder()
 *                 .extension(&#34;jpg&#34;)
 *                 .image(WirelessSsidsSplashSettingsSplashPrepaidFrontImageArgs.builder()
 *                     .contents(&#34;Q2lzY28gTWVyYWtp&#34;)
 *                     .format(&#34;jpg&#34;)
 *                     .build())
 *                 .md5(&#34;542cccac8d7dedee0f185311d154d194&#34;)
 *                 .build())
 *             .splashTimeout(1440)
 *             .splashUrl(&#34;https://www.custom_splash_url.com&#34;)
 *             .themeId(&#34;c3ddcb4f16785ee747ab5ffc10867d6c8ea704be&#34;)
 *             .useRedirectUrl(true)
 *             .useSplashUrl(true)
 *             .welcomeMessage(&#34;Welcome!&#34;)
 *             .build());
 * 
 *         ctx.export(&#34;merakiNetworksWirelessSsidsSplashSettingsExample&#34;, example);
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings example &#34;network_id,number&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings")
public class WirelessSsidsSplashSettings extends com.pulumi.resources.CustomResource {
    /**
     * Whether or not to allow simultaneous logins from different devices.
     * 
     */
    @Export(name="allowSimultaneousLogins", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> allowSimultaneousLogins;

    /**
     * @return Whether or not to allow simultaneous logins from different devices.
     * 
     */
    public Output<Boolean> allowSimultaneousLogins() {
        return this.allowSimultaneousLogins;
    }
    /**
     * Details associated with billing splash
     * 
     */
    @Export(name="billing", refs={WirelessSsidsSplashSettingsBilling.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsBilling> billing;

    /**
     * @return Details associated with billing splash
     * 
     */
    public Output<WirelessSsidsSplashSettingsBilling> billing() {
        return this.billing;
    }
    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    @Export(name="blockAllTrafficBeforeSignOn", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> blockAllTrafficBeforeSignOn;

    /**
     * @return How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    public Output<Boolean> blockAllTrafficBeforeSignOn() {
        return this.blockAllTrafficBeforeSignOn;
    }
    /**
     * How login attempts should be handled when the controller is unreachable.
     * 
     */
    @Export(name="controllerDisconnectionBehavior", refs={String.class}, tree="[0]")
    private Output<String> controllerDisconnectionBehavior;

    /**
     * @return How login attempts should be handled when the controller is unreachable.
     * 
     */
    public Output<String> controllerDisconnectionBehavior() {
        return this.controllerDisconnectionBehavior;
    }
    /**
     * Details associated with guest sponsored splash
     * 
     */
    @Export(name="guestSponsorship", refs={WirelessSsidsSplashSettingsGuestSponsorship.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsGuestSponsorship> guestSponsorship;

    /**
     * @return Details associated with guest sponsored splash
     * 
     */
    public Output<WirelessSsidsSplashSettingsGuestSponsorship> guestSponsorship() {
        return this.guestSponsorship;
    }
    /**
     * networkId path parameter. Network ID
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * number path parameter.
     * 
     */
    @Export(name="number", refs={String.class}, tree="[0]")
    private Output<String> number;

    /**
     * @return number path parameter.
     * 
     */
    public Output<String> number() {
        return this.number;
    }
    /**
     * The custom redirect URL where the users will go after the splash page.
     * 
     */
    @Export(name="redirectUrl", refs={String.class}, tree="[0]")
    private Output<String> redirectUrl;

    /**
     * @return The custom redirect URL where the users will go after the splash page.
     * 
     */
    public Output<String> redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * Self-registration for splash with Meraki authentication.
     * 
     */
    @Export(name="selfRegistration", refs={WirelessSsidsSplashSettingsSelfRegistration.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsSelfRegistration> selfRegistration;

    /**
     * @return Self-registration for splash with Meraki authentication.
     * 
     */
    public Output<WirelessSsidsSplashSettingsSelfRegistration> selfRegistration() {
        return this.selfRegistration;
    }
    /**
     * Systems Manager sentry enrollment splash settings.
     * 
     */
    @Export(name="sentryEnrollment", refs={WirelessSsidsSplashSettingsSentryEnrollment.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsSentryEnrollment> sentryEnrollment;

    /**
     * @return Systems Manager sentry enrollment splash settings.
     * 
     */
    public Output<WirelessSsidsSplashSettingsSentryEnrollment> sentryEnrollment() {
        return this.sentryEnrollment;
    }
    /**
     * The image used in the splash page.
     * 
     */
    @Export(name="splashImage", refs={WirelessSsidsSplashSettingsSplashImage.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsSplashImage> splashImage;

    /**
     * @return The image used in the splash page.
     * 
     */
    public Output<WirelessSsidsSplashSettingsSplashImage> splashImage() {
        return this.splashImage;
    }
    /**
     * The logo used in the splash page.
     * 
     */
    @Export(name="splashLogo", refs={WirelessSsidsSplashSettingsSplashLogo.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsSplashLogo> splashLogo;

    /**
     * @return The logo used in the splash page.
     * 
     */
    public Output<WirelessSsidsSplashSettingsSplashLogo> splashLogo() {
        return this.splashLogo;
    }
    /**
     * The type of splash page for this SSID
     * 
     */
    @Export(name="splashPage", refs={String.class}, tree="[0]")
    private Output<String> splashPage;

    /**
     * @return The type of splash page for this SSID
     * 
     */
    public Output<String> splashPage() {
        return this.splashPage;
    }
    /**
     * The prepaid front image used in the splash page.
     * 
     */
    @Export(name="splashPrepaidFront", refs={WirelessSsidsSplashSettingsSplashPrepaidFront.class}, tree="[0]")
    private Output<WirelessSsidsSplashSettingsSplashPrepaidFront> splashPrepaidFront;

    /**
     * @return The prepaid front image used in the splash page.
     * 
     */
    public Output<WirelessSsidsSplashSettingsSplashPrepaidFront> splashPrepaidFront() {
        return this.splashPrepaidFront;
    }
    /**
     * Splash timeout in minutes.
     * 
     */
    @Export(name="splashTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> splashTimeout;

    /**
     * @return Splash timeout in minutes.
     * 
     */
    public Output<Integer> splashTimeout() {
        return this.splashTimeout;
    }
    /**
     * The custom splash URL of the click-through splash page.
     * 
     */
    @Export(name="splashUrl", refs={String.class}, tree="[0]")
    private Output<String> splashUrl;

    /**
     * @return The custom splash URL of the click-through splash page.
     * 
     */
    public Output<String> splashUrl() {
        return this.splashUrl;
    }
    /**
     * SSID number
     * 
     */
    @Export(name="ssidNumber", refs={Integer.class}, tree="[0]")
    private Output<Integer> ssidNumber;

    /**
     * @return SSID number
     * 
     */
    public Output<Integer> ssidNumber() {
        return this.ssidNumber;
    }
    /**
     * The id of the selected splash theme.
     * 
     */
    @Export(name="themeId", refs={String.class}, tree="[0]")
    private Output<String> themeId;

    /**
     * @return The id of the selected splash theme.
     * 
     */
    public Output<String> themeId() {
        return this.themeId;
    }
    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    @Export(name="useRedirectUrl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> useRedirectUrl;

    /**
     * @return The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    public Output<Boolean> useRedirectUrl() {
        return this.useRedirectUrl;
    }
    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    @Export(name="useSplashUrl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> useSplashUrl;

    /**
     * @return Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    public Output<Boolean> useSplashUrl() {
        return this.useSplashUrl;
    }
    /**
     * The welcome message for the users on the splash page.
     * 
     */
    @Export(name="welcomeMessage", refs={String.class}, tree="[0]")
    private Output<String> welcomeMessage;

    /**
     * @return The welcome message for the users on the splash page.
     * 
     */
    public Output<String> welcomeMessage() {
        return this.welcomeMessage;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WirelessSsidsSplashSettings(String name) {
        this(name, WirelessSsidsSplashSettingsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WirelessSsidsSplashSettings(String name, WirelessSsidsSplashSettingsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WirelessSsidsSplashSettings(String name, WirelessSsidsSplashSettingsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, args == null ? WirelessSsidsSplashSettingsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private WirelessSsidsSplashSettings(String name, Output<String> id, @Nullable WirelessSsidsSplashSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WirelessSsidsSplashSettings get(String name, Output<String> id, @Nullable WirelessSsidsSplashSettingsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WirelessSsidsSplashSettings(name, id, state, options);
    }
}
