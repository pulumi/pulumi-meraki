// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.devices.LiveToolsArpTableArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsArpTableState;
import com.pulumi.meraki.devices.outputs.LiveToolsArpTableCallback;
import com.pulumi.meraki.devices.outputs.LiveToolsArpTableEntry;
import com.pulumi.meraki.devices.outputs.LiveToolsArpTableRequest;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.devices.LiveToolsArpTable;
 * import com.pulumi.meraki.devices.LiveToolsArpTableArgs;
 * import com.pulumi.meraki.devices.inputs.LiveToolsArpTableCallbackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new LiveToolsArpTable(&#34;example&#34;, LiveToolsArpTableArgs.builder()        
 *             .callback(LiveToolsArpTableCallbackArgs.builder()
 *                 .http_server(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .payload_template(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .shared_secret(&#34;secret&#34;)
 *                 .url(&#34;https://webhook.site/28efa24e-f830-4d9f-a12b-fbb9e5035031&#34;)
 *                 .build())
 *             .serial(&#34;string&#34;)
 *             .build());
 * 
 *         ctx.export(&#34;merakiDevicesLiveToolsArpTableExample&#34;, example);
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:devices/liveToolsArpTable:LiveToolsArpTable example &#34;arp_table_id,serial&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:devices/liveToolsArpTable:LiveToolsArpTable")
public class LiveToolsArpTable extends com.pulumi.resources.CustomResource {
    /**
     * Id of the ARP table request. Used to check the status of the request.
     * 
     */
    @Export(name="arpTableId", refs={String.class}, tree="[0]")
    private Output<String> arpTableId;

    /**
     * @return Id of the ARP table request. Used to check the status of the request.
     * 
     */
    public Output<String> arpTableId() {
        return this.arpTableId;
    }
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    @Export(name="callback", refs={LiveToolsArpTableCallback.class}, tree="[0]")
    private Output<LiveToolsArpTableCallback> callback;

    /**
     * @return Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    public Output<LiveToolsArpTableCallback> callback() {
        return this.callback;
    }
    /**
     * The ARP table entries
     * 
     */
    @Export(name="entries", refs={List.class,LiveToolsArpTableEntry.class}, tree="[0,1]")
    private Output<List<LiveToolsArpTableEntry>> entries;

    /**
     * @return The ARP table entries
     * 
     */
    public Output<List<LiveToolsArpTableEntry>> entries() {
        return this.entries;
    }
    /**
     * An error message for a failed execution
     * 
     */
    @Export(name="error", refs={String.class}, tree="[0]")
    private Output<String> error;

    /**
     * @return An error message for a failed execution
     * 
     */
    public Output<String> error() {
        return this.error;
    }
    /**
     * ARP table request parameters
     * 
     */
    @Export(name="request", refs={LiveToolsArpTableRequest.class}, tree="[0]")
    private Output<LiveToolsArpTableRequest> request;

    /**
     * @return ARP table request parameters
     * 
     */
    public Output<LiveToolsArpTableRequest> request() {
        return this.request;
    }
    /**
     * serial path parameter.
     * 
     */
    @Export(name="serial", refs={String.class}, tree="[0]")
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }
    /**
     * Status of the ARP table request.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the ARP table request.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * GET this url to check the status of your ARP table request.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return GET this url to check the status of your ARP table request.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LiveToolsArpTable(String name) {
        this(name, LiveToolsArpTableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LiveToolsArpTable(String name, LiveToolsArpTableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LiveToolsArpTable(String name, LiveToolsArpTableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsArpTable:LiveToolsArpTable", name, args == null ? LiveToolsArpTableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LiveToolsArpTable(String name, Output<String> id, @Nullable LiveToolsArpTableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsArpTable:LiveToolsArpTable", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LiveToolsArpTable get(String name, Output<String> id, @Nullable LiveToolsArpTableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LiveToolsArpTable(name, id, state, options);
    }
}
