// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.WirelessBillingPlanArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessBillingArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessBillingArgs Empty = new WirelessBillingArgs();

    /**
     * The currency code of this node group&#39;s billing plans
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The currency code of this node group&#39;s billing plans
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Array of billing plans in the node group. (Can configure a maximum of 5)
     * 
     */
    @Import(name="plans")
    private @Nullable Output<List<WirelessBillingPlanArgs>> plans;

    /**
     * @return Array of billing plans in the node group. (Can configure a maximum of 5)
     * 
     */
    public Optional<Output<List<WirelessBillingPlanArgs>>> plans() {
        return Optional.ofNullable(this.plans);
    }

    private WirelessBillingArgs() {}

    private WirelessBillingArgs(WirelessBillingArgs $) {
        this.currency = $.currency;
        this.networkId = $.networkId;
        this.plans = $.plans;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessBillingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessBillingArgs $;

        public Builder() {
            $ = new WirelessBillingArgs();
        }

        public Builder(WirelessBillingArgs defaults) {
            $ = new WirelessBillingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currency The currency code of this node group&#39;s billing plans
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The currency code of this node group&#39;s billing plans
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param plans Array of billing plans in the node group. (Can configure a maximum of 5)
         * 
         * @return builder
         * 
         */
        public Builder plans(@Nullable Output<List<WirelessBillingPlanArgs>> plans) {
            $.plans = plans;
            return this;
        }

        /**
         * @param plans Array of billing plans in the node group. (Can configure a maximum of 5)
         * 
         * @return builder
         * 
         */
        public Builder plans(List<WirelessBillingPlanArgs> plans) {
            return plans(Output.of(plans));
        }

        /**
         * @param plans Array of billing plans in the node group. (Can configure a maximum of 5)
         * 
         * @return builder
         * 
         */
        public Builder plans(WirelessBillingPlanArgs... plans) {
            return plans(List.of(plans));
        }

        public WirelessBillingArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("WirelessBillingArgs", "networkId");
            }
            return $;
        }
    }

}
