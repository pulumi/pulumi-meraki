// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs Empty = new InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs();

    /**
     * SSH tunnel URL used to connect to the device
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return SSH tunnel URL used to connect to the device
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the tunnel we are attempting to connect to
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tunnel we are attempting to connect to
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The port used for the ssh tunnel.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return The port used for the ssh tunnel.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Root certificate information
     * 
     */
    @Import(name="rootCertificate")
    private @Nullable Output<InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs> rootCertificate;

    /**
     * @return Root certificate information
     * 
     */
    public Optional<Output<InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs>> rootCertificate() {
        return Optional.ofNullable(this.rootCertificate);
    }

    private InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs() {}

    private InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs $) {
        this.host = $.host;
        this.mode = $.mode;
        this.name = $.name;
        this.port = $.port;
        this.rootCertificate = $.rootCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs $;

        public Builder() {
            $ = new InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs();
        }

        public Builder(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs defaults) {
            $ = new InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host SSH tunnel URL used to connect to the device
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host SSH tunnel URL used to connect to the device
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the tunnel we are attempting to connect to
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tunnel we are attempting to connect to
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port used for the ssh tunnel.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port used for the ssh tunnel.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param rootCertificate Root certificate information
         * 
         * @return builder
         * 
         */
        public Builder rootCertificate(@Nullable Output<InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs> rootCertificate) {
            $.rootCertificate = rootCertificate;
            return this;
        }

        /**
         * @param rootCertificate Root certificate information
         * 
         * @return builder
         * 
         */
        public Builder rootCertificate(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificateArgs rootCertificate) {
            return rootCertificate(Output.of(rootCertificate));
        }

        public InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelArgs build() {
            return $;
        }
    }

}
