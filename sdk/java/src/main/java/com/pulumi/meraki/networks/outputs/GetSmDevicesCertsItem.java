// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSmDevicesCertsItem {
    /**
     * @return The PEM of the certificate.
     * 
     */
    private String certPem;
    /**
     * @return The Meraki managed device Id.
     * 
     */
    private String deviceId;
    /**
     * @return The Meraki Id of the certificate record.
     * 
     */
    private String id;
    /**
     * @return The certificate issuer.
     * 
     */
    private String issuer;
    /**
     * @return The name of the certificate.
     * 
     */
    private String name;
    /**
     * @return The date after which the certificate is no longer valid.
     * 
     */
    private String notValidAfter;
    /**
     * @return The date before which the certificate is not valid.
     * 
     */
    private String notValidBefore;
    /**
     * @return The subject of the certificate.
     * 
     */
    private String subject;

    private GetSmDevicesCertsItem() {}
    /**
     * @return The PEM of the certificate.
     * 
     */
    public String certPem() {
        return this.certPem;
    }
    /**
     * @return The Meraki managed device Id.
     * 
     */
    public String deviceId() {
        return this.deviceId;
    }
    /**
     * @return The Meraki Id of the certificate record.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The certificate issuer.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The name of the certificate.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The date after which the certificate is no longer valid.
     * 
     */
    public String notValidAfter() {
        return this.notValidAfter;
    }
    /**
     * @return The date before which the certificate is not valid.
     * 
     */
    public String notValidBefore() {
        return this.notValidBefore;
    }
    /**
     * @return The subject of the certificate.
     * 
     */
    public String subject() {
        return this.subject;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmDevicesCertsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certPem;
        private String deviceId;
        private String id;
        private String issuer;
        private String name;
        private String notValidAfter;
        private String notValidBefore;
        private String subject;
        public Builder() {}
        public Builder(GetSmDevicesCertsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certPem = defaults.certPem;
    	      this.deviceId = defaults.deviceId;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.name = defaults.name;
    	      this.notValidAfter = defaults.notValidAfter;
    	      this.notValidBefore = defaults.notValidBefore;
    	      this.subject = defaults.subject;
        }

        @CustomType.Setter
        public Builder certPem(String certPem) {
            if (certPem == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "certPem");
            }
            this.certPem = certPem;
            return this;
        }
        @CustomType.Setter
        public Builder deviceId(String deviceId) {
            if (deviceId == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "deviceId");
            }
            this.deviceId = deviceId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notValidAfter(String notValidAfter) {
            if (notValidAfter == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "notValidAfter");
            }
            this.notValidAfter = notValidAfter;
            return this;
        }
        @CustomType.Setter
        public Builder notValidBefore(String notValidBefore) {
            if (notValidBefore == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "notValidBefore");
            }
            this.notValidBefore = notValidBefore;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesCertsItem", "subject");
            }
            this.subject = subject;
            return this;
        }
        public GetSmDevicesCertsItem build() {
            final var _resultValue = new GetSmDevicesCertsItem();
            _resultValue.certPem = certPem;
            _resultValue.deviceId = deviceId;
            _resultValue.id = id;
            _resultValue.issuer = issuer;
            _resultValue.name = name;
            _resultValue.notValidAfter = notValidAfter;
            _resultValue.notValidBefore = notValidBefore;
            _resultValue.subject = subject;
            return _resultValue;
        }
    }
}
