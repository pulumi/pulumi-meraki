// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFirmwareUpgradesByDeviceArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFirmwareUpgradesByDeviceArgs Empty = new GetFirmwareUpgradesByDeviceArgs();

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable Output<String> endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
     * 
     */
    @Import(name="firmwareUpgradeBatchIds")
    private @Nullable Output<List<String>> firmwareUpgradeBatchIds;

    /**
     * @return firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
     * 
     */
    public Optional<Output<List<String>>> firmwareUpgradeBatchIds() {
        return Optional.ofNullable(this.firmwareUpgradeBatchIds);
    }

    /**
     * macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
     * 
     */
    @Import(name="macs")
    private @Nullable Output<List<String>> macs;

    /**
     * @return macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
     * 
     */
    public Optional<Output<List<String>>> macs() {
        return Optional.ofNullable(this.macs);
    }

    /**
     * networkIds query parameter. Optional parameter to filter by network
     * 
     */
    @Import(name="networkIds")
    private @Nullable Output<List<String>> networkIds;

    /**
     * @return networkIds query parameter. Optional parameter to filter by network
     * 
     */
    public Optional<Output<List<String>>> networkIds() {
        return Optional.ofNullable(this.networkIds);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
     * 
     */
    @Import(name="perPage")
    private @Nullable Output<Integer> perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
     * 
     */
    public Optional<Output<Integer>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
     * 
     */
    @Import(name="serials")
    private @Nullable Output<List<String>> serials;

    /**
     * @return serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
     * 
     */
    public Optional<Output<List<String>>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable Output<String> startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    /**
     * upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
     * 
     */
    @Import(name="upgradestatuses")
    private @Nullable Output<List<String>> upgradestatuses;

    /**
     * @return upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
     * 
     */
    public Optional<Output<List<String>>> upgradestatuses() {
        return Optional.ofNullable(this.upgradestatuses);
    }

    private GetFirmwareUpgradesByDeviceArgs() {}

    private GetFirmwareUpgradesByDeviceArgs(GetFirmwareUpgradesByDeviceArgs $) {
        this.endingBefore = $.endingBefore;
        this.firmwareUpgradeBatchIds = $.firmwareUpgradeBatchIds;
        this.macs = $.macs;
        this.networkIds = $.networkIds;
        this.organizationId = $.organizationId;
        this.perPage = $.perPage;
        this.serials = $.serials;
        this.startingAfter = $.startingAfter;
        this.upgradestatuses = $.upgradestatuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFirmwareUpgradesByDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFirmwareUpgradesByDeviceArgs $;

        public Builder() {
            $ = new GetFirmwareUpgradesByDeviceArgs();
        }

        public Builder(GetFirmwareUpgradesByDeviceArgs defaults) {
            $ = new GetFirmwareUpgradesByDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable Output<String> endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(String endingBefore) {
            return endingBefore(Output.of(endingBefore));
        }

        /**
         * @param firmwareUpgradeBatchIds firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
         * 
         * @return builder
         * 
         */
        public Builder firmwareUpgradeBatchIds(@Nullable Output<List<String>> firmwareUpgradeBatchIds) {
            $.firmwareUpgradeBatchIds = firmwareUpgradeBatchIds;
            return this;
        }

        /**
         * @param firmwareUpgradeBatchIds firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
         * 
         * @return builder
         * 
         */
        public Builder firmwareUpgradeBatchIds(List<String> firmwareUpgradeBatchIds) {
            return firmwareUpgradeBatchIds(Output.of(firmwareUpgradeBatchIds));
        }

        /**
         * @param firmwareUpgradeBatchIds firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
         * 
         * @return builder
         * 
         */
        public Builder firmwareUpgradeBatchIds(String... firmwareUpgradeBatchIds) {
            return firmwareUpgradeBatchIds(List.of(firmwareUpgradeBatchIds));
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(@Nullable Output<List<String>> macs) {
            $.macs = macs;
            return this;
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(List<String> macs) {
            return macs(Output.of(macs));
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter by network
         * 
         * @return builder
         * 
         */
        public Builder networkIds(@Nullable Output<List<String>> networkIds) {
            $.networkIds = networkIds;
            return this;
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter by network
         * 
         * @return builder
         * 
         */
        public Builder networkIds(List<String> networkIds) {
            return networkIds(Output.of(networkIds));
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter by network
         * 
         * @return builder
         * 
         */
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Output<Integer> perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
         * 
         * @return builder
         * 
         */
        public Builder perPage(Integer perPage) {
            return perPage(Output.of(perPage));
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable Output<List<String>> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(List<String> serials) {
            return serials(Output.of(serials));
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable Output<String> startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(String startingAfter) {
            return startingAfter(Output.of(startingAfter));
        }

        /**
         * @param upgradestatuses upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
         * 
         * @return builder
         * 
         */
        public Builder upgradestatuses(@Nullable Output<List<String>> upgradestatuses) {
            $.upgradestatuses = upgradestatuses;
            return this;
        }

        /**
         * @param upgradestatuses upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
         * 
         * @return builder
         * 
         */
        public Builder upgradestatuses(List<String> upgradestatuses) {
            return upgradestatuses(Output.of(upgradestatuses));
        }

        /**
         * @param upgradestatuses upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
         * 
         * @return builder
         * 
         */
        public Builder upgradestatuses(String... upgradestatuses) {
            return upgradestatuses(List.of(upgradestatuses));
        }

        public GetFirmwareUpgradesByDeviceArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("GetFirmwareUpgradesByDeviceArgs", "organizationId");
            }
            return $;
        }
    }

}
