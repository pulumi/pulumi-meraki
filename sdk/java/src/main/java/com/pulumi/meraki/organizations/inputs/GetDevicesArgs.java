// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDevicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDevicesArgs Empty = new GetDevicesArgs();

    /**
     * configurationUpdatedAfter query parameter. Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp
     * 
     */
    @Import(name="configurationUpdatedAfter")
    private @Nullable Output<String> configurationUpdatedAfter;

    /**
     * @return configurationUpdatedAfter query parameter. Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp
     * 
     */
    public Optional<Output<String>> configurationUpdatedAfter() {
        return Optional.ofNullable(this.configurationUpdatedAfter);
    }

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable Output<String> endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
     * 
     */
    @Import(name="macs")
    private @Nullable Output<List<String>> macs;

    /**
     * @return macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
     * 
     */
    public Optional<Output<List<String>>> macs() {
        return Optional.ofNullable(this.macs);
    }

    /**
     * model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
     * 
     */
    @Import(name="models")
    private @Nullable Output<List<String>> models;

    /**
     * @return models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
     * 
     */
    public Optional<Output<List<String>>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkIds query parameter. Optional parameter to filter devices by network.
     * 
     */
    @Import(name="networkIds")
    private @Nullable Output<List<String>> networkIds;

    /**
     * @return networkIds query parameter. Optional parameter to filter devices by network.
     * 
     */
    public Optional<Output<List<String>>> networkIds() {
        return Optional.ofNullable(this.networkIds);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    @Import(name="perPage")
    private @Nullable Output<Integer> perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Output<Integer>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * 
     */
    @Import(name="productTypes")
    private @Nullable Output<List<String>> productTypes;

    /**
     * @return productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
     * 
     */
    public Optional<Output<List<String>>> productTypes() {
        return Optional.ofNullable(this.productTypes);
    }

    /**
     * sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
     * 
     */
    @Import(name="sensorAlertProfileIds")
    private @Nullable Output<List<String>> sensorAlertProfileIds;

    /**
     * @return sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
     * 
     */
    public Optional<Output<List<String>>> sensorAlertProfileIds() {
        return Optional.ofNullable(this.sensorAlertProfileIds);
    }

    /**
     * sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
     * 
     */
    @Import(name="sensorMetrics")
    private @Nullable Output<List<String>> sensorMetrics;

    /**
     * @return sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
     * 
     */
    public Optional<Output<List<String>>> sensorMetrics() {
        return Optional.ofNullable(this.sensorMetrics);
    }

    /**
     * serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
     * 
     */
    @Import(name="serials")
    private @Nullable Output<List<String>> serials;

    /**
     * @return serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
     * 
     */
    public Optional<Output<List<String>>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable Output<String> startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    /**
     * tags query parameter. Optional parameter to filter devices by tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return tags query parameter. Optional parameter to filter devices by tags.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * tagsFilterType query parameter. Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
     * 
     */
    @Import(name="tagsFilterType")
    private @Nullable Output<String> tagsFilterType;

    /**
     * @return tagsFilterType query parameter. Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
     * 
     */
    public Optional<Output<String>> tagsFilterType() {
        return Optional.ofNullable(this.tagsFilterType);
    }

    private GetDevicesArgs() {}

    private GetDevicesArgs(GetDevicesArgs $) {
        this.configurationUpdatedAfter = $.configurationUpdatedAfter;
        this.endingBefore = $.endingBefore;
        this.mac = $.mac;
        this.macs = $.macs;
        this.model = $.model;
        this.models = $.models;
        this.name = $.name;
        this.networkIds = $.networkIds;
        this.organizationId = $.organizationId;
        this.perPage = $.perPage;
        this.productTypes = $.productTypes;
        this.sensorAlertProfileIds = $.sensorAlertProfileIds;
        this.sensorMetrics = $.sensorMetrics;
        this.serial = $.serial;
        this.serials = $.serials;
        this.startingAfter = $.startingAfter;
        this.tags = $.tags;
        this.tagsFilterType = $.tagsFilterType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDevicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDevicesArgs $;

        public Builder() {
            $ = new GetDevicesArgs();
        }

        public Builder(GetDevicesArgs defaults) {
            $ = new GetDevicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationUpdatedAfter configurationUpdatedAfter query parameter. Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp
         * 
         * @return builder
         * 
         */
        public Builder configurationUpdatedAfter(@Nullable Output<String> configurationUpdatedAfter) {
            $.configurationUpdatedAfter = configurationUpdatedAfter;
            return this;
        }

        /**
         * @param configurationUpdatedAfter configurationUpdatedAfter query parameter. Filter results by whether or not the device&#39;s configuration has been updated after the given timestamp
         * 
         * @return builder
         * 
         */
        public Builder configurationUpdatedAfter(String configurationUpdatedAfter) {
            return configurationUpdatedAfter(Output.of(configurationUpdatedAfter));
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable Output<String> endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(String endingBefore) {
            return endingBefore(Output.of(endingBefore));
        }

        /**
         * @param mac mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(@Nullable Output<List<String>> macs) {
            $.macs = macs;
            return this;
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(List<String> macs) {
            return macs(Output.of(macs));
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }

        /**
         * @param model model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        /**
         * @param models models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable Output<List<String>> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder models(List<String> models) {
            return models(Output.of(models));
        }

        /**
         * @param models models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder models(String... models) {
            return models(List.of(models));
        }

        /**
         * @param name name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter devices by network.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(@Nullable Output<List<String>> networkIds) {
            $.networkIds = networkIds;
            return this;
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter devices by network.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(List<String> networkIds) {
            return networkIds(Output.of(networkIds));
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter devices by network.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Output<Integer> perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
         * 
         * @return builder
         * 
         */
        public Builder perPage(Integer perPage) {
            return perPage(Output.of(perPage));
        }

        /**
         * @param productTypes productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(@Nullable Output<List<String>> productTypes) {
            $.productTypes = productTypes;
            return this;
        }

        /**
         * @param productTypes productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(List<String> productTypes) {
            return productTypes(Output.of(productTypes));
        }

        /**
         * @param productTypes productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }

        /**
         * @param sensorAlertProfileIds sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorAlertProfileIds(@Nullable Output<List<String>> sensorAlertProfileIds) {
            $.sensorAlertProfileIds = sensorAlertProfileIds;
            return this;
        }

        /**
         * @param sensorAlertProfileIds sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorAlertProfileIds(List<String> sensorAlertProfileIds) {
            return sensorAlertProfileIds(Output.of(sensorAlertProfileIds));
        }

        /**
         * @param sensorAlertProfileIds sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorAlertProfileIds(String... sensorAlertProfileIds) {
            return sensorAlertProfileIds(List.of(sensorAlertProfileIds));
        }

        /**
         * @param sensorMetrics sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorMetrics(@Nullable Output<List<String>> sensorMetrics) {
            $.sensorMetrics = sensorMetrics;
            return this;
        }

        /**
         * @param sensorMetrics sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorMetrics(List<String> sensorMetrics) {
            return sensorMetrics(Output.of(sensorMetrics));
        }

        /**
         * @param sensorMetrics sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
         * 
         * @return builder
         * 
         */
        public Builder sensorMetrics(String... sensorMetrics) {
            return sensorMetrics(List.of(sensorMetrics));
        }

        /**
         * @param serial serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable Output<List<String>> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(List<String> serials) {
            return serials(Output.of(serials));
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable Output<String> startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(String startingAfter) {
            return startingAfter(Output.of(startingAfter));
        }

        /**
         * @param tags tags query parameter. Optional parameter to filter devices by tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags tags query parameter. Optional parameter to filter devices by tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags tags query parameter. Optional parameter to filter devices by tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tagsFilterType tagsFilterType query parameter. Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
         * 
         * @return builder
         * 
         */
        public Builder tagsFilterType(@Nullable Output<String> tagsFilterType) {
            $.tagsFilterType = tagsFilterType;
            return this;
        }

        /**
         * @param tagsFilterType tagsFilterType query parameter. Optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
         * 
         * @return builder
         * 
         */
        public Builder tagsFilterType(String tagsFilterType) {
            return tagsFilterType(Output.of(tagsFilterType));
        }

        public GetDevicesArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("GetDevicesArgs", "organizationId");
            }
            return $;
        }
    }

}
