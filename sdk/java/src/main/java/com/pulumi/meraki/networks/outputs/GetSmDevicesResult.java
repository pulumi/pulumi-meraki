// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSmDevicesItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSmDevicesResult {
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return fields query parameter. Additional fields that will be displayed for each device.
     * The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
     * systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
     * ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
     * simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
     * isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
     * hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
     * 
     */
    private @Nullable List<String> fields;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ids query parameter. Filter devices by id(s).
     * 
     */
    private @Nullable List<String> ids;
    /**
     * @return Array of ResponseSmGetNetworkSmDevices
     * 
     */
    private List<GetSmDevicesItem> items;
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    private String networkId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
     * 
     */
    private @Nullable List<String> scopes;
    /**
     * @return serials query parameter. Filter devices by serial(s).
     * 
     */
    private @Nullable List<String> serials;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;
    /**
     * @return systemTypes query parameter. Filter devices by system type(s).
     * 
     */
    private @Nullable List<String> systemTypes;
    /**
     * @return uuids query parameter. Filter devices by uuid(s).
     * 
     */
    private @Nullable List<String> uuids;
    /**
     * @return wifiMacs query parameter. Filter devices by wifi mac(s).
     * 
     */
    private @Nullable List<String> wifiMacs;

    private GetSmDevicesResult() {}
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return fields query parameter. Additional fields that will be displayed for each device.
     * The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
     * systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
     * ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
     * simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
     * isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
     * hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
     * 
     */
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ids query parameter. Filter devices by id(s).
     * 
     */
    public List<String> ids() {
        return this.ids == null ? List.of() : this.ids;
    }
    /**
     * @return Array of ResponseSmGetNetworkSmDevices
     * 
     */
    public List<GetSmDevicesItem> items() {
        return this.items;
    }
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
     * 
     */
    public List<String> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * @return serials query parameter. Filter devices by serial(s).
     * 
     */
    public List<String> serials() {
        return this.serials == null ? List.of() : this.serials;
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }
    /**
     * @return systemTypes query parameter. Filter devices by system type(s).
     * 
     */
    public List<String> systemTypes() {
        return this.systemTypes == null ? List.of() : this.systemTypes;
    }
    /**
     * @return uuids query parameter. Filter devices by uuid(s).
     * 
     */
    public List<String> uuids() {
        return this.uuids == null ? List.of() : this.uuids;
    }
    /**
     * @return wifiMacs query parameter. Filter devices by wifi mac(s).
     * 
     */
    public List<String> wifiMacs() {
        return this.wifiMacs == null ? List.of() : this.wifiMacs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmDevicesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endingBefore;
        private @Nullable List<String> fields;
        private String id;
        private @Nullable List<String> ids;
        private List<GetSmDevicesItem> items;
        private String networkId;
        private @Nullable Integer perPage;
        private @Nullable List<String> scopes;
        private @Nullable List<String> serials;
        private @Nullable String startingAfter;
        private @Nullable List<String> systemTypes;
        private @Nullable List<String> uuids;
        private @Nullable List<String> wifiMacs;
        public Builder() {}
        public Builder(GetSmDevicesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endingBefore = defaults.endingBefore;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.ids = defaults.ids;
    	      this.items = defaults.items;
    	      this.networkId = defaults.networkId;
    	      this.perPage = defaults.perPage;
    	      this.scopes = defaults.scopes;
    	      this.serials = defaults.serials;
    	      this.startingAfter = defaults.startingAfter;
    	      this.systemTypes = defaults.systemTypes;
    	      this.uuids = defaults.uuids;
    	      this.wifiMacs = defaults.wifiMacs;
        }

        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {

            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ids(@Nullable List<String> ids) {

            this.ids = ids;
            return this;
        }
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }
        @CustomType.Setter
        public Builder items(List<GetSmDevicesItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetSmDevicesItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder networkId(String networkId) {
            if (networkId == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesResult", "networkId");
            }
            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable List<String> scopes) {

            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder serials(@Nullable List<String> serials) {

            this.serials = serials;
            return this;
        }
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        @CustomType.Setter
        public Builder systemTypes(@Nullable List<String> systemTypes) {

            this.systemTypes = systemTypes;
            return this;
        }
        public Builder systemTypes(String... systemTypes) {
            return systemTypes(List.of(systemTypes));
        }
        @CustomType.Setter
        public Builder uuids(@Nullable List<String> uuids) {

            this.uuids = uuids;
            return this;
        }
        public Builder uuids(String... uuids) {
            return uuids(List.of(uuids));
        }
        @CustomType.Setter
        public Builder wifiMacs(@Nullable List<String> wifiMacs) {

            this.wifiMacs = wifiMacs;
            return this;
        }
        public Builder wifiMacs(String... wifiMacs) {
            return wifiMacs(List.of(wifiMacs));
        }
        public GetSmDevicesResult build() {
            final var _resultValue = new GetSmDevicesResult();
            _resultValue.endingBefore = endingBefore;
            _resultValue.fields = fields;
            _resultValue.id = id;
            _resultValue.ids = ids;
            _resultValue.items = items;
            _resultValue.networkId = networkId;
            _resultValue.perPage = perPage;
            _resultValue.scopes = scopes;
            _resultValue.serials = serials;
            _resultValue.startingAfter = startingAfter;
            _resultValue.systemTypes = systemTypes;
            _resultValue.uuids = uuids;
            _resultValue.wifiMacs = wifiMacs;
            return _resultValue;
        }
    }
}
