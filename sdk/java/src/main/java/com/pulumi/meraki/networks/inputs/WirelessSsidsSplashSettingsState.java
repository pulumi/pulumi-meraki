// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsBillingArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsGuestSponsorshipArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSelfRegistrationArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSentryEnrollmentArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashImageArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashLogoArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsSplashSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsSplashSettingsState Empty = new WirelessSsidsSplashSettingsState();

    /**
     * Whether or not to allow simultaneous logins from different devices.
     * 
     */
    @Import(name="allowSimultaneousLogins")
    private @Nullable Output<Boolean> allowSimultaneousLogins;

    /**
     * @return Whether or not to allow simultaneous logins from different devices.
     * 
     */
    public Optional<Output<Boolean>> allowSimultaneousLogins() {
        return Optional.ofNullable(this.allowSimultaneousLogins);
    }

    /**
     * Details associated with billing splash
     * 
     */
    @Import(name="billing")
    private @Nullable Output<WirelessSsidsSplashSettingsBillingArgs> billing;

    /**
     * @return Details associated with billing splash
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsBillingArgs>> billing() {
        return Optional.ofNullable(this.billing);
    }

    /**
     * How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    @Import(name="blockAllTrafficBeforeSignOn")
    private @Nullable Output<Boolean> blockAllTrafficBeforeSignOn;

    /**
     * @return How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    public Optional<Output<Boolean>> blockAllTrafficBeforeSignOn() {
        return Optional.ofNullable(this.blockAllTrafficBeforeSignOn);
    }

    /**
     * How login attempts should be handled when the controller is unreachable.
     * 
     */
    @Import(name="controllerDisconnectionBehavior")
    private @Nullable Output<String> controllerDisconnectionBehavior;

    /**
     * @return How login attempts should be handled when the controller is unreachable.
     * 
     */
    public Optional<Output<String>> controllerDisconnectionBehavior() {
        return Optional.ofNullable(this.controllerDisconnectionBehavior);
    }

    /**
     * Details associated with guest sponsored splash
     * 
     */
    @Import(name="guestSponsorship")
    private @Nullable Output<WirelessSsidsSplashSettingsGuestSponsorshipArgs> guestSponsorship;

    /**
     * @return Details associated with guest sponsored splash
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsGuestSponsorshipArgs>> guestSponsorship() {
        return Optional.ofNullable(this.guestSponsorship);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * number path parameter.
     * 
     */
    @Import(name="number")
    private @Nullable Output<String> number;

    /**
     * @return number path parameter.
     * 
     */
    public Optional<Output<String>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * The custom redirect URL where the users will go after the splash page.
     * 
     */
    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    /**
     * @return The custom redirect URL where the users will go after the splash page.
     * 
     */
    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    /**
     * Self-registration for splash with Meraki authentication.
     * 
     */
    @Import(name="selfRegistration")
    private @Nullable Output<WirelessSsidsSplashSettingsSelfRegistrationArgs> selfRegistration;

    /**
     * @return Self-registration for splash with Meraki authentication.
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsSelfRegistrationArgs>> selfRegistration() {
        return Optional.ofNullable(this.selfRegistration);
    }

    /**
     * Systems Manager sentry enrollment splash settings.
     * 
     */
    @Import(name="sentryEnrollment")
    private @Nullable Output<WirelessSsidsSplashSettingsSentryEnrollmentArgs> sentryEnrollment;

    /**
     * @return Systems Manager sentry enrollment splash settings.
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsSentryEnrollmentArgs>> sentryEnrollment() {
        return Optional.ofNullable(this.sentryEnrollment);
    }

    /**
     * The image used in the splash page.
     * 
     */
    @Import(name="splashImage")
    private @Nullable Output<WirelessSsidsSplashSettingsSplashImageArgs> splashImage;

    /**
     * @return The image used in the splash page.
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsSplashImageArgs>> splashImage() {
        return Optional.ofNullable(this.splashImage);
    }

    /**
     * The logo used in the splash page.
     * 
     */
    @Import(name="splashLogo")
    private @Nullable Output<WirelessSsidsSplashSettingsSplashLogoArgs> splashLogo;

    /**
     * @return The logo used in the splash page.
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsSplashLogoArgs>> splashLogo() {
        return Optional.ofNullable(this.splashLogo);
    }

    /**
     * The type of splash page for this SSID
     * 
     */
    @Import(name="splashPage")
    private @Nullable Output<String> splashPage;

    /**
     * @return The type of splash page for this SSID
     * 
     */
    public Optional<Output<String>> splashPage() {
        return Optional.ofNullable(this.splashPage);
    }

    /**
     * The prepaid front image used in the splash page.
     * 
     */
    @Import(name="splashPrepaidFront")
    private @Nullable Output<WirelessSsidsSplashSettingsSplashPrepaidFrontArgs> splashPrepaidFront;

    /**
     * @return The prepaid front image used in the splash page.
     * 
     */
    public Optional<Output<WirelessSsidsSplashSettingsSplashPrepaidFrontArgs>> splashPrepaidFront() {
        return Optional.ofNullable(this.splashPrepaidFront);
    }

    /**
     * Splash timeout in minutes.
     * 
     */
    @Import(name="splashTimeout")
    private @Nullable Output<Integer> splashTimeout;

    /**
     * @return Splash timeout in minutes.
     * 
     */
    public Optional<Output<Integer>> splashTimeout() {
        return Optional.ofNullable(this.splashTimeout);
    }

    /**
     * The custom splash URL of the click-through splash page.
     * 
     */
    @Import(name="splashUrl")
    private @Nullable Output<String> splashUrl;

    /**
     * @return The custom splash URL of the click-through splash page.
     * 
     */
    public Optional<Output<String>> splashUrl() {
        return Optional.ofNullable(this.splashUrl);
    }

    /**
     * SSID number
     * 
     */
    @Import(name="ssidNumber")
    private @Nullable Output<Integer> ssidNumber;

    /**
     * @return SSID number
     * 
     */
    public Optional<Output<Integer>> ssidNumber() {
        return Optional.ofNullable(this.ssidNumber);
    }

    /**
     * The id of the selected splash theme.
     * 
     */
    @Import(name="themeId")
    private @Nullable Output<String> themeId;

    /**
     * @return The id of the selected splash theme.
     * 
     */
    public Optional<Output<String>> themeId() {
        return Optional.ofNullable(this.themeId);
    }

    /**
     * The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    @Import(name="useRedirectUrl")
    private @Nullable Output<Boolean> useRedirectUrl;

    /**
     * @return The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    public Optional<Output<Boolean>> useRedirectUrl() {
        return Optional.ofNullable(this.useRedirectUrl);
    }

    /**
     * Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    @Import(name="useSplashUrl")
    private @Nullable Output<Boolean> useSplashUrl;

    /**
     * @return Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    public Optional<Output<Boolean>> useSplashUrl() {
        return Optional.ofNullable(this.useSplashUrl);
    }

    /**
     * The welcome message for the users on the splash page.
     * 
     */
    @Import(name="welcomeMessage")
    private @Nullable Output<String> welcomeMessage;

    /**
     * @return The welcome message for the users on the splash page.
     * 
     */
    public Optional<Output<String>> welcomeMessage() {
        return Optional.ofNullable(this.welcomeMessage);
    }

    private WirelessSsidsSplashSettingsState() {}

    private WirelessSsidsSplashSettingsState(WirelessSsidsSplashSettingsState $) {
        this.allowSimultaneousLogins = $.allowSimultaneousLogins;
        this.billing = $.billing;
        this.blockAllTrafficBeforeSignOn = $.blockAllTrafficBeforeSignOn;
        this.controllerDisconnectionBehavior = $.controllerDisconnectionBehavior;
        this.guestSponsorship = $.guestSponsorship;
        this.networkId = $.networkId;
        this.number = $.number;
        this.redirectUrl = $.redirectUrl;
        this.selfRegistration = $.selfRegistration;
        this.sentryEnrollment = $.sentryEnrollment;
        this.splashImage = $.splashImage;
        this.splashLogo = $.splashLogo;
        this.splashPage = $.splashPage;
        this.splashPrepaidFront = $.splashPrepaidFront;
        this.splashTimeout = $.splashTimeout;
        this.splashUrl = $.splashUrl;
        this.ssidNumber = $.ssidNumber;
        this.themeId = $.themeId;
        this.useRedirectUrl = $.useRedirectUrl;
        this.useSplashUrl = $.useSplashUrl;
        this.welcomeMessage = $.welcomeMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsSplashSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsSplashSettingsState $;

        public Builder() {
            $ = new WirelessSsidsSplashSettingsState();
        }

        public Builder(WirelessSsidsSplashSettingsState defaults) {
            $ = new WirelessSsidsSplashSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowSimultaneousLogins Whether or not to allow simultaneous logins from different devices.
         * 
         * @return builder
         * 
         */
        public Builder allowSimultaneousLogins(@Nullable Output<Boolean> allowSimultaneousLogins) {
            $.allowSimultaneousLogins = allowSimultaneousLogins;
            return this;
        }

        /**
         * @param allowSimultaneousLogins Whether or not to allow simultaneous logins from different devices.
         * 
         * @return builder
         * 
         */
        public Builder allowSimultaneousLogins(Boolean allowSimultaneousLogins) {
            return allowSimultaneousLogins(Output.of(allowSimultaneousLogins));
        }

        /**
         * @param billing Details associated with billing splash
         * 
         * @return builder
         * 
         */
        public Builder billing(@Nullable Output<WirelessSsidsSplashSettingsBillingArgs> billing) {
            $.billing = billing;
            return this;
        }

        /**
         * @param billing Details associated with billing splash
         * 
         * @return builder
         * 
         */
        public Builder billing(WirelessSsidsSplashSettingsBillingArgs billing) {
            return billing(Output.of(billing));
        }

        /**
         * @param blockAllTrafficBeforeSignOn How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
         * 
         * @return builder
         * 
         */
        public Builder blockAllTrafficBeforeSignOn(@Nullable Output<Boolean> blockAllTrafficBeforeSignOn) {
            $.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
            return this;
        }

        /**
         * @param blockAllTrafficBeforeSignOn How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
         * 
         * @return builder
         * 
         */
        public Builder blockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
            return blockAllTrafficBeforeSignOn(Output.of(blockAllTrafficBeforeSignOn));
        }

        /**
         * @param controllerDisconnectionBehavior How login attempts should be handled when the controller is unreachable.
         * 
         * @return builder
         * 
         */
        public Builder controllerDisconnectionBehavior(@Nullable Output<String> controllerDisconnectionBehavior) {
            $.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
            return this;
        }

        /**
         * @param controllerDisconnectionBehavior How login attempts should be handled when the controller is unreachable.
         * 
         * @return builder
         * 
         */
        public Builder controllerDisconnectionBehavior(String controllerDisconnectionBehavior) {
            return controllerDisconnectionBehavior(Output.of(controllerDisconnectionBehavior));
        }

        /**
         * @param guestSponsorship Details associated with guest sponsored splash
         * 
         * @return builder
         * 
         */
        public Builder guestSponsorship(@Nullable Output<WirelessSsidsSplashSettingsGuestSponsorshipArgs> guestSponsorship) {
            $.guestSponsorship = guestSponsorship;
            return this;
        }

        /**
         * @param guestSponsorship Details associated with guest sponsored splash
         * 
         * @return builder
         * 
         */
        public Builder guestSponsorship(WirelessSsidsSplashSettingsGuestSponsorshipArgs guestSponsorship) {
            return guestSponsorship(Output.of(guestSponsorship));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param redirectUrl The custom redirect URL where the users will go after the splash page.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl The custom redirect URL where the users will go after the splash page.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param selfRegistration Self-registration for splash with Meraki authentication.
         * 
         * @return builder
         * 
         */
        public Builder selfRegistration(@Nullable Output<WirelessSsidsSplashSettingsSelfRegistrationArgs> selfRegistration) {
            $.selfRegistration = selfRegistration;
            return this;
        }

        /**
         * @param selfRegistration Self-registration for splash with Meraki authentication.
         * 
         * @return builder
         * 
         */
        public Builder selfRegistration(WirelessSsidsSplashSettingsSelfRegistrationArgs selfRegistration) {
            return selfRegistration(Output.of(selfRegistration));
        }

        /**
         * @param sentryEnrollment Systems Manager sentry enrollment splash settings.
         * 
         * @return builder
         * 
         */
        public Builder sentryEnrollment(@Nullable Output<WirelessSsidsSplashSettingsSentryEnrollmentArgs> sentryEnrollment) {
            $.sentryEnrollment = sentryEnrollment;
            return this;
        }

        /**
         * @param sentryEnrollment Systems Manager sentry enrollment splash settings.
         * 
         * @return builder
         * 
         */
        public Builder sentryEnrollment(WirelessSsidsSplashSettingsSentryEnrollmentArgs sentryEnrollment) {
            return sentryEnrollment(Output.of(sentryEnrollment));
        }

        /**
         * @param splashImage The image used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashImage(@Nullable Output<WirelessSsidsSplashSettingsSplashImageArgs> splashImage) {
            $.splashImage = splashImage;
            return this;
        }

        /**
         * @param splashImage The image used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashImage(WirelessSsidsSplashSettingsSplashImageArgs splashImage) {
            return splashImage(Output.of(splashImage));
        }

        /**
         * @param splashLogo The logo used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashLogo(@Nullable Output<WirelessSsidsSplashSettingsSplashLogoArgs> splashLogo) {
            $.splashLogo = splashLogo;
            return this;
        }

        /**
         * @param splashLogo The logo used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashLogo(WirelessSsidsSplashSettingsSplashLogoArgs splashLogo) {
            return splashLogo(Output.of(splashLogo));
        }

        /**
         * @param splashPage The type of splash page for this SSID
         * 
         * @return builder
         * 
         */
        public Builder splashPage(@Nullable Output<String> splashPage) {
            $.splashPage = splashPage;
            return this;
        }

        /**
         * @param splashPage The type of splash page for this SSID
         * 
         * @return builder
         * 
         */
        public Builder splashPage(String splashPage) {
            return splashPage(Output.of(splashPage));
        }

        /**
         * @param splashPrepaidFront The prepaid front image used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashPrepaidFront(@Nullable Output<WirelessSsidsSplashSettingsSplashPrepaidFrontArgs> splashPrepaidFront) {
            $.splashPrepaidFront = splashPrepaidFront;
            return this;
        }

        /**
         * @param splashPrepaidFront The prepaid front image used in the splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashPrepaidFront(WirelessSsidsSplashSettingsSplashPrepaidFrontArgs splashPrepaidFront) {
            return splashPrepaidFront(Output.of(splashPrepaidFront));
        }

        /**
         * @param splashTimeout Splash timeout in minutes.
         * 
         * @return builder
         * 
         */
        public Builder splashTimeout(@Nullable Output<Integer> splashTimeout) {
            $.splashTimeout = splashTimeout;
            return this;
        }

        /**
         * @param splashTimeout Splash timeout in minutes.
         * 
         * @return builder
         * 
         */
        public Builder splashTimeout(Integer splashTimeout) {
            return splashTimeout(Output.of(splashTimeout));
        }

        /**
         * @param splashUrl The custom splash URL of the click-through splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashUrl(@Nullable Output<String> splashUrl) {
            $.splashUrl = splashUrl;
            return this;
        }

        /**
         * @param splashUrl The custom splash URL of the click-through splash page.
         * 
         * @return builder
         * 
         */
        public Builder splashUrl(String splashUrl) {
            return splashUrl(Output.of(splashUrl));
        }

        /**
         * @param ssidNumber SSID number
         * 
         * @return builder
         * 
         */
        public Builder ssidNumber(@Nullable Output<Integer> ssidNumber) {
            $.ssidNumber = ssidNumber;
            return this;
        }

        /**
         * @param ssidNumber SSID number
         * 
         * @return builder
         * 
         */
        public Builder ssidNumber(Integer ssidNumber) {
            return ssidNumber(Output.of(ssidNumber));
        }

        /**
         * @param themeId The id of the selected splash theme.
         * 
         * @return builder
         * 
         */
        public Builder themeId(@Nullable Output<String> themeId) {
            $.themeId = themeId;
            return this;
        }

        /**
         * @param themeId The id of the selected splash theme.
         * 
         * @return builder
         * 
         */
        public Builder themeId(String themeId) {
            return themeId(Output.of(themeId));
        }

        /**
         * @param useRedirectUrl The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
         * 
         * @return builder
         * 
         */
        public Builder useRedirectUrl(@Nullable Output<Boolean> useRedirectUrl) {
            $.useRedirectUrl = useRedirectUrl;
            return this;
        }

        /**
         * @param useRedirectUrl The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
         * 
         * @return builder
         * 
         */
        public Builder useRedirectUrl(Boolean useRedirectUrl) {
            return useRedirectUrl(Output.of(useRedirectUrl));
        }

        /**
         * @param useSplashUrl Boolean indicating whether the users will be redirected to the custom splash url
         * 
         * @return builder
         * 
         */
        public Builder useSplashUrl(@Nullable Output<Boolean> useSplashUrl) {
            $.useSplashUrl = useSplashUrl;
            return this;
        }

        /**
         * @param useSplashUrl Boolean indicating whether the users will be redirected to the custom splash url
         * 
         * @return builder
         * 
         */
        public Builder useSplashUrl(Boolean useSplashUrl) {
            return useSplashUrl(Output.of(useSplashUrl));
        }

        /**
         * @param welcomeMessage The welcome message for the users on the splash page.
         * 
         * @return builder
         * 
         */
        public Builder welcomeMessage(@Nullable Output<String> welcomeMessage) {
            $.welcomeMessage = welcomeMessage;
            return this;
        }

        /**
         * @param welcomeMessage The welcome message for the users on the splash page.
         * 
         * @return builder
         * 
         */
        public Builder welcomeMessage(String welcomeMessage) {
            return welcomeMessage(Output.of(welcomeMessage));
        }

        public WirelessSsidsSplashSettingsState build() {
            return $;
        }
    }

}
