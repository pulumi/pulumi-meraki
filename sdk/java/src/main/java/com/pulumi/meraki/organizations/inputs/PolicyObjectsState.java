// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyObjectsState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyObjectsState Empty = new PolicyObjectsState();

    /**
     * Category of a policy object (one of: adaptivePolicy, network)
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Category of a policy object (one of: adaptivePolicy, network)
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * CIDR Value of a policy object (e.g. 10.11.12.1/24&#34;)
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return CIDR Value of a policy object (e.g. 10.11.12.1/24&#34;)
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Fully qualified domain name of policy object (e.g. &#34;example.com&#34;)
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return Fully qualified domain name of policy object (e.g. &#34;example.com&#34;)
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * The IDs of policy object groups the policy object belongs to
     * 
     */
    @Import(name="groupIds")
    private @Nullable Output<List<String>> groupIds;

    /**
     * @return The IDs of policy object groups the policy object belongs to
     * 
     */
    public Optional<Output<List<String>>> groupIds() {
        return Optional.ofNullable(this.groupIds);
    }

    /**
     * IP Address of a policy object (e.g. &#34;1.2.3.4&#34;)
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IP Address of a policy object (e.g. &#34;1.2.3.4&#34;)
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Mask of a policy object (e.g. &#34;255.255.0.0&#34;)
     * 
     */
    @Import(name="mask")
    private @Nullable Output<String> mask;

    /**
     * @return Mask of a policy object (e.g. &#34;255.255.0.0&#34;)
     * 
     */
    public Optional<Output<String>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkIds")
    private @Nullable Output<List<String>> networkIds;

    public Optional<Output<List<String>>> networkIds() {
        return Optional.ofNullable(this.networkIds);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * policyObjectId path parameter. Policy object ID
     * 
     */
    @Import(name="policyObjectId")
    private @Nullable Output<String> policyObjectId;

    /**
     * @return policyObjectId path parameter. Policy object ID
     * 
     */
    public Optional<Output<String>> policyObjectId() {
        return Optional.ofNullable(this.policyObjectId);
    }

    /**
     * Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private PolicyObjectsState() {}

    private PolicyObjectsState(PolicyObjectsState $) {
        this.category = $.category;
        this.cidr = $.cidr;
        this.createdAt = $.createdAt;
        this.fqdn = $.fqdn;
        this.groupIds = $.groupIds;
        this.ip = $.ip;
        this.mask = $.mask;
        this.name = $.name;
        this.networkIds = $.networkIds;
        this.organizationId = $.organizationId;
        this.policyObjectId = $.policyObjectId;
        this.type = $.type;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyObjectsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyObjectsState $;

        public Builder() {
            $ = new PolicyObjectsState();
        }

        public Builder(PolicyObjectsState defaults) {
            $ = new PolicyObjectsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Category of a policy object (one of: adaptivePolicy, network)
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category of a policy object (one of: adaptivePolicy, network)
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param cidr CIDR Value of a policy object (e.g. 10.11.12.1/24&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr CIDR Value of a policy object (e.g. 10.11.12.1/24&#34;)
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param fqdn Fully qualified domain name of policy object (e.g. &#34;example.com&#34;)
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn Fully qualified domain name of policy object (e.g. &#34;example.com&#34;)
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param groupIds The IDs of policy object groups the policy object belongs to
         * 
         * @return builder
         * 
         */
        public Builder groupIds(@Nullable Output<List<String>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds The IDs of policy object groups the policy object belongs to
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<String> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds The IDs of policy object groups the policy object belongs to
         * 
         * @return builder
         * 
         */
        public Builder groupIds(String... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param ip IP Address of a policy object (e.g. &#34;1.2.3.4&#34;)
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP Address of a policy object (e.g. &#34;1.2.3.4&#34;)
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param mask Mask of a policy object (e.g. &#34;255.255.0.0&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable Output<String> mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param mask Mask of a policy object (e.g. &#34;255.255.0.0&#34;)
         * 
         * @return builder
         * 
         */
        public Builder mask(String mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param name Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkIds(@Nullable Output<List<String>> networkIds) {
            $.networkIds = networkIds;
            return this;
        }

        public Builder networkIds(List<String> networkIds) {
            return networkIds(Output.of(networkIds));
        }

        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param policyObjectId policyObjectId path parameter. Policy object ID
         * 
         * @return builder
         * 
         */
        public Builder policyObjectId(@Nullable Output<String> policyObjectId) {
            $.policyObjectId = policyObjectId;
            return this;
        }

        /**
         * @param policyObjectId policyObjectId path parameter. Policy object ID
         * 
         * @return builder
         * 
         */
        public Builder policyObjectId(String policyObjectId) {
            return policyObjectId(Output.of(policyObjectId));
        }

        /**
         * @param type Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public PolicyObjectsState build() {
            return $;
        }
    }

}
