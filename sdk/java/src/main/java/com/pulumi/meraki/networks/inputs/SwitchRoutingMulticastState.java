// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SwitchRoutingMulticastDefaultSettingsArgs;
import com.pulumi.meraki.networks.inputs.SwitchRoutingMulticastOverrideArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchRoutingMulticastState extends com.pulumi.resources.ResourceArgs {

    public static final SwitchRoutingMulticastState Empty = new SwitchRoutingMulticastState();

    /**
     * Default multicast setting for entire network. IGMP snooping and Flood unknown
     *   multicast traffic settings are enabled by default.
     * 
     */
    @Import(name="defaultSettings")
    private @Nullable Output<SwitchRoutingMulticastDefaultSettingsArgs> defaultSettings;

    /**
     * @return Default multicast setting for entire network. IGMP snooping and Flood unknown
     *   multicast traffic settings are enabled by default.
     * 
     */
    public Optional<Output<SwitchRoutingMulticastDefaultSettingsArgs>> defaultSettings() {
        return Optional.ofNullable(this.defaultSettings);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Array of paired switches/stacks/profiles and corresponding multicast settings.
     *   An empty array will clear the multicast settings.
     * 
     */
    @Import(name="overrides")
    private @Nullable Output<List<SwitchRoutingMulticastOverrideArgs>> overrides;

    /**
     * @return Array of paired switches/stacks/profiles and corresponding multicast settings.
     *   An empty array will clear the multicast settings.
     * 
     */
    public Optional<Output<List<SwitchRoutingMulticastOverrideArgs>>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    private SwitchRoutingMulticastState() {}

    private SwitchRoutingMulticastState(SwitchRoutingMulticastState $) {
        this.defaultSettings = $.defaultSettings;
        this.networkId = $.networkId;
        this.overrides = $.overrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchRoutingMulticastState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchRoutingMulticastState $;

        public Builder() {
            $ = new SwitchRoutingMulticastState();
        }

        public Builder(SwitchRoutingMulticastState defaults) {
            $ = new SwitchRoutingMulticastState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultSettings Default multicast setting for entire network. IGMP snooping and Flood unknown
         *   multicast traffic settings are enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder defaultSettings(@Nullable Output<SwitchRoutingMulticastDefaultSettingsArgs> defaultSettings) {
            $.defaultSettings = defaultSettings;
            return this;
        }

        /**
         * @param defaultSettings Default multicast setting for entire network. IGMP snooping and Flood unknown
         *   multicast traffic settings are enabled by default.
         * 
         * @return builder
         * 
         */
        public Builder defaultSettings(SwitchRoutingMulticastDefaultSettingsArgs defaultSettings) {
            return defaultSettings(Output.of(defaultSettings));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param overrides Array of paired switches/stacks/profiles and corresponding multicast settings.
         *   An empty array will clear the multicast settings.
         * 
         * @return builder
         * 
         */
        public Builder overrides(@Nullable Output<List<SwitchRoutingMulticastOverrideArgs>> overrides) {
            $.overrides = overrides;
            return this;
        }

        /**
         * @param overrides Array of paired switches/stacks/profiles and corresponding multicast settings.
         *   An empty array will clear the multicast settings.
         * 
         * @return builder
         * 
         */
        public Builder overrides(List<SwitchRoutingMulticastOverrideArgs> overrides) {
            return overrides(Output.of(overrides));
        }

        /**
         * @param overrides Array of paired switches/stacks/profiles and corresponding multicast settings.
         *   An empty array will clear the multicast settings.
         * 
         * @return builder
         * 
         */
        public Builder overrides(SwitchRoutingMulticastOverrideArgs... overrides) {
            return overrides(List.of(overrides));
        }

        public SwitchRoutingMulticastState build() {
            return $;
        }
    }

}
