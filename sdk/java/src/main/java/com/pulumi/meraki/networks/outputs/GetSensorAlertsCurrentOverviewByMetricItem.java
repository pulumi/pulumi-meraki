// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsCurrentOverviewByMetricItemCounts;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSensorAlertsCurrentOverviewByMetricItem {
    /**
     * @return Counts of currently alerting sensors, aggregated by alerting metric
     * 
     */
    private GetSensorAlertsCurrentOverviewByMetricItemCounts counts;
    /**
     * @return List of metrics that are supported for alerts, based on available sensor devices in the network
     * 
     */
    private List<String> supportedMetrics;

    private GetSensorAlertsCurrentOverviewByMetricItem() {}
    /**
     * @return Counts of currently alerting sensors, aggregated by alerting metric
     * 
     */
    public GetSensorAlertsCurrentOverviewByMetricItemCounts counts() {
        return this.counts;
    }
    /**
     * @return List of metrics that are supported for alerts, based on available sensor devices in the network
     * 
     */
    public List<String> supportedMetrics() {
        return this.supportedMetrics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorAlertsCurrentOverviewByMetricItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorAlertsCurrentOverviewByMetricItemCounts counts;
        private List<String> supportedMetrics;
        public Builder() {}
        public Builder(GetSensorAlertsCurrentOverviewByMetricItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counts = defaults.counts;
    	      this.supportedMetrics = defaults.supportedMetrics;
        }

        @CustomType.Setter
        public Builder counts(GetSensorAlertsCurrentOverviewByMetricItemCounts counts) {
            if (counts == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsCurrentOverviewByMetricItem", "counts");
            }
            this.counts = counts;
            return this;
        }
        @CustomType.Setter
        public Builder supportedMetrics(List<String> supportedMetrics) {
            if (supportedMetrics == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsCurrentOverviewByMetricItem", "supportedMetrics");
            }
            this.supportedMetrics = supportedMetrics;
            return this;
        }
        public Builder supportedMetrics(String... supportedMetrics) {
            return supportedMetrics(List.of(supportedMetrics));
        }
        public GetSensorAlertsCurrentOverviewByMetricItem build() {
            final var _resultValue = new GetSensorAlertsCurrentOverviewByMetricItem();
            _resultValue.counts = counts;
            _resultValue.supportedMetrics = supportedMetrics;
            return _resultValue;
        }
    }
}
