// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsHotspot20NaiRealmMethodAuthenticationTypesArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsHotspot20NaiRealmMethodArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsHotspot20NaiRealmMethodArgs Empty = new WirelessSsidsHotspot20NaiRealmMethodArgs();

    /**
     * The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
     * 
     */
    @Import(name="authenticationTypes")
    private @Nullable Output<WirelessSsidsHotspot20NaiRealmMethodAuthenticationTypesArgs> authenticationTypes;

    /**
     * @return The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
     * 
     */
    public Optional<Output<WirelessSsidsHotspot20NaiRealmMethodAuthenticationTypesArgs>> authenticationTypes() {
        return Optional.ofNullable(this.authenticationTypes);
    }

    /**
     * ID of method
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of method
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    private WirelessSsidsHotspot20NaiRealmMethodArgs() {}

    private WirelessSsidsHotspot20NaiRealmMethodArgs(WirelessSsidsHotspot20NaiRealmMethodArgs $) {
        this.authenticationTypes = $.authenticationTypes;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsHotspot20NaiRealmMethodArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsHotspot20NaiRealmMethodArgs $;

        public Builder() {
            $ = new WirelessSsidsHotspot20NaiRealmMethodArgs();
        }

        public Builder(WirelessSsidsHotspot20NaiRealmMethodArgs defaults) {
            $ = new WirelessSsidsHotspot20NaiRealmMethodArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationTypes The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypes(@Nullable Output<WirelessSsidsHotspot20NaiRealmMethodAuthenticationTypesArgs> authenticationTypes) {
            $.authenticationTypes = authenticationTypes;
            return this;
        }

        /**
         * @param authenticationTypes The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypes(WirelessSsidsHotspot20NaiRealmMethodAuthenticationTypesArgs authenticationTypes) {
            return authenticationTypes(Output.of(authenticationTypes));
        }

        /**
         * @param id ID of method
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of method
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public WirelessSsidsHotspot20NaiRealmMethodArgs build() {
            return $;
        }
    }

}
