// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.organizations.outputs.LicensingCotermLicensesMoveItemRemainderLicenseCount;
import com.pulumi.meraki.organizations.outputs.LicensingCotermLicensesMoveItemRemainderLicenseEdition;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LicensingCotermLicensesMoveItemRemainderLicense {
    /**
     * @return When the license was claimed into the organization
     * 
     */
    private @Nullable String claimedAt;
    /**
     * @return The counts of the license by model type
     * 
     */
    private @Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseCount> counts;
    /**
     * @return The duration (term length) of the license, measured in days
     * 
     */
    private @Nullable Integer duration;
    /**
     * @return The editions of the license for each relevant product type
     * 
     */
    private @Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseEdition> editions;
    /**
     * @return Flag to indicate if the license is expired
     * 
     */
    private @Nullable Boolean expired;
    /**
     * @return Flag to indicated that the license is invalidated
     * 
     */
    private @Nullable Boolean invalidated;
    /**
     * @return When the license was invalidated. Will be null for active licenses
     * 
     */
    private @Nullable String invalidatedAt;
    /**
     * @return The key of the license
     * 
     */
    private @Nullable String key;
    /**
     * @return The operation mode of the license when it was claimed
     * 
     */
    private @Nullable String mode;
    /**
     * @return The ID of the organization that the license is claimed in
     * 
     */
    private @Nullable String organizationId;
    /**
     * @return When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    private @Nullable String startedAt;

    private LicensingCotermLicensesMoveItemRemainderLicense() {}
    /**
     * @return When the license was claimed into the organization
     * 
     */
    public Optional<String> claimedAt() {
        return Optional.ofNullable(this.claimedAt);
    }
    /**
     * @return The counts of the license by model type
     * 
     */
    public List<LicensingCotermLicensesMoveItemRemainderLicenseCount> counts() {
        return this.counts == null ? List.of() : this.counts;
    }
    /**
     * @return The duration (term length) of the license, measured in days
     * 
     */
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return The editions of the license for each relevant product type
     * 
     */
    public List<LicensingCotermLicensesMoveItemRemainderLicenseEdition> editions() {
        return this.editions == null ? List.of() : this.editions;
    }
    /**
     * @return Flag to indicate if the license is expired
     * 
     */
    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }
    /**
     * @return Flag to indicated that the license is invalidated
     * 
     */
    public Optional<Boolean> invalidated() {
        return Optional.ofNullable(this.invalidated);
    }
    /**
     * @return When the license was invalidated. Will be null for active licenses
     * 
     */
    public Optional<String> invalidatedAt() {
        return Optional.ofNullable(this.invalidatedAt);
    }
    /**
     * @return The key of the license
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return The operation mode of the license when it was claimed
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The ID of the organization that the license is claimed in
     * 
     */
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }
    /**
     * @return When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    public Optional<String> startedAt() {
        return Optional.ofNullable(this.startedAt);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicensingCotermLicensesMoveItemRemainderLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String claimedAt;
        private @Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseCount> counts;
        private @Nullable Integer duration;
        private @Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseEdition> editions;
        private @Nullable Boolean expired;
        private @Nullable Boolean invalidated;
        private @Nullable String invalidatedAt;
        private @Nullable String key;
        private @Nullable String mode;
        private @Nullable String organizationId;
        private @Nullable String startedAt;
        public Builder() {}
        public Builder(LicensingCotermLicensesMoveItemRemainderLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.claimedAt = defaults.claimedAt;
    	      this.counts = defaults.counts;
    	      this.duration = defaults.duration;
    	      this.editions = defaults.editions;
    	      this.expired = defaults.expired;
    	      this.invalidated = defaults.invalidated;
    	      this.invalidatedAt = defaults.invalidatedAt;
    	      this.key = defaults.key;
    	      this.mode = defaults.mode;
    	      this.organizationId = defaults.organizationId;
    	      this.startedAt = defaults.startedAt;
        }

        @CustomType.Setter
        public Builder claimedAt(@Nullable String claimedAt) {

            this.claimedAt = claimedAt;
            return this;
        }
        @CustomType.Setter
        public Builder counts(@Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseCount> counts) {

            this.counts = counts;
            return this;
        }
        public Builder counts(LicensingCotermLicensesMoveItemRemainderLicenseCount... counts) {
            return counts(List.of(counts));
        }
        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder editions(@Nullable List<LicensingCotermLicensesMoveItemRemainderLicenseEdition> editions) {

            this.editions = editions;
            return this;
        }
        public Builder editions(LicensingCotermLicensesMoveItemRemainderLicenseEdition... editions) {
            return editions(List.of(editions));
        }
        @CustomType.Setter
        public Builder expired(@Nullable Boolean expired) {

            this.expired = expired;
            return this;
        }
        @CustomType.Setter
        public Builder invalidated(@Nullable Boolean invalidated) {

            this.invalidated = invalidated;
            return this;
        }
        @CustomType.Setter
        public Builder invalidatedAt(@Nullable String invalidatedAt) {

            this.invalidatedAt = invalidatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(@Nullable String organizationId) {

            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder startedAt(@Nullable String startedAt) {

            this.startedAt = startedAt;
            return this;
        }
        public LicensingCotermLicensesMoveItemRemainderLicense build() {
            final var _resultValue = new LicensingCotermLicensesMoveItemRemainderLicense();
            _resultValue.claimedAt = claimedAt;
            _resultValue.counts = counts;
            _resultValue.duration = duration;
            _resultValue.editions = editions;
            _resultValue.expired = expired;
            _resultValue.invalidated = invalidated;
            _resultValue.invalidatedAt = invalidatedAt;
            _resultValue.key = key;
            _resultValue.mode = mode;
            _resultValue.organizationId = organizationId;
            _resultValue.startedAt = startedAt;
            return _resultValue;
        }
    }
}
