// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesApBandSettingsArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesFiveGhzSettingsArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesFlexRadiosArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesPerSsidSettingsArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesSixGhzSettingsArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesTransmissionArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesTwoFourGhzSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessRfProfilesArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessRfProfilesArgs Empty = new WirelessRfProfilesArgs();

    /**
     * Settings that will be enabled if selectionType is set to &#39;ap&#39;.
     * 
     */
    @Import(name="apBandSettings")
    private @Nullable Output<WirelessRfProfilesApBandSettingsArgs> apBandSettings;

    /**
     * @return Settings that will be enabled if selectionType is set to &#39;ap&#39;.
     * 
     */
    public Optional<Output<WirelessRfProfilesApBandSettingsArgs>> apBandSettings() {
        return Optional.ofNullable(this.apBandSettings);
    }

    /**
     * Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
     * 
     */
    @Import(name="bandSelectionType")
    private @Nullable Output<String> bandSelectionType;

    /**
     * @return Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
     * 
     */
    public Optional<Output<String>> bandSelectionType() {
        return Optional.ofNullable(this.bandSelectionType);
    }

    /**
     * Steers client to best available access point. Can be either true or false. Defaults to true.
     * 
     */
    @Import(name="clientBalancingEnabled")
    private @Nullable Output<Boolean> clientBalancingEnabled;

    /**
     * @return Steers client to best available access point. Can be either true or false. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> clientBalancingEnabled() {
        return Optional.ofNullable(this.clientBalancingEnabled);
    }

    /**
     * Settings related to 5Ghz band
     * 
     */
    @Import(name="fiveGhzSettings")
    private @Nullable Output<WirelessRfProfilesFiveGhzSettingsArgs> fiveGhzSettings;

    /**
     * @return Settings related to 5Ghz band
     * 
     */
    public Optional<Output<WirelessRfProfilesFiveGhzSettingsArgs>> fiveGhzSettings() {
        return Optional.ofNullable(this.fiveGhzSettings);
    }

    /**
     * Flex radio settings.
     * 
     */
    @Import(name="flexRadios")
    private @Nullable Output<WirelessRfProfilesFlexRadiosArgs> flexRadios;

    /**
     * @return Flex radio settings.
     * 
     */
    public Optional<Output<WirelessRfProfilesFlexRadiosArgs>> flexRadios() {
        return Optional.ofNullable(this.flexRadios);
    }

    /**
     * Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
     * 
     */
    @Import(name="minBitrateType")
    private @Nullable Output<String> minBitrateType;

    /**
     * @return Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
     * 
     */
    public Optional<Output<String>> minBitrateType() {
        return Optional.ofNullable(this.minBitrateType);
    }

    /**
     * The name of the new profile. Must be unique. This param is required on creation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the new profile. Must be unique. This param is required on creation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network ID of the RF Profile
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return The network ID of the RF Profile
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Per-SSID radio settings by number.
     * 
     */
    @Import(name="perSsidSettings")
    private @Nullable Output<WirelessRfProfilesPerSsidSettingsArgs> perSsidSettings;

    /**
     * @return Per-SSID radio settings by number.
     * 
     */
    public Optional<Output<WirelessRfProfilesPerSsidSettingsArgs>> perSsidSettings() {
        return Optional.ofNullable(this.perSsidSettings);
    }

    /**
     * rfProfileId path parameter. Rf profile ID
     * 
     */
    @Import(name="rfProfileId")
    private @Nullable Output<String> rfProfileId;

    /**
     * @return rfProfileId path parameter. Rf profile ID
     * 
     */
    public Optional<Output<String>> rfProfileId() {
        return Optional.ofNullable(this.rfProfileId);
    }

    /**
     * Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
     * 
     */
    @Import(name="sixGhzSettings")
    private @Nullable Output<WirelessRfProfilesSixGhzSettingsArgs> sixGhzSettings;

    /**
     * @return Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
     * 
     */
    public Optional<Output<WirelessRfProfilesSixGhzSettingsArgs>> sixGhzSettings() {
        return Optional.ofNullable(this.sixGhzSettings);
    }

    /**
     * Settings related to radio transmission.
     * 
     */
    @Import(name="transmission")
    private @Nullable Output<WirelessRfProfilesTransmissionArgs> transmission;

    /**
     * @return Settings related to radio transmission.
     * 
     */
    public Optional<Output<WirelessRfProfilesTransmissionArgs>> transmission() {
        return Optional.ofNullable(this.transmission);
    }

    /**
     * Settings related to 2.4Ghz band
     * 
     */
    @Import(name="twoFourGhzSettings")
    private @Nullable Output<WirelessRfProfilesTwoFourGhzSettingsArgs> twoFourGhzSettings;

    /**
     * @return Settings related to 2.4Ghz band
     * 
     */
    public Optional<Output<WirelessRfProfilesTwoFourGhzSettingsArgs>> twoFourGhzSettings() {
        return Optional.ofNullable(this.twoFourGhzSettings);
    }

    private WirelessRfProfilesArgs() {}

    private WirelessRfProfilesArgs(WirelessRfProfilesArgs $) {
        this.apBandSettings = $.apBandSettings;
        this.bandSelectionType = $.bandSelectionType;
        this.clientBalancingEnabled = $.clientBalancingEnabled;
        this.fiveGhzSettings = $.fiveGhzSettings;
        this.flexRadios = $.flexRadios;
        this.minBitrateType = $.minBitrateType;
        this.name = $.name;
        this.networkId = $.networkId;
        this.perSsidSettings = $.perSsidSettings;
        this.rfProfileId = $.rfProfileId;
        this.sixGhzSettings = $.sixGhzSettings;
        this.transmission = $.transmission;
        this.twoFourGhzSettings = $.twoFourGhzSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessRfProfilesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessRfProfilesArgs $;

        public Builder() {
            $ = new WirelessRfProfilesArgs();
        }

        public Builder(WirelessRfProfilesArgs defaults) {
            $ = new WirelessRfProfilesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apBandSettings Settings that will be enabled if selectionType is set to &#39;ap&#39;.
         * 
         * @return builder
         * 
         */
        public Builder apBandSettings(@Nullable Output<WirelessRfProfilesApBandSettingsArgs> apBandSettings) {
            $.apBandSettings = apBandSettings;
            return this;
        }

        /**
         * @param apBandSettings Settings that will be enabled if selectionType is set to &#39;ap&#39;.
         * 
         * @return builder
         * 
         */
        public Builder apBandSettings(WirelessRfProfilesApBandSettingsArgs apBandSettings) {
            return apBandSettings(Output.of(apBandSettings));
        }

        /**
         * @param bandSelectionType Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
         * 
         * @return builder
         * 
         */
        public Builder bandSelectionType(@Nullable Output<String> bandSelectionType) {
            $.bandSelectionType = bandSelectionType;
            return this;
        }

        /**
         * @param bandSelectionType Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
         * 
         * @return builder
         * 
         */
        public Builder bandSelectionType(String bandSelectionType) {
            return bandSelectionType(Output.of(bandSelectionType));
        }

        /**
         * @param clientBalancingEnabled Steers client to best available access point. Can be either true or false. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder clientBalancingEnabled(@Nullable Output<Boolean> clientBalancingEnabled) {
            $.clientBalancingEnabled = clientBalancingEnabled;
            return this;
        }

        /**
         * @param clientBalancingEnabled Steers client to best available access point. Can be either true or false. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder clientBalancingEnabled(Boolean clientBalancingEnabled) {
            return clientBalancingEnabled(Output.of(clientBalancingEnabled));
        }

        /**
         * @param fiveGhzSettings Settings related to 5Ghz band
         * 
         * @return builder
         * 
         */
        public Builder fiveGhzSettings(@Nullable Output<WirelessRfProfilesFiveGhzSettingsArgs> fiveGhzSettings) {
            $.fiveGhzSettings = fiveGhzSettings;
            return this;
        }

        /**
         * @param fiveGhzSettings Settings related to 5Ghz band
         * 
         * @return builder
         * 
         */
        public Builder fiveGhzSettings(WirelessRfProfilesFiveGhzSettingsArgs fiveGhzSettings) {
            return fiveGhzSettings(Output.of(fiveGhzSettings));
        }

        /**
         * @param flexRadios Flex radio settings.
         * 
         * @return builder
         * 
         */
        public Builder flexRadios(@Nullable Output<WirelessRfProfilesFlexRadiosArgs> flexRadios) {
            $.flexRadios = flexRadios;
            return this;
        }

        /**
         * @param flexRadios Flex radio settings.
         * 
         * @return builder
         * 
         */
        public Builder flexRadios(WirelessRfProfilesFlexRadiosArgs flexRadios) {
            return flexRadios(Output.of(flexRadios));
        }

        /**
         * @param minBitrateType Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
         * 
         * @return builder
         * 
         */
        public Builder minBitrateType(@Nullable Output<String> minBitrateType) {
            $.minBitrateType = minBitrateType;
            return this;
        }

        /**
         * @param minBitrateType Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
         * 
         * @return builder
         * 
         */
        public Builder minBitrateType(String minBitrateType) {
            return minBitrateType(Output.of(minBitrateType));
        }

        /**
         * @param name The name of the new profile. Must be unique. This param is required on creation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the new profile. Must be unique. This param is required on creation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId The network ID of the RF Profile
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId The network ID of the RF Profile
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param perSsidSettings Per-SSID radio settings by number.
         * 
         * @return builder
         * 
         */
        public Builder perSsidSettings(@Nullable Output<WirelessRfProfilesPerSsidSettingsArgs> perSsidSettings) {
            $.perSsidSettings = perSsidSettings;
            return this;
        }

        /**
         * @param perSsidSettings Per-SSID radio settings by number.
         * 
         * @return builder
         * 
         */
        public Builder perSsidSettings(WirelessRfProfilesPerSsidSettingsArgs perSsidSettings) {
            return perSsidSettings(Output.of(perSsidSettings));
        }

        /**
         * @param rfProfileId rfProfileId path parameter. Rf profile ID
         * 
         * @return builder
         * 
         */
        public Builder rfProfileId(@Nullable Output<String> rfProfileId) {
            $.rfProfileId = rfProfileId;
            return this;
        }

        /**
         * @param rfProfileId rfProfileId path parameter. Rf profile ID
         * 
         * @return builder
         * 
         */
        public Builder rfProfileId(String rfProfileId) {
            return rfProfileId(Output.of(rfProfileId));
        }

        /**
         * @param sixGhzSettings Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
         * 
         * @return builder
         * 
         */
        public Builder sixGhzSettings(@Nullable Output<WirelessRfProfilesSixGhzSettingsArgs> sixGhzSettings) {
            $.sixGhzSettings = sixGhzSettings;
            return this;
        }

        /**
         * @param sixGhzSettings Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
         * 
         * @return builder
         * 
         */
        public Builder sixGhzSettings(WirelessRfProfilesSixGhzSettingsArgs sixGhzSettings) {
            return sixGhzSettings(Output.of(sixGhzSettings));
        }

        /**
         * @param transmission Settings related to radio transmission.
         * 
         * @return builder
         * 
         */
        public Builder transmission(@Nullable Output<WirelessRfProfilesTransmissionArgs> transmission) {
            $.transmission = transmission;
            return this;
        }

        /**
         * @param transmission Settings related to radio transmission.
         * 
         * @return builder
         * 
         */
        public Builder transmission(WirelessRfProfilesTransmissionArgs transmission) {
            return transmission(Output.of(transmission));
        }

        /**
         * @param twoFourGhzSettings Settings related to 2.4Ghz band
         * 
         * @return builder
         * 
         */
        public Builder twoFourGhzSettings(@Nullable Output<WirelessRfProfilesTwoFourGhzSettingsArgs> twoFourGhzSettings) {
            $.twoFourGhzSettings = twoFourGhzSettings;
            return this;
        }

        /**
         * @param twoFourGhzSettings Settings related to 2.4Ghz band
         * 
         * @return builder
         * 
         */
        public Builder twoFourGhzSettings(WirelessRfProfilesTwoFourGhzSettingsArgs twoFourGhzSettings) {
            return twoFourGhzSettings(Output.of(twoFourGhzSettings));
        }

        public WirelessRfProfilesArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("WirelessRfProfilesArgs", "networkId");
            }
            return $;
        }
    }

}
