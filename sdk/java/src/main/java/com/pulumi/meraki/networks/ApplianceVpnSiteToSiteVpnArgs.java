// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.ApplianceVpnSiteToSiteVpnHubArgs;
import com.pulumi.meraki.networks.inputs.ApplianceVpnSiteToSiteVpnSubnetArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceVpnSiteToSiteVpnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceVpnSiteToSiteVpnArgs Empty = new ApplianceVpnSiteToSiteVpnArgs();

    /**
     * The list of VPN hubs, in order of preference.
     * 
     */
    @Import(name="hubs")
    private @Nullable Output<List<ApplianceVpnSiteToSiteVpnHubArgs>> hubs;

    /**
     * @return The list of VPN hubs, in order of preference.
     * 
     */
    public Optional<Output<List<ApplianceVpnSiteToSiteVpnHubArgs>>> hubs() {
        return Optional.ofNullable(this.hubs);
    }

    /**
     * The site-to-site VPN mode.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The site-to-site VPN mode.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The list of subnets and their VPN presence.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<ApplianceVpnSiteToSiteVpnSubnetArgs>> subnets;

    /**
     * @return The list of subnets and their VPN presence.
     * 
     */
    public Optional<Output<List<ApplianceVpnSiteToSiteVpnSubnetArgs>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    private ApplianceVpnSiteToSiteVpnArgs() {}

    private ApplianceVpnSiteToSiteVpnArgs(ApplianceVpnSiteToSiteVpnArgs $) {
        this.hubs = $.hubs;
        this.mode = $.mode;
        this.networkId = $.networkId;
        this.subnets = $.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceVpnSiteToSiteVpnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceVpnSiteToSiteVpnArgs $;

        public Builder() {
            $ = new ApplianceVpnSiteToSiteVpnArgs();
        }

        public Builder(ApplianceVpnSiteToSiteVpnArgs defaults) {
            $ = new ApplianceVpnSiteToSiteVpnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hubs The list of VPN hubs, in order of preference.
         * 
         * @return builder
         * 
         */
        public Builder hubs(@Nullable Output<List<ApplianceVpnSiteToSiteVpnHubArgs>> hubs) {
            $.hubs = hubs;
            return this;
        }

        /**
         * @param hubs The list of VPN hubs, in order of preference.
         * 
         * @return builder
         * 
         */
        public Builder hubs(List<ApplianceVpnSiteToSiteVpnHubArgs> hubs) {
            return hubs(Output.of(hubs));
        }

        /**
         * @param hubs The list of VPN hubs, in order of preference.
         * 
         * @return builder
         * 
         */
        public Builder hubs(ApplianceVpnSiteToSiteVpnHubArgs... hubs) {
            return hubs(List.of(hubs));
        }

        /**
         * @param mode The site-to-site VPN mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The site-to-site VPN mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param subnets The list of subnets and their VPN presence.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<ApplianceVpnSiteToSiteVpnSubnetArgs>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets The list of subnets and their VPN presence.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<ApplianceVpnSiteToSiteVpnSubnetArgs> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets The list of subnets and their VPN presence.
         * 
         * @return builder
         * 
         */
        public Builder subnets(ApplianceVpnSiteToSiteVpnSubnetArgs... subnets) {
            return subnets(List.of(subnets));
        }

        public ApplianceVpnSiteToSiteVpnArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("ApplianceVpnSiteToSiteVpnArgs", "networkId");
            }
            return $;
        }
    }

}
