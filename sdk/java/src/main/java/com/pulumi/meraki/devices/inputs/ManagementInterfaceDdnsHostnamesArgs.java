// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementInterfaceDdnsHostnamesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementInterfaceDdnsHostnamesArgs Empty = new ManagementInterfaceDdnsHostnamesArgs();

    /**
     * Active dynamic DNS hostname.
     * 
     */
    @Import(name="activeDdnsHostname")
    private @Nullable Output<String> activeDdnsHostname;

    /**
     * @return Active dynamic DNS hostname.
     * 
     */
    public Optional<Output<String>> activeDdnsHostname() {
        return Optional.ofNullable(this.activeDdnsHostname);
    }

    /**
     * WAN 1 dynamic DNS hostname.
     * 
     */
    @Import(name="ddnsHostnameWan1")
    private @Nullable Output<String> ddnsHostnameWan1;

    /**
     * @return WAN 1 dynamic DNS hostname.
     * 
     */
    public Optional<Output<String>> ddnsHostnameWan1() {
        return Optional.ofNullable(this.ddnsHostnameWan1);
    }

    /**
     * WAN 2 dynamic DNS hostname.
     * 
     */
    @Import(name="ddnsHostnameWan2")
    private @Nullable Output<String> ddnsHostnameWan2;

    /**
     * @return WAN 2 dynamic DNS hostname.
     * 
     */
    public Optional<Output<String>> ddnsHostnameWan2() {
        return Optional.ofNullable(this.ddnsHostnameWan2);
    }

    private ManagementInterfaceDdnsHostnamesArgs() {}

    private ManagementInterfaceDdnsHostnamesArgs(ManagementInterfaceDdnsHostnamesArgs $) {
        this.activeDdnsHostname = $.activeDdnsHostname;
        this.ddnsHostnameWan1 = $.ddnsHostnameWan1;
        this.ddnsHostnameWan2 = $.ddnsHostnameWan2;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementInterfaceDdnsHostnamesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementInterfaceDdnsHostnamesArgs $;

        public Builder() {
            $ = new ManagementInterfaceDdnsHostnamesArgs();
        }

        public Builder(ManagementInterfaceDdnsHostnamesArgs defaults) {
            $ = new ManagementInterfaceDdnsHostnamesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDdnsHostname Active dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder activeDdnsHostname(@Nullable Output<String> activeDdnsHostname) {
            $.activeDdnsHostname = activeDdnsHostname;
            return this;
        }

        /**
         * @param activeDdnsHostname Active dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder activeDdnsHostname(String activeDdnsHostname) {
            return activeDdnsHostname(Output.of(activeDdnsHostname));
        }

        /**
         * @param ddnsHostnameWan1 WAN 1 dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder ddnsHostnameWan1(@Nullable Output<String> ddnsHostnameWan1) {
            $.ddnsHostnameWan1 = ddnsHostnameWan1;
            return this;
        }

        /**
         * @param ddnsHostnameWan1 WAN 1 dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder ddnsHostnameWan1(String ddnsHostnameWan1) {
            return ddnsHostnameWan1(Output.of(ddnsHostnameWan1));
        }

        /**
         * @param ddnsHostnameWan2 WAN 2 dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder ddnsHostnameWan2(@Nullable Output<String> ddnsHostnameWan2) {
            $.ddnsHostnameWan2 = ddnsHostnameWan2;
            return this;
        }

        /**
         * @param ddnsHostnameWan2 WAN 2 dynamic DNS hostname.
         * 
         * @return builder
         * 
         */
        public Builder ddnsHostnameWan2(String ddnsHostnameWan2) {
            return ddnsHostnameWan2(Output.of(ddnsHostnameWan2));
        }

        public ManagementInterfaceDdnsHostnamesArgs build() {
            return $;
        }
    }

}
