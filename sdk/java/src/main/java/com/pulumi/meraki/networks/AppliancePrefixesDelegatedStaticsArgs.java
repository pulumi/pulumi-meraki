// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.AppliancePrefixesDelegatedStaticsOriginArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppliancePrefixesDelegatedStaticsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppliancePrefixesDelegatedStaticsArgs Empty = new AppliancePrefixesDelegatedStaticsArgs();

    /**
     * Identifying description for the prefix.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Identifying description for the prefix.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * WAN1/WAN2/Independent prefix.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<AppliancePrefixesDelegatedStaticsOriginArgs> origin;

    /**
     * @return WAN1/WAN2/Independent prefix.
     * 
     */
    public Optional<Output<AppliancePrefixesDelegatedStaticsOriginArgs>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * IPv6 prefix/prefix length.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return IPv6 prefix/prefix length.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Static delegated prefix id.
     * 
     */
    @Import(name="staticDelegatedPrefixId")
    private @Nullable Output<String> staticDelegatedPrefixId;

    /**
     * @return Static delegated prefix id.
     * 
     */
    public Optional<Output<String>> staticDelegatedPrefixId() {
        return Optional.ofNullable(this.staticDelegatedPrefixId);
    }

    private AppliancePrefixesDelegatedStaticsArgs() {}

    private AppliancePrefixesDelegatedStaticsArgs(AppliancePrefixesDelegatedStaticsArgs $) {
        this.description = $.description;
        this.networkId = $.networkId;
        this.origin = $.origin;
        this.prefix = $.prefix;
        this.staticDelegatedPrefixId = $.staticDelegatedPrefixId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppliancePrefixesDelegatedStaticsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppliancePrefixesDelegatedStaticsArgs $;

        public Builder() {
            $ = new AppliancePrefixesDelegatedStaticsArgs();
        }

        public Builder(AppliancePrefixesDelegatedStaticsArgs defaults) {
            $ = new AppliancePrefixesDelegatedStaticsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Identifying description for the prefix.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Identifying description for the prefix.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param origin WAN1/WAN2/Independent prefix.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<AppliancePrefixesDelegatedStaticsOriginArgs> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin WAN1/WAN2/Independent prefix.
         * 
         * @return builder
         * 
         */
        public Builder origin(AppliancePrefixesDelegatedStaticsOriginArgs origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param prefix IPv6 prefix/prefix length.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix IPv6 prefix/prefix length.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param staticDelegatedPrefixId Static delegated prefix id.
         * 
         * @return builder
         * 
         */
        public Builder staticDelegatedPrefixId(@Nullable Output<String> staticDelegatedPrefixId) {
            $.staticDelegatedPrefixId = staticDelegatedPrefixId;
            return this;
        }

        /**
         * @param staticDelegatedPrefixId Static delegated prefix id.
         * 
         * @return builder
         * 
         */
        public Builder staticDelegatedPrefixId(String staticDelegatedPrefixId) {
            return staticDelegatedPrefixId(Output.of(staticDelegatedPrefixId));
        }

        public AppliancePrefixesDelegatedStaticsArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("AppliancePrefixesDelegatedStaticsArgs", "networkId");
            }
            return $;
        }
    }

}
