// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final BaseArgs Empty = new BaseArgs();

    /**
     * Enrollment string for the network
     * 
     */
    @Import(name="enrollmentString")
    private @Nullable Output<String> enrollmentString;

    /**
     * @return Enrollment string for the network
     * 
     */
    public Optional<Output<String>> enrollmentString() {
        return Optional.ofNullable(this.enrollmentString);
    }

    /**
     * Network name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Network name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Notes for the network
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Notes for the network
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * List of the product types that the network supports
     * 
     */
    @Import(name="productTypes")
    private @Nullable Output<List<String>> productTypes;

    /**
     * @return List of the product types that the network supports
     * 
     */
    public Optional<Output<List<String>>> productTypes() {
        return Optional.ofNullable(this.productTypes);
    }

    /**
     * Network tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Network tags
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Timezone of the network
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return Timezone of the network
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private BaseArgs() {}

    private BaseArgs(BaseArgs $) {
        this.enrollmentString = $.enrollmentString;
        this.name = $.name;
        this.networkId = $.networkId;
        this.notes = $.notes;
        this.organizationId = $.organizationId;
        this.productTypes = $.productTypes;
        this.tags = $.tags;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaseArgs $;

        public Builder() {
            $ = new BaseArgs();
        }

        public Builder(BaseArgs defaults) {
            $ = new BaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enrollmentString Enrollment string for the network
         * 
         * @return builder
         * 
         */
        public Builder enrollmentString(@Nullable Output<String> enrollmentString) {
            $.enrollmentString = enrollmentString;
            return this;
        }

        /**
         * @param enrollmentString Enrollment string for the network
         * 
         * @return builder
         * 
         */
        public Builder enrollmentString(String enrollmentString) {
            return enrollmentString(Output.of(enrollmentString));
        }

        /**
         * @param name Network name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Network name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param notes Notes for the network
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Notes for the network
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param organizationId Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param productTypes List of the product types that the network supports
         * 
         * @return builder
         * 
         */
        public Builder productTypes(@Nullable Output<List<String>> productTypes) {
            $.productTypes = productTypes;
            return this;
        }

        /**
         * @param productTypes List of the product types that the network supports
         * 
         * @return builder
         * 
         */
        public Builder productTypes(List<String> productTypes) {
            return productTypes(Output.of(productTypes));
        }

        /**
         * @param productTypes List of the product types that the network supports
         * 
         * @return builder
         * 
         */
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }

        /**
         * @param tags Network tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Network tags
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Network tags
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeZone Timezone of the network
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone Timezone of the network
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public BaseArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("BaseArgs", "organizationId");
            }
            return $;
        }
    }

}
