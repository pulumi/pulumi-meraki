// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensesArgs Empty = new LicensesArgs();

    /**
     * Serial number of the device the license is assigned to
     * 
     */
    @Import(name="deviceSerial")
    private @Nullable Output<String> deviceSerial;

    /**
     * @return Serial number of the device the license is assigned to
     * 
     */
    public Optional<Output<String>> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }

    /**
     * licenseId path parameter. License ID
     * 
     */
    @Import(name="licenseId", required=true)
    private Output<String> licenseId;

    /**
     * @return licenseId path parameter. License ID
     * 
     */
    public Output<String> licenseId() {
        return this.licenseId;
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    private LicensesArgs() {}

    private LicensesArgs(LicensesArgs $) {
        this.deviceSerial = $.deviceSerial;
        this.licenseId = $.licenseId;
        this.organizationId = $.organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensesArgs $;

        public Builder() {
            $ = new LicensesArgs();
        }

        public Builder(LicensesArgs defaults) {
            $ = new LicensesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deviceSerial Serial number of the device the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(@Nullable Output<String> deviceSerial) {
            $.deviceSerial = deviceSerial;
            return this;
        }

        /**
         * @param deviceSerial Serial number of the device the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(String deviceSerial) {
            return deviceSerial(Output.of(deviceSerial));
        }

        /**
         * @param licenseId licenseId path parameter. License ID
         * 
         * @return builder
         * 
         */
        public Builder licenseId(Output<String> licenseId) {
            $.licenseId = licenseId;
            return this;
        }

        /**
         * @param licenseId licenseId path parameter. License ID
         * 
         * @return builder
         * 
         */
        public Builder licenseId(String licenseId) {
            return licenseId(Output.of(licenseId));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public LicensesArgs build() {
            if ($.licenseId == null) {
                throw new MissingRequiredPropertyException("LicensesArgs", "licenseId");
            }
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("LicensesArgs", "organizationId");
            }
            return $;
        }
    }

}
