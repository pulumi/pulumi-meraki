// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsHotspot20MccMncArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsHotspot20NaiRealmArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsHotspot20OperatorArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsHotspot20VenueArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsHotspot20State extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsHotspot20State Empty = new WirelessSsidsHotspot20State();

    /**
     * An array of domain names
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return An array of domain names
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Whether or not Hotspot 2.0 for this SSID is enabled
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not Hotspot 2.0 for this SSID is enabled
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * An array of MCC/MNC pairs
     * 
     */
    @Import(name="mccMncs")
    private @Nullable Output<List<WirelessSsidsHotspot20MccMncArgs>> mccMncs;

    /**
     * @return An array of MCC/MNC pairs
     * 
     */
    public Optional<Output<List<WirelessSsidsHotspot20MccMncArgs>>> mccMncs() {
        return Optional.ofNullable(this.mccMncs);
    }

    /**
     * An array of NAI realms
     * 
     */
    @Import(name="naiRealms")
    private @Nullable Output<List<WirelessSsidsHotspot20NaiRealmArgs>> naiRealms;

    /**
     * @return An array of NAI realms
     * 
     */
    public Optional<Output<List<WirelessSsidsHotspot20NaiRealmArgs>>> naiRealms() {
        return Optional.ofNullable(this.naiRealms);
    }

    /**
     * The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
     * 
     */
    @Import(name="networkAccessType")
    private @Nullable Output<String> networkAccessType;

    /**
     * @return The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
     * 
     */
    public Optional<Output<String>> networkAccessType() {
        return Optional.ofNullable(this.networkAccessType);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * number path parameter.
     * 
     */
    @Import(name="number")
    private @Nullable Output<String> number;

    /**
     * @return number path parameter.
     * 
     */
    public Optional<Output<String>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * Operator settings for this SSID
     * 
     */
    @Import(name="operator")
    private @Nullable Output<WirelessSsidsHotspot20OperatorArgs> operator;

    /**
     * @return Operator settings for this SSID
     * 
     */
    public Optional<Output<WirelessSsidsHotspot20OperatorArgs>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     * 
     */
    @Import(name="roamConsortOis")
    private @Nullable Output<List<String>> roamConsortOis;

    /**
     * @return An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     * 
     */
    public Optional<Output<List<String>>> roamConsortOis() {
        return Optional.ofNullable(this.roamConsortOis);
    }

    /**
     * Venue settings for this SSID
     * 
     */
    @Import(name="venue")
    private @Nullable Output<WirelessSsidsHotspot20VenueArgs> venue;

    /**
     * @return Venue settings for this SSID
     * 
     */
    public Optional<Output<WirelessSsidsHotspot20VenueArgs>> venue() {
        return Optional.ofNullable(this.venue);
    }

    private WirelessSsidsHotspot20State() {}

    private WirelessSsidsHotspot20State(WirelessSsidsHotspot20State $) {
        this.domains = $.domains;
        this.enabled = $.enabled;
        this.mccMncs = $.mccMncs;
        this.naiRealms = $.naiRealms;
        this.networkAccessType = $.networkAccessType;
        this.networkId = $.networkId;
        this.number = $.number;
        this.operator = $.operator;
        this.roamConsortOis = $.roamConsortOis;
        this.venue = $.venue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsHotspot20State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsHotspot20State $;

        public Builder() {
            $ = new WirelessSsidsHotspot20State();
        }

        public Builder(WirelessSsidsHotspot20State defaults) {
            $ = new WirelessSsidsHotspot20State(Objects.requireNonNull(defaults));
        }

        /**
         * @param domains An array of domain names
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains An array of domain names
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains An array of domain names
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param enabled Whether or not Hotspot 2.0 for this SSID is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not Hotspot 2.0 for this SSID is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param mccMncs An array of MCC/MNC pairs
         * 
         * @return builder
         * 
         */
        public Builder mccMncs(@Nullable Output<List<WirelessSsidsHotspot20MccMncArgs>> mccMncs) {
            $.mccMncs = mccMncs;
            return this;
        }

        /**
         * @param mccMncs An array of MCC/MNC pairs
         * 
         * @return builder
         * 
         */
        public Builder mccMncs(List<WirelessSsidsHotspot20MccMncArgs> mccMncs) {
            return mccMncs(Output.of(mccMncs));
        }

        /**
         * @param mccMncs An array of MCC/MNC pairs
         * 
         * @return builder
         * 
         */
        public Builder mccMncs(WirelessSsidsHotspot20MccMncArgs... mccMncs) {
            return mccMncs(List.of(mccMncs));
        }

        /**
         * @param naiRealms An array of NAI realms
         * 
         * @return builder
         * 
         */
        public Builder naiRealms(@Nullable Output<List<WirelessSsidsHotspot20NaiRealmArgs>> naiRealms) {
            $.naiRealms = naiRealms;
            return this;
        }

        /**
         * @param naiRealms An array of NAI realms
         * 
         * @return builder
         * 
         */
        public Builder naiRealms(List<WirelessSsidsHotspot20NaiRealmArgs> naiRealms) {
            return naiRealms(Output.of(naiRealms));
        }

        /**
         * @param naiRealms An array of NAI realms
         * 
         * @return builder
         * 
         */
        public Builder naiRealms(WirelessSsidsHotspot20NaiRealmArgs... naiRealms) {
            return naiRealms(List.of(naiRealms));
        }

        /**
         * @param networkAccessType The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
         * 
         * @return builder
         * 
         */
        public Builder networkAccessType(@Nullable Output<String> networkAccessType) {
            $.networkAccessType = networkAccessType;
            return this;
        }

        /**
         * @param networkAccessType The network type of this SSID (&#39;Private network&#39;, &#39;Private network with guest access&#39;, &#39;Chargeable public network&#39;, &#39;Free public network&#39;, &#39;Personal device network&#39;, &#39;Emergency services only network&#39;, &#39;Test or experimental&#39;, &#39;Wildcard&#39;)
         * 
         * @return builder
         * 
         */
        public Builder networkAccessType(String networkAccessType) {
            return networkAccessType(Output.of(networkAccessType));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number number path parameter.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param operator Operator settings for this SSID
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<WirelessSsidsHotspot20OperatorArgs> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator settings for this SSID
         * 
         * @return builder
         * 
         */
        public Builder operator(WirelessSsidsHotspot20OperatorArgs operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param roamConsortOis An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
         * 
         * @return builder
         * 
         */
        public Builder roamConsortOis(@Nullable Output<List<String>> roamConsortOis) {
            $.roamConsortOis = roamConsortOis;
            return this;
        }

        /**
         * @param roamConsortOis An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
         * 
         * @return builder
         * 
         */
        public Builder roamConsortOis(List<String> roamConsortOis) {
            return roamConsortOis(Output.of(roamConsortOis));
        }

        /**
         * @param roamConsortOis An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
         * 
         * @return builder
         * 
         */
        public Builder roamConsortOis(String... roamConsortOis) {
            return roamConsortOis(List.of(roamConsortOis));
        }

        /**
         * @param venue Venue settings for this SSID
         * 
         * @return builder
         * 
         */
        public Builder venue(@Nullable Output<WirelessSsidsHotspot20VenueArgs> venue) {
            $.venue = venue;
            return this;
        }

        /**
         * @param venue Venue settings for this SSID
         * 
         * @return builder
         * 
         */
        public Builder venue(WirelessSsidsHotspot20VenueArgs venue) {
            return venue(Output.of(venue));
        }

        public WirelessSsidsHotspot20State build() {
            return $;
        }
    }

}
