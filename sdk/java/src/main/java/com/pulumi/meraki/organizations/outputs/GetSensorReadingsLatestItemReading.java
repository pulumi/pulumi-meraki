// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingApparentPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingBattery;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingButton;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingCo2;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingCurrent;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingDoor;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingDownstreamPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingFrequency;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingHumidity;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingIndoorAirQuality;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingNoise;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingPm25;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingPowerFactor;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingRealPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingRemoteLockoutSwitch;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingTemperature;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingTvoc;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingVoltage;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsLatestItemReadingWater;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensorReadingsLatestItemReading {
    /**
     * @return Reading for the &#39;apparentPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;apparentPower&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingApparentPower apparentPower;
    /**
     * @return Reading for the &#39;battery&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;battery&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingBattery battery;
    /**
     * @return Reading for the &#39;button&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;button&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingButton button;
    /**
     * @return Reading for the &#39;co2&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;co2&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingCo2 co2;
    /**
     * @return Reading for the &#39;current&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;current&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingCurrent current;
    /**
     * @return Reading for the &#39;door&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;door&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingDoor door;
    /**
     * @return Reading for the &#39;downstreamPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;downstreamPower&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingDownstreamPower downstreamPower;
    /**
     * @return Reading for the &#39;frequency&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;frequency&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingFrequency frequency;
    /**
     * @return Reading for the &#39;humidity&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;humidity&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingHumidity humidity;
    /**
     * @return Reading for the &#39;indoorAirQuality&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;indoorAirQuality&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingIndoorAirQuality indoorAirQuality;
    /**
     * @return Type of sensor reading.
     * 
     */
    private String metric;
    /**
     * @return Reading for the &#39;noise&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;noise&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingNoise noise;
    /**
     * @return Reading for the &#39;pm25&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;pm25&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingPm25 pm25;
    /**
     * @return Reading for the &#39;powerFactor&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;powerFactor&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingPowerFactor powerFactor;
    /**
     * @return Reading for the &#39;realPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;realPower&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingRealPower realPower;
    /**
     * @return Reading for the &#39;remoteLockoutSwitch&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;remoteLockoutSwitch&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingRemoteLockoutSwitch remoteLockoutSwitch;
    /**
     * @return Reading for the &#39;temperature&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;temperature&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingTemperature temperature;
    /**
     * @return Time at which the reading occurred, in ISO8601 format.
     * 
     */
    private String ts;
    /**
     * @return Reading for the &#39;tvoc&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;tvoc&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingTvoc tvoc;
    /**
     * @return Reading for the &#39;voltage&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;voltage&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingVoltage voltage;
    /**
     * @return Reading for the &#39;water&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;water&#39;.
     * 
     */
    private GetSensorReadingsLatestItemReadingWater water;

    private GetSensorReadingsLatestItemReading() {}
    /**
     * @return Reading for the &#39;apparentPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;apparentPower&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingApparentPower apparentPower() {
        return this.apparentPower;
    }
    /**
     * @return Reading for the &#39;battery&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;battery&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingBattery battery() {
        return this.battery;
    }
    /**
     * @return Reading for the &#39;button&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;button&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingButton button() {
        return this.button;
    }
    /**
     * @return Reading for the &#39;co2&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;co2&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingCo2 co2() {
        return this.co2;
    }
    /**
     * @return Reading for the &#39;current&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;current&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingCurrent current() {
        return this.current;
    }
    /**
     * @return Reading for the &#39;door&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;door&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingDoor door() {
        return this.door;
    }
    /**
     * @return Reading for the &#39;downstreamPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;downstreamPower&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingDownstreamPower downstreamPower() {
        return this.downstreamPower;
    }
    /**
     * @return Reading for the &#39;frequency&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;frequency&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingFrequency frequency() {
        return this.frequency;
    }
    /**
     * @return Reading for the &#39;humidity&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;humidity&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingHumidity humidity() {
        return this.humidity;
    }
    /**
     * @return Reading for the &#39;indoorAirQuality&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;indoorAirQuality&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingIndoorAirQuality indoorAirQuality() {
        return this.indoorAirQuality;
    }
    /**
     * @return Type of sensor reading.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return Reading for the &#39;noise&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;noise&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingNoise noise() {
        return this.noise;
    }
    /**
     * @return Reading for the &#39;pm25&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;pm25&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingPm25 pm25() {
        return this.pm25;
    }
    /**
     * @return Reading for the &#39;powerFactor&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;powerFactor&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingPowerFactor powerFactor() {
        return this.powerFactor;
    }
    /**
     * @return Reading for the &#39;realPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;realPower&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingRealPower realPower() {
        return this.realPower;
    }
    /**
     * @return Reading for the &#39;remoteLockoutSwitch&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;remoteLockoutSwitch&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingRemoteLockoutSwitch remoteLockoutSwitch() {
        return this.remoteLockoutSwitch;
    }
    /**
     * @return Reading for the &#39;temperature&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;temperature&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingTemperature temperature() {
        return this.temperature;
    }
    /**
     * @return Time at which the reading occurred, in ISO8601 format.
     * 
     */
    public String ts() {
        return this.ts;
    }
    /**
     * @return Reading for the &#39;tvoc&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;tvoc&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingTvoc tvoc() {
        return this.tvoc;
    }
    /**
     * @return Reading for the &#39;voltage&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;voltage&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingVoltage voltage() {
        return this.voltage;
    }
    /**
     * @return Reading for the &#39;water&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;water&#39;.
     * 
     */
    public GetSensorReadingsLatestItemReadingWater water() {
        return this.water;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorReadingsLatestItemReading defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorReadingsLatestItemReadingApparentPower apparentPower;
        private GetSensorReadingsLatestItemReadingBattery battery;
        private GetSensorReadingsLatestItemReadingButton button;
        private GetSensorReadingsLatestItemReadingCo2 co2;
        private GetSensorReadingsLatestItemReadingCurrent current;
        private GetSensorReadingsLatestItemReadingDoor door;
        private GetSensorReadingsLatestItemReadingDownstreamPower downstreamPower;
        private GetSensorReadingsLatestItemReadingFrequency frequency;
        private GetSensorReadingsLatestItemReadingHumidity humidity;
        private GetSensorReadingsLatestItemReadingIndoorAirQuality indoorAirQuality;
        private String metric;
        private GetSensorReadingsLatestItemReadingNoise noise;
        private GetSensorReadingsLatestItemReadingPm25 pm25;
        private GetSensorReadingsLatestItemReadingPowerFactor powerFactor;
        private GetSensorReadingsLatestItemReadingRealPower realPower;
        private GetSensorReadingsLatestItemReadingRemoteLockoutSwitch remoteLockoutSwitch;
        private GetSensorReadingsLatestItemReadingTemperature temperature;
        private String ts;
        private GetSensorReadingsLatestItemReadingTvoc tvoc;
        private GetSensorReadingsLatestItemReadingVoltage voltage;
        private GetSensorReadingsLatestItemReadingWater water;
        public Builder() {}
        public Builder(GetSensorReadingsLatestItemReading defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apparentPower = defaults.apparentPower;
    	      this.battery = defaults.battery;
    	      this.button = defaults.button;
    	      this.co2 = defaults.co2;
    	      this.current = defaults.current;
    	      this.door = defaults.door;
    	      this.downstreamPower = defaults.downstreamPower;
    	      this.frequency = defaults.frequency;
    	      this.humidity = defaults.humidity;
    	      this.indoorAirQuality = defaults.indoorAirQuality;
    	      this.metric = defaults.metric;
    	      this.noise = defaults.noise;
    	      this.pm25 = defaults.pm25;
    	      this.powerFactor = defaults.powerFactor;
    	      this.realPower = defaults.realPower;
    	      this.remoteLockoutSwitch = defaults.remoteLockoutSwitch;
    	      this.temperature = defaults.temperature;
    	      this.ts = defaults.ts;
    	      this.tvoc = defaults.tvoc;
    	      this.voltage = defaults.voltage;
    	      this.water = defaults.water;
        }

        @CustomType.Setter
        public Builder apparentPower(GetSensorReadingsLatestItemReadingApparentPower apparentPower) {
            if (apparentPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "apparentPower");
            }
            this.apparentPower = apparentPower;
            return this;
        }
        @CustomType.Setter
        public Builder battery(GetSensorReadingsLatestItemReadingBattery battery) {
            if (battery == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "battery");
            }
            this.battery = battery;
            return this;
        }
        @CustomType.Setter
        public Builder button(GetSensorReadingsLatestItemReadingButton button) {
            if (button == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "button");
            }
            this.button = button;
            return this;
        }
        @CustomType.Setter
        public Builder co2(GetSensorReadingsLatestItemReadingCo2 co2) {
            if (co2 == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "co2");
            }
            this.co2 = co2;
            return this;
        }
        @CustomType.Setter
        public Builder current(GetSensorReadingsLatestItemReadingCurrent current) {
            if (current == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "current");
            }
            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder door(GetSensorReadingsLatestItemReadingDoor door) {
            if (door == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "door");
            }
            this.door = door;
            return this;
        }
        @CustomType.Setter
        public Builder downstreamPower(GetSensorReadingsLatestItemReadingDownstreamPower downstreamPower) {
            if (downstreamPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "downstreamPower");
            }
            this.downstreamPower = downstreamPower;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(GetSensorReadingsLatestItemReadingFrequency frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder humidity(GetSensorReadingsLatestItemReadingHumidity humidity) {
            if (humidity == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "humidity");
            }
            this.humidity = humidity;
            return this;
        }
        @CustomType.Setter
        public Builder indoorAirQuality(GetSensorReadingsLatestItemReadingIndoorAirQuality indoorAirQuality) {
            if (indoorAirQuality == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "indoorAirQuality");
            }
            this.indoorAirQuality = indoorAirQuality;
            return this;
        }
        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder noise(GetSensorReadingsLatestItemReadingNoise noise) {
            if (noise == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "noise");
            }
            this.noise = noise;
            return this;
        }
        @CustomType.Setter
        public Builder pm25(GetSensorReadingsLatestItemReadingPm25 pm25) {
            if (pm25 == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "pm25");
            }
            this.pm25 = pm25;
            return this;
        }
        @CustomType.Setter
        public Builder powerFactor(GetSensorReadingsLatestItemReadingPowerFactor powerFactor) {
            if (powerFactor == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "powerFactor");
            }
            this.powerFactor = powerFactor;
            return this;
        }
        @CustomType.Setter
        public Builder realPower(GetSensorReadingsLatestItemReadingRealPower realPower) {
            if (realPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "realPower");
            }
            this.realPower = realPower;
            return this;
        }
        @CustomType.Setter
        public Builder remoteLockoutSwitch(GetSensorReadingsLatestItemReadingRemoteLockoutSwitch remoteLockoutSwitch) {
            if (remoteLockoutSwitch == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "remoteLockoutSwitch");
            }
            this.remoteLockoutSwitch = remoteLockoutSwitch;
            return this;
        }
        @CustomType.Setter
        public Builder temperature(GetSensorReadingsLatestItemReadingTemperature temperature) {
            if (temperature == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "temperature");
            }
            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder ts(String ts) {
            if (ts == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "ts");
            }
            this.ts = ts;
            return this;
        }
        @CustomType.Setter
        public Builder tvoc(GetSensorReadingsLatestItemReadingTvoc tvoc) {
            if (tvoc == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "tvoc");
            }
            this.tvoc = tvoc;
            return this;
        }
        @CustomType.Setter
        public Builder voltage(GetSensorReadingsLatestItemReadingVoltage voltage) {
            if (voltage == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "voltage");
            }
            this.voltage = voltage;
            return this;
        }
        @CustomType.Setter
        public Builder water(GetSensorReadingsLatestItemReadingWater water) {
            if (water == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsLatestItemReading", "water");
            }
            this.water = water;
            return this;
        }
        public GetSensorReadingsLatestItemReading build() {
            final var _resultValue = new GetSensorReadingsLatestItemReading();
            _resultValue.apparentPower = apparentPower;
            _resultValue.battery = battery;
            _resultValue.button = button;
            _resultValue.co2 = co2;
            _resultValue.current = current;
            _resultValue.door = door;
            _resultValue.downstreamPower = downstreamPower;
            _resultValue.frequency = frequency;
            _resultValue.humidity = humidity;
            _resultValue.indoorAirQuality = indoorAirQuality;
            _resultValue.metric = metric;
            _resultValue.noise = noise;
            _resultValue.pm25 = pm25;
            _resultValue.powerFactor = powerFactor;
            _resultValue.realPower = realPower;
            _resultValue.remoteLockoutSwitch = remoteLockoutSwitch;
            _resultValue.temperature = temperature;
            _resultValue.ts = ts;
            _resultValue.tvoc = tvoc;
            _resultValue.voltage = voltage;
            _resultValue.water = water;
            return _resultValue;
        }
    }
}
