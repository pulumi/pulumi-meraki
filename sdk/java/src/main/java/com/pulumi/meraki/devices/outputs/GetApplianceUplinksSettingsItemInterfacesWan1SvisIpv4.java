// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.outputs.GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Nameservers;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4 {
    /**
     * @return IP address and subnet mask when in static mode.
     * 
     */
    private String address;
    /**
     * @return The assignment mode for this SVI. Applies only when PPPoE is disabled.
     * 
     */
    private String assignmentMode;
    /**
     * @return Gateway IP address when in static mode.
     * 
     */
    private String gateway;
    /**
     * @return The nameserver settings for this SVI.
     * 
     */
    private GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Nameservers nameservers;

    private GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4() {}
    /**
     * @return IP address and subnet mask when in static mode.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The assignment mode for this SVI. Applies only when PPPoE is disabled.
     * 
     */
    public String assignmentMode() {
        return this.assignmentMode;
    }
    /**
     * @return Gateway IP address when in static mode.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The nameserver settings for this SVI.
     * 
     */
    public GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Nameservers nameservers() {
        return this.nameservers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String assignmentMode;
        private String gateway;
        private GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Nameservers nameservers;
        public Builder() {}
        public Builder(GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.assignmentMode = defaults.assignmentMode;
    	      this.gateway = defaults.gateway;
    	      this.nameservers = defaults.nameservers;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder assignmentMode(String assignmentMode) {
            if (assignmentMode == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4", "assignmentMode");
            }
            this.assignmentMode = assignmentMode;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder nameservers(GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4Nameservers nameservers) {
            if (nameservers == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4", "nameservers");
            }
            this.nameservers = nameservers;
            return this;
        }
        public GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4 build() {
            final var _resultValue = new GetApplianceUplinksSettingsItemInterfacesWan1SvisIpv4();
            _resultValue.address = address;
            _resultValue.assignmentMode = assignmentMode;
            _resultValue.gateway = gateway;
            _resultValue.nameservers = nameservers;
            return _resultValue;
        }
    }
}
