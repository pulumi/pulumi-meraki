// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchAccessControlListsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchAccessControlListsRuleArgs Empty = new SwitchAccessControlListsRuleArgs();

    /**
     * Description of the rule (optional)
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Description of the rule (optional)
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Destination IP address (in IP or CIDR notation)
     * 
     */
    @Import(name="dstCidr")
    private @Nullable Output<String> dstCidr;

    /**
     * @return Destination IP address (in IP or CIDR notation)
     * 
     */
    public Optional<Output<String>> dstCidr() {
        return Optional.ofNullable(this.dstCidr);
    }

    /**
     * Destination port
     * 
     */
    @Import(name="dstPort")
    private @Nullable Output<String> dstPort;

    /**
     * @return Destination port
     * 
     */
    public Optional<Output<String>> dstPort() {
        return Optional.ofNullable(this.dstPort);
    }

    /**
     * IP address version
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return IP address version
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The type of protocol
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The type of protocol
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Source IP address (in IP or CIDR notation)
     * 
     */
    @Import(name="srcCidr")
    private @Nullable Output<String> srcCidr;

    /**
     * @return Source IP address (in IP or CIDR notation)
     * 
     */
    public Optional<Output<String>> srcCidr() {
        return Optional.ofNullable(this.srcCidr);
    }

    /**
     * Source port
     * 
     */
    @Import(name="srcPort")
    private @Nullable Output<String> srcPort;

    /**
     * @return Source port
     * 
     */
    public Optional<Output<String>> srcPort() {
        return Optional.ofNullable(this.srcPort);
    }

    /**
     * ncoming traffic VLAN
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<String> vlan;

    /**
     * @return ncoming traffic VLAN
     * 
     */
    public Optional<Output<String>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private SwitchAccessControlListsRuleArgs() {}

    private SwitchAccessControlListsRuleArgs(SwitchAccessControlListsRuleArgs $) {
        this.comment = $.comment;
        this.dstCidr = $.dstCidr;
        this.dstPort = $.dstPort;
        this.ipVersion = $.ipVersion;
        this.policy = $.policy;
        this.protocol = $.protocol;
        this.srcCidr = $.srcCidr;
        this.srcPort = $.srcPort;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchAccessControlListsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchAccessControlListsRuleArgs $;

        public Builder() {
            $ = new SwitchAccessControlListsRuleArgs();
        }

        public Builder(SwitchAccessControlListsRuleArgs defaults) {
            $ = new SwitchAccessControlListsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Description of the rule (optional)
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Description of the rule (optional)
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param dstCidr Destination IP address (in IP or CIDR notation)
         * 
         * @return builder
         * 
         */
        public Builder dstCidr(@Nullable Output<String> dstCidr) {
            $.dstCidr = dstCidr;
            return this;
        }

        /**
         * @param dstCidr Destination IP address (in IP or CIDR notation)
         * 
         * @return builder
         * 
         */
        public Builder dstCidr(String dstCidr) {
            return dstCidr(Output.of(dstCidr));
        }

        /**
         * @param dstPort Destination port
         * 
         * @return builder
         * 
         */
        public Builder dstPort(@Nullable Output<String> dstPort) {
            $.dstPort = dstPort;
            return this;
        }

        /**
         * @param dstPort Destination port
         * 
         * @return builder
         * 
         */
        public Builder dstPort(String dstPort) {
            return dstPort(Output.of(dstPort));
        }

        /**
         * @param ipVersion IP address version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP address version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param policy &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param protocol The type of protocol
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The type of protocol
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param srcCidr Source IP address (in IP or CIDR notation)
         * 
         * @return builder
         * 
         */
        public Builder srcCidr(@Nullable Output<String> srcCidr) {
            $.srcCidr = srcCidr;
            return this;
        }

        /**
         * @param srcCidr Source IP address (in IP or CIDR notation)
         * 
         * @return builder
         * 
         */
        public Builder srcCidr(String srcCidr) {
            return srcCidr(Output.of(srcCidr));
        }

        /**
         * @param srcPort Source port
         * 
         * @return builder
         * 
         */
        public Builder srcPort(@Nullable Output<String> srcPort) {
            $.srcPort = srcPort;
            return this;
        }

        /**
         * @param srcPort Source port
         * 
         * @return builder
         * 
         */
        public Builder srcPort(String srcPort) {
            return srcPort(Output.of(srcPort));
        }

        /**
         * @param vlan ncoming traffic VLAN
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<String> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan ncoming traffic VLAN
         * 
         * @return builder
         * 
         */
        public Builder vlan(String vlan) {
            return vlan(Output.of(vlan));
        }

        public SwitchAccessControlListsRuleArgs build() {
            return $;
        }
    }

}
