// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsRadiusAccountingServersResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsRadiusAccountingServersResponseArgs Empty = new WirelessSsidsRadiusAccountingServersResponseArgs();

    /**
     * Certificate used for authorization for the RADSEC Server
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return Certificate used for authorization for the RADSEC Server
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * IP address (or FQDN) to which the APs will send RADIUS accounting messages
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return IP address (or FQDN) to which the APs will send RADIUS accounting messages
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The ID of the Openroaming Certificate attached to radius server
     * 
     */
    @Import(name="openRoamingCertificateId")
    private @Nullable Output<Integer> openRoamingCertificateId;

    /**
     * @return The ID of the Openroaming Certificate attached to radius server
     * 
     */
    public Optional<Output<Integer>> openRoamingCertificateId() {
        return Optional.ofNullable(this.openRoamingCertificateId);
    }

    /**
     * Port on the RADIUS server that is listening for accounting messages
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port on the RADIUS server that is listening for accounting messages
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Use RADSEC (TLS over TCP) to connect to this RADIUS accounting server. Requires radiusProxyEnabled.
     * 
     */
    @Import(name="radsecEnabled")
    private @Nullable Output<Boolean> radsecEnabled;

    /**
     * @return Use RADSEC (TLS over TCP) to connect to this RADIUS accounting server. Requires radiusProxyEnabled.
     * 
     */
    public Optional<Output<Boolean>> radsecEnabled() {
        return Optional.ofNullable(this.radsecEnabled);
    }

    /**
     * Shared key used to authenticate messages between the APs and RADIUS server
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Shared key used to authenticate messages between the APs and RADIUS server
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private WirelessSsidsRadiusAccountingServersResponseArgs() {}

    private WirelessSsidsRadiusAccountingServersResponseArgs(WirelessSsidsRadiusAccountingServersResponseArgs $) {
        this.caCertificate = $.caCertificate;
        this.host = $.host;
        this.openRoamingCertificateId = $.openRoamingCertificateId;
        this.port = $.port;
        this.radsecEnabled = $.radsecEnabled;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsRadiusAccountingServersResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsRadiusAccountingServersResponseArgs $;

        public Builder() {
            $ = new WirelessSsidsRadiusAccountingServersResponseArgs();
        }

        public Builder(WirelessSsidsRadiusAccountingServersResponseArgs defaults) {
            $ = new WirelessSsidsRadiusAccountingServersResponseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate Certificate used for authorization for the RADSEC Server
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate Certificate used for authorization for the RADSEC Server
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param host IP address (or FQDN) to which the APs will send RADIUS accounting messages
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host IP address (or FQDN) to which the APs will send RADIUS accounting messages
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param openRoamingCertificateId The ID of the Openroaming Certificate attached to radius server
         * 
         * @return builder
         * 
         */
        public Builder openRoamingCertificateId(@Nullable Output<Integer> openRoamingCertificateId) {
            $.openRoamingCertificateId = openRoamingCertificateId;
            return this;
        }

        /**
         * @param openRoamingCertificateId The ID of the Openroaming Certificate attached to radius server
         * 
         * @return builder
         * 
         */
        public Builder openRoamingCertificateId(Integer openRoamingCertificateId) {
            return openRoamingCertificateId(Output.of(openRoamingCertificateId));
        }

        /**
         * @param port Port on the RADIUS server that is listening for accounting messages
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port on the RADIUS server that is listening for accounting messages
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param radsecEnabled Use RADSEC (TLS over TCP) to connect to this RADIUS accounting server. Requires radiusProxyEnabled.
         * 
         * @return builder
         * 
         */
        public Builder radsecEnabled(@Nullable Output<Boolean> radsecEnabled) {
            $.radsecEnabled = radsecEnabled;
            return this;
        }

        /**
         * @param radsecEnabled Use RADSEC (TLS over TCP) to connect to this RADIUS accounting server. Requires radiusProxyEnabled.
         * 
         * @return builder
         * 
         */
        public Builder radsecEnabled(Boolean radsecEnabled) {
            return radsecEnabled(Output.of(radsecEnabled));
        }

        /**
         * @param secret Shared key used to authenticate messages between the APs and RADIUS server
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Shared key used to authenticate messages between the APs and RADIUS server
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public WirelessSsidsRadiusAccountingServersResponseArgs build() {
            return $;
        }
    }

}
