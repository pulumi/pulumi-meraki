// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchAccessPoliciesRadiusCriticalAuthArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchAccessPoliciesRadiusCriticalAuthArgs Empty = new SwitchAccessPoliciesRadiusCriticalAuthArgs();

    /**
     * VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    @Import(name="dataVlanId")
    private @Nullable Output<Integer> dataVlanId;

    /**
     * @return VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    public Optional<Output<Integer>> dataVlanId() {
        return Optional.ofNullable(this.dataVlanId);
    }

    /**
     * Enable to suspend port bounce when RADIUS servers are unreachable
     * 
     */
    @Import(name="suspendPortBounce")
    private @Nullable Output<Boolean> suspendPortBounce;

    /**
     * @return Enable to suspend port bounce when RADIUS servers are unreachable
     * 
     */
    public Optional<Output<Boolean>> suspendPortBounce() {
        return Optional.ofNullable(this.suspendPortBounce);
    }

    /**
     * VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    @Import(name="voiceVlanId")
    private @Nullable Output<Integer> voiceVlanId;

    /**
     * @return VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    public Optional<Output<Integer>> voiceVlanId() {
        return Optional.ofNullable(this.voiceVlanId);
    }

    private SwitchAccessPoliciesRadiusCriticalAuthArgs() {}

    private SwitchAccessPoliciesRadiusCriticalAuthArgs(SwitchAccessPoliciesRadiusCriticalAuthArgs $) {
        this.dataVlanId = $.dataVlanId;
        this.suspendPortBounce = $.suspendPortBounce;
        this.voiceVlanId = $.voiceVlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchAccessPoliciesRadiusCriticalAuthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchAccessPoliciesRadiusCriticalAuthArgs $;

        public Builder() {
            $ = new SwitchAccessPoliciesRadiusCriticalAuthArgs();
        }

        public Builder(SwitchAccessPoliciesRadiusCriticalAuthArgs defaults) {
            $ = new SwitchAccessPoliciesRadiusCriticalAuthArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataVlanId VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder dataVlanId(@Nullable Output<Integer> dataVlanId) {
            $.dataVlanId = dataVlanId;
            return this;
        }

        /**
         * @param dataVlanId VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder dataVlanId(Integer dataVlanId) {
            return dataVlanId(Output.of(dataVlanId));
        }

        /**
         * @param suspendPortBounce Enable to suspend port bounce when RADIUS servers are unreachable
         * 
         * @return builder
         * 
         */
        public Builder suspendPortBounce(@Nullable Output<Boolean> suspendPortBounce) {
            $.suspendPortBounce = suspendPortBounce;
            return this;
        }

        /**
         * @param suspendPortBounce Enable to suspend port bounce when RADIUS servers are unreachable
         * 
         * @return builder
         * 
         */
        public Builder suspendPortBounce(Boolean suspendPortBounce) {
            return suspendPortBounce(Output.of(suspendPortBounce));
        }

        /**
         * @param voiceVlanId VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder voiceVlanId(@Nullable Output<Integer> voiceVlanId) {
            $.voiceVlanId = voiceVlanId;
            return this;
        }

        /**
         * @param voiceVlanId VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder voiceVlanId(Integer voiceVlanId) {
            return voiceVlanId(Output.of(voiceVlanId));
        }

        public SwitchAccessPoliciesRadiusCriticalAuthArgs build() {
            return $;
        }
    }

}
