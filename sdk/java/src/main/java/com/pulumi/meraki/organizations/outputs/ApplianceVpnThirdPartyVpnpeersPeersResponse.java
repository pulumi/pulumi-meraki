// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.organizations.outputs.ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplianceVpnThirdPartyVpnpeersPeersResponse {
    /**
     * @return [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    private @Nullable String ikeVersion;
    /**
     * @return Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    private @Nullable ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies ipsecPolicies;
    /**
     * @return One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    private @Nullable String ipsecPoliciesPreset;
    /**
     * @return [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    private @Nullable String localId;
    /**
     * @return The name of the VPN peer
     * 
     */
    private @Nullable String name;
    /**
     * @return A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    private @Nullable List<String> networkTags;
    /**
     * @return The list of the private subnets of the VPN peer
     * 
     */
    private @Nullable List<String> privateSubnets;
    /**
     * @return [optional] The public IP of the VPN peer
     * 
     */
    private @Nullable String publicIp;
    /**
     * @return [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    private @Nullable String remoteId;
    /**
     * @return The shared secret with the VPN peer
     * 
     */
    private @Nullable String secret;

    private ApplianceVpnThirdPartyVpnpeersPeersResponse() {}
    /**
     * @return [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    public Optional<String> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    public Optional<ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies> ipsecPolicies() {
        return Optional.ofNullable(this.ipsecPolicies);
    }
    /**
     * @return One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    public Optional<String> ipsecPoliciesPreset() {
        return Optional.ofNullable(this.ipsecPoliciesPreset);
    }
    /**
     * @return [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    public Optional<String> localId() {
        return Optional.ofNullable(this.localId);
    }
    /**
     * @return The name of the VPN peer
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    public List<String> networkTags() {
        return this.networkTags == null ? List.of() : this.networkTags;
    }
    /**
     * @return The list of the private subnets of the VPN peer
     * 
     */
    public List<String> privateSubnets() {
        return this.privateSubnets == null ? List.of() : this.privateSubnets;
    }
    /**
     * @return [optional] The public IP of the VPN peer
     * 
     */
    public Optional<String> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }
    /**
     * @return [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    public Optional<String> remoteId() {
        return Optional.ofNullable(this.remoteId);
    }
    /**
     * @return The shared secret with the VPN peer
     * 
     */
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceVpnThirdPartyVpnpeersPeersResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ikeVersion;
        private @Nullable ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies ipsecPolicies;
        private @Nullable String ipsecPoliciesPreset;
        private @Nullable String localId;
        private @Nullable String name;
        private @Nullable List<String> networkTags;
        private @Nullable List<String> privateSubnets;
        private @Nullable String publicIp;
        private @Nullable String remoteId;
        private @Nullable String secret;
        public Builder() {}
        public Builder(ApplianceVpnThirdPartyVpnpeersPeersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.ipsecPoliciesPreset = defaults.ipsecPoliciesPreset;
    	      this.localId = defaults.localId;
    	      this.name = defaults.name;
    	      this.networkTags = defaults.networkTags;
    	      this.privateSubnets = defaults.privateSubnets;
    	      this.publicIp = defaults.publicIp;
    	      this.remoteId = defaults.remoteId;
    	      this.secret = defaults.secret;
        }

        @CustomType.Setter
        public Builder ikeVersion(@Nullable String ikeVersion) {

            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPolicies(@Nullable ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPolicies ipsecPolicies) {

            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPoliciesPreset(@Nullable String ipsecPoliciesPreset) {

            this.ipsecPoliciesPreset = ipsecPoliciesPreset;
            return this;
        }
        @CustomType.Setter
        public Builder localId(@Nullable String localId) {

            this.localId = localId;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkTags(@Nullable List<String> networkTags) {

            this.networkTags = networkTags;
            return this;
        }
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }
        @CustomType.Setter
        public Builder privateSubnets(@Nullable List<String> privateSubnets) {

            this.privateSubnets = privateSubnets;
            return this;
        }
        public Builder privateSubnets(String... privateSubnets) {
            return privateSubnets(List.of(privateSubnets));
        }
        @CustomType.Setter
        public Builder publicIp(@Nullable String publicIp) {

            this.publicIp = publicIp;
            return this;
        }
        @CustomType.Setter
        public Builder remoteId(@Nullable String remoteId) {

            this.remoteId = remoteId;
            return this;
        }
        @CustomType.Setter
        public Builder secret(@Nullable String secret) {

            this.secret = secret;
            return this;
        }
        public ApplianceVpnThirdPartyVpnpeersPeersResponse build() {
            final var _resultValue = new ApplianceVpnThirdPartyVpnpeersPeersResponse();
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.ipsecPolicies = ipsecPolicies;
            _resultValue.ipsecPoliciesPreset = ipsecPoliciesPreset;
            _resultValue.localId = localId;
            _resultValue.name = name;
            _resultValue.networkTags = networkTags;
            _resultValue.privateSubnets = privateSubnets;
            _resultValue.publicIp = publicIp;
            _resultValue.remoteId = remoteId;
            _resultValue.secret = secret;
            return _resultValue;
        }
    }
}
