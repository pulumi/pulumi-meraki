// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.networks.SwitchStacksRoutingInterfacesDhcpArgs;
import com.pulumi.meraki.networks.inputs.SwitchStacksRoutingInterfacesDhcpState;
import com.pulumi.meraki.networks.outputs.SwitchStacksRoutingInterfacesDhcpDhcpOption;
import com.pulumi.meraki.networks.outputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignment;
import com.pulumi.meraki.networks.outputs.SwitchStacksRoutingInterfacesDhcpReservedIpRange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.networks.SwitchStacksRoutingInterfacesDhcp;
 * import com.pulumi.meraki.networks.SwitchStacksRoutingInterfacesDhcpArgs;
 * import com.pulumi.meraki.networks.inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs;
 * import com.pulumi.meraki.networks.inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs;
 * import com.pulumi.meraki.networks.inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new SwitchStacksRoutingInterfacesDhcp("example", SwitchStacksRoutingInterfacesDhcpArgs.builder()
 *             .bootFileName("home_boot_file")
 *             .bootNextServer("1.2.3.4")
 *             .bootOptionsEnabled(true)
 *             .dhcpLeaseTime("1 day")
 *             .dhcpMode("dhcpServer")
 *             .dhcpOptions(SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs.builder()
 *                 .code("5")
 *                 .type("text")
 *                 .value("five")
 *                 .build())
 *             .dhcpRelayServerIps("1.2.3.4")
 *             .dnsCustomNameservers("8.8.8.8, 8.8.4.4")
 *             .dnsNameserversOption("custom")
 *             .fixedIpAssignments(SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs.builder()
 *                 .ip("192.168.1.12")
 *                 .mac("22:33:44:55:66:77")
 *                 .name("Cisco Meraki valued client")
 *                 .build())
 *             .interfaceId("string")
 *             .networkId("string")
 *             .reservedIpRanges(SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs.builder()
 *                 .comment("A reserved IP range")
 *                 .end("192.168.1.10")
 *                 .start("192.168.1.1")
 *                 .build())
 *             .switchStackId("string")
 *             .build());
 * 
 *         ctx.export("merakiNetworksSwitchStacksRoutingInterfacesDhcpExample", example);
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp example &#34;interface_id,network_id,switch_stack_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp")
public class SwitchStacksRoutingInterfacesDhcp extends com.pulumi.resources.CustomResource {
    /**
     * The PXE boot server file name for the DHCP server running on the switch stack interface
     * 
     */
    @Export(name="bootFileName", refs={String.class}, tree="[0]")
    private Output<String> bootFileName;

    /**
     * @return The PXE boot server file name for the DHCP server running on the switch stack interface
     * 
     */
    public Output<String> bootFileName() {
        return this.bootFileName;
    }
    /**
     * The PXE boot server IP for the DHCP server running on the switch stack interface
     * 
     */
    @Export(name="bootNextServer", refs={String.class}, tree="[0]")
    private Output<String> bootNextServer;

    /**
     * @return The PXE boot server IP for the DHCP server running on the switch stack interface
     * 
     */
    public Output<String> bootNextServer() {
        return this.bootNextServer;
    }
    /**
     * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     * 
     */
    @Export(name="bootOptionsEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> bootOptionsEnabled;

    /**
     * @return Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
     * 
     */
    public Output<Boolean> bootOptionsEnabled() {
        return this.bootOptionsEnabled;
    }
    /**
     * The DHCP lease time config for the dhcp server running on the switch stack interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
     * 
     */
    @Export(name="dhcpLeaseTime", refs={String.class}, tree="[0]")
    private Output<String> dhcpLeaseTime;

    /**
     * @return The DHCP lease time config for the dhcp server running on the switch stack interface (&#39;30 minutes&#39;, &#39;1 hour&#39;, &#39;4 hours&#39;, &#39;12 hours&#39;, &#39;1 day&#39; or &#39;1 week&#39;)
     * 
     */
    public Output<String> dhcpLeaseTime() {
        return this.dhcpLeaseTime;
    }
    /**
     * The DHCP mode options for the switch stack interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
     * 
     */
    @Export(name="dhcpMode", refs={String.class}, tree="[0]")
    private Output<String> dhcpMode;

    /**
     * @return The DHCP mode options for the switch stack interface (&#39;dhcpDisabled&#39;, &#39;dhcpRelay&#39; or &#39;dhcpServer&#39;)
     * 
     */
    public Output<String> dhcpMode() {
        return this.dhcpMode;
    }
    /**
     * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     * 
     */
    @Export(name="dhcpOptions", refs={List.class,SwitchStacksRoutingInterfacesDhcpDhcpOption.class}, tree="[0,1]")
    private Output<List<SwitchStacksRoutingInterfacesDhcpDhcpOption>> dhcpOptions;

    /**
     * @return Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
     * 
     */
    public Output<List<SwitchStacksRoutingInterfacesDhcpDhcpOption>> dhcpOptions() {
        return this.dhcpOptions;
    }
    /**
     * The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     * 
     */
    @Export(name="dhcpRelayServerIps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dhcpRelayServerIps;

    /**
     * @return The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
     * 
     */
    public Output<List<String>> dhcpRelayServerIps() {
        return this.dhcpRelayServerIps;
    }
    /**
     * The DHCP name server IPs when DHCP name server option is &#39;custom&#39;
     * 
     */
    @Export(name="dnsCustomNameservers", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dnsCustomNameservers;

    /**
     * @return The DHCP name server IPs when DHCP name server option is &#39;custom&#39;
     * 
     */
    public Output<List<String>> dnsCustomNameservers() {
        return this.dnsCustomNameservers;
    }
    /**
     * The DHCP name server option for the dhcp server running on the switch stack interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
     * 
     */
    @Export(name="dnsNameserversOption", refs={String.class}, tree="[0]")
    private Output<String> dnsNameserversOption;

    /**
     * @return The DHCP name server option for the dhcp server running on the switch stack interface (&#39;googlePublicDns&#39;, &#39;openDns&#39; or &#39;custom&#39;)
     * 
     */
    public Output<String> dnsNameserversOption() {
        return this.dnsNameserversOption;
    }
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    @Export(name="fixedIpAssignments", refs={List.class,SwitchStacksRoutingInterfacesDhcpFixedIpAssignment.class}, tree="[0,1]")
    private Output<List<SwitchStacksRoutingInterfacesDhcpFixedIpAssignment>> fixedIpAssignments;

    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    public Output<List<SwitchStacksRoutingInterfacesDhcpFixedIpAssignment>> fixedIpAssignments() {
        return this.fixedIpAssignments;
    }
    /**
     * interfaceId path parameter. Interface ID
     * 
     */
    @Export(name="interfaceId", refs={String.class}, tree="[0]")
    private Output<String> interfaceId;

    /**
     * @return interfaceId path parameter. Interface ID
     * 
     */
    public Output<String> interfaceId() {
        return this.interfaceId;
    }
    /**
     * networkId path parameter. Network ID
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    @Export(name="reservedIpRanges", refs={List.class,SwitchStacksRoutingInterfacesDhcpReservedIpRange.class}, tree="[0,1]")
    private Output<List<SwitchStacksRoutingInterfacesDhcpReservedIpRange>> reservedIpRanges;

    /**
     * @return Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
     * 
     */
    public Output<List<SwitchStacksRoutingInterfacesDhcpReservedIpRange>> reservedIpRanges() {
        return this.reservedIpRanges;
    }
    /**
     * switchStackId path parameter. Switch stack ID
     * 
     */
    @Export(name="switchStackId", refs={String.class}, tree="[0]")
    private Output<String> switchStackId;

    /**
     * @return switchStackId path parameter. Switch stack ID
     * 
     */
    public Output<String> switchStackId() {
        return this.switchStackId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SwitchStacksRoutingInterfacesDhcp(String name) {
        this(name, SwitchStacksRoutingInterfacesDhcpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SwitchStacksRoutingInterfacesDhcp(String name, SwitchStacksRoutingInterfacesDhcpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SwitchStacksRoutingInterfacesDhcp(String name, SwitchStacksRoutingInterfacesDhcpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, args == null ? SwitchStacksRoutingInterfacesDhcpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SwitchStacksRoutingInterfacesDhcp(String name, Output<String> id, @Nullable SwitchStacksRoutingInterfacesDhcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SwitchStacksRoutingInterfacesDhcp get(String name, Output<String> id, @Nullable SwitchStacksRoutingInterfacesDhcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SwitchStacksRoutingInterfacesDhcp(name, id, state, options);
    }
}
