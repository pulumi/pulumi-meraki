// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetVlanProfilesAssignmentsByDeviceItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVlanProfilesAssignmentsByDeviceResult {
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Array of ResponseNetworksGetNetworkVlanProfilesAssignmentsByDevice
     * 
     */
    private List<GetVlanProfilesAssignmentsByDeviceItem> items;
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    private String networkId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return productTypes query parameter. Optional parameter to filter devices by product types.
     * 
     */
    private @Nullable List<String> productTypes;
    /**
     * @return serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
     * 
     */
    private @Nullable List<String> serials;
    /**
     * @return stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
     * 
     */
    private @Nullable List<String> stackIds;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;

    private GetVlanProfilesAssignmentsByDeviceResult() {}
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Array of ResponseNetworksGetNetworkVlanProfilesAssignmentsByDevice
     * 
     */
    public List<GetVlanProfilesAssignmentsByDeviceItem> items() {
        return this.items;
    }
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return productTypes query parameter. Optional parameter to filter devices by product types.
     * 
     */
    public List<String> productTypes() {
        return this.productTypes == null ? List.of() : this.productTypes;
    }
    /**
     * @return serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
     * 
     */
    public List<String> serials() {
        return this.serials == null ? List.of() : this.serials;
    }
    /**
     * @return stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
     * 
     */
    public List<String> stackIds() {
        return this.stackIds == null ? List.of() : this.stackIds;
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVlanProfilesAssignmentsByDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endingBefore;
        private String id;
        private List<GetVlanProfilesAssignmentsByDeviceItem> items;
        private String networkId;
        private @Nullable Integer perPage;
        private @Nullable List<String> productTypes;
        private @Nullable List<String> serials;
        private @Nullable List<String> stackIds;
        private @Nullable String startingAfter;
        public Builder() {}
        public Builder(GetVlanProfilesAssignmentsByDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endingBefore = defaults.endingBefore;
    	      this.id = defaults.id;
    	      this.items = defaults.items;
    	      this.networkId = defaults.networkId;
    	      this.perPage = defaults.perPage;
    	      this.productTypes = defaults.productTypes;
    	      this.serials = defaults.serials;
    	      this.stackIds = defaults.stackIds;
    	      this.startingAfter = defaults.startingAfter;
        }

        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVlanProfilesAssignmentsByDeviceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetVlanProfilesAssignmentsByDeviceItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetVlanProfilesAssignmentsByDeviceResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetVlanProfilesAssignmentsByDeviceItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder networkId(String networkId) {
            if (networkId == null) {
              throw new MissingRequiredPropertyException("GetVlanProfilesAssignmentsByDeviceResult", "networkId");
            }
            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder productTypes(@Nullable List<String> productTypes) {

            this.productTypes = productTypes;
            return this;
        }
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }
        @CustomType.Setter
        public Builder serials(@Nullable List<String> serials) {

            this.serials = serials;
            return this;
        }
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }
        @CustomType.Setter
        public Builder stackIds(@Nullable List<String> stackIds) {

            this.stackIds = stackIds;
            return this;
        }
        public Builder stackIds(String... stackIds) {
            return stackIds(List.of(stackIds));
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        public GetVlanProfilesAssignmentsByDeviceResult build() {
            final var _resultValue = new GetVlanProfilesAssignmentsByDeviceResult();
            _resultValue.endingBefore = endingBefore;
            _resultValue.id = id;
            _resultValue.items = items;
            _resultValue.networkId = networkId;
            _resultValue.perPage = perPage;
            _resultValue.productTypes = productTypes;
            _resultValue.serials = serials;
            _resultValue.stackIds = stackIds;
            _resultValue.startingAfter = startingAfter;
            return _resultValue;
        }
    }
}
