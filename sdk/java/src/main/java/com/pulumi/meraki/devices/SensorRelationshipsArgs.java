// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.inputs.SensorRelationshipsLivestreamArgs;
import com.pulumi.meraki.devices.inputs.SensorRelationshipsLivestreamRequestArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorRelationshipsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorRelationshipsArgs Empty = new SensorRelationshipsArgs();

    /**
     * A role defined between an MT sensor and an MV camera that adds the camera&#39;s livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     * 
     */
    @Import(name="livestream")
    private @Nullable Output<SensorRelationshipsLivestreamArgs> livestream;

    /**
     * @return A role defined between an MT sensor and an MV camera that adds the camera&#39;s livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     * 
     */
    public Optional<Output<SensorRelationshipsLivestreamArgs>> livestream() {
        return Optional.ofNullable(this.livestream);
    }

    /**
     * A role defined between an MT sensor and an MV camera that adds the camera&#39;s r.Livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     * 
     */
    @Import(name="livestreamRequests")
    private @Nullable Output<List<SensorRelationshipsLivestreamRequestArgs>> livestreamRequests;

    /**
     * @return A role defined between an MT sensor and an MV camera that adds the camera&#39;s r.Livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
     * 
     */
    public Optional<Output<List<SensorRelationshipsLivestreamRequestArgs>>> livestreamRequests() {
        return Optional.ofNullable(this.livestreamRequests);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial", required=true)
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }

    private SensorRelationshipsArgs() {}

    private SensorRelationshipsArgs(SensorRelationshipsArgs $) {
        this.livestream = $.livestream;
        this.livestreamRequests = $.livestreamRequests;
        this.serial = $.serial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorRelationshipsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorRelationshipsArgs $;

        public Builder() {
            $ = new SensorRelationshipsArgs();
        }

        public Builder(SensorRelationshipsArgs defaults) {
            $ = new SensorRelationshipsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param livestream A role defined between an MT sensor and an MV camera that adds the camera&#39;s livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
         * 
         * @return builder
         * 
         */
        public Builder livestream(@Nullable Output<SensorRelationshipsLivestreamArgs> livestream) {
            $.livestream = livestream;
            return this;
        }

        /**
         * @param livestream A role defined between an MT sensor and an MV camera that adds the camera&#39;s livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
         * 
         * @return builder
         * 
         */
        public Builder livestream(SensorRelationshipsLivestreamArgs livestream) {
            return livestream(Output.of(livestream));
        }

        /**
         * @param livestreamRequests A role defined between an MT sensor and an MV camera that adds the camera&#39;s r.Livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
         * 
         * @return builder
         * 
         */
        public Builder livestreamRequests(@Nullable Output<List<SensorRelationshipsLivestreamRequestArgs>> livestreamRequests) {
            $.livestreamRequests = livestreamRequests;
            return this;
        }

        /**
         * @param livestreamRequests A role defined between an MT sensor and an MV camera that adds the camera&#39;s r.Livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
         * 
         * @return builder
         * 
         */
        public Builder livestreamRequests(List<SensorRelationshipsLivestreamRequestArgs> livestreamRequests) {
            return livestreamRequests(Output.of(livestreamRequests));
        }

        /**
         * @param livestreamRequests A role defined between an MT sensor and an MV camera that adds the camera&#39;s r.Livestream to the sensor&#39;s details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
         * 
         * @return builder
         * 
         */
        public Builder livestreamRequests(SensorRelationshipsLivestreamRequestArgs... livestreamRequests) {
            return livestreamRequests(List.of(livestreamRequests));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public SensorRelationshipsArgs build() {
            if ($.serial == null) {
                throw new MissingRequiredPropertyException("SensorRelationshipsArgs", "serial");
            }
            return $;
        }
    }

}
