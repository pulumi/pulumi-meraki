// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceVpnThirdPartyVpnpeersPeersResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceVpnThirdPartyVpnpeersPeersResponseArgs Empty = new ApplianceVpnThirdPartyVpnpeersPeersResponseArgs();

    /**
     * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<String> ikeVersion;

    /**
     * @return [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    public Optional<Output<String>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    @Import(name="ipsecPolicies")
    private @Nullable Output<ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs> ipsecPolicies;

    /**
     * @return Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    public Optional<Output<ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs>> ipsecPolicies() {
        return Optional.ofNullable(this.ipsecPolicies);
    }

    /**
     * One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    @Import(name="ipsecPoliciesPreset")
    private @Nullable Output<String> ipsecPoliciesPreset;

    /**
     * @return One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    public Optional<Output<String>> ipsecPoliciesPreset() {
        return Optional.ofNullable(this.ipsecPoliciesPreset);
    }

    /**
     * [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    @Import(name="localId")
    private @Nullable Output<String> localId;

    /**
     * @return [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    public Optional<Output<String>> localId() {
        return Optional.ofNullable(this.localId);
    }

    /**
     * The name of the VPN peer
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VPN peer
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    @Import(name="networkTags")
    private @Nullable Output<List<String>> networkTags;

    /**
     * @return A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    public Optional<Output<List<String>>> networkTags() {
        return Optional.ofNullable(this.networkTags);
    }

    /**
     * The list of the private subnets of the VPN peer
     * 
     */
    @Import(name="privateSubnets")
    private @Nullable Output<List<String>> privateSubnets;

    /**
     * @return The list of the private subnets of the VPN peer
     * 
     */
    public Optional<Output<List<String>>> privateSubnets() {
        return Optional.ofNullable(this.privateSubnets);
    }

    /**
     * [optional] The public IP of the VPN peer
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return [optional] The public IP of the VPN peer
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    @Import(name="remoteId")
    private @Nullable Output<String> remoteId;

    /**
     * @return [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    public Optional<Output<String>> remoteId() {
        return Optional.ofNullable(this.remoteId);
    }

    /**
     * The shared secret with the VPN peer
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return The shared secret with the VPN peer
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private ApplianceVpnThirdPartyVpnpeersPeersResponseArgs() {}

    private ApplianceVpnThirdPartyVpnpeersPeersResponseArgs(ApplianceVpnThirdPartyVpnpeersPeersResponseArgs $) {
        this.ikeVersion = $.ikeVersion;
        this.ipsecPolicies = $.ipsecPolicies;
        this.ipsecPoliciesPreset = $.ipsecPoliciesPreset;
        this.localId = $.localId;
        this.name = $.name;
        this.networkTags = $.networkTags;
        this.privateSubnets = $.privateSubnets;
        this.publicIp = $.publicIp;
        this.remoteId = $.remoteId;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceVpnThirdPartyVpnpeersPeersResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceVpnThirdPartyVpnpeersPeersResponseArgs $;

        public Builder() {
            $ = new ApplianceVpnThirdPartyVpnpeersPeersResponseArgs();
        }

        public Builder(ApplianceVpnThirdPartyVpnpeersPeersResponseArgs defaults) {
            $ = new ApplianceVpnThirdPartyVpnpeersPeersResponseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ikeVersion [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<String> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(String ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param ipsecPolicies Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicies(@Nullable Output<ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs> ipsecPolicies) {
            $.ipsecPolicies = ipsecPolicies;
            return this;
        }

        /**
         * @param ipsecPolicies Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPolicies(ApplianceVpnThirdPartyVpnpeersPeersResponseIpsecPoliciesArgs ipsecPolicies) {
            return ipsecPolicies(Output.of(ipsecPolicies));
        }

        /**
         * @param ipsecPoliciesPreset One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPoliciesPreset(@Nullable Output<String> ipsecPoliciesPreset) {
            $.ipsecPoliciesPreset = ipsecPoliciesPreset;
            return this;
        }

        /**
         * @param ipsecPoliciesPreset One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
         * 
         * @return builder
         * 
         */
        public Builder ipsecPoliciesPreset(String ipsecPoliciesPreset) {
            return ipsecPoliciesPreset(Output.of(ipsecPoliciesPreset));
        }

        /**
         * @param localId [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
         * 
         * @return builder
         * 
         */
        public Builder localId(@Nullable Output<String> localId) {
            $.localId = localId;
            return this;
        }

        /**
         * @param localId [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
         * 
         * @return builder
         * 
         */
        public Builder localId(String localId) {
            return localId(Output.of(localId));
        }

        /**
         * @param name The name of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkTags A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
         * 
         * @return builder
         * 
         */
        public Builder networkTags(@Nullable Output<List<String>> networkTags) {
            $.networkTags = networkTags;
            return this;
        }

        /**
         * @param networkTags A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
         * 
         * @return builder
         * 
         */
        public Builder networkTags(List<String> networkTags) {
            return networkTags(Output.of(networkTags));
        }

        /**
         * @param networkTags A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
         * 
         * @return builder
         * 
         */
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }

        /**
         * @param privateSubnets The list of the private subnets of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder privateSubnets(@Nullable Output<List<String>> privateSubnets) {
            $.privateSubnets = privateSubnets;
            return this;
        }

        /**
         * @param privateSubnets The list of the private subnets of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder privateSubnets(List<String> privateSubnets) {
            return privateSubnets(Output.of(privateSubnets));
        }

        /**
         * @param privateSubnets The list of the private subnets of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder privateSubnets(String... privateSubnets) {
            return privateSubnets(List.of(privateSubnets));
        }

        /**
         * @param publicIp [optional] The public IP of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp [optional] The public IP of the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        /**
         * @param remoteId [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
         * 
         * @return builder
         * 
         */
        public Builder remoteId(@Nullable Output<String> remoteId) {
            $.remoteId = remoteId;
            return this;
        }

        /**
         * @param remoteId [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
         * 
         * @return builder
         * 
         */
        public Builder remoteId(String remoteId) {
            return remoteId(Output.of(remoteId));
        }

        /**
         * @param secret The shared secret with the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret The shared secret with the VPN peer
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public ApplianceVpnThirdPartyVpnpeersPeersResponseArgs build() {
            return $;
        }
    }

}
