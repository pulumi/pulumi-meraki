// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlIdpsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlIdpsArgs Empty = new SamlIdpsArgs();

    /**
     * ID associated with the SAML Identity Provider (IdP)
     * 
     */
    @Import(name="idpId")
    private @Nullable Output<String> idpId;

    /**
     * @return ID associated with the SAML Identity Provider (IdP)
     * 
     */
    public Optional<Output<String>> idpId() {
        return Optional.ofNullable(this.idpId);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Dashboard will redirect users to this URL when they sign out.
     * 
     */
    @Import(name="sloLogoutUrl")
    private @Nullable Output<String> sloLogoutUrl;

    /**
     * @return Dashboard will redirect users to this URL when they sign out.
     * 
     */
    public Optional<Output<String>> sloLogoutUrl() {
        return Optional.ofNullable(this.sloLogoutUrl);
    }

    /**
     * Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     * 
     */
    @Import(name="x509certSha1Fingerprint")
    private @Nullable Output<String> x509certSha1Fingerprint;

    /**
     * @return Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     * 
     */
    public Optional<Output<String>> x509certSha1Fingerprint() {
        return Optional.ofNullable(this.x509certSha1Fingerprint);
    }

    private SamlIdpsArgs() {}

    private SamlIdpsArgs(SamlIdpsArgs $) {
        this.idpId = $.idpId;
        this.organizationId = $.organizationId;
        this.sloLogoutUrl = $.sloLogoutUrl;
        this.x509certSha1Fingerprint = $.x509certSha1Fingerprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlIdpsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlIdpsArgs $;

        public Builder() {
            $ = new SamlIdpsArgs();
        }

        public Builder(SamlIdpsArgs defaults) {
            $ = new SamlIdpsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param idpId ID associated with the SAML Identity Provider (IdP)
         * 
         * @return builder
         * 
         */
        public Builder idpId(@Nullable Output<String> idpId) {
            $.idpId = idpId;
            return this;
        }

        /**
         * @param idpId ID associated with the SAML Identity Provider (IdP)
         * 
         * @return builder
         * 
         */
        public Builder idpId(String idpId) {
            return idpId(Output.of(idpId));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param sloLogoutUrl Dashboard will redirect users to this URL when they sign out.
         * 
         * @return builder
         * 
         */
        public Builder sloLogoutUrl(@Nullable Output<String> sloLogoutUrl) {
            $.sloLogoutUrl = sloLogoutUrl;
            return this;
        }

        /**
         * @param sloLogoutUrl Dashboard will redirect users to this URL when they sign out.
         * 
         * @return builder
         * 
         */
        public Builder sloLogoutUrl(String sloLogoutUrl) {
            return sloLogoutUrl(Output.of(sloLogoutUrl));
        }

        /**
         * @param x509certSha1Fingerprint Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
         * 
         * @return builder
         * 
         */
        public Builder x509certSha1Fingerprint(@Nullable Output<String> x509certSha1Fingerprint) {
            $.x509certSha1Fingerprint = x509certSha1Fingerprint;
            return this;
        }

        /**
         * @param x509certSha1Fingerprint Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
         * 
         * @return builder
         * 
         */
        public Builder x509certSha1Fingerprint(String x509certSha1Fingerprint) {
            return x509certSha1Fingerprint(Output.of(x509certSha1Fingerprint));
        }

        public SamlIdpsArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("SamlIdpsArgs", "organizationId");
            }
            return $;
        }
    }

}
