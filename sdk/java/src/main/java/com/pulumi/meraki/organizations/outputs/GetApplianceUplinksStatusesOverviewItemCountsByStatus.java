// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetApplianceUplinksStatusesOverviewItemCountsByStatus {
    /**
     * @return number of uplinks that are active and working
     * 
     */
    private Integer active;
    /**
     * @return number of uplinks currently connecting
     * 
     */
    private Integer connecting;
    /**
     * @return number of uplinks that were working but have failed
     * 
     */
    private Integer failed;
    /**
     * @return number of uplinks currently where nothing is plugged in
     * 
     */
    private Integer notConnected;
    /**
     * @return number of uplinks that are working but on standby
     * 
     */
    private Integer ready;

    private GetApplianceUplinksStatusesOverviewItemCountsByStatus() {}
    /**
     * @return number of uplinks that are active and working
     * 
     */
    public Integer active() {
        return this.active;
    }
    /**
     * @return number of uplinks currently connecting
     * 
     */
    public Integer connecting() {
        return this.connecting;
    }
    /**
     * @return number of uplinks that were working but have failed
     * 
     */
    public Integer failed() {
        return this.failed;
    }
    /**
     * @return number of uplinks currently where nothing is plugged in
     * 
     */
    public Integer notConnected() {
        return this.notConnected;
    }
    /**
     * @return number of uplinks that are working but on standby
     * 
     */
    public Integer ready() {
        return this.ready;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceUplinksStatusesOverviewItemCountsByStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer active;
        private Integer connecting;
        private Integer failed;
        private Integer notConnected;
        private Integer ready;
        public Builder() {}
        public Builder(GetApplianceUplinksStatusesOverviewItemCountsByStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.connecting = defaults.connecting;
    	      this.failed = defaults.failed;
    	      this.notConnected = defaults.notConnected;
    	      this.ready = defaults.ready;
        }

        @CustomType.Setter
        public Builder active(Integer active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksStatusesOverviewItemCountsByStatus", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder connecting(Integer connecting) {
            if (connecting == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksStatusesOverviewItemCountsByStatus", "connecting");
            }
            this.connecting = connecting;
            return this;
        }
        @CustomType.Setter
        public Builder failed(Integer failed) {
            if (failed == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksStatusesOverviewItemCountsByStatus", "failed");
            }
            this.failed = failed;
            return this;
        }
        @CustomType.Setter
        public Builder notConnected(Integer notConnected) {
            if (notConnected == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksStatusesOverviewItemCountsByStatus", "notConnected");
            }
            this.notConnected = notConnected;
            return this;
        }
        @CustomType.Setter
        public Builder ready(Integer ready) {
            if (ready == null) {
              throw new MissingRequiredPropertyException("GetApplianceUplinksStatusesOverviewItemCountsByStatus", "ready");
            }
            this.ready = ready;
            return this;
        }
        public GetApplianceUplinksStatusesOverviewItemCountsByStatus build() {
            final var _resultValue = new GetApplianceUplinksStatusesOverviewItemCountsByStatus();
            _resultValue.active = active;
            _resultValue.connecting = connecting;
            _resultValue.failed = failed;
            _resultValue.notConnected = notConnected;
            _resultValue.ready = ready;
            return _resultValue;
        }
    }
}
