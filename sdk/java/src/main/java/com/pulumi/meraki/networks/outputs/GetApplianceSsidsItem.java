// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetApplianceSsidsItemRadiusServer;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplianceSsidsItem {
    /**
     * @return The association control method for the SSID.
     * 
     */
    private String authMode;
    /**
     * @return The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    private Integer defaultVlanId;
    /**
     * @return Whether or not the SSID is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The psk encryption mode for the SSID.
     * 
     */
    private String encryptionMode;
    /**
     * @return The name of the SSID.
     * 
     */
    private String name;
    /**
     * @return The number of the SSID.
     * 
     */
    private Integer number;
    /**
     * @return The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    private List<GetApplianceSsidsItemRadiusServer> radiusServers;
    /**
     * @return Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    private Boolean visible;
    /**
     * @return WPA encryption mode for the SSID.
     * 
     */
    private String wpaEncryptionMode;

    private GetApplianceSsidsItem() {}
    /**
     * @return The association control method for the SSID.
     * 
     */
    public String authMode() {
        return this.authMode;
    }
    /**
     * @return The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    public Integer defaultVlanId() {
        return this.defaultVlanId;
    }
    /**
     * @return Whether or not the SSID is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The psk encryption mode for the SSID.
     * 
     */
    public String encryptionMode() {
        return this.encryptionMode;
    }
    /**
     * @return The name of the SSID.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of the SSID.
     * 
     */
    public Integer number() {
        return this.number;
    }
    /**
     * @return The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    public List<GetApplianceSsidsItemRadiusServer> radiusServers() {
        return this.radiusServers;
    }
    /**
     * @return Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    public Boolean visible() {
        return this.visible;
    }
    /**
     * @return WPA encryption mode for the SSID.
     * 
     */
    public String wpaEncryptionMode() {
        return this.wpaEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceSsidsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authMode;
        private Integer defaultVlanId;
        private Boolean enabled;
        private String encryptionMode;
        private String name;
        private Integer number;
        private List<GetApplianceSsidsItemRadiusServer> radiusServers;
        private Boolean visible;
        private String wpaEncryptionMode;
        public Builder() {}
        public Builder(GetApplianceSsidsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authMode = defaults.authMode;
    	      this.defaultVlanId = defaults.defaultVlanId;
    	      this.enabled = defaults.enabled;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.radiusServers = defaults.radiusServers;
    	      this.visible = defaults.visible;
    	      this.wpaEncryptionMode = defaults.wpaEncryptionMode;
        }

        @CustomType.Setter
        public Builder authMode(String authMode) {
            if (authMode == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "authMode");
            }
            this.authMode = authMode;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVlanId(Integer defaultVlanId) {
            if (defaultVlanId == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "defaultVlanId");
            }
            this.defaultVlanId = defaultVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionMode(String encryptionMode) {
            if (encryptionMode == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "encryptionMode");
            }
            this.encryptionMode = encryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServers(List<GetApplianceSsidsItemRadiusServer> radiusServers) {
            if (radiusServers == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "radiusServers");
            }
            this.radiusServers = radiusServers;
            return this;
        }
        public Builder radiusServers(GetApplianceSsidsItemRadiusServer... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }
        @CustomType.Setter
        public Builder visible(Boolean visible) {
            if (visible == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "visible");
            }
            this.visible = visible;
            return this;
        }
        @CustomType.Setter
        public Builder wpaEncryptionMode(String wpaEncryptionMode) {
            if (wpaEncryptionMode == null) {
              throw new MissingRequiredPropertyException("GetApplianceSsidsItem", "wpaEncryptionMode");
            }
            this.wpaEncryptionMode = wpaEncryptionMode;
            return this;
        }
        public GetApplianceSsidsItem build() {
            final var _resultValue = new GetApplianceSsidsItem();
            _resultValue.authMode = authMode;
            _resultValue.defaultVlanId = defaultVlanId;
            _resultValue.enabled = enabled;
            _resultValue.encryptionMode = encryptionMode;
            _resultValue.name = name;
            _resultValue.number = number;
            _resultValue.radiusServers = radiusServers;
            _resultValue.visible = visible;
            _resultValue.wpaEncryptionMode = wpaEncryptionMode;
            return _resultValue;
        }
    }
}
