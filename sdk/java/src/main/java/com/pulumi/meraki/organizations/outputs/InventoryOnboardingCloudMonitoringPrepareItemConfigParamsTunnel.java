// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.organizations.outputs.InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel {
    /**
     * @return SSH tunnel URL used to connect to the device
     * 
     */
    private @Nullable String host;
    private @Nullable String mode;
    /**
     * @return The name of the tunnel we are attempting to connect to
     * 
     */
    private @Nullable String name;
    /**
     * @return The port used for the ssh tunnel.
     * 
     */
    private @Nullable String port;
    /**
     * @return Root certificate information
     * 
     */
    private @Nullable InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate rootCertificate;

    private InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel() {}
    /**
     * @return SSH tunnel URL used to connect to the device
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The name of the tunnel we are attempting to connect to
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The port used for the ssh tunnel.
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Root certificate information
     * 
     */
    public Optional<InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate> rootCertificate() {
        return Optional.ofNullable(this.rootCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String host;
        private @Nullable String mode;
        private @Nullable String name;
        private @Nullable String port;
        private @Nullable InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate rootCertificate;
        public Builder() {}
        public Builder(InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.rootCertificate = defaults.rootCertificate;
        }

        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder rootCertificate(@Nullable InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnelRootCertificate rootCertificate) {

            this.rootCertificate = rootCertificate;
            return this;
        }
        public InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel build() {
            final var _resultValue = new InventoryOnboardingCloudMonitoringPrepareItemConfigParamsTunnel();
            _resultValue.host = host;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.rootCertificate = rootCertificate;
            return _resultValue;
        }
    }
}
