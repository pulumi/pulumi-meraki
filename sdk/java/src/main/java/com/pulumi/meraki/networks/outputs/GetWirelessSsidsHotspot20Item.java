// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsHotspot20ItemMccMnc;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsHotspot20ItemNaiRealm;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsHotspot20ItemOperator;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsHotspot20ItemVenue;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWirelessSsidsHotspot20Item {
    private List<String> domains;
    private Boolean enabled;
    private List<GetWirelessSsidsHotspot20ItemMccMnc> mccMncs;
    private List<GetWirelessSsidsHotspot20ItemNaiRealm> naiRealms;
    private String networkAccessType;
    private GetWirelessSsidsHotspot20ItemOperator operator;
    private List<String> roamConsortOis;
    private GetWirelessSsidsHotspot20ItemVenue venue;

    private GetWirelessSsidsHotspot20Item() {}
    public List<String> domains() {
        return this.domains;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public List<GetWirelessSsidsHotspot20ItemMccMnc> mccMncs() {
        return this.mccMncs;
    }
    public List<GetWirelessSsidsHotspot20ItemNaiRealm> naiRealms() {
        return this.naiRealms;
    }
    public String networkAccessType() {
        return this.networkAccessType;
    }
    public GetWirelessSsidsHotspot20ItemOperator operator() {
        return this.operator;
    }
    public List<String> roamConsortOis() {
        return this.roamConsortOis;
    }
    public GetWirelessSsidsHotspot20ItemVenue venue() {
        return this.venue;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSsidsHotspot20Item defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> domains;
        private Boolean enabled;
        private List<GetWirelessSsidsHotspot20ItemMccMnc> mccMncs;
        private List<GetWirelessSsidsHotspot20ItemNaiRealm> naiRealms;
        private String networkAccessType;
        private GetWirelessSsidsHotspot20ItemOperator operator;
        private List<String> roamConsortOis;
        private GetWirelessSsidsHotspot20ItemVenue venue;
        public Builder() {}
        public Builder(GetWirelessSsidsHotspot20Item defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domains = defaults.domains;
    	      this.enabled = defaults.enabled;
    	      this.mccMncs = defaults.mccMncs;
    	      this.naiRealms = defaults.naiRealms;
    	      this.networkAccessType = defaults.networkAccessType;
    	      this.operator = defaults.operator;
    	      this.roamConsortOis = defaults.roamConsortOis;
    	      this.venue = defaults.venue;
        }

        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder mccMncs(List<GetWirelessSsidsHotspot20ItemMccMnc> mccMncs) {
            if (mccMncs == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "mccMncs");
            }
            this.mccMncs = mccMncs;
            return this;
        }
        public Builder mccMncs(GetWirelessSsidsHotspot20ItemMccMnc... mccMncs) {
            return mccMncs(List.of(mccMncs));
        }
        @CustomType.Setter
        public Builder naiRealms(List<GetWirelessSsidsHotspot20ItemNaiRealm> naiRealms) {
            if (naiRealms == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "naiRealms");
            }
            this.naiRealms = naiRealms;
            return this;
        }
        public Builder naiRealms(GetWirelessSsidsHotspot20ItemNaiRealm... naiRealms) {
            return naiRealms(List.of(naiRealms));
        }
        @CustomType.Setter
        public Builder networkAccessType(String networkAccessType) {
            if (networkAccessType == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "networkAccessType");
            }
            this.networkAccessType = networkAccessType;
            return this;
        }
        @CustomType.Setter
        public Builder operator(GetWirelessSsidsHotspot20ItemOperator operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder roamConsortOis(List<String> roamConsortOis) {
            if (roamConsortOis == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "roamConsortOis");
            }
            this.roamConsortOis = roamConsortOis;
            return this;
        }
        public Builder roamConsortOis(String... roamConsortOis) {
            return roamConsortOis(List.of(roamConsortOis));
        }
        @CustomType.Setter
        public Builder venue(GetWirelessSsidsHotspot20ItemVenue venue) {
            if (venue == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsHotspot20Item", "venue");
            }
            this.venue = venue;
            return this;
        }
        public GetWirelessSsidsHotspot20Item build() {
            final var _resultValue = new GetWirelessSsidsHotspot20Item();
            _resultValue.domains = domains;
            _resultValue.enabled = enabled;
            _resultValue.mccMncs = mccMncs;
            _resultValue.naiRealms = naiRealms;
            _resultValue.networkAccessType = networkAccessType;
            _resultValue.operator = operator;
            _resultValue.roamConsortOis = roamConsortOis;
            _resultValue.venue = venue;
            return _resultValue;
        }
    }
}
