// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdaptivePolicyAclsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdaptivePolicyAclsRuleArgs Empty = new AdaptivePolicyAclsRuleArgs();

    /**
     * Destination port
     * 
     */
    @Import(name="dstPort")
    private @Nullable Output<String> dstPort;

    /**
     * @return Destination port
     * 
     */
    public Optional<Output<String>> dstPort() {
        return Optional.ofNullable(this.dstPort);
    }

    /**
     * &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The type of protocol
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The type of protocol
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Source port
     * 
     */
    @Import(name="srcPort")
    private @Nullable Output<String> srcPort;

    /**
     * @return Source port
     * 
     */
    public Optional<Output<String>> srcPort() {
        return Optional.ofNullable(this.srcPort);
    }

    private AdaptivePolicyAclsRuleArgs() {}

    private AdaptivePolicyAclsRuleArgs(AdaptivePolicyAclsRuleArgs $) {
        this.dstPort = $.dstPort;
        this.policy = $.policy;
        this.protocol = $.protocol;
        this.srcPort = $.srcPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdaptivePolicyAclsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdaptivePolicyAclsRuleArgs $;

        public Builder() {
            $ = new AdaptivePolicyAclsRuleArgs();
        }

        public Builder(AdaptivePolicyAclsRuleArgs defaults) {
            $ = new AdaptivePolicyAclsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dstPort Destination port
         * 
         * @return builder
         * 
         */
        public Builder dstPort(@Nullable Output<String> dstPort) {
            $.dstPort = dstPort;
            return this;
        }

        /**
         * @param dstPort Destination port
         * 
         * @return builder
         * 
         */
        public Builder dstPort(String dstPort) {
            return dstPort(Output.of(dstPort));
        }

        /**
         * @param policy &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy &#39;allow&#39; or &#39;deny&#39; traffic specified by this rule
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param protocol The type of protocol
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The type of protocol
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param srcPort Source port
         * 
         * @return builder
         * 
         */
        public Builder srcPort(@Nullable Output<String> srcPort) {
            $.srcPort = srcPort;
            return this;
        }

        /**
         * @param srcPort Source port
         * 
         * @return builder
         * 
         */
        public Builder srcPort(String srcPort) {
            return srcPort(Output.of(srcPort));
        }

        public AdaptivePolicyAclsRuleArgs build() {
            return $;
        }
    }

}
