// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetCellularGatewayUplinkStatusesItemUplinkSignalStat;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCellularGatewayUplinkStatusesItemUplink {
    /**
     * @return Access Point Name
     * 
     */
    private String apn;
    /**
     * @return Connection Type
     * 
     */
    private String connectionType;
    /**
     * @return Primary DNS IP
     * 
     */
    private String dns1;
    /**
     * @return Secondary DNS IP
     * 
     */
    private String dns2;
    /**
     * @return Gateway IP
     * 
     */
    private String gateway;
    /**
     * @return Integrated Circuit Card Identification Number
     * 
     */
    private String iccid;
    /**
     * @return Uplink interface
     * 
     */
    private String interface_;
    /**
     * @return Uplink IP
     * 
     */
    private String ip;
    /**
     * @return Uplink model
     * 
     */
    private String model;
    /**
     * @return Network Provider
     * 
     */
    private String provider;
    /**
     * @return Public IP
     * 
     */
    private String publicIp;
    /**
     * @return Tower Signal Status
     * 
     */
    private GetCellularGatewayUplinkStatusesItemUplinkSignalStat signalStat;
    /**
     * @return Signal Type
     * 
     */
    private String signalType;
    /**
     * @return Uplink status
     * 
     */
    private String status;

    private GetCellularGatewayUplinkStatusesItemUplink() {}
    /**
     * @return Access Point Name
     * 
     */
    public String apn() {
        return this.apn;
    }
    /**
     * @return Connection Type
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Primary DNS IP
     * 
     */
    public String dns1() {
        return this.dns1;
    }
    /**
     * @return Secondary DNS IP
     * 
     */
    public String dns2() {
        return this.dns2;
    }
    /**
     * @return Gateway IP
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return Integrated Circuit Card Identification Number
     * 
     */
    public String iccid() {
        return this.iccid;
    }
    /**
     * @return Uplink interface
     * 
     */
    public String interface_() {
        return this.interface_;
    }
    /**
     * @return Uplink IP
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Uplink model
     * 
     */
    public String model() {
        return this.model;
    }
    /**
     * @return Network Provider
     * 
     */
    public String provider() {
        return this.provider;
    }
    /**
     * @return Public IP
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return Tower Signal Status
     * 
     */
    public GetCellularGatewayUplinkStatusesItemUplinkSignalStat signalStat() {
        return this.signalStat;
    }
    /**
     * @return Signal Type
     * 
     */
    public String signalType() {
        return this.signalType;
    }
    /**
     * @return Uplink status
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCellularGatewayUplinkStatusesItemUplink defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apn;
        private String connectionType;
        private String dns1;
        private String dns2;
        private String gateway;
        private String iccid;
        private String interface_;
        private String ip;
        private String model;
        private String provider;
        private String publicIp;
        private GetCellularGatewayUplinkStatusesItemUplinkSignalStat signalStat;
        private String signalType;
        private String status;
        public Builder() {}
        public Builder(GetCellularGatewayUplinkStatusesItemUplink defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apn = defaults.apn;
    	      this.connectionType = defaults.connectionType;
    	      this.dns1 = defaults.dns1;
    	      this.dns2 = defaults.dns2;
    	      this.gateway = defaults.gateway;
    	      this.iccid = defaults.iccid;
    	      this.interface_ = defaults.interface_;
    	      this.ip = defaults.ip;
    	      this.model = defaults.model;
    	      this.provider = defaults.provider;
    	      this.publicIp = defaults.publicIp;
    	      this.signalStat = defaults.signalStat;
    	      this.signalType = defaults.signalType;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder apn(String apn) {
            if (apn == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "apn");
            }
            this.apn = apn;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            if (connectionType == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "connectionType");
            }
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder dns1(String dns1) {
            if (dns1 == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "dns1");
            }
            this.dns1 = dns1;
            return this;
        }
        @CustomType.Setter
        public Builder dns2(String dns2) {
            if (dns2 == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "dns2");
            }
            this.dns2 = dns2;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder iccid(String iccid) {
            if (iccid == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "iccid");
            }
            this.iccid = iccid;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            if (interface_ == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "interface_");
            }
            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            if (provider == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "provider");
            }
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            if (publicIp == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "publicIp");
            }
            this.publicIp = publicIp;
            return this;
        }
        @CustomType.Setter
        public Builder signalStat(GetCellularGatewayUplinkStatusesItemUplinkSignalStat signalStat) {
            if (signalStat == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "signalStat");
            }
            this.signalStat = signalStat;
            return this;
        }
        @CustomType.Setter
        public Builder signalType(String signalType) {
            if (signalType == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "signalType");
            }
            this.signalType = signalType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCellularGatewayUplinkStatusesItemUplink", "status");
            }
            this.status = status;
            return this;
        }
        public GetCellularGatewayUplinkStatusesItemUplink build() {
            final var _resultValue = new GetCellularGatewayUplinkStatusesItemUplink();
            _resultValue.apn = apn;
            _resultValue.connectionType = connectionType;
            _resultValue.dns1 = dns1;
            _resultValue.dns2 = dns2;
            _resultValue.gateway = gateway;
            _resultValue.iccid = iccid;
            _resultValue.interface_ = interface_;
            _resultValue.ip = ip;
            _resultValue.model = model;
            _resultValue.provider = provider;
            _resultValue.publicIp = publicIp;
            _resultValue.signalStat = signalStat;
            _resultValue.signalType = signalType;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
