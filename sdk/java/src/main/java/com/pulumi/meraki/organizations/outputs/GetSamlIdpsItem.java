// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSamlIdpsItem {
    /**
     * @return URL that is consuming SAML Identity Provider (IdP)
     * 
     */
    private String consumerUrl;
    /**
     * @return ID associated with the SAML Identity Provider (IdP)
     * 
     */
    private String idpId;
    /**
     * @return Dashboard will redirect users to this URL when they sign out.
     * 
     */
    private String sloLogoutUrl;
    /**
     * @return Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     * 
     */
    private String x509certSha1Fingerprint;

    private GetSamlIdpsItem() {}
    /**
     * @return URL that is consuming SAML Identity Provider (IdP)
     * 
     */
    public String consumerUrl() {
        return this.consumerUrl;
    }
    /**
     * @return ID associated with the SAML Identity Provider (IdP)
     * 
     */
    public String idpId() {
        return this.idpId;
    }
    /**
     * @return Dashboard will redirect users to this URL when they sign out.
     * 
     */
    public String sloLogoutUrl() {
        return this.sloLogoutUrl;
    }
    /**
     * @return Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
     * 
     */
    public String x509certSha1Fingerprint() {
        return this.x509certSha1Fingerprint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSamlIdpsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String consumerUrl;
        private String idpId;
        private String sloLogoutUrl;
        private String x509certSha1Fingerprint;
        public Builder() {}
        public Builder(GetSamlIdpsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerUrl = defaults.consumerUrl;
    	      this.idpId = defaults.idpId;
    	      this.sloLogoutUrl = defaults.sloLogoutUrl;
    	      this.x509certSha1Fingerprint = defaults.x509certSha1Fingerprint;
        }

        @CustomType.Setter
        public Builder consumerUrl(String consumerUrl) {
            if (consumerUrl == null) {
              throw new MissingRequiredPropertyException("GetSamlIdpsItem", "consumerUrl");
            }
            this.consumerUrl = consumerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder idpId(String idpId) {
            if (idpId == null) {
              throw new MissingRequiredPropertyException("GetSamlIdpsItem", "idpId");
            }
            this.idpId = idpId;
            return this;
        }
        @CustomType.Setter
        public Builder sloLogoutUrl(String sloLogoutUrl) {
            if (sloLogoutUrl == null) {
              throw new MissingRequiredPropertyException("GetSamlIdpsItem", "sloLogoutUrl");
            }
            this.sloLogoutUrl = sloLogoutUrl;
            return this;
        }
        @CustomType.Setter
        public Builder x509certSha1Fingerprint(String x509certSha1Fingerprint) {
            if (x509certSha1Fingerprint == null) {
              throw new MissingRequiredPropertyException("GetSamlIdpsItem", "x509certSha1Fingerprint");
            }
            this.x509certSha1Fingerprint = x509certSha1Fingerprint;
            return this;
        }
        public GetSamlIdpsItem build() {
            final var _resultValue = new GetSamlIdpsItem();
            _resultValue.consumerUrl = consumerUrl;
            _resultValue.idpId = idpId;
            _resultValue.sloLogoutUrl = sloLogoutUrl;
            _resultValue.x509certSha1Fingerprint = x509certSha1Fingerprint;
            return _resultValue;
        }
    }
}
