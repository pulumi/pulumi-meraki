// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetClientsSearchItemRecordClientVpnConnection;
import com.pulumi.meraki.organizations.outputs.GetClientsSearchItemRecordNetwork;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClientsSearchItemRecord {
    private String cdp;
    private List<GetClientsSearchItemRecordClientVpnConnection> clientVpnConnections;
    private String description;
    private Integer firstSeen;
    private String ip;
    private String ip6;
    private Integer lastSeen;
    private List<String> lldps;
    private GetClientsSearchItemRecordNetwork network;
    private String os;
    private Boolean smInstalled;
    private String ssid;
    private String status;
    private String switchport;
    private String user;
    private String vlan;
    private String wirelessCapabilities;

    private GetClientsSearchItemRecord() {}
    public String cdp() {
        return this.cdp;
    }
    public List<GetClientsSearchItemRecordClientVpnConnection> clientVpnConnections() {
        return this.clientVpnConnections;
    }
    public String description() {
        return this.description;
    }
    public Integer firstSeen() {
        return this.firstSeen;
    }
    public String ip() {
        return this.ip;
    }
    public String ip6() {
        return this.ip6;
    }
    public Integer lastSeen() {
        return this.lastSeen;
    }
    public List<String> lldps() {
        return this.lldps;
    }
    public GetClientsSearchItemRecordNetwork network() {
        return this.network;
    }
    public String os() {
        return this.os;
    }
    public Boolean smInstalled() {
        return this.smInstalled;
    }
    public String ssid() {
        return this.ssid;
    }
    public String status() {
        return this.status;
    }
    public String switchport() {
        return this.switchport;
    }
    public String user() {
        return this.user;
    }
    public String vlan() {
        return this.vlan;
    }
    public String wirelessCapabilities() {
        return this.wirelessCapabilities;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientsSearchItemRecord defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cdp;
        private List<GetClientsSearchItemRecordClientVpnConnection> clientVpnConnections;
        private String description;
        private Integer firstSeen;
        private String ip;
        private String ip6;
        private Integer lastSeen;
        private List<String> lldps;
        private GetClientsSearchItemRecordNetwork network;
        private String os;
        private Boolean smInstalled;
        private String ssid;
        private String status;
        private String switchport;
        private String user;
        private String vlan;
        private String wirelessCapabilities;
        public Builder() {}
        public Builder(GetClientsSearchItemRecord defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cdp = defaults.cdp;
    	      this.clientVpnConnections = defaults.clientVpnConnections;
    	      this.description = defaults.description;
    	      this.firstSeen = defaults.firstSeen;
    	      this.ip = defaults.ip;
    	      this.ip6 = defaults.ip6;
    	      this.lastSeen = defaults.lastSeen;
    	      this.lldps = defaults.lldps;
    	      this.network = defaults.network;
    	      this.os = defaults.os;
    	      this.smInstalled = defaults.smInstalled;
    	      this.ssid = defaults.ssid;
    	      this.status = defaults.status;
    	      this.switchport = defaults.switchport;
    	      this.user = defaults.user;
    	      this.vlan = defaults.vlan;
    	      this.wirelessCapabilities = defaults.wirelessCapabilities;
        }

        @CustomType.Setter
        public Builder cdp(String cdp) {
            if (cdp == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "cdp");
            }
            this.cdp = cdp;
            return this;
        }
        @CustomType.Setter
        public Builder clientVpnConnections(List<GetClientsSearchItemRecordClientVpnConnection> clientVpnConnections) {
            if (clientVpnConnections == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "clientVpnConnections");
            }
            this.clientVpnConnections = clientVpnConnections;
            return this;
        }
        public Builder clientVpnConnections(GetClientsSearchItemRecordClientVpnConnection... clientVpnConnections) {
            return clientVpnConnections(List.of(clientVpnConnections));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder firstSeen(Integer firstSeen) {
            if (firstSeen == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "firstSeen");
            }
            this.firstSeen = firstSeen;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ip6(String ip6) {
            if (ip6 == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "ip6");
            }
            this.ip6 = ip6;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(Integer lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder lldps(List<String> lldps) {
            if (lldps == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "lldps");
            }
            this.lldps = lldps;
            return this;
        }
        public Builder lldps(String... lldps) {
            return lldps(List.of(lldps));
        }
        @CustomType.Setter
        public Builder network(GetClientsSearchItemRecordNetwork network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            if (os == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "os");
            }
            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder smInstalled(Boolean smInstalled) {
            if (smInstalled == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "smInstalled");
            }
            this.smInstalled = smInstalled;
            return this;
        }
        @CustomType.Setter
        public Builder ssid(String ssid) {
            if (ssid == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "ssid");
            }
            this.ssid = ssid;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder switchport(String switchport) {
            if (switchport == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "switchport");
            }
            this.switchport = switchport;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "user");
            }
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(String vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder wirelessCapabilities(String wirelessCapabilities) {
            if (wirelessCapabilities == null) {
              throw new MissingRequiredPropertyException("GetClientsSearchItemRecord", "wirelessCapabilities");
            }
            this.wirelessCapabilities = wirelessCapabilities;
            return this;
        }
        public GetClientsSearchItemRecord build() {
            final var _resultValue = new GetClientsSearchItemRecord();
            _resultValue.cdp = cdp;
            _resultValue.clientVpnConnections = clientVpnConnections;
            _resultValue.description = description;
            _resultValue.firstSeen = firstSeen;
            _resultValue.ip = ip;
            _resultValue.ip6 = ip6;
            _resultValue.lastSeen = lastSeen;
            _resultValue.lldps = lldps;
            _resultValue.network = network;
            _resultValue.os = os;
            _resultValue.smInstalled = smInstalled;
            _resultValue.ssid = ssid;
            _resultValue.status = status;
            _resultValue.switchport = switchport;
            _resultValue.user = user;
            _resultValue.vlan = vlan;
            _resultValue.wirelessCapabilities = wirelessCapabilities;
            return _resultValue;
        }
    }
}
