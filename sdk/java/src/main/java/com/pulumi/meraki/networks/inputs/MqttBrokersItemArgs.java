// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.MqttBrokersItemAuthenticationArgs;
import com.pulumi.meraki.networks.inputs.MqttBrokersItemSecurityArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MqttBrokersItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final MqttBrokersItemArgs Empty = new MqttBrokersItemArgs();

    /**
     * Authentication settings of the MQTT broker
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<MqttBrokersItemAuthenticationArgs> authentication;

    /**
     * @return Authentication settings of the MQTT broker
     * 
     */
    public Optional<Output<MqttBrokersItemAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Host name/IP address where the MQTT broker runs.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Host name/IP address where the MQTT broker runs.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * ID of the MQTT Broker.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of the MQTT Broker.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the MQTT Broker.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the MQTT Broker.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Host port though which the MQTT broker can be reached.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Host port though which the MQTT broker can be reached.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Security settings of the MQTT broker.
     * 
     */
    @Import(name="security")
    private @Nullable Output<MqttBrokersItemSecurityArgs> security;

    /**
     * @return Security settings of the MQTT broker.
     * 
     */
    public Optional<Output<MqttBrokersItemSecurityArgs>> security() {
        return Optional.ofNullable(this.security);
    }

    private MqttBrokersItemArgs() {}

    private MqttBrokersItemArgs(MqttBrokersItemArgs $) {
        this.authentication = $.authentication;
        this.host = $.host;
        this.id = $.id;
        this.name = $.name;
        this.port = $.port;
        this.security = $.security;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MqttBrokersItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MqttBrokersItemArgs $;

        public Builder() {
            $ = new MqttBrokersItemArgs();
        }

        public Builder(MqttBrokersItemArgs defaults) {
            $ = new MqttBrokersItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication Authentication settings of the MQTT broker
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<MqttBrokersItemAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Authentication settings of the MQTT broker
         * 
         * @return builder
         * 
         */
        public Builder authentication(MqttBrokersItemAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param host Host name/IP address where the MQTT broker runs.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host name/IP address where the MQTT broker runs.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param id ID of the MQTT Broker.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the MQTT Broker.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the MQTT Broker.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the MQTT Broker.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port Host port though which the MQTT broker can be reached.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Host port though which the MQTT broker can be reached.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param security Security settings of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder security(@Nullable Output<MqttBrokersItemSecurityArgs> security) {
            $.security = security;
            return this;
        }

        /**
         * @param security Security settings of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder security(MqttBrokersItemSecurityArgs security) {
            return security(Output.of(security));
        }

        public MqttBrokersItemArgs build() {
            return $;
        }
    }

}
