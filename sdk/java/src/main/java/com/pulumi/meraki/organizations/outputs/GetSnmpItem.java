// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSnmpItem {
    /**
     * @return The hostname of the SNMP server.
     * 
     */
    private String hostname;
    /**
     * @return The list of IPv4 addresses that are allowed to access the SNMP server.
     * 
     */
    private List<String> peerIps;
    /**
     * @return The port of the SNMP server.
     * 
     */
    private Integer port;
    /**
     * @return The community string for SNMP version 2c, if enabled.
     * 
     */
    private String v2CommunityString;
    /**
     * @return Boolean indicating whether SNMP version 2c is enabled for the organization.
     * 
     */
    private Boolean v2cEnabled;
    /**
     * @return The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
     * 
     */
    private String v3AuthMode;
    /**
     * @return Boolean indicating whether SNMP version 3 is enabled for the organization.
     * 
     */
    private Boolean v3Enabled;
    /**
     * @return The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
     * 
     */
    private String v3PrivMode;
    /**
     * @return The user for SNMP version 3, if enabled.
     * 
     */
    private String v3User;

    private GetSnmpItem() {}
    /**
     * @return The hostname of the SNMP server.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The list of IPv4 addresses that are allowed to access the SNMP server.
     * 
     */
    public List<String> peerIps() {
        return this.peerIps;
    }
    /**
     * @return The port of the SNMP server.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The community string for SNMP version 2c, if enabled.
     * 
     */
    public String v2CommunityString() {
        return this.v2CommunityString;
    }
    /**
     * @return Boolean indicating whether SNMP version 2c is enabled for the organization.
     * 
     */
    public Boolean v2cEnabled() {
        return this.v2cEnabled;
    }
    /**
     * @return The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
     * 
     */
    public String v3AuthMode() {
        return this.v3AuthMode;
    }
    /**
     * @return Boolean indicating whether SNMP version 3 is enabled for the organization.
     * 
     */
    public Boolean v3Enabled() {
        return this.v3Enabled;
    }
    /**
     * @return The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
     * 
     */
    public String v3PrivMode() {
        return this.v3PrivMode;
    }
    /**
     * @return The user for SNMP version 3, if enabled.
     * 
     */
    public String v3User() {
        return this.v3User;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnmpItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostname;
        private List<String> peerIps;
        private Integer port;
        private String v2CommunityString;
        private Boolean v2cEnabled;
        private String v3AuthMode;
        private Boolean v3Enabled;
        private String v3PrivMode;
        private String v3User;
        public Builder() {}
        public Builder(GetSnmpItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.peerIps = defaults.peerIps;
    	      this.port = defaults.port;
    	      this.v2CommunityString = defaults.v2CommunityString;
    	      this.v2cEnabled = defaults.v2cEnabled;
    	      this.v3AuthMode = defaults.v3AuthMode;
    	      this.v3Enabled = defaults.v3Enabled;
    	      this.v3PrivMode = defaults.v3PrivMode;
    	      this.v3User = defaults.v3User;
        }

        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder peerIps(List<String> peerIps) {
            if (peerIps == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "peerIps");
            }
            this.peerIps = peerIps;
            return this;
        }
        public Builder peerIps(String... peerIps) {
            return peerIps(List.of(peerIps));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder v2CommunityString(String v2CommunityString) {
            if (v2CommunityString == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v2CommunityString");
            }
            this.v2CommunityString = v2CommunityString;
            return this;
        }
        @CustomType.Setter
        public Builder v2cEnabled(Boolean v2cEnabled) {
            if (v2cEnabled == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v2cEnabled");
            }
            this.v2cEnabled = v2cEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder v3AuthMode(String v3AuthMode) {
            if (v3AuthMode == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v3AuthMode");
            }
            this.v3AuthMode = v3AuthMode;
            return this;
        }
        @CustomType.Setter
        public Builder v3Enabled(Boolean v3Enabled) {
            if (v3Enabled == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v3Enabled");
            }
            this.v3Enabled = v3Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder v3PrivMode(String v3PrivMode) {
            if (v3PrivMode == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v3PrivMode");
            }
            this.v3PrivMode = v3PrivMode;
            return this;
        }
        @CustomType.Setter
        public Builder v3User(String v3User) {
            if (v3User == null) {
              throw new MissingRequiredPropertyException("GetSnmpItem", "v3User");
            }
            this.v3User = v3User;
            return this;
        }
        public GetSnmpItem build() {
            final var _resultValue = new GetSnmpItem();
            _resultValue.hostname = hostname;
            _resultValue.peerIps = peerIps;
            _resultValue.port = port;
            _resultValue.v2CommunityString = v2CommunityString;
            _resultValue.v2cEnabled = v2cEnabled;
            _resultValue.v3AuthMode = v3AuthMode;
            _resultValue.v3Enabled = v3Enabled;
            _resultValue.v3PrivMode = v3PrivMode;
            _resultValue.v3User = v3User;
            return _resultValue;
        }
    }
}
