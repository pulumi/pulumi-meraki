// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSmDevicesDesktopLogsItem {
    /**
     * @return The IP address of the DCHP Server.
     * 
     */
    private String dhcpServer;
    /**
     * @return The DNS Server during the connection.
     * 
     */
    private String dnsServer;
    /**
     * @return The gateway IP the device was connected to.
     * 
     */
    private String gateway;
    /**
     * @return The IP of the device during connection.
     * 
     */
    private String ip;
    /**
     * @return The time the data was measured at.
     * 
     */
    private String measuredAt;
    /**
     * @return The network device for the device used for connection.
     * 
     */
    private String networkDevice;
    /**
     * @return The network driver for the device.
     * 
     */
    private String networkDriver;
    /**
     * @return The network max transmission unit.
     * 
     */
    private String networkMtu;
    /**
     * @return The public IP address of the device.
     * 
     */
    private String publicIp;
    /**
     * @return The subnet of the device connection.
     * 
     */
    private String subnet;
    /**
     * @return The time the connection was logged.
     * 
     */
    private String ts;
    /**
     * @return The user during connection.
     * 
     */
    private String user;
    /**
     * @return The type of authentication used by the SSID.
     * 
     */
    private String wifiAuth;
    /**
     * @return The MAC of the access point the device is connected to.
     * 
     */
    private String wifiBssid;
    /**
     * @return Channel through which the connection is routing.
     * 
     */
    private String wifiChannel;
    /**
     * @return The wireless signal power level received by the device.
     * 
     */
    private String wifiNoise;
    /**
     * @return The Received Signal Strength Indicator for the device.
     * 
     */
    private String wifiRssi;
    /**
     * @return The name of the network the device is connected to.
     * 
     */
    private String wifiSsid;

    private GetSmDevicesDesktopLogsItem() {}
    /**
     * @return The IP address of the DCHP Server.
     * 
     */
    public String dhcpServer() {
        return this.dhcpServer;
    }
    /**
     * @return The DNS Server during the connection.
     * 
     */
    public String dnsServer() {
        return this.dnsServer;
    }
    /**
     * @return The gateway IP the device was connected to.
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return The IP of the device during connection.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return The time the data was measured at.
     * 
     */
    public String measuredAt() {
        return this.measuredAt;
    }
    /**
     * @return The network device for the device used for connection.
     * 
     */
    public String networkDevice() {
        return this.networkDevice;
    }
    /**
     * @return The network driver for the device.
     * 
     */
    public String networkDriver() {
        return this.networkDriver;
    }
    /**
     * @return The network max transmission unit.
     * 
     */
    public String networkMtu() {
        return this.networkMtu;
    }
    /**
     * @return The public IP address of the device.
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return The subnet of the device connection.
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return The time the connection was logged.
     * 
     */
    public String ts() {
        return this.ts;
    }
    /**
     * @return The user during connection.
     * 
     */
    public String user() {
        return this.user;
    }
    /**
     * @return The type of authentication used by the SSID.
     * 
     */
    public String wifiAuth() {
        return this.wifiAuth;
    }
    /**
     * @return The MAC of the access point the device is connected to.
     * 
     */
    public String wifiBssid() {
        return this.wifiBssid;
    }
    /**
     * @return Channel through which the connection is routing.
     * 
     */
    public String wifiChannel() {
        return this.wifiChannel;
    }
    /**
     * @return The wireless signal power level received by the device.
     * 
     */
    public String wifiNoise() {
        return this.wifiNoise;
    }
    /**
     * @return The Received Signal Strength Indicator for the device.
     * 
     */
    public String wifiRssi() {
        return this.wifiRssi;
    }
    /**
     * @return The name of the network the device is connected to.
     * 
     */
    public String wifiSsid() {
        return this.wifiSsid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmDevicesDesktopLogsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhcpServer;
        private String dnsServer;
        private String gateway;
        private String ip;
        private String measuredAt;
        private String networkDevice;
        private String networkDriver;
        private String networkMtu;
        private String publicIp;
        private String subnet;
        private String ts;
        private String user;
        private String wifiAuth;
        private String wifiBssid;
        private String wifiChannel;
        private String wifiNoise;
        private String wifiRssi;
        private String wifiSsid;
        public Builder() {}
        public Builder(GetSmDevicesDesktopLogsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpServer = defaults.dhcpServer;
    	      this.dnsServer = defaults.dnsServer;
    	      this.gateway = defaults.gateway;
    	      this.ip = defaults.ip;
    	      this.measuredAt = defaults.measuredAt;
    	      this.networkDevice = defaults.networkDevice;
    	      this.networkDriver = defaults.networkDriver;
    	      this.networkMtu = defaults.networkMtu;
    	      this.publicIp = defaults.publicIp;
    	      this.subnet = defaults.subnet;
    	      this.ts = defaults.ts;
    	      this.user = defaults.user;
    	      this.wifiAuth = defaults.wifiAuth;
    	      this.wifiBssid = defaults.wifiBssid;
    	      this.wifiChannel = defaults.wifiChannel;
    	      this.wifiNoise = defaults.wifiNoise;
    	      this.wifiRssi = defaults.wifiRssi;
    	      this.wifiSsid = defaults.wifiSsid;
        }

        @CustomType.Setter
        public Builder dhcpServer(String dhcpServer) {
            if (dhcpServer == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "dhcpServer");
            }
            this.dhcpServer = dhcpServer;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServer(String dnsServer) {
            if (dnsServer == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "dnsServer");
            }
            this.dnsServer = dnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder measuredAt(String measuredAt) {
            if (measuredAt == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "measuredAt");
            }
            this.measuredAt = measuredAt;
            return this;
        }
        @CustomType.Setter
        public Builder networkDevice(String networkDevice) {
            if (networkDevice == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "networkDevice");
            }
            this.networkDevice = networkDevice;
            return this;
        }
        @CustomType.Setter
        public Builder networkDriver(String networkDriver) {
            if (networkDriver == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "networkDriver");
            }
            this.networkDriver = networkDriver;
            return this;
        }
        @CustomType.Setter
        public Builder networkMtu(String networkMtu) {
            if (networkMtu == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "networkMtu");
            }
            this.networkMtu = networkMtu;
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            if (publicIp == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "publicIp");
            }
            this.publicIp = publicIp;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder ts(String ts) {
            if (ts == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "ts");
            }
            this.ts = ts;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "user");
            }
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder wifiAuth(String wifiAuth) {
            if (wifiAuth == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiAuth");
            }
            this.wifiAuth = wifiAuth;
            return this;
        }
        @CustomType.Setter
        public Builder wifiBssid(String wifiBssid) {
            if (wifiBssid == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiBssid");
            }
            this.wifiBssid = wifiBssid;
            return this;
        }
        @CustomType.Setter
        public Builder wifiChannel(String wifiChannel) {
            if (wifiChannel == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiChannel");
            }
            this.wifiChannel = wifiChannel;
            return this;
        }
        @CustomType.Setter
        public Builder wifiNoise(String wifiNoise) {
            if (wifiNoise == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiNoise");
            }
            this.wifiNoise = wifiNoise;
            return this;
        }
        @CustomType.Setter
        public Builder wifiRssi(String wifiRssi) {
            if (wifiRssi == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiRssi");
            }
            this.wifiRssi = wifiRssi;
            return this;
        }
        @CustomType.Setter
        public Builder wifiSsid(String wifiSsid) {
            if (wifiSsid == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesDesktopLogsItem", "wifiSsid");
            }
            this.wifiSsid = wifiSsid;
            return this;
        }
        public GetSmDevicesDesktopLogsItem build() {
            final var _resultValue = new GetSmDevicesDesktopLogsItem();
            _resultValue.dhcpServer = dhcpServer;
            _resultValue.dnsServer = dnsServer;
            _resultValue.gateway = gateway;
            _resultValue.ip = ip;
            _resultValue.measuredAt = measuredAt;
            _resultValue.networkDevice = networkDevice;
            _resultValue.networkDriver = networkDriver;
            _resultValue.networkMtu = networkMtu;
            _resultValue.publicIp = publicIp;
            _resultValue.subnet = subnet;
            _resultValue.ts = ts;
            _resultValue.user = user;
            _resultValue.wifiAuth = wifiAuth;
            _resultValue.wifiBssid = wifiBssid;
            _resultValue.wifiChannel = wifiChannel;
            _resultValue.wifiNoise = wifiNoise;
            _resultValue.wifiRssi = wifiRssi;
            _resultValue.wifiSsid = wifiSsid;
            return _resultValue;
        }
    }
}
