// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.devices.inputs.CellularSimsSimArgs;
import com.pulumi.meraki.devices.inputs.CellularSimsSimFailoverArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CellularSimsState extends com.pulumi.resources.ResourceArgs {

    public static final CellularSimsState Empty = new CellularSimsState();

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * SIM Failover settings.
     * 
     */
    @Import(name="simFailover")
    private @Nullable Output<CellularSimsSimFailoverArgs> simFailover;

    /**
     * @return SIM Failover settings.
     * 
     */
    public Optional<Output<CellularSimsSimFailoverArgs>> simFailover() {
        return Optional.ofNullable(this.simFailover);
    }

    /**
     * List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
     * 
     */
    @Import(name="sims")
    private @Nullable Output<List<CellularSimsSimArgs>> sims;

    /**
     * @return List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
     * 
     */
    public Optional<Output<List<CellularSimsSimArgs>>> sims() {
        return Optional.ofNullable(this.sims);
    }

    private CellularSimsState() {}

    private CellularSimsState(CellularSimsState $) {
        this.serial = $.serial;
        this.simFailover = $.simFailover;
        this.sims = $.sims;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CellularSimsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CellularSimsState $;

        public Builder() {
            $ = new CellularSimsState();
        }

        public Builder(CellularSimsState defaults) {
            $ = new CellularSimsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param simFailover SIM Failover settings.
         * 
         * @return builder
         * 
         */
        public Builder simFailover(@Nullable Output<CellularSimsSimFailoverArgs> simFailover) {
            $.simFailover = simFailover;
            return this;
        }

        /**
         * @param simFailover SIM Failover settings.
         * 
         * @return builder
         * 
         */
        public Builder simFailover(CellularSimsSimFailoverArgs simFailover) {
            return simFailover(Output.of(simFailover));
        }

        /**
         * @param sims List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
         * 
         * @return builder
         * 
         */
        public Builder sims(@Nullable Output<List<CellularSimsSimArgs>> sims) {
            $.sims = sims;
            return this;
        }

        /**
         * @param sims List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
         * 
         * @return builder
         * 
         */
        public Builder sims(List<CellularSimsSimArgs> sims) {
            return sims(Output.of(sims));
        }

        /**
         * @param sims List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
         * 
         * @return builder
         * 
         */
        public Builder sims(CellularSimsSimArgs... sims) {
            return sims(List.of(sims));
        }

        public CellularSimsState build() {
            return $;
        }
    }

}
