// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchAccessPoliciesDot1xArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchAccessPoliciesDot1xArgs Empty = new SwitchAccessPoliciesDot1xArgs();

    /**
     * Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
     * 
     */
    @Import(name="controlDirection")
    private @Nullable Output<String> controlDirection;

    /**
     * @return Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
     * 
     */
    public Optional<Output<String>> controlDirection() {
        return Optional.ofNullable(this.controlDirection);
    }

    private SwitchAccessPoliciesDot1xArgs() {}

    private SwitchAccessPoliciesDot1xArgs(SwitchAccessPoliciesDot1xArgs $) {
        this.controlDirection = $.controlDirection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchAccessPoliciesDot1xArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchAccessPoliciesDot1xArgs $;

        public Builder() {
            $ = new SwitchAccessPoliciesDot1xArgs();
        }

        public Builder(SwitchAccessPoliciesDot1xArgs defaults) {
            $ = new SwitchAccessPoliciesDot1xArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlDirection Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
         * 
         * @return builder
         * 
         */
        public Builder controlDirection(@Nullable Output<String> controlDirection) {
            $.controlDirection = controlDirection;
            return this;
        }

        /**
         * @param controlDirection Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
         * 
         * @return builder
         * 
         */
        public Builder controlDirection(String controlDirection) {
            return controlDirection(Output.of(controlDirection));
        }

        public SwitchAccessPoliciesDot1xArgs build() {
            return $;
        }
    }

}
