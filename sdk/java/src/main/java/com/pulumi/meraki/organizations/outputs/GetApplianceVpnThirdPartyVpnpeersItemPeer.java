// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplianceVpnThirdPartyVpnpeersItemPeer {
    /**
     * @return [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    private String ikeVersion;
    /**
     * @return Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    private GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies ipsecPolicies;
    /**
     * @return One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    private String ipsecPoliciesPreset;
    /**
     * @return [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    private String localId;
    /**
     * @return The name of the VPN peer
     * 
     */
    private String name;
    /**
     * @return A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    private List<String> networkTags;
    /**
     * @return The list of the private subnets of the VPN peer
     * 
     */
    private List<String> privateSubnets;
    /**
     * @return [optional] The public IP of the VPN peer
     * 
     */
    private String publicIp;
    /**
     * @return [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    private String remoteId;
    /**
     * @return The shared secret with the VPN peer
     * 
     */
    private String secret;

    private GetApplianceVpnThirdPartyVpnpeersItemPeer() {}
    /**
     * @return [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to &#39;1&#39; when omitted.
     * 
     */
    public String ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     * 
     */
    public GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies ipsecPolicies() {
        return this.ipsecPolicies;
    }
    /**
     * @return One of the following available presets: &#39;default&#39;, &#39;aws&#39;, &#39;azure&#39;. If this is provided, the &#39;ipsecPolicies&#39; parameter is ignored.
     * 
     */
    public String ipsecPoliciesPreset() {
        return this.ipsecPoliciesPreset;
    }
    /**
     * @return [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     * 
     */
    public String localId() {
        return this.localId;
    }
    /**
     * @return The name of the VPN peer
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of network tags that will connect with this peer. Use [&#39;all&#39;] for all networks. Use [&#39;none&#39;] for no networks. If not included, the default is [&#39;all&#39;].
     * 
     */
    public List<String> networkTags() {
        return this.networkTags;
    }
    /**
     * @return The list of the private subnets of the VPN peer
     * 
     */
    public List<String> privateSubnets() {
        return this.privateSubnets;
    }
    /**
     * @return [optional] The public IP of the VPN peer
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     * 
     */
    public String remoteId() {
        return this.remoteId;
    }
    /**
     * @return The shared secret with the VPN peer
     * 
     */
    public String secret() {
        return this.secret;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceVpnThirdPartyVpnpeersItemPeer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ikeVersion;
        private GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies ipsecPolicies;
        private String ipsecPoliciesPreset;
        private String localId;
        private String name;
        private List<String> networkTags;
        private List<String> privateSubnets;
        private String publicIp;
        private String remoteId;
        private String secret;
        public Builder() {}
        public Builder(GetApplianceVpnThirdPartyVpnpeersItemPeer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.ipsecPolicies = defaults.ipsecPolicies;
    	      this.ipsecPoliciesPreset = defaults.ipsecPoliciesPreset;
    	      this.localId = defaults.localId;
    	      this.name = defaults.name;
    	      this.networkTags = defaults.networkTags;
    	      this.privateSubnets = defaults.privateSubnets;
    	      this.publicIp = defaults.publicIp;
    	      this.remoteId = defaults.remoteId;
    	      this.secret = defaults.secret;
        }

        @CustomType.Setter
        public Builder ikeVersion(String ikeVersion) {
            if (ikeVersion == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "ikeVersion");
            }
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPolicies(GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies ipsecPolicies) {
            if (ipsecPolicies == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "ipsecPolicies");
            }
            this.ipsecPolicies = ipsecPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPoliciesPreset(String ipsecPoliciesPreset) {
            if (ipsecPoliciesPreset == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "ipsecPoliciesPreset");
            }
            this.ipsecPoliciesPreset = ipsecPoliciesPreset;
            return this;
        }
        @CustomType.Setter
        public Builder localId(String localId) {
            if (localId == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "localId");
            }
            this.localId = localId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkTags(List<String> networkTags) {
            if (networkTags == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "networkTags");
            }
            this.networkTags = networkTags;
            return this;
        }
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }
        @CustomType.Setter
        public Builder privateSubnets(List<String> privateSubnets) {
            if (privateSubnets == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "privateSubnets");
            }
            this.privateSubnets = privateSubnets;
            return this;
        }
        public Builder privateSubnets(String... privateSubnets) {
            return privateSubnets(List.of(privateSubnets));
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            if (publicIp == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "publicIp");
            }
            this.publicIp = publicIp;
            return this;
        }
        @CustomType.Setter
        public Builder remoteId(String remoteId) {
            if (remoteId == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "remoteId");
            }
            this.remoteId = remoteId;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeer", "secret");
            }
            this.secret = secret;
            return this;
        }
        public GetApplianceVpnThirdPartyVpnpeersItemPeer build() {
            final var _resultValue = new GetApplianceVpnThirdPartyVpnpeersItemPeer();
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.ipsecPolicies = ipsecPolicies;
            _resultValue.ipsecPoliciesPreset = ipsecPoliciesPreset;
            _resultValue.localId = localId;
            _resultValue.name = name;
            _resultValue.networkTags = networkTags;
            _resultValue.privateSubnets = privateSubnets;
            _resultValue.publicIp = publicIp;
            _resultValue.remoteId = remoteId;
            _resultValue.secret = secret;
            return _resultValue;
        }
    }
}
