// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CellularGatewayDhcpState extends com.pulumi.resources.ResourceArgs {

    public static final CellularGatewayDhcpState Empty = new CellularGatewayDhcpState();

    /**
     * DHCP Lease time for all MG in the network.
     * 
     */
    @Import(name="dhcpLeaseTime")
    private @Nullable Output<String> dhcpLeaseTime;

    /**
     * @return DHCP Lease time for all MG in the network.
     * 
     */
    public Optional<Output<String>> dhcpLeaseTime() {
        return Optional.ofNullable(this.dhcpLeaseTime);
    }

    /**
     * List of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;.
     * 
     */
    @Import(name="dnsCustomNameservers")
    private @Nullable Output<List<String>> dnsCustomNameservers;

    /**
     * @return List of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;.
     * 
     */
    public Optional<Output<List<String>>> dnsCustomNameservers() {
        return Optional.ofNullable(this.dnsCustomNameservers);
    }

    /**
     * DNS name servers mode for all MG in the network.
     * 
     */
    @Import(name="dnsNameservers")
    private @Nullable Output<String> dnsNameservers;

    /**
     * @return DNS name servers mode for all MG in the network.
     * 
     */
    public Optional<Output<String>> dnsNameservers() {
        return Optional.ofNullable(this.dnsNameservers);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    private CellularGatewayDhcpState() {}

    private CellularGatewayDhcpState(CellularGatewayDhcpState $) {
        this.dhcpLeaseTime = $.dhcpLeaseTime;
        this.dnsCustomNameservers = $.dnsCustomNameservers;
        this.dnsNameservers = $.dnsNameservers;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CellularGatewayDhcpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CellularGatewayDhcpState $;

        public Builder() {
            $ = new CellularGatewayDhcpState();
        }

        public Builder(CellularGatewayDhcpState defaults) {
            $ = new CellularGatewayDhcpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcpLeaseTime DHCP Lease time for all MG in the network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpLeaseTime(@Nullable Output<String> dhcpLeaseTime) {
            $.dhcpLeaseTime = dhcpLeaseTime;
            return this;
        }

        /**
         * @param dhcpLeaseTime DHCP Lease time for all MG in the network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpLeaseTime(String dhcpLeaseTime) {
            return dhcpLeaseTime(Output.of(dhcpLeaseTime));
        }

        /**
         * @param dnsCustomNameservers List of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;.
         * 
         * @return builder
         * 
         */
        public Builder dnsCustomNameservers(@Nullable Output<List<String>> dnsCustomNameservers) {
            $.dnsCustomNameservers = dnsCustomNameservers;
            return this;
        }

        /**
         * @param dnsCustomNameservers List of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;.
         * 
         * @return builder
         * 
         */
        public Builder dnsCustomNameservers(List<String> dnsCustomNameservers) {
            return dnsCustomNameservers(Output.of(dnsCustomNameservers));
        }

        /**
         * @param dnsCustomNameservers List of fixed IPs representing the the DNS Name servers when the mode is &#39;custom&#39;.
         * 
         * @return builder
         * 
         */
        public Builder dnsCustomNameservers(String... dnsCustomNameservers) {
            return dnsCustomNameservers(List.of(dnsCustomNameservers));
        }

        /**
         * @param dnsNameservers DNS name servers mode for all MG in the network.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameservers(@Nullable Output<String> dnsNameservers) {
            $.dnsNameservers = dnsNameservers;
            return this;
        }

        /**
         * @param dnsNameservers DNS name servers mode for all MG in the network.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameservers(String dnsNameservers) {
            return dnsNameservers(Output.of(dnsNameservers));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public CellularGatewayDhcpState build() {
            return $;
        }
    }

}
