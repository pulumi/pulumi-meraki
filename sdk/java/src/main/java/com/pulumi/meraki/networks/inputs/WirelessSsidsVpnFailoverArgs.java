// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsVpnFailoverArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsVpnFailoverArgs Empty = new WirelessSsidsVpnFailoverArgs();

    /**
     * Idle timer interval in seconds.
     * 
     */
    @Import(name="heartbeatInterval")
    private @Nullable Output<Integer> heartbeatInterval;

    /**
     * @return Idle timer interval in seconds.
     * 
     */
    public Optional<Output<Integer>> heartbeatInterval() {
        return Optional.ofNullable(this.heartbeatInterval);
    }

    /**
     * Idle timer timeout in seconds.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Idle timer timeout in seconds.
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * IP addressed reserved on DHCP server where SSID will terminate.
     * 
     */
    @Import(name="requestIp")
    private @Nullable Output<String> requestIp;

    /**
     * @return IP addressed reserved on DHCP server where SSID will terminate.
     * 
     */
    public Optional<Output<String>> requestIp() {
        return Optional.ofNullable(this.requestIp);
    }

    private WirelessSsidsVpnFailoverArgs() {}

    private WirelessSsidsVpnFailoverArgs(WirelessSsidsVpnFailoverArgs $) {
        this.heartbeatInterval = $.heartbeatInterval;
        this.idleTimeout = $.idleTimeout;
        this.requestIp = $.requestIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsVpnFailoverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsVpnFailoverArgs $;

        public Builder() {
            $ = new WirelessSsidsVpnFailoverArgs();
        }

        public Builder(WirelessSsidsVpnFailoverArgs defaults) {
            $ = new WirelessSsidsVpnFailoverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param heartbeatInterval Idle timer interval in seconds.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatInterval(@Nullable Output<Integer> heartbeatInterval) {
            $.heartbeatInterval = heartbeatInterval;
            return this;
        }

        /**
         * @param heartbeatInterval Idle timer interval in seconds.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatInterval(Integer heartbeatInterval) {
            return heartbeatInterval(Output.of(heartbeatInterval));
        }

        /**
         * @param idleTimeout Idle timer timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Idle timer timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param requestIp IP addressed reserved on DHCP server where SSID will terminate.
         * 
         * @return builder
         * 
         */
        public Builder requestIp(@Nullable Output<String> requestIp) {
            $.requestIp = requestIp;
            return this;
        }

        /**
         * @param requestIp IP addressed reserved on DHCP server where SSID will terminate.
         * 
         * @return builder
         * 
         */
        public Builder requestIp(String requestIp) {
            return requestIp(Output.of(requestIp));
        }

        public WirelessSsidsVpnFailoverArgs build() {
            return $;
        }
    }

}
