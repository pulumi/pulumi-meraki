// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWirelessSsidsBonjourForwardingItemRule {
    /**
     * @return Desctiption of the bonjour forwarding rule
     * 
     */
    private String description;
    /**
     * @return A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
     * 
     */
    private List<String> services;
    /**
     * @return The ID of the service VLAN. Required
     * 
     */
    private String vlanId;

    private GetWirelessSsidsBonjourForwardingItemRule() {}
    /**
     * @return Desctiption of the bonjour forwarding rule
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
     * 
     */
    public List<String> services() {
        return this.services;
    }
    /**
     * @return The ID of the service VLAN. Required
     * 
     */
    public String vlanId() {
        return this.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSsidsBonjourForwardingItemRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> services;
        private String vlanId;
        public Builder() {}
        public Builder(GetWirelessSsidsBonjourForwardingItemRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.services = defaults.services;
    	      this.vlanId = defaults.vlanId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsBonjourForwardingItemRule", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder services(List<String> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsBonjourForwardingItemRule", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(String... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder vlanId(String vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsBonjourForwardingItemRule", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        public GetWirelessSsidsBonjourForwardingItemRule build() {
            final var _resultValue = new GetWirelessSsidsBonjourForwardingItemRule();
            _resultValue.description = description;
            _resultValue.services = services;
            _resultValue.vlanId = vlanId;
            return _resultValue;
        }
    }
}
