// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEventsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEventsArgs Empty = new GetEventsArgs();

    /**
     * clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    @Import(name="clientIp")
    private @Nullable Output<String> clientIp;

    /**
     * @return clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    public Optional<Output<String>> clientIp() {
        return Optional.ofNullable(this.clientIp);
    }

    /**
     * clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    @Import(name="clientMac")
    private @Nullable Output<String> clientMac;

    /**
     * @return clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    public Optional<Output<String>> clientMac() {
        return Optional.ofNullable(this.clientMac);
    }

    /**
     * clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    @Import(name="clientName")
    private @Nullable Output<String> clientName;

    /**
     * @return clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    /**
     * deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceMac")
    private @Nullable Output<String> deviceMac;

    /**
     * @return deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> deviceMac() {
        return Optional.ofNullable(this.deviceMac);
    }

    /**
     * deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceSerial")
    private @Nullable Output<String> deviceSerial;

    /**
     * @return deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable Output<String> endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    @Import(name="excludedEventTypes")
    private @Nullable Output<List<String>> excludedEventTypes;

    /**
     * @return excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    public Optional<Output<List<String>>> excludedEventTypes() {
        return Optional.ofNullable(this.excludedEventTypes);
    }

    /**
     * includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    @Import(name="includedEventTypes")
    private @Nullable Output<List<String>> includedEventTypes;

    /**
     * @return includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    public Optional<Output<List<String>>> includedEventTypes() {
        return Optional.ofNullable(this.includedEventTypes);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    @Import(name="perPage")
    private @Nullable Output<Integer> perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    public Optional<Output<Integer>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    @Import(name="productType")
    private @Nullable Output<String> productType;

    /**
     * @return productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    public Optional<Output<String>> productType() {
        return Optional.ofNullable(this.productType);
    }

    /**
     * smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    @Import(name="smDeviceMac")
    private @Nullable Output<String> smDeviceMac;

    /**
     * @return smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> smDeviceMac() {
        return Optional.ofNullable(this.smDeviceMac);
    }

    /**
     * smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    @Import(name="smDeviceName")
    private @Nullable Output<String> smDeviceName;

    /**
     * @return smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<Output<String>> smDeviceName() {
        return Optional.ofNullable(this.smDeviceName);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable Output<String> startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<Output<String>> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    private GetEventsArgs() {}

    private GetEventsArgs(GetEventsArgs $) {
        this.clientIp = $.clientIp;
        this.clientMac = $.clientMac;
        this.clientName = $.clientName;
        this.deviceMac = $.deviceMac;
        this.deviceName = $.deviceName;
        this.deviceSerial = $.deviceSerial;
        this.endingBefore = $.endingBefore;
        this.excludedEventTypes = $.excludedEventTypes;
        this.includedEventTypes = $.includedEventTypes;
        this.networkId = $.networkId;
        this.perPage = $.perPage;
        this.productType = $.productType;
        this.smDeviceMac = $.smDeviceMac;
        this.smDeviceName = $.smDeviceName;
        this.startingAfter = $.startingAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEventsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEventsArgs $;

        public Builder() {
            $ = new GetEventsArgs();
        }

        public Builder(GetEventsArgs defaults) {
            $ = new GetEventsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIp clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
         * 
         * @return builder
         * 
         */
        public Builder clientIp(@Nullable Output<String> clientIp) {
            $.clientIp = clientIp;
            return this;
        }

        /**
         * @param clientIp clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
         * 
         * @return builder
         * 
         */
        public Builder clientIp(String clientIp) {
            return clientIp(Output.of(clientIp));
        }

        /**
         * @param clientMac clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
         * 
         * @return builder
         * 
         */
        public Builder clientMac(@Nullable Output<String> clientMac) {
            $.clientMac = clientMac;
            return this;
        }

        /**
         * @param clientMac clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
         * 
         * @return builder
         * 
         */
        public Builder clientMac(String clientMac) {
            return clientMac(Output.of(clientMac));
        }

        /**
         * @param clientName clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder clientName(@Nullable Output<String> clientName) {
            $.clientName = clientName;
            return this;
        }

        /**
         * @param clientName clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder clientName(String clientName) {
            return clientName(Output.of(clientName));
        }

        /**
         * @param deviceMac deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceMac(@Nullable Output<String> deviceMac) {
            $.deviceMac = deviceMac;
            return this;
        }

        /**
         * @param deviceMac deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceMac(String deviceMac) {
            return deviceMac(Output.of(deviceMac));
        }

        /**
         * @param deviceName deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param deviceSerial deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(@Nullable Output<String> deviceSerial) {
            $.deviceSerial = deviceSerial;
            return this;
        }

        /**
         * @param deviceSerial deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(String deviceSerial) {
            return deviceSerial(Output.of(deviceSerial));
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable Output<String> endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(String endingBefore) {
            return endingBefore(Output.of(endingBefore));
        }

        /**
         * @param excludedEventTypes excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
         * 
         * @return builder
         * 
         */
        public Builder excludedEventTypes(@Nullable Output<List<String>> excludedEventTypes) {
            $.excludedEventTypes = excludedEventTypes;
            return this;
        }

        /**
         * @param excludedEventTypes excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
         * 
         * @return builder
         * 
         */
        public Builder excludedEventTypes(List<String> excludedEventTypes) {
            return excludedEventTypes(Output.of(excludedEventTypes));
        }

        /**
         * @param excludedEventTypes excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
         * 
         * @return builder
         * 
         */
        public Builder excludedEventTypes(String... excludedEventTypes) {
            return excludedEventTypes(List.of(excludedEventTypes));
        }

        /**
         * @param includedEventTypes includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(@Nullable Output<List<String>> includedEventTypes) {
            $.includedEventTypes = includedEventTypes;
            return this;
        }

        /**
         * @param includedEventTypes includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(List<String> includedEventTypes) {
            return includedEventTypes(Output.of(includedEventTypes));
        }

        /**
         * @param includedEventTypes includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(String... includedEventTypes) {
            return includedEventTypes(List.of(includedEventTypes));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Output<Integer> perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
         * 
         * @return builder
         * 
         */
        public Builder perPage(Integer perPage) {
            return perPage(Output.of(perPage));
        }

        /**
         * @param productType productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
         * 
         * @return builder
         * 
         */
        public Builder productType(@Nullable Output<String> productType) {
            $.productType = productType;
            return this;
        }

        /**
         * @param productType productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
         * 
         * @return builder
         * 
         */
        public Builder productType(String productType) {
            return productType(Output.of(productType));
        }

        /**
         * @param smDeviceMac smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceMac(@Nullable Output<String> smDeviceMac) {
            $.smDeviceMac = smDeviceMac;
            return this;
        }

        /**
         * @param smDeviceMac smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceMac(String smDeviceMac) {
            return smDeviceMac(Output.of(smDeviceMac));
        }

        /**
         * @param smDeviceName smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceName(@Nullable Output<String> smDeviceName) {
            $.smDeviceName = smDeviceName;
            return this;
        }

        /**
         * @param smDeviceName smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceName(String smDeviceName) {
            return smDeviceName(Output.of(smDeviceName));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable Output<String> startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(String startingAfter) {
            return startingAfter(Output.of(startingAfter));
        }

        public GetEventsArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetEventsArgs", "networkId");
            }
            return $;
        }
    }

}
