// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.ApplianceFirewallOneToManyNatRulesRulePortRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceFirewallOneToManyNatRulesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceFirewallOneToManyNatRulesRuleArgs Empty = new ApplianceFirewallOneToManyNatRulesRuleArgs();

    /**
     * An array of associated forwarding rules
     * 
     */
    @Import(name="portRules")
    private @Nullable Output<List<ApplianceFirewallOneToManyNatRulesRulePortRuleArgs>> portRules;

    /**
     * @return An array of associated forwarding rules
     * 
     */
    public Optional<Output<List<ApplianceFirewallOneToManyNatRulesRulePortRuleArgs>>> portRules() {
        return Optional.ofNullable(this.portRules);
    }

    /**
     * The IP address that will be used to access the internal resource from the WAN
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return The IP address that will be used to access the internal resource from the WAN
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
     * 
     */
    @Import(name="uplink")
    private @Nullable Output<String> uplink;

    /**
     * @return The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
     * 
     */
    public Optional<Output<String>> uplink() {
        return Optional.ofNullable(this.uplink);
    }

    private ApplianceFirewallOneToManyNatRulesRuleArgs() {}

    private ApplianceFirewallOneToManyNatRulesRuleArgs(ApplianceFirewallOneToManyNatRulesRuleArgs $) {
        this.portRules = $.portRules;
        this.publicIp = $.publicIp;
        this.uplink = $.uplink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceFirewallOneToManyNatRulesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceFirewallOneToManyNatRulesRuleArgs $;

        public Builder() {
            $ = new ApplianceFirewallOneToManyNatRulesRuleArgs();
        }

        public Builder(ApplianceFirewallOneToManyNatRulesRuleArgs defaults) {
            $ = new ApplianceFirewallOneToManyNatRulesRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param portRules An array of associated forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder portRules(@Nullable Output<List<ApplianceFirewallOneToManyNatRulesRulePortRuleArgs>> portRules) {
            $.portRules = portRules;
            return this;
        }

        /**
         * @param portRules An array of associated forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder portRules(List<ApplianceFirewallOneToManyNatRulesRulePortRuleArgs> portRules) {
            return portRules(Output.of(portRules));
        }

        /**
         * @param portRules An array of associated forwarding rules
         * 
         * @return builder
         * 
         */
        public Builder portRules(ApplianceFirewallOneToManyNatRulesRulePortRuleArgs... portRules) {
            return portRules(List.of(portRules));
        }

        /**
         * @param publicIp The IP address that will be used to access the internal resource from the WAN
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp The IP address that will be used to access the internal resource from the WAN
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        /**
         * @param uplink The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
         * 
         * @return builder
         * 
         */
        public Builder uplink(@Nullable Output<String> uplink) {
            $.uplink = uplink;
            return this;
        }

        /**
         * @param uplink The physical WAN interface on which the traffic will arrive (&#39;internet1&#39; or, if available, &#39;internet2&#39;)
         * 
         * @return builder
         * 
         */
        public Builder uplink(String uplink) {
            return uplink(Output.of(uplink));
        }

        public ApplianceFirewallOneToManyNatRulesRuleArgs build() {
            return $;
        }
    }

}
