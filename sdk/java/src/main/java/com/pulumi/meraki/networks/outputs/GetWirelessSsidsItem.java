// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsItemRadiusAccountingServer;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsItemRadiusServer;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWirelessSsidsItem {
    /**
     * @return URL for the admin splash page
     * 
     */
    private String adminSplashUrl;
    /**
     * @return The association control method for the SSID
     * 
     */
    private String authMode;
    /**
     * @return List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
     * 
     */
    private List<String> availabilityTags;
    /**
     * @return Whether all APs broadcast the SSID or if it&#39;s restricted to APs matching any availability tags
     * 
     */
    private Boolean availableOnAllAps;
    /**
     * @return The client-serving radio frequencies of this SSID in the default indoor RF profile
     * 
     */
    private String bandSelection;
    /**
     * @return Whether or not the SSID is enabled
     * 
     */
    private Boolean enabled;
    /**
     * @return The psk encryption mode for the SSID
     * 
     */
    private String encryptionMode;
    /**
     * @return The client IP assignment mode
     * 
     */
    private String ipAssignmentMode;
    /**
     * @return Extended local auth flag for Enterprise NAC
     * 
     */
    private Boolean localAuth;
    /**
     * @return Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
     * 
     */
    private Boolean mandatoryDhcpEnabled;
    /**
     * @return The minimum bitrate in Mbps of this SSID in the default indoor RF profile
     * 
     */
    private Integer minBitrate;
    /**
     * @return The name of the SSID
     * 
     */
    private String name;
    /**
     * @return Unique identifier of the SSID
     * 
     */
    private Integer number;
    /**
     * @return The download bandwidth limit in Kbps. (0 represents no limit.)
     * 
     */
    private Integer perClientBandwidthLimitDown;
    /**
     * @return The upload bandwidth limit in Kbps. (0 represents no limit.)
     * 
     */
    private Integer perClientBandwidthLimitUp;
    /**
     * @return The total download bandwidth limit in Kbps (0 represents no limit)
     * 
     */
    private Integer perSsidBandwidthLimitDown;
    /**
     * @return The total upload bandwidth limit in Kbps (0 represents no limit)
     * 
     */
    private Integer perSsidBandwidthLimitUp;
    /**
     * @return Whether or not RADIUS accounting is enabled
     * 
     */
    private Boolean radiusAccountingEnabled;
    /**
     * @return List of RADIUS accounting 802.1X servers to be used for authentication
     * 
     */
    private List<GetWirelessSsidsItemRadiusAccountingServer> radiusAccountingServers;
    /**
     * @return RADIUS attribute used to look up group policies
     * 
     */
    private String radiusAttributeForGroupPolicies;
    /**
     * @return Whether RADIUS authentication is enabled
     * 
     */
    private Boolean radiusEnabled;
    /**
     * @return Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
     * 
     */
    private String radiusFailoverPolicy;
    /**
     * @return Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
     * 
     */
    private String radiusLoadBalancingPolicy;
    /**
     * @return List of RADIUS 802.1X servers to be used for authentication
     * 
     */
    private List<GetWirelessSsidsItemRadiusServer> radiusServers;
    /**
     * @return The type of splash page for the SSID
     * 
     */
    private String splashPage;
    /**
     * @return Splash page timeout
     * 
     */
    private String splashTimeout;
    /**
     * @return SSID Administrator access status
     * 
     */
    private Boolean ssidAdminAccessible;
    /**
     * @return Whether the SSID is advertised or hidden by the AP
     * 
     */
    private Boolean visible;
    /**
     * @return Allow users to access a configurable list of IP ranges prior to sign-on
     * 
     */
    private Boolean walledGardenEnabled;
    /**
     * @return Domain names and IP address ranges available in Walled Garden mode
     * 
     */
    private List<String> walledGardenRanges;
    /**
     * @return The types of WPA encryption
     * 
     */
    private String wpaEncryptionMode;

    private GetWirelessSsidsItem() {}
    /**
     * @return URL for the admin splash page
     * 
     */
    public String adminSplashUrl() {
        return this.adminSplashUrl;
    }
    /**
     * @return The association control method for the SSID
     * 
     */
    public String authMode() {
        return this.authMode;
    }
    /**
     * @return List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
     * 
     */
    public List<String> availabilityTags() {
        return this.availabilityTags;
    }
    /**
     * @return Whether all APs broadcast the SSID or if it&#39;s restricted to APs matching any availability tags
     * 
     */
    public Boolean availableOnAllAps() {
        return this.availableOnAllAps;
    }
    /**
     * @return The client-serving radio frequencies of this SSID in the default indoor RF profile
     * 
     */
    public String bandSelection() {
        return this.bandSelection;
    }
    /**
     * @return Whether or not the SSID is enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The psk encryption mode for the SSID
     * 
     */
    public String encryptionMode() {
        return this.encryptionMode;
    }
    /**
     * @return The client IP assignment mode
     * 
     */
    public String ipAssignmentMode() {
        return this.ipAssignmentMode;
    }
    /**
     * @return Extended local auth flag for Enterprise NAC
     * 
     */
    public Boolean localAuth() {
        return this.localAuth;
    }
    /**
     * @return Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
     * 
     */
    public Boolean mandatoryDhcpEnabled() {
        return this.mandatoryDhcpEnabled;
    }
    /**
     * @return The minimum bitrate in Mbps of this SSID in the default indoor RF profile
     * 
     */
    public Integer minBitrate() {
        return this.minBitrate;
    }
    /**
     * @return The name of the SSID
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique identifier of the SSID
     * 
     */
    public Integer number() {
        return this.number;
    }
    /**
     * @return The download bandwidth limit in Kbps. (0 represents no limit.)
     * 
     */
    public Integer perClientBandwidthLimitDown() {
        return this.perClientBandwidthLimitDown;
    }
    /**
     * @return The upload bandwidth limit in Kbps. (0 represents no limit.)
     * 
     */
    public Integer perClientBandwidthLimitUp() {
        return this.perClientBandwidthLimitUp;
    }
    /**
     * @return The total download bandwidth limit in Kbps (0 represents no limit)
     * 
     */
    public Integer perSsidBandwidthLimitDown() {
        return this.perSsidBandwidthLimitDown;
    }
    /**
     * @return The total upload bandwidth limit in Kbps (0 represents no limit)
     * 
     */
    public Integer perSsidBandwidthLimitUp() {
        return this.perSsidBandwidthLimitUp;
    }
    /**
     * @return Whether or not RADIUS accounting is enabled
     * 
     */
    public Boolean radiusAccountingEnabled() {
        return this.radiusAccountingEnabled;
    }
    /**
     * @return List of RADIUS accounting 802.1X servers to be used for authentication
     * 
     */
    public List<GetWirelessSsidsItemRadiusAccountingServer> radiusAccountingServers() {
        return this.radiusAccountingServers;
    }
    /**
     * @return RADIUS attribute used to look up group policies
     * 
     */
    public String radiusAttributeForGroupPolicies() {
        return this.radiusAttributeForGroupPolicies;
    }
    /**
     * @return Whether RADIUS authentication is enabled
     * 
     */
    public Boolean radiusEnabled() {
        return this.radiusEnabled;
    }
    /**
     * @return Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
     * 
     */
    public String radiusFailoverPolicy() {
        return this.radiusFailoverPolicy;
    }
    /**
     * @return Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
     * 
     */
    public String radiusLoadBalancingPolicy() {
        return this.radiusLoadBalancingPolicy;
    }
    /**
     * @return List of RADIUS 802.1X servers to be used for authentication
     * 
     */
    public List<GetWirelessSsidsItemRadiusServer> radiusServers() {
        return this.radiusServers;
    }
    /**
     * @return The type of splash page for the SSID
     * 
     */
    public String splashPage() {
        return this.splashPage;
    }
    /**
     * @return Splash page timeout
     * 
     */
    public String splashTimeout() {
        return this.splashTimeout;
    }
    /**
     * @return SSID Administrator access status
     * 
     */
    public Boolean ssidAdminAccessible() {
        return this.ssidAdminAccessible;
    }
    /**
     * @return Whether the SSID is advertised or hidden by the AP
     * 
     */
    public Boolean visible() {
        return this.visible;
    }
    /**
     * @return Allow users to access a configurable list of IP ranges prior to sign-on
     * 
     */
    public Boolean walledGardenEnabled() {
        return this.walledGardenEnabled;
    }
    /**
     * @return Domain names and IP address ranges available in Walled Garden mode
     * 
     */
    public List<String> walledGardenRanges() {
        return this.walledGardenRanges;
    }
    /**
     * @return The types of WPA encryption
     * 
     */
    public String wpaEncryptionMode() {
        return this.wpaEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSsidsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String adminSplashUrl;
        private String authMode;
        private List<String> availabilityTags;
        private Boolean availableOnAllAps;
        private String bandSelection;
        private Boolean enabled;
        private String encryptionMode;
        private String ipAssignmentMode;
        private Boolean localAuth;
        private Boolean mandatoryDhcpEnabled;
        private Integer minBitrate;
        private String name;
        private Integer number;
        private Integer perClientBandwidthLimitDown;
        private Integer perClientBandwidthLimitUp;
        private Integer perSsidBandwidthLimitDown;
        private Integer perSsidBandwidthLimitUp;
        private Boolean radiusAccountingEnabled;
        private List<GetWirelessSsidsItemRadiusAccountingServer> radiusAccountingServers;
        private String radiusAttributeForGroupPolicies;
        private Boolean radiusEnabled;
        private String radiusFailoverPolicy;
        private String radiusLoadBalancingPolicy;
        private List<GetWirelessSsidsItemRadiusServer> radiusServers;
        private String splashPage;
        private String splashTimeout;
        private Boolean ssidAdminAccessible;
        private Boolean visible;
        private Boolean walledGardenEnabled;
        private List<String> walledGardenRanges;
        private String wpaEncryptionMode;
        public Builder() {}
        public Builder(GetWirelessSsidsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminSplashUrl = defaults.adminSplashUrl;
    	      this.authMode = defaults.authMode;
    	      this.availabilityTags = defaults.availabilityTags;
    	      this.availableOnAllAps = defaults.availableOnAllAps;
    	      this.bandSelection = defaults.bandSelection;
    	      this.enabled = defaults.enabled;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.ipAssignmentMode = defaults.ipAssignmentMode;
    	      this.localAuth = defaults.localAuth;
    	      this.mandatoryDhcpEnabled = defaults.mandatoryDhcpEnabled;
    	      this.minBitrate = defaults.minBitrate;
    	      this.name = defaults.name;
    	      this.number = defaults.number;
    	      this.perClientBandwidthLimitDown = defaults.perClientBandwidthLimitDown;
    	      this.perClientBandwidthLimitUp = defaults.perClientBandwidthLimitUp;
    	      this.perSsidBandwidthLimitDown = defaults.perSsidBandwidthLimitDown;
    	      this.perSsidBandwidthLimitUp = defaults.perSsidBandwidthLimitUp;
    	      this.radiusAccountingEnabled = defaults.radiusAccountingEnabled;
    	      this.radiusAccountingServers = defaults.radiusAccountingServers;
    	      this.radiusAttributeForGroupPolicies = defaults.radiusAttributeForGroupPolicies;
    	      this.radiusEnabled = defaults.radiusEnabled;
    	      this.radiusFailoverPolicy = defaults.radiusFailoverPolicy;
    	      this.radiusLoadBalancingPolicy = defaults.radiusLoadBalancingPolicy;
    	      this.radiusServers = defaults.radiusServers;
    	      this.splashPage = defaults.splashPage;
    	      this.splashTimeout = defaults.splashTimeout;
    	      this.ssidAdminAccessible = defaults.ssidAdminAccessible;
    	      this.visible = defaults.visible;
    	      this.walledGardenEnabled = defaults.walledGardenEnabled;
    	      this.walledGardenRanges = defaults.walledGardenRanges;
    	      this.wpaEncryptionMode = defaults.wpaEncryptionMode;
        }

        @CustomType.Setter
        public Builder adminSplashUrl(String adminSplashUrl) {
            if (adminSplashUrl == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "adminSplashUrl");
            }
            this.adminSplashUrl = adminSplashUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authMode(String authMode) {
            if (authMode == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "authMode");
            }
            this.authMode = authMode;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityTags(List<String> availabilityTags) {
            if (availabilityTags == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "availabilityTags");
            }
            this.availabilityTags = availabilityTags;
            return this;
        }
        public Builder availabilityTags(String... availabilityTags) {
            return availabilityTags(List.of(availabilityTags));
        }
        @CustomType.Setter
        public Builder availableOnAllAps(Boolean availableOnAllAps) {
            if (availableOnAllAps == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "availableOnAllAps");
            }
            this.availableOnAllAps = availableOnAllAps;
            return this;
        }
        @CustomType.Setter
        public Builder bandSelection(String bandSelection) {
            if (bandSelection == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "bandSelection");
            }
            this.bandSelection = bandSelection;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionMode(String encryptionMode) {
            if (encryptionMode == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "encryptionMode");
            }
            this.encryptionMode = encryptionMode;
            return this;
        }
        @CustomType.Setter
        public Builder ipAssignmentMode(String ipAssignmentMode) {
            if (ipAssignmentMode == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "ipAssignmentMode");
            }
            this.ipAssignmentMode = ipAssignmentMode;
            return this;
        }
        @CustomType.Setter
        public Builder localAuth(Boolean localAuth) {
            if (localAuth == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "localAuth");
            }
            this.localAuth = localAuth;
            return this;
        }
        @CustomType.Setter
        public Builder mandatoryDhcpEnabled(Boolean mandatoryDhcpEnabled) {
            if (mandatoryDhcpEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "mandatoryDhcpEnabled");
            }
            this.mandatoryDhcpEnabled = mandatoryDhcpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder minBitrate(Integer minBitrate) {
            if (minBitrate == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "minBitrate");
            }
            this.minBitrate = minBitrate;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder perClientBandwidthLimitDown(Integer perClientBandwidthLimitDown) {
            if (perClientBandwidthLimitDown == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "perClientBandwidthLimitDown");
            }
            this.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
            return this;
        }
        @CustomType.Setter
        public Builder perClientBandwidthLimitUp(Integer perClientBandwidthLimitUp) {
            if (perClientBandwidthLimitUp == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "perClientBandwidthLimitUp");
            }
            this.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
            return this;
        }
        @CustomType.Setter
        public Builder perSsidBandwidthLimitDown(Integer perSsidBandwidthLimitDown) {
            if (perSsidBandwidthLimitDown == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "perSsidBandwidthLimitDown");
            }
            this.perSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
            return this;
        }
        @CustomType.Setter
        public Builder perSsidBandwidthLimitUp(Integer perSsidBandwidthLimitUp) {
            if (perSsidBandwidthLimitUp == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "perSsidBandwidthLimitUp");
            }
            this.perSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
            return this;
        }
        @CustomType.Setter
        public Builder radiusAccountingEnabled(Boolean radiusAccountingEnabled) {
            if (radiusAccountingEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusAccountingEnabled");
            }
            this.radiusAccountingEnabled = radiusAccountingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder radiusAccountingServers(List<GetWirelessSsidsItemRadiusAccountingServer> radiusAccountingServers) {
            if (radiusAccountingServers == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusAccountingServers");
            }
            this.radiusAccountingServers = radiusAccountingServers;
            return this;
        }
        public Builder radiusAccountingServers(GetWirelessSsidsItemRadiusAccountingServer... radiusAccountingServers) {
            return radiusAccountingServers(List.of(radiusAccountingServers));
        }
        @CustomType.Setter
        public Builder radiusAttributeForGroupPolicies(String radiusAttributeForGroupPolicies) {
            if (radiusAttributeForGroupPolicies == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusAttributeForGroupPolicies");
            }
            this.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
            return this;
        }
        @CustomType.Setter
        public Builder radiusEnabled(Boolean radiusEnabled) {
            if (radiusEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusEnabled");
            }
            this.radiusEnabled = radiusEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder radiusFailoverPolicy(String radiusFailoverPolicy) {
            if (radiusFailoverPolicy == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusFailoverPolicy");
            }
            this.radiusFailoverPolicy = radiusFailoverPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder radiusLoadBalancingPolicy(String radiusLoadBalancingPolicy) {
            if (radiusLoadBalancingPolicy == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusLoadBalancingPolicy");
            }
            this.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServers(List<GetWirelessSsidsItemRadiusServer> radiusServers) {
            if (radiusServers == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "radiusServers");
            }
            this.radiusServers = radiusServers;
            return this;
        }
        public Builder radiusServers(GetWirelessSsidsItemRadiusServer... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }
        @CustomType.Setter
        public Builder splashPage(String splashPage) {
            if (splashPage == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "splashPage");
            }
            this.splashPage = splashPage;
            return this;
        }
        @CustomType.Setter
        public Builder splashTimeout(String splashTimeout) {
            if (splashTimeout == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "splashTimeout");
            }
            this.splashTimeout = splashTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder ssidAdminAccessible(Boolean ssidAdminAccessible) {
            if (ssidAdminAccessible == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "ssidAdminAccessible");
            }
            this.ssidAdminAccessible = ssidAdminAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder visible(Boolean visible) {
            if (visible == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "visible");
            }
            this.visible = visible;
            return this;
        }
        @CustomType.Setter
        public Builder walledGardenEnabled(Boolean walledGardenEnabled) {
            if (walledGardenEnabled == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "walledGardenEnabled");
            }
            this.walledGardenEnabled = walledGardenEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder walledGardenRanges(List<String> walledGardenRanges) {
            if (walledGardenRanges == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "walledGardenRanges");
            }
            this.walledGardenRanges = walledGardenRanges;
            return this;
        }
        public Builder walledGardenRanges(String... walledGardenRanges) {
            return walledGardenRanges(List.of(walledGardenRanges));
        }
        @CustomType.Setter
        public Builder wpaEncryptionMode(String wpaEncryptionMode) {
            if (wpaEncryptionMode == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsItem", "wpaEncryptionMode");
            }
            this.wpaEncryptionMode = wpaEncryptionMode;
            return this;
        }
        public GetWirelessSsidsItem build() {
            final var _resultValue = new GetWirelessSsidsItem();
            _resultValue.adminSplashUrl = adminSplashUrl;
            _resultValue.authMode = authMode;
            _resultValue.availabilityTags = availabilityTags;
            _resultValue.availableOnAllAps = availableOnAllAps;
            _resultValue.bandSelection = bandSelection;
            _resultValue.enabled = enabled;
            _resultValue.encryptionMode = encryptionMode;
            _resultValue.ipAssignmentMode = ipAssignmentMode;
            _resultValue.localAuth = localAuth;
            _resultValue.mandatoryDhcpEnabled = mandatoryDhcpEnabled;
            _resultValue.minBitrate = minBitrate;
            _resultValue.name = name;
            _resultValue.number = number;
            _resultValue.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
            _resultValue.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
            _resultValue.perSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
            _resultValue.perSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
            _resultValue.radiusAccountingEnabled = radiusAccountingEnabled;
            _resultValue.radiusAccountingServers = radiusAccountingServers;
            _resultValue.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
            _resultValue.radiusEnabled = radiusEnabled;
            _resultValue.radiusFailoverPolicy = radiusFailoverPolicy;
            _resultValue.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
            _resultValue.radiusServers = radiusServers;
            _resultValue.splashPage = splashPage;
            _resultValue.splashTimeout = splashTimeout;
            _resultValue.ssidAdminAccessible = ssidAdminAccessible;
            _resultValue.visible = visible;
            _resultValue.walledGardenEnabled = walledGardenEnabled;
            _resultValue.walledGardenRanges = walledGardenRanges;
            _resultValue.wpaEncryptionMode = wpaEncryptionMode;
            return _resultValue;
        }
    }
}
