// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdApparentPowerArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdCurrentArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdDoorArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdFrequencyArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdHumidityArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdIndoorAirQualityArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdNoiseArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdPm25Args;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdPowerFactorArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdRealPowerArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdTemperatureArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdTvocArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdUpstreamPowerArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdVoltageArgs;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdWaterArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorAlertsProfilesConditionsResponseThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorAlertsProfilesConditionsResponseThresholdArgs Empty = new SensorAlertsProfilesConditionsResponseThresholdArgs();

    /**
     * Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    @Import(name="apparentPower")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdApparentPowerArgs> apparentPower;

    /**
     * @return Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdApparentPowerArgs>> apparentPower() {
        return Optional.ofNullable(this.apparentPower);
    }

    /**
     * Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    @Import(name="current")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdCurrentArgs> current;

    /**
     * @return Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdCurrentArgs>> current() {
        return Optional.ofNullable(this.current);
    }

    /**
     * Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    @Import(name="door")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdDoorArgs> door;

    /**
     * @return Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdDoorArgs>> door() {
        return Optional.ofNullable(this.door);
    }

    /**
     * Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdFrequencyArgs> frequency;

    /**
     * @return Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdFrequencyArgs>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    @Import(name="humidity")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdHumidityArgs> humidity;

    /**
     * @return Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdHumidityArgs>> humidity() {
        return Optional.ofNullable(this.humidity);
    }

    /**
     * Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    @Import(name="indoorAirQuality")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdIndoorAirQualityArgs> indoorAirQuality;

    /**
     * @return Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdIndoorAirQualityArgs>> indoorAirQuality() {
        return Optional.ofNullable(this.indoorAirQuality);
    }

    /**
     * Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    @Import(name="noise")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdNoiseArgs> noise;

    /**
     * @return Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdNoiseArgs>> noise() {
        return Optional.ofNullable(this.noise);
    }

    /**
     * PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    @Import(name="pm25")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdPm25Args> pm25;

    /**
     * @return PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdPm25Args>> pm25() {
        return Optional.ofNullable(this.pm25);
    }

    /**
     * Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    @Import(name="powerFactor")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdPowerFactorArgs> powerFactor;

    /**
     * @return Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdPowerFactorArgs>> powerFactor() {
        return Optional.ofNullable(this.powerFactor);
    }

    /**
     * Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    @Import(name="realPower")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdRealPowerArgs> realPower;

    /**
     * @return Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdRealPowerArgs>> realPower() {
        return Optional.ofNullable(this.realPower);
    }

    /**
     * Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    @Import(name="temperature")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdTemperatureArgs> temperature;

    /**
     * @return Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdTemperatureArgs>> temperature() {
        return Optional.ofNullable(this.temperature);
    }

    /**
     * TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    @Import(name="tvoc")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdTvocArgs> tvoc;

    /**
     * @return TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdTvocArgs>> tvoc() {
        return Optional.ofNullable(this.tvoc);
    }

    /**
     * Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    @Import(name="upstreamPower")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdUpstreamPowerArgs> upstreamPower;

    /**
     * @return Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdUpstreamPowerArgs>> upstreamPower() {
        return Optional.ofNullable(this.upstreamPower);
    }

    /**
     * Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    @Import(name="voltage")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdVoltageArgs> voltage;

    /**
     * @return Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdVoltageArgs>> voltage() {
        return Optional.ofNullable(this.voltage);
    }

    /**
     * Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    @Import(name="water")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdWaterArgs> water;

    /**
     * @return Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdWaterArgs>> water() {
        return Optional.ofNullable(this.water);
    }

    private SensorAlertsProfilesConditionsResponseThresholdArgs() {}

    private SensorAlertsProfilesConditionsResponseThresholdArgs(SensorAlertsProfilesConditionsResponseThresholdArgs $) {
        this.apparentPower = $.apparentPower;
        this.current = $.current;
        this.door = $.door;
        this.frequency = $.frequency;
        this.humidity = $.humidity;
        this.indoorAirQuality = $.indoorAirQuality;
        this.noise = $.noise;
        this.pm25 = $.pm25;
        this.powerFactor = $.powerFactor;
        this.realPower = $.realPower;
        this.temperature = $.temperature;
        this.tvoc = $.tvoc;
        this.upstreamPower = $.upstreamPower;
        this.voltage = $.voltage;
        this.water = $.water;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorAlertsProfilesConditionsResponseThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorAlertsProfilesConditionsResponseThresholdArgs $;

        public Builder() {
            $ = new SensorAlertsProfilesConditionsResponseThresholdArgs();
        }

        public Builder(SensorAlertsProfilesConditionsResponseThresholdArgs defaults) {
            $ = new SensorAlertsProfilesConditionsResponseThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apparentPower Apparent power threshold. &#39;draw&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder apparentPower(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdApparentPowerArgs> apparentPower) {
            $.apparentPower = apparentPower;
            return this;
        }

        /**
         * @param apparentPower Apparent power threshold. &#39;draw&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder apparentPower(SensorAlertsProfilesConditionsResponseThresholdApparentPowerArgs apparentPower) {
            return apparentPower(Output.of(apparentPower));
        }

        /**
         * @param current Electrical current threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder current(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdCurrentArgs> current) {
            $.current = current;
            return this;
        }

        /**
         * @param current Electrical current threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder current(SensorAlertsProfilesConditionsResponseThresholdCurrentArgs current) {
            return current(Output.of(current));
        }

        /**
         * @param door Door open threshold. &#39;open&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder door(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdDoorArgs> door) {
            $.door = door;
            return this;
        }

        /**
         * @param door Door open threshold. &#39;open&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder door(SensorAlertsProfilesConditionsResponseThresholdDoorArgs door) {
            return door(Output.of(door));
        }

        /**
         * @param frequency Electrical frequency threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdFrequencyArgs> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Electrical frequency threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder frequency(SensorAlertsProfilesConditionsResponseThresholdFrequencyArgs frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param humidity Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder humidity(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdHumidityArgs> humidity) {
            $.humidity = humidity;
            return this;
        }

        /**
         * @param humidity Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder humidity(SensorAlertsProfilesConditionsResponseThresholdHumidityArgs humidity) {
            return humidity(Output.of(humidity));
        }

        /**
         * @param indoorAirQuality Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder indoorAirQuality(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdIndoorAirQualityArgs> indoorAirQuality) {
            $.indoorAirQuality = indoorAirQuality;
            return this;
        }

        /**
         * @param indoorAirQuality Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder indoorAirQuality(SensorAlertsProfilesConditionsResponseThresholdIndoorAirQualityArgs indoorAirQuality) {
            return indoorAirQuality(Output.of(indoorAirQuality));
        }

        /**
         * @param noise Noise threshold. &#39;ambient&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder noise(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdNoiseArgs> noise) {
            $.noise = noise;
            return this;
        }

        /**
         * @param noise Noise threshold. &#39;ambient&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder noise(SensorAlertsProfilesConditionsResponseThresholdNoiseArgs noise) {
            return noise(Output.of(noise));
        }

        /**
         * @param pm25 PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder pm25(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdPm25Args> pm25) {
            $.pm25 = pm25;
            return this;
        }

        /**
         * @param pm25 PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder pm25(SensorAlertsProfilesConditionsResponseThresholdPm25Args pm25) {
            return pm25(Output.of(pm25));
        }

        /**
         * @param powerFactor Power factor threshold. &#39;percentage&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder powerFactor(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdPowerFactorArgs> powerFactor) {
            $.powerFactor = powerFactor;
            return this;
        }

        /**
         * @param powerFactor Power factor threshold. &#39;percentage&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder powerFactor(SensorAlertsProfilesConditionsResponseThresholdPowerFactorArgs powerFactor) {
            return powerFactor(Output.of(powerFactor));
        }

        /**
         * @param realPower Real power threshold. &#39;draw&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder realPower(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdRealPowerArgs> realPower) {
            $.realPower = realPower;
            return this;
        }

        /**
         * @param realPower Real power threshold. &#39;draw&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder realPower(SensorAlertsProfilesConditionsResponseThresholdRealPowerArgs realPower) {
            return realPower(Output.of(realPower));
        }

        /**
         * @param temperature Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder temperature(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdTemperatureArgs> temperature) {
            $.temperature = temperature;
            return this;
        }

        /**
         * @param temperature Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder temperature(SensorAlertsProfilesConditionsResponseThresholdTemperatureArgs temperature) {
            return temperature(Output.of(temperature));
        }

        /**
         * @param tvoc TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder tvoc(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdTvocArgs> tvoc) {
            $.tvoc = tvoc;
            return this;
        }

        /**
         * @param tvoc TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder tvoc(SensorAlertsProfilesConditionsResponseThresholdTvocArgs tvoc) {
            return tvoc(Output.of(tvoc));
        }

        /**
         * @param upstreamPower Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder upstreamPower(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdUpstreamPowerArgs> upstreamPower) {
            $.upstreamPower = upstreamPower;
            return this;
        }

        /**
         * @param upstreamPower Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder upstreamPower(SensorAlertsProfilesConditionsResponseThresholdUpstreamPowerArgs upstreamPower) {
            return upstreamPower(Output.of(upstreamPower));
        }

        /**
         * @param voltage Voltage threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder voltage(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdVoltageArgs> voltage) {
            $.voltage = voltage;
            return this;
        }

        /**
         * @param voltage Voltage threshold. &#39;level&#39; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder voltage(SensorAlertsProfilesConditionsResponseThresholdVoltageArgs voltage) {
            return voltage(Output.of(voltage));
        }

        /**
         * @param water Water detection threshold. &#39;present&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder water(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdWaterArgs> water) {
            $.water = water;
            return this;
        }

        /**
         * @param water Water detection threshold. &#39;present&#39; must be provided and set to true.
         * 
         * @return builder
         * 
         */
        public Builder water(SensorAlertsProfilesConditionsResponseThresholdWaterArgs water) {
            return water(Output.of(water));
        }

        public SensorAlertsProfilesConditionsResponseThresholdArgs build() {
            return $;
        }
    }

}
