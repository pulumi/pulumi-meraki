// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertsProfilesAlertConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertsProfilesAlertConditionArgs Empty = new AlertsProfilesAlertConditionArgs();

    /**
     * The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     * 
     */
    @Import(name="bitRateBps")
    private @Nullable Output<Integer> bitRateBps;

    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     * 
     */
    public Optional<Output<Integer>> bitRateBps() {
        return Optional.ofNullable(this.bitRateBps);
    }

    /**
     * The total duration in seconds that the threshold should be crossed before alerting
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The total duration in seconds that the threshold should be crossed before alerting
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The uplink observed for the alert
     * 
     */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return The uplink observed for the alert
     * 
     */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     * 
     */
    @Import(name="jitterMs")
    private @Nullable Output<Integer> jitterMs;

    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     * 
     */
    public Optional<Output<Integer>> jitterMs() {
        return Optional.ofNullable(this.jitterMs);
    }

    /**
     * The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     * 
     */
    @Import(name="latencyMs")
    private @Nullable Output<Integer> latencyMs;

    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     * 
     */
    public Optional<Output<Integer>> latencyMs() {
        return Optional.ofNullable(this.latencyMs);
    }

    /**
     * The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     * 
     */
    @Import(name="lossRatio")
    private @Nullable Output<Double> lossRatio;

    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     * 
     */
    public Optional<Output<Double>> lossRatio() {
        return Optional.ofNullable(this.lossRatio);
    }

    /**
     * The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     * 
     */
    @Import(name="mos")
    private @Nullable Output<Double> mos;

    /**
     * @return The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     * 
     */
    public Optional<Output<Double>> mos() {
        return Optional.ofNullable(this.mos);
    }

    /**
     * The look back period in seconds for sensing the alert
     * 
     */
    @Import(name="window")
    private @Nullable Output<Integer> window;

    /**
     * @return The look back period in seconds for sensing the alert
     * 
     */
    public Optional<Output<Integer>> window() {
        return Optional.ofNullable(this.window);
    }

    private AlertsProfilesAlertConditionArgs() {}

    private AlertsProfilesAlertConditionArgs(AlertsProfilesAlertConditionArgs $) {
        this.bitRateBps = $.bitRateBps;
        this.duration = $.duration;
        this.interface_ = $.interface_;
        this.jitterMs = $.jitterMs;
        this.latencyMs = $.latencyMs;
        this.lossRatio = $.lossRatio;
        this.mos = $.mos;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertsProfilesAlertConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertsProfilesAlertConditionArgs $;

        public Builder() {
            $ = new AlertsProfilesAlertConditionArgs();
        }

        public Builder(AlertsProfilesAlertConditionArgs defaults) {
            $ = new AlertsProfilesAlertConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitRateBps The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
         * 
         * @return builder
         * 
         */
        public Builder bitRateBps(@Nullable Output<Integer> bitRateBps) {
            $.bitRateBps = bitRateBps;
            return this;
        }

        /**
         * @param bitRateBps The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
         * 
         * @return builder
         * 
         */
        public Builder bitRateBps(Integer bitRateBps) {
            return bitRateBps(Output.of(bitRateBps));
        }

        /**
         * @param duration The total duration in seconds that the threshold should be crossed before alerting
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The total duration in seconds that the threshold should be crossed before alerting
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param interface_ The uplink observed for the alert
         * 
         * @return builder
         * 
         */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ The uplink observed for the alert
         * 
         * @return builder
         * 
         */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param jitterMs The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
         * 
         * @return builder
         * 
         */
        public Builder jitterMs(@Nullable Output<Integer> jitterMs) {
            $.jitterMs = jitterMs;
            return this;
        }

        /**
         * @param jitterMs The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
         * 
         * @return builder
         * 
         */
        public Builder jitterMs(Integer jitterMs) {
            return jitterMs(Output.of(jitterMs));
        }

        /**
         * @param latencyMs The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
         * 
         * @return builder
         * 
         */
        public Builder latencyMs(@Nullable Output<Integer> latencyMs) {
            $.latencyMs = latencyMs;
            return this;
        }

        /**
         * @param latencyMs The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
         * 
         * @return builder
         * 
         */
        public Builder latencyMs(Integer latencyMs) {
            return latencyMs(Output.of(latencyMs));
        }

        /**
         * @param lossRatio The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
         * 
         * @return builder
         * 
         */
        public Builder lossRatio(@Nullable Output<Double> lossRatio) {
            $.lossRatio = lossRatio;
            return this;
        }

        /**
         * @param lossRatio The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
         * 
         * @return builder
         * 
         */
        public Builder lossRatio(Double lossRatio) {
            return lossRatio(Output.of(lossRatio));
        }

        /**
         * @param mos The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
         * 
         * @return builder
         * 
         */
        public Builder mos(@Nullable Output<Double> mos) {
            $.mos = mos;
            return this;
        }

        /**
         * @param mos The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
         * 
         * @return builder
         * 
         */
        public Builder mos(Double mos) {
            return mos(Output.of(mos));
        }

        /**
         * @param window The look back period in seconds for sensing the alert
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Output<Integer> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window The look back period in seconds for sensing the alert
         * 
         * @return builder
         * 
         */
        public Builder window(Integer window) {
            return window(Output.of(window));
        }

        public AlertsProfilesAlertConditionArgs build() {
            return $;
        }
    }

}
