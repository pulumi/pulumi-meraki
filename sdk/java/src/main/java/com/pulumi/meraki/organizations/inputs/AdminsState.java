// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.AdminsNetworkArgs;
import com.pulumi.meraki.organizations.inputs.AdminsTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdminsState extends com.pulumi.resources.ResourceArgs {

    public static final AdminsState Empty = new AdminsState();

    /**
     * Status of the admin&#39;s account
     * 
     */
    @Import(name="accountStatus")
    private @Nullable Output<String> accountStatus;

    /**
     * @return Status of the admin&#39;s account
     * 
     */
    public Optional<Output<String>> accountStatus() {
        return Optional.ofNullable(this.accountStatus);
    }

    /**
     * adminId path parameter. Admin ID
     * 
     */
    @Import(name="adminId")
    private @Nullable Output<String> adminId;

    /**
     * @return adminId path parameter. Admin ID
     * 
     */
    public Optional<Output<String>> adminId() {
        return Optional.ofNullable(this.adminId);
    }

    /**
     * Admin&#39;s authentication method
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Admin&#39;s authentication method
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Admin&#39;s email address
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Admin&#39;s email address
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Indicates whether the admin has an API key
     * 
     */
    @Import(name="hasApiKey")
    private @Nullable Output<Boolean> hasApiKey;

    /**
     * @return Indicates whether the admin has an API key
     * 
     */
    public Optional<Output<Boolean>> hasApiKey() {
        return Optional.ofNullable(this.hasApiKey);
    }

    /**
     * Time when the admin was last active
     * 
     */
    @Import(name="lastActive")
    private @Nullable Output<String> lastActive;

    /**
     * @return Time when the admin was last active
     * 
     */
    public Optional<Output<String>> lastActive() {
        return Optional.ofNullable(this.lastActive);
    }

    /**
     * Admin&#39;s username
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Admin&#39;s username
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Admin network access information
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<AdminsNetworkArgs>> networks;

    /**
     * @return Admin network access information
     * 
     */
    public Optional<Output<List<AdminsNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Admin&#39;s level of access to the organization
     * 
     */
    @Import(name="orgAccess")
    private @Nullable Output<String> orgAccess;

    /**
     * @return Admin&#39;s level of access to the organization
     * 
     */
    public Optional<Output<String>> orgAccess() {
        return Optional.ofNullable(this.orgAccess);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * Admin tag information
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AdminsTagArgs>> tags;

    /**
     * @return Admin tag information
     * 
     */
    public Optional<Output<List<AdminsTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Indicates whether two-factor authentication is enabled
     * 
     */
    @Import(name="twoFactorAuthEnabled")
    private @Nullable Output<Boolean> twoFactorAuthEnabled;

    /**
     * @return Indicates whether two-factor authentication is enabled
     * 
     */
    public Optional<Output<Boolean>> twoFactorAuthEnabled() {
        return Optional.ofNullable(this.twoFactorAuthEnabled);
    }

    private AdminsState() {}

    private AdminsState(AdminsState $) {
        this.accountStatus = $.accountStatus;
        this.adminId = $.adminId;
        this.authenticationMethod = $.authenticationMethod;
        this.email = $.email;
        this.hasApiKey = $.hasApiKey;
        this.lastActive = $.lastActive;
        this.name = $.name;
        this.networks = $.networks;
        this.orgAccess = $.orgAccess;
        this.organizationId = $.organizationId;
        this.tags = $.tags;
        this.twoFactorAuthEnabled = $.twoFactorAuthEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdminsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdminsState $;

        public Builder() {
            $ = new AdminsState();
        }

        public Builder(AdminsState defaults) {
            $ = new AdminsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountStatus Status of the admin&#39;s account
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(@Nullable Output<String> accountStatus) {
            $.accountStatus = accountStatus;
            return this;
        }

        /**
         * @param accountStatus Status of the admin&#39;s account
         * 
         * @return builder
         * 
         */
        public Builder accountStatus(String accountStatus) {
            return accountStatus(Output.of(accountStatus));
        }

        /**
         * @param adminId adminId path parameter. Admin ID
         * 
         * @return builder
         * 
         */
        public Builder adminId(@Nullable Output<String> adminId) {
            $.adminId = adminId;
            return this;
        }

        /**
         * @param adminId adminId path parameter. Admin ID
         * 
         * @return builder
         * 
         */
        public Builder adminId(String adminId) {
            return adminId(Output.of(adminId));
        }

        /**
         * @param authenticationMethod Admin&#39;s authentication method
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Admin&#39;s authentication method
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param email Admin&#39;s email address
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Admin&#39;s email address
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param hasApiKey Indicates whether the admin has an API key
         * 
         * @return builder
         * 
         */
        public Builder hasApiKey(@Nullable Output<Boolean> hasApiKey) {
            $.hasApiKey = hasApiKey;
            return this;
        }

        /**
         * @param hasApiKey Indicates whether the admin has an API key
         * 
         * @return builder
         * 
         */
        public Builder hasApiKey(Boolean hasApiKey) {
            return hasApiKey(Output.of(hasApiKey));
        }

        /**
         * @param lastActive Time when the admin was last active
         * 
         * @return builder
         * 
         */
        public Builder lastActive(@Nullable Output<String> lastActive) {
            $.lastActive = lastActive;
            return this;
        }

        /**
         * @param lastActive Time when the admin was last active
         * 
         * @return builder
         * 
         */
        public Builder lastActive(String lastActive) {
            return lastActive(Output.of(lastActive));
        }

        /**
         * @param name Admin&#39;s username
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Admin&#39;s username
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<AdminsNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(List<AdminsNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(AdminsNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param orgAccess Admin&#39;s level of access to the organization
         * 
         * @return builder
         * 
         */
        public Builder orgAccess(@Nullable Output<String> orgAccess) {
            $.orgAccess = orgAccess;
            return this;
        }

        /**
         * @param orgAccess Admin&#39;s level of access to the organization
         * 
         * @return builder
         * 
         */
        public Builder orgAccess(String orgAccess) {
            return orgAccess(Output.of(orgAccess));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AdminsTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AdminsTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(AdminsTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param twoFactorAuthEnabled Indicates whether two-factor authentication is enabled
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthEnabled(@Nullable Output<Boolean> twoFactorAuthEnabled) {
            $.twoFactorAuthEnabled = twoFactorAuthEnabled;
            return this;
        }

        /**
         * @param twoFactorAuthEnabled Indicates whether two-factor authentication is enabled
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
            return twoFactorAuthEnabled(Output.of(twoFactorAuthEnabled));
        }

        public AdminsState build() {
            return $;
        }
    }

}
