// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SettingsFipsArgs;
import com.pulumi.meraki.networks.inputs.SettingsLocalStatusPageArgs;
import com.pulumi.meraki.networks.inputs.SettingsNamedVlansArgs;
import com.pulumi.meraki.networks.inputs.SettingsSecurePortArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingsState extends com.pulumi.resources.ResourceArgs {

    public static final SettingsState Empty = new SettingsState();

    /**
     * A hash of FIPS options applied to the Network
     * 
     */
    @Import(name="fips")
    private @Nullable Output<SettingsFipsArgs> fips;

    /**
     * @return A hash of FIPS options applied to the Network
     * 
     */
    public Optional<Output<SettingsFipsArgs>> fips() {
        return Optional.ofNullable(this.fips);
    }

    /**
     * A hash of Local Status page(s)&#39; authentication options applied to the Network.
     * 
     */
    @Import(name="localStatusPage")
    private @Nullable Output<SettingsLocalStatusPageArgs> localStatusPage;

    /**
     * @return A hash of Local Status page(s)&#39; authentication options applied to the Network.
     * 
     */
    public Optional<Output<SettingsLocalStatusPageArgs>> localStatusPage() {
        return Optional.ofNullable(this.localStatusPage);
    }

    /**
     * Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
     * 
     */
    @Import(name="localStatusPageEnabled")
    private @Nullable Output<Boolean> localStatusPageEnabled;

    /**
     * @return Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
     * 
     */
    public Optional<Output<Boolean>> localStatusPageEnabled() {
        return Optional.ofNullable(this.localStatusPageEnabled);
    }

    /**
     * A hash of Named VLANs options applied to the Network.
     * 
     */
    @Import(name="namedVlans")
    private @Nullable Output<SettingsNamedVlansArgs> namedVlans;

    /**
     * @return A hash of Named VLANs options applied to the Network.
     * 
     */
    public Optional<Output<SettingsNamedVlansArgs>> namedVlans() {
        return Optional.ofNullable(this.namedVlans);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Enables / disables access to the device status page (\n\nhttp://[device&#39;s LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
     * 
     */
    @Import(name="remoteStatusPageEnabled")
    private @Nullable Output<Boolean> remoteStatusPageEnabled;

    /**
     * @return Enables / disables access to the device status page (\n\nhttp://[device&#39;s LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
     * 
     */
    public Optional<Output<Boolean>> remoteStatusPageEnabled() {
        return Optional.ofNullable(this.remoteStatusPageEnabled);
    }

    /**
     * A hash of SecureConnect options applied to the Network.
     * 
     */
    @Import(name="securePort")
    private @Nullable Output<SettingsSecurePortArgs> securePort;

    /**
     * @return A hash of SecureConnect options applied to the Network.
     * 
     */
    public Optional<Output<SettingsSecurePortArgs>> securePort() {
        return Optional.ofNullable(this.securePort);
    }

    private SettingsState() {}

    private SettingsState(SettingsState $) {
        this.fips = $.fips;
        this.localStatusPage = $.localStatusPage;
        this.localStatusPageEnabled = $.localStatusPageEnabled;
        this.namedVlans = $.namedVlans;
        this.networkId = $.networkId;
        this.remoteStatusPageEnabled = $.remoteStatusPageEnabled;
        this.securePort = $.securePort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingsState $;

        public Builder() {
            $ = new SettingsState();
        }

        public Builder(SettingsState defaults) {
            $ = new SettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param fips A hash of FIPS options applied to the Network
         * 
         * @return builder
         * 
         */
        public Builder fips(@Nullable Output<SettingsFipsArgs> fips) {
            $.fips = fips;
            return this;
        }

        /**
         * @param fips A hash of FIPS options applied to the Network
         * 
         * @return builder
         * 
         */
        public Builder fips(SettingsFipsArgs fips) {
            return fips(Output.of(fips));
        }

        /**
         * @param localStatusPage A hash of Local Status page(s)&#39; authentication options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder localStatusPage(@Nullable Output<SettingsLocalStatusPageArgs> localStatusPage) {
            $.localStatusPage = localStatusPage;
            return this;
        }

        /**
         * @param localStatusPage A hash of Local Status page(s)&#39; authentication options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder localStatusPage(SettingsLocalStatusPageArgs localStatusPage) {
            return localStatusPage(Output.of(localStatusPage));
        }

        /**
         * @param localStatusPageEnabled Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder localStatusPageEnabled(@Nullable Output<Boolean> localStatusPageEnabled) {
            $.localStatusPageEnabled = localStatusPageEnabled;
            return this;
        }

        /**
         * @param localStatusPageEnabled Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder localStatusPageEnabled(Boolean localStatusPageEnabled) {
            return localStatusPageEnabled(Output.of(localStatusPageEnabled));
        }

        /**
         * @param namedVlans A hash of Named VLANs options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder namedVlans(@Nullable Output<SettingsNamedVlansArgs> namedVlans) {
            $.namedVlans = namedVlans;
            return this;
        }

        /**
         * @param namedVlans A hash of Named VLANs options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder namedVlans(SettingsNamedVlansArgs namedVlans) {
            return namedVlans(Output.of(namedVlans));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param remoteStatusPageEnabled Enables / disables access to the device status page (\n\nhttp://[device&#39;s LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
         * 
         * @return builder
         * 
         */
        public Builder remoteStatusPageEnabled(@Nullable Output<Boolean> remoteStatusPageEnabled) {
            $.remoteStatusPageEnabled = remoteStatusPageEnabled;
            return this;
        }

        /**
         * @param remoteStatusPageEnabled Enables / disables access to the device status page (\n\nhttp://[device&#39;s LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
         * 
         * @return builder
         * 
         */
        public Builder remoteStatusPageEnabled(Boolean remoteStatusPageEnabled) {
            return remoteStatusPageEnabled(Output.of(remoteStatusPageEnabled));
        }

        /**
         * @param securePort A hash of SecureConnect options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder securePort(@Nullable Output<SettingsSecurePortArgs> securePort) {
            $.securePort = securePort;
            return this;
        }

        /**
         * @param securePort A hash of SecureConnect options applied to the Network.
         * 
         * @return builder
         * 
         */
        public Builder securePort(SettingsSecurePortArgs securePort) {
            return securePort(Output.of(securePort));
        }

        public SettingsState build() {
            return $;
        }
    }

}
