// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.MqttBrokersItemSecurityTlsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MqttBrokersItemSecurityArgs extends com.pulumi.resources.ResourceArgs {

    public static final MqttBrokersItemSecurityArgs Empty = new MqttBrokersItemSecurityArgs();

    /**
     * Security protocol of the MQTT broker.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Security protocol of the MQTT broker.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * TLS settings of the MQTT broker.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<MqttBrokersItemSecurityTlsArgs> tls;

    /**
     * @return TLS settings of the MQTT broker.
     * 
     */
    public Optional<Output<MqttBrokersItemSecurityTlsArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private MqttBrokersItemSecurityArgs() {}

    private MqttBrokersItemSecurityArgs(MqttBrokersItemSecurityArgs $) {
        this.mode = $.mode;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MqttBrokersItemSecurityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MqttBrokersItemSecurityArgs $;

        public Builder() {
            $ = new MqttBrokersItemSecurityArgs();
        }

        public Builder(MqttBrokersItemSecurityArgs defaults) {
            $ = new MqttBrokersItemSecurityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Security protocol of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Security protocol of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param tls TLS settings of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<MqttBrokersItemSecurityTlsArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls TLS settings of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder tls(MqttBrokersItemSecurityTlsArgs tls) {
            return tls(Output.of(tls));
        }

        public MqttBrokersItemSecurityArgs build() {
            return $;
        }
    }

}
