// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementInterfaceWan2Args extends com.pulumi.resources.ResourceArgs {

    public static final ManagementInterfaceWan2Args Empty = new ManagementInterfaceWan2Args();

    /**
     * Up to two DNS IPs.
     * 
     */
    @Import(name="staticDns")
    private @Nullable Output<List<String>> staticDns;

    /**
     * @return Up to two DNS IPs.
     * 
     */
    public Optional<Output<List<String>>> staticDns() {
        return Optional.ofNullable(this.staticDns);
    }

    /**
     * The IP of the gateway on the WAN.
     * 
     */
    @Import(name="staticGatewayIp")
    private @Nullable Output<String> staticGatewayIp;

    /**
     * @return The IP of the gateway on the WAN.
     * 
     */
    public Optional<Output<String>> staticGatewayIp() {
        return Optional.ofNullable(this.staticGatewayIp);
    }

    /**
     * The IP the device should use on the WAN.
     * 
     */
    @Import(name="staticIp")
    private @Nullable Output<String> staticIp;

    /**
     * @return The IP the device should use on the WAN.
     * 
     */
    public Optional<Output<String>> staticIp() {
        return Optional.ofNullable(this.staticIp);
    }

    /**
     * The subnet mask for the WAN.
     * 
     */
    @Import(name="staticSubnetMask")
    private @Nullable Output<String> staticSubnetMask;

    /**
     * @return The subnet mask for the WAN.
     * 
     */
    public Optional<Output<String>> staticSubnetMask() {
        return Optional.ofNullable(this.staticSubnetMask);
    }

    /**
     * Configure the interface to have static IP settings or use DHCP.
     * 
     */
    @Import(name="usingStaticIp")
    private @Nullable Output<Boolean> usingStaticIp;

    /**
     * @return Configure the interface to have static IP settings or use DHCP.
     * 
     */
    public Optional<Output<Boolean>> usingStaticIp() {
        return Optional.ofNullable(this.usingStaticIp);
    }

    /**
     * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    /**
     * Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
     * 
     */
    @Import(name="wanEnabled")
    private @Nullable Output<String> wanEnabled;

    /**
     * @return Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
     * 
     */
    public Optional<Output<String>> wanEnabled() {
        return Optional.ofNullable(this.wanEnabled);
    }

    private ManagementInterfaceWan2Args() {}

    private ManagementInterfaceWan2Args(ManagementInterfaceWan2Args $) {
        this.staticDns = $.staticDns;
        this.staticGatewayIp = $.staticGatewayIp;
        this.staticIp = $.staticIp;
        this.staticSubnetMask = $.staticSubnetMask;
        this.usingStaticIp = $.usingStaticIp;
        this.vlan = $.vlan;
        this.wanEnabled = $.wanEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementInterfaceWan2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementInterfaceWan2Args $;

        public Builder() {
            $ = new ManagementInterfaceWan2Args();
        }

        public Builder(ManagementInterfaceWan2Args defaults) {
            $ = new ManagementInterfaceWan2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param staticDns Up to two DNS IPs.
         * 
         * @return builder
         * 
         */
        public Builder staticDns(@Nullable Output<List<String>> staticDns) {
            $.staticDns = staticDns;
            return this;
        }

        /**
         * @param staticDns Up to two DNS IPs.
         * 
         * @return builder
         * 
         */
        public Builder staticDns(List<String> staticDns) {
            return staticDns(Output.of(staticDns));
        }

        /**
         * @param staticDns Up to two DNS IPs.
         * 
         * @return builder
         * 
         */
        public Builder staticDns(String... staticDns) {
            return staticDns(List.of(staticDns));
        }

        /**
         * @param staticGatewayIp The IP of the gateway on the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticGatewayIp(@Nullable Output<String> staticGatewayIp) {
            $.staticGatewayIp = staticGatewayIp;
            return this;
        }

        /**
         * @param staticGatewayIp The IP of the gateway on the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticGatewayIp(String staticGatewayIp) {
            return staticGatewayIp(Output.of(staticGatewayIp));
        }

        /**
         * @param staticIp The IP the device should use on the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticIp(@Nullable Output<String> staticIp) {
            $.staticIp = staticIp;
            return this;
        }

        /**
         * @param staticIp The IP the device should use on the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticIp(String staticIp) {
            return staticIp(Output.of(staticIp));
        }

        /**
         * @param staticSubnetMask The subnet mask for the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticSubnetMask(@Nullable Output<String> staticSubnetMask) {
            $.staticSubnetMask = staticSubnetMask;
            return this;
        }

        /**
         * @param staticSubnetMask The subnet mask for the WAN.
         * 
         * @return builder
         * 
         */
        public Builder staticSubnetMask(String staticSubnetMask) {
            return staticSubnetMask(Output.of(staticSubnetMask));
        }

        /**
         * @param usingStaticIp Configure the interface to have static IP settings or use DHCP.
         * 
         * @return builder
         * 
         */
        public Builder usingStaticIp(@Nullable Output<Boolean> usingStaticIp) {
            $.usingStaticIp = usingStaticIp;
            return this;
        }

        /**
         * @param usingStaticIp Configure the interface to have static IP settings or use DHCP.
         * 
         * @return builder
         * 
         */
        public Builder usingStaticIp(Boolean usingStaticIp) {
            return usingStaticIp(Output.of(usingStaticIp));
        }

        /**
         * @param vlan The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        /**
         * @param wanEnabled Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
         * 
         * @return builder
         * 
         */
        public Builder wanEnabled(@Nullable Output<String> wanEnabled) {
            $.wanEnabled = wanEnabled;
            return this;
        }

        /**
         * @param wanEnabled Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
         * 
         * @return builder
         * 
         */
        public Builder wanEnabled(String wanEnabled) {
            return wanEnabled(Output.of(wanEnabled));
        }

        public ManagementInterfaceWan2Args build() {
            return $;
        }
    }

}
