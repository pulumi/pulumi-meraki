// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.TrafficAnalysisCustomPieChartItemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficAnalysisState extends com.pulumi.resources.ResourceArgs {

    public static final TrafficAnalysisState Empty = new TrafficAnalysisState();

    /**
     * The list of items that make up the custom pie chart for traffic reporting.
     * 
     */
    @Import(name="customPieChartItems")
    private @Nullable Output<List<TrafficAnalysisCustomPieChartItemArgs>> customPieChartItems;

    /**
     * @return The list of items that make up the custom pie chart for traffic reporting.
     * 
     */
    public Optional<Output<List<TrafficAnalysisCustomPieChartItemArgs>>> customPieChartItems() {
        return Optional.ofNullable(this.customPieChartItems);
    }

    /**
     * The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),
     * &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames).
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),
     * &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames).
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    private TrafficAnalysisState() {}

    private TrafficAnalysisState(TrafficAnalysisState $) {
        this.customPieChartItems = $.customPieChartItems;
        this.mode = $.mode;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficAnalysisState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficAnalysisState $;

        public Builder() {
            $ = new TrafficAnalysisState();
        }

        public Builder(TrafficAnalysisState defaults) {
            $ = new TrafficAnalysisState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customPieChartItems The list of items that make up the custom pie chart for traffic reporting.
         * 
         * @return builder
         * 
         */
        public Builder customPieChartItems(@Nullable Output<List<TrafficAnalysisCustomPieChartItemArgs>> customPieChartItems) {
            $.customPieChartItems = customPieChartItems;
            return this;
        }

        /**
         * @param customPieChartItems The list of items that make up the custom pie chart for traffic reporting.
         * 
         * @return builder
         * 
         */
        public Builder customPieChartItems(List<TrafficAnalysisCustomPieChartItemArgs> customPieChartItems) {
            return customPieChartItems(Output.of(customPieChartItems));
        }

        /**
         * @param customPieChartItems The list of items that make up the custom pie chart for traffic reporting.
         * 
         * @return builder
         * 
         */
        public Builder customPieChartItems(TrafficAnalysisCustomPieChartItemArgs... customPieChartItems) {
            return customPieChartItems(List.of(customPieChartItems));
        }

        /**
         * @param mode The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),
         * &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames).
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The traffic analysis mode for the network. Can be one of &#39;disabled&#39; (do not collect traffic types),
         * &#39;basic&#39; (collect generic traffic categories), or &#39;detailed&#39; (collect destination hostnames).
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public TrafficAnalysisState build() {
            return $;
        }
    }

}
