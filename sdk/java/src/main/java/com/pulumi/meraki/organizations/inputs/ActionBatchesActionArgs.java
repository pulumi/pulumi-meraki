// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActionBatchesActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionBatchesActionArgs Empty = new ActionBatchesActionArgs();

    /**
     * Data provided in the body of the Action. Contents depend on the Action type
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return Data provided in the body of the Action. Contents depend on the Action type
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * The operation to be used by this action
     * 
     */
    @Import(name="operation")
    private @Nullable Output<String> operation;

    /**
     * @return The operation to be used by this action
     * 
     */
    public Optional<Output<String>> operation() {
        return Optional.ofNullable(this.operation);
    }

    /**
     * Unique identifier for the resource to be acted on
     * 
     */
    @Import(name="resource")
    private @Nullable Output<String> resource;

    /**
     * @return Unique identifier for the resource to be acted on
     * 
     */
    public Optional<Output<String>> resource() {
        return Optional.ofNullable(this.resource);
    }

    private ActionBatchesActionArgs() {}

    private ActionBatchesActionArgs(ActionBatchesActionArgs $) {
        this.body = $.body;
        this.operation = $.operation;
        this.resource = $.resource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionBatchesActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionBatchesActionArgs $;

        public Builder() {
            $ = new ActionBatchesActionArgs();
        }

        public Builder(ActionBatchesActionArgs defaults) {
            $ = new ActionBatchesActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body Data provided in the body of the Action. Contents depend on the Action type
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body Data provided in the body of the Action. Contents depend on the Action type
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param operation The operation to be used by this action
         * 
         * @return builder
         * 
         */
        public Builder operation(@Nullable Output<String> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation The operation to be used by this action
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param resource Unique identifier for the resource to be acted on
         * 
         * @return builder
         * 
         */
        public Builder resource(@Nullable Output<String> resource) {
            $.resource = resource;
            return this;
        }

        /**
         * @param resource Unique identifier for the resource to be acted on
         * 
         * @return builder
         * 
         */
        public Builder resource(String resource) {
            return resource(Output.of(resource));
        }

        public ActionBatchesActionArgs build() {
            return $;
        }
    }

}
