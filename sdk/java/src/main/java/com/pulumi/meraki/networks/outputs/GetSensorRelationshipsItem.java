// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSensorRelationshipsItemDevice;
import com.pulumi.meraki.networks.outputs.GetSensorRelationshipsItemRelationships;
import java.util.Objects;

@CustomType
public final class GetSensorRelationshipsItem {
    /**
     * @return A sensor or gateway device in the network
     * 
     */
    private GetSensorRelationshipsItemDevice device;
    /**
     * @return An object describing the relationships defined between the device and other devices
     * 
     */
    private GetSensorRelationshipsItemRelationships relationships;

    private GetSensorRelationshipsItem() {}
    /**
     * @return A sensor or gateway device in the network
     * 
     */
    public GetSensorRelationshipsItemDevice device() {
        return this.device;
    }
    /**
     * @return An object describing the relationships defined between the device and other devices
     * 
     */
    public GetSensorRelationshipsItemRelationships relationships() {
        return this.relationships;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorRelationshipsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorRelationshipsItemDevice device;
        private GetSensorRelationshipsItemRelationships relationships;
        public Builder() {}
        public Builder(GetSensorRelationshipsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.relationships = defaults.relationships;
        }

        @CustomType.Setter
        public Builder device(GetSensorRelationshipsItemDevice device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("GetSensorRelationshipsItem", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder relationships(GetSensorRelationshipsItemRelationships relationships) {
            if (relationships == null) {
              throw new MissingRequiredPropertyException("GetSensorRelationshipsItem", "relationships");
            }
            this.relationships = relationships;
            return this;
        }
        public GetSensorRelationshipsItem build() {
            final var _resultValue = new GetSensorRelationshipsItem();
            _resultValue.device = device;
            _resultValue.relationships = relationships;
            return _resultValue;
        }
    }
}
