// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MqttBrokersParametersSecurityTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MqttBrokersParametersSecurityTlsArgs Empty = new MqttBrokersParametersSecurityTlsArgs();

    /**
     * CA Certificate of the MQTT broker.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return CA Certificate of the MQTT broker.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * Whether the TLS hostname verification is enabled for the MQTT broker.
     * 
     */
    @Import(name="verifyHostnames")
    private @Nullable Output<Boolean> verifyHostnames;

    /**
     * @return Whether the TLS hostname verification is enabled for the MQTT broker.
     * 
     */
    public Optional<Output<Boolean>> verifyHostnames() {
        return Optional.ofNullable(this.verifyHostnames);
    }

    private MqttBrokersParametersSecurityTlsArgs() {}

    private MqttBrokersParametersSecurityTlsArgs(MqttBrokersParametersSecurityTlsArgs $) {
        this.caCertificate = $.caCertificate;
        this.verifyHostnames = $.verifyHostnames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MqttBrokersParametersSecurityTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MqttBrokersParametersSecurityTlsArgs $;

        public Builder() {
            $ = new MqttBrokersParametersSecurityTlsArgs();
        }

        public Builder(MqttBrokersParametersSecurityTlsArgs defaults) {
            $ = new MqttBrokersParametersSecurityTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate CA Certificate of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate CA Certificate of the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param verifyHostnames Whether the TLS hostname verification is enabled for the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder verifyHostnames(@Nullable Output<Boolean> verifyHostnames) {
            $.verifyHostnames = verifyHostnames;
            return this;
        }

        /**
         * @param verifyHostnames Whether the TLS hostname verification is enabled for the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder verifyHostnames(Boolean verifyHostnames) {
            return verifyHostnames(Output.of(verifyHostnames));
        }

        public MqttBrokersParametersSecurityTlsArgs build() {
            return $;
        }
    }

}
