// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.FloorPlansBottomLeftCornerArgs;
import com.pulumi.meraki.networks.inputs.FloorPlansBottomRightCornerArgs;
import com.pulumi.meraki.networks.inputs.FloorPlansCenterArgs;
import com.pulumi.meraki.networks.inputs.FloorPlansTopLeftCornerArgs;
import com.pulumi.meraki.networks.inputs.FloorPlansTopRightCornerArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FloorPlansArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloorPlansArgs Empty = new FloorPlansArgs();

    /**
     * The longitude and latitude of the bottom left corner of your floor plan.
     * 
     */
    @Import(name="bottomLeftCorner")
    private @Nullable Output<FloorPlansBottomLeftCornerArgs> bottomLeftCorner;

    /**
     * @return The longitude and latitude of the bottom left corner of your floor plan.
     * 
     */
    public Optional<Output<FloorPlansBottomLeftCornerArgs>> bottomLeftCorner() {
        return Optional.ofNullable(this.bottomLeftCorner);
    }

    /**
     * The longitude and latitude of the bottom right corner of your floor plan.
     * 
     */
    @Import(name="bottomRightCorner")
    private @Nullable Output<FloorPlansBottomRightCornerArgs> bottomRightCorner;

    /**
     * @return The longitude and latitude of the bottom right corner of your floor plan.
     * 
     */
    public Optional<Output<FloorPlansBottomRightCornerArgs>> bottomRightCorner() {
        return Optional.ofNullable(this.bottomRightCorner);
    }

    /**
     * The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
     * 
     */
    @Import(name="center")
    private @Nullable Output<FloorPlansCenterArgs> center;

    /**
     * @return The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
     * 
     */
    public Optional<Output<FloorPlansCenterArgs>> center() {
        return Optional.ofNullable(this.center);
    }

    /**
     * Floor plan ID
     * 
     */
    @Import(name="floorPlanId")
    private @Nullable Output<String> floorPlanId;

    /**
     * @return Floor plan ID
     * 
     */
    public Optional<Output<String>> floorPlanId() {
        return Optional.ofNullable(this.floorPlanId);
    }

    /**
     * The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     * 
     */
    @Import(name="imageContents")
    private @Nullable Output<String> imageContents;

    /**
     * @return The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
     * 
     */
    public Optional<Output<String>> imageContents() {
        return Optional.ofNullable(this.imageContents);
    }

    /**
     * The name of your floor plan.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of your floor plan.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The longitude and latitude of the top left corner of your floor plan.
     * 
     */
    @Import(name="topLeftCorner")
    private @Nullable Output<FloorPlansTopLeftCornerArgs> topLeftCorner;

    /**
     * @return The longitude and latitude of the top left corner of your floor plan.
     * 
     */
    public Optional<Output<FloorPlansTopLeftCornerArgs>> topLeftCorner() {
        return Optional.ofNullable(this.topLeftCorner);
    }

    /**
     * The longitude and latitude of the top right corner of your floor plan.
     * 
     */
    @Import(name="topRightCorner")
    private @Nullable Output<FloorPlansTopRightCornerArgs> topRightCorner;

    /**
     * @return The longitude and latitude of the top right corner of your floor plan.
     * 
     */
    public Optional<Output<FloorPlansTopRightCornerArgs>> topRightCorner() {
        return Optional.ofNullable(this.topRightCorner);
    }

    private FloorPlansArgs() {}

    private FloorPlansArgs(FloorPlansArgs $) {
        this.bottomLeftCorner = $.bottomLeftCorner;
        this.bottomRightCorner = $.bottomRightCorner;
        this.center = $.center;
        this.floorPlanId = $.floorPlanId;
        this.imageContents = $.imageContents;
        this.name = $.name;
        this.networkId = $.networkId;
        this.topLeftCorner = $.topLeftCorner;
        this.topRightCorner = $.topRightCorner;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloorPlansArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloorPlansArgs $;

        public Builder() {
            $ = new FloorPlansArgs();
        }

        public Builder(FloorPlansArgs defaults) {
            $ = new FloorPlansArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bottomLeftCorner The longitude and latitude of the bottom left corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder bottomLeftCorner(@Nullable Output<FloorPlansBottomLeftCornerArgs> bottomLeftCorner) {
            $.bottomLeftCorner = bottomLeftCorner;
            return this;
        }

        /**
         * @param bottomLeftCorner The longitude and latitude of the bottom left corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder bottomLeftCorner(FloorPlansBottomLeftCornerArgs bottomLeftCorner) {
            return bottomLeftCorner(Output.of(bottomLeftCorner));
        }

        /**
         * @param bottomRightCorner The longitude and latitude of the bottom right corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder bottomRightCorner(@Nullable Output<FloorPlansBottomRightCornerArgs> bottomRightCorner) {
            $.bottomRightCorner = bottomRightCorner;
            return this;
        }

        /**
         * @param bottomRightCorner The longitude and latitude of the bottom right corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder bottomRightCorner(FloorPlansBottomRightCornerArgs bottomRightCorner) {
            return bottomRightCorner(Output.of(bottomRightCorner));
        }

        /**
         * @param center The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
         * 
         * @return builder
         * 
         */
        public Builder center(@Nullable Output<FloorPlansCenterArgs> center) {
            $.center = center;
            return this;
        }

        /**
         * @param center The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
         * 
         * @return builder
         * 
         */
        public Builder center(FloorPlansCenterArgs center) {
            return center(Output.of(center));
        }

        /**
         * @param floorPlanId Floor plan ID
         * 
         * @return builder
         * 
         */
        public Builder floorPlanId(@Nullable Output<String> floorPlanId) {
            $.floorPlanId = floorPlanId;
            return this;
        }

        /**
         * @param floorPlanId Floor plan ID
         * 
         * @return builder
         * 
         */
        public Builder floorPlanId(String floorPlanId) {
            return floorPlanId(Output.of(floorPlanId));
        }

        /**
         * @param imageContents The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
         * 
         * @return builder
         * 
         */
        public Builder imageContents(@Nullable Output<String> imageContents) {
            $.imageContents = imageContents;
            return this;
        }

        /**
         * @param imageContents The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
         * 
         * @return builder
         * 
         */
        public Builder imageContents(String imageContents) {
            return imageContents(Output.of(imageContents));
        }

        /**
         * @param name The name of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param topLeftCorner The longitude and latitude of the top left corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder topLeftCorner(@Nullable Output<FloorPlansTopLeftCornerArgs> topLeftCorner) {
            $.topLeftCorner = topLeftCorner;
            return this;
        }

        /**
         * @param topLeftCorner The longitude and latitude of the top left corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder topLeftCorner(FloorPlansTopLeftCornerArgs topLeftCorner) {
            return topLeftCorner(Output.of(topLeftCorner));
        }

        /**
         * @param topRightCorner The longitude and latitude of the top right corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder topRightCorner(@Nullable Output<FloorPlansTopRightCornerArgs> topRightCorner) {
            $.topRightCorner = topRightCorner;
            return this;
        }

        /**
         * @param topRightCorner The longitude and latitude of the top right corner of your floor plan.
         * 
         * @return builder
         * 
         */
        public Builder topRightCorner(FloorPlansTopRightCornerArgs topRightCorner) {
            return topRightCorner(Output.of(topRightCorner));
        }

        public FloorPlansArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("FloorPlansArgs", "networkId");
            }
            return $;
        }
    }

}
