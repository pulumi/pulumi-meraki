// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorAlertsProfilesConditionThresholdPowerFactorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorAlertsProfilesConditionThresholdPowerFactorArgs Empty = new SensorAlertsProfilesConditionThresholdPowerFactorArgs();

    /**
     * Alerting threshold as the ratio of active power to apparent power. Must be between 0 and 100.
     * 
     */
    @Import(name="percentage")
    private @Nullable Output<Integer> percentage;

    /**
     * @return Alerting threshold as the ratio of active power to apparent power. Must be between 0 and 100.
     * 
     */
    public Optional<Output<Integer>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    private SensorAlertsProfilesConditionThresholdPowerFactorArgs() {}

    private SensorAlertsProfilesConditionThresholdPowerFactorArgs(SensorAlertsProfilesConditionThresholdPowerFactorArgs $) {
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorAlertsProfilesConditionThresholdPowerFactorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorAlertsProfilesConditionThresholdPowerFactorArgs $;

        public Builder() {
            $ = new SensorAlertsProfilesConditionThresholdPowerFactorArgs();
        }

        public Builder(SensorAlertsProfilesConditionThresholdPowerFactorArgs defaults) {
            $ = new SensorAlertsProfilesConditionThresholdPowerFactorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percentage Alerting threshold as the ratio of active power to apparent power. Must be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder percentage(@Nullable Output<Integer> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage Alerting threshold as the ratio of active power to apparent power. Must be between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Integer percentage) {
            return percentage(Output.of(percentage));
        }

        public SensorAlertsProfilesConditionThresholdPowerFactorArgs build() {
            return $;
        }
    }

}
