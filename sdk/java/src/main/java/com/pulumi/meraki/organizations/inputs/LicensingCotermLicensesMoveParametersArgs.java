// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveParametersDestinationArgs;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveParametersLicenseArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensingCotermLicensesMoveParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensingCotermLicensesMoveParametersArgs Empty = new LicensingCotermLicensesMoveParametersArgs();

    /**
     * Destination data for the license move
     * 
     */
    @Import(name="destination")
    private @Nullable Output<LicensingCotermLicensesMoveParametersDestinationArgs> destination;

    /**
     * @return Destination data for the license move
     * 
     */
    public Optional<Output<LicensingCotermLicensesMoveParametersDestinationArgs>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * The list of licenses to move
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<LicensingCotermLicensesMoveParametersLicenseArgs>> licenses;

    /**
     * @return The list of licenses to move
     * 
     */
    public Optional<Output<List<LicensingCotermLicensesMoveParametersLicenseArgs>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    private LicensingCotermLicensesMoveParametersArgs() {}

    private LicensingCotermLicensesMoveParametersArgs(LicensingCotermLicensesMoveParametersArgs $) {
        this.destination = $.destination;
        this.licenses = $.licenses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensingCotermLicensesMoveParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensingCotermLicensesMoveParametersArgs $;

        public Builder() {
            $ = new LicensingCotermLicensesMoveParametersArgs();
        }

        public Builder(LicensingCotermLicensesMoveParametersArgs defaults) {
            $ = new LicensingCotermLicensesMoveParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination Destination data for the license move
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<LicensingCotermLicensesMoveParametersDestinationArgs> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Destination data for the license move
         * 
         * @return builder
         * 
         */
        public Builder destination(LicensingCotermLicensesMoveParametersDestinationArgs destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param licenses The list of licenses to move
         * 
         * @return builder
         * 
         */
        public Builder licenses(@Nullable Output<List<LicensingCotermLicensesMoveParametersLicenseArgs>> licenses) {
            $.licenses = licenses;
            return this;
        }

        /**
         * @param licenses The list of licenses to move
         * 
         * @return builder
         * 
         */
        public Builder licenses(List<LicensingCotermLicensesMoveParametersLicenseArgs> licenses) {
            return licenses(Output.of(licenses));
        }

        /**
         * @param licenses The list of licenses to move
         * 
         * @return builder
         * 
         */
        public Builder licenses(LicensingCotermLicensesMoveParametersLicenseArgs... licenses) {
            return licenses(List.of(licenses));
        }

        public LicensingCotermLicensesMoveParametersArgs build() {
            return $;
        }
    }

}
