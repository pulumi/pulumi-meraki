// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyObjectsGroupsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyObjectsGroupsArgs Empty = new PolicyObjectsGroupsArgs();

    /**
     * Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of Policy Object ID&#39;s that this NetworkObjectGroup should be associated to (note: these ID&#39;s will replace the existing associated Policy Objects)
     * 
     */
    @Import(name="objectIds")
    private @Nullable Output<List<String>> objectIds;

    /**
     * @return A list of Policy Object ID&#39;s that this NetworkObjectGroup should be associated to (note: these ID&#39;s will replace the existing associated Policy Objects)
     * 
     */
    public Optional<Output<List<String>>> objectIds() {
        return Optional.ofNullable(this.objectIds);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * policyObjectGroupId path parameter. Policy object group ID
     * 
     */
    @Import(name="policyObjectGroupId")
    private @Nullable Output<String> policyObjectGroupId;

    /**
     * @return policyObjectGroupId path parameter. Policy object group ID
     * 
     */
    public Optional<Output<String>> policyObjectGroupId() {
        return Optional.ofNullable(this.policyObjectGroupId);
    }

    private PolicyObjectsGroupsArgs() {}

    private PolicyObjectsGroupsArgs(PolicyObjectsGroupsArgs $) {
        this.category = $.category;
        this.name = $.name;
        this.objectIds = $.objectIds;
        this.organizationId = $.organizationId;
        this.policyObjectGroupId = $.policyObjectGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyObjectsGroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyObjectsGroupsArgs $;

        public Builder() {
            $ = new PolicyObjectsGroupsArgs();
        }

        public Builder(PolicyObjectsGroupsArgs defaults) {
            $ = new PolicyObjectsGroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param name A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param objectIds A list of Policy Object ID&#39;s that this NetworkObjectGroup should be associated to (note: these ID&#39;s will replace the existing associated Policy Objects)
         * 
         * @return builder
         * 
         */
        public Builder objectIds(@Nullable Output<List<String>> objectIds) {
            $.objectIds = objectIds;
            return this;
        }

        /**
         * @param objectIds A list of Policy Object ID&#39;s that this NetworkObjectGroup should be associated to (note: these ID&#39;s will replace the existing associated Policy Objects)
         * 
         * @return builder
         * 
         */
        public Builder objectIds(List<String> objectIds) {
            return objectIds(Output.of(objectIds));
        }

        /**
         * @param objectIds A list of Policy Object ID&#39;s that this NetworkObjectGroup should be associated to (note: these ID&#39;s will replace the existing associated Policy Objects)
         * 
         * @return builder
         * 
         */
        public Builder objectIds(String... objectIds) {
            return objectIds(List.of(objectIds));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param policyObjectGroupId policyObjectGroupId path parameter. Policy object group ID
         * 
         * @return builder
         * 
         */
        public Builder policyObjectGroupId(@Nullable Output<String> policyObjectGroupId) {
            $.policyObjectGroupId = policyObjectGroupId;
            return this;
        }

        /**
         * @param policyObjectGroupId policyObjectGroupId path parameter. Policy object group ID
         * 
         * @return builder
         * 
         */
        public Builder policyObjectGroupId(String policyObjectGroupId) {
            return policyObjectGroupId(Output.of(policyObjectGroupId));
        }

        public PolicyObjectsGroupsArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("PolicyObjectsGroupsArgs", "organizationId");
            }
            return $;
        }
    }

}
