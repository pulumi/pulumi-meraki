// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SwitchDhcpServerPolicyAlertsArgs;
import com.pulumi.meraki.networks.inputs.SwitchDhcpServerPolicyArpInspectionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchDhcpServerPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final SwitchDhcpServerPolicyState Empty = new SwitchDhcpServerPolicyState();

    /**
     * Email alert settings for DHCP servers
     * 
     */
    @Import(name="alerts")
    private @Nullable Output<SwitchDhcpServerPolicyAlertsArgs> alerts;

    /**
     * @return Email alert settings for DHCP servers
     * 
     */
    public Optional<Output<SwitchDhcpServerPolicyAlertsArgs>> alerts() {
        return Optional.ofNullable(this.alerts);
    }

    /**
     * List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
     *   to block.An empty array will clear the entries.
     * 
     */
    @Import(name="allowedServers")
    private @Nullable Output<List<String>> allowedServers;

    /**
     * @return List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
     *   to block.An empty array will clear the entries.
     * 
     */
    public Optional<Output<List<String>>> allowedServers() {
        return Optional.ofNullable(this.allowedServers);
    }

    /**
     * Dynamic ARP Inspection settings
     * 
     */
    @Import(name="arpInspection")
    private @Nullable Output<SwitchDhcpServerPolicyArpInspectionArgs> arpInspection;

    /**
     * @return Dynamic ARP Inspection settings
     * 
     */
    public Optional<Output<SwitchDhcpServerPolicyArpInspectionArgs>> arpInspection() {
        return Optional.ofNullable(this.arpInspection);
    }

    /**
     * List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
     *   to allow.An empty array will clear the entries.
     * 
     */
    @Import(name="blockedServers")
    private @Nullable Output<List<String>> blockedServers;

    /**
     * @return List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
     *   to allow.An empty array will clear the entries.
     * 
     */
    public Optional<Output<List<String>>> blockedServers() {
        return Optional.ofNullable(this.blockedServers);
    }

    /**
     * &#39;allow&#39; or &#39;block&#39; new DHCP servers. Default value is &#39;allow&#39;.
     * 
     */
    @Import(name="defaultPolicy")
    private @Nullable Output<String> defaultPolicy;

    /**
     * @return &#39;allow&#39; or &#39;block&#39; new DHCP servers. Default value is &#39;allow&#39;.
     * 
     */
    public Optional<Output<String>> defaultPolicy() {
        return Optional.ofNullable(this.defaultPolicy);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    private SwitchDhcpServerPolicyState() {}

    private SwitchDhcpServerPolicyState(SwitchDhcpServerPolicyState $) {
        this.alerts = $.alerts;
        this.allowedServers = $.allowedServers;
        this.arpInspection = $.arpInspection;
        this.blockedServers = $.blockedServers;
        this.defaultPolicy = $.defaultPolicy;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchDhcpServerPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchDhcpServerPolicyState $;

        public Builder() {
            $ = new SwitchDhcpServerPolicyState();
        }

        public Builder(SwitchDhcpServerPolicyState defaults) {
            $ = new SwitchDhcpServerPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alerts Email alert settings for DHCP servers
         * 
         * @return builder
         * 
         */
        public Builder alerts(@Nullable Output<SwitchDhcpServerPolicyAlertsArgs> alerts) {
            $.alerts = alerts;
            return this;
        }

        /**
         * @param alerts Email alert settings for DHCP servers
         * 
         * @return builder
         * 
         */
        public Builder alerts(SwitchDhcpServerPolicyAlertsArgs alerts) {
            return alerts(Output.of(alerts));
        }

        /**
         * @param allowedServers List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
         *   to block.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder allowedServers(@Nullable Output<List<String>> allowedServers) {
            $.allowedServers = allowedServers;
            return this;
        }

        /**
         * @param allowedServers List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
         *   to block.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder allowedServers(List<String> allowedServers) {
            return allowedServers(Output.of(allowedServers));
        }

        /**
         * @param allowedServers List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
         *   to block.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder allowedServers(String... allowedServers) {
            return allowedServers(List.of(allowedServers));
        }

        /**
         * @param arpInspection Dynamic ARP Inspection settings
         * 
         * @return builder
         * 
         */
        public Builder arpInspection(@Nullable Output<SwitchDhcpServerPolicyArpInspectionArgs> arpInspection) {
            $.arpInspection = arpInspection;
            return this;
        }

        /**
         * @param arpInspection Dynamic ARP Inspection settings
         * 
         * @return builder
         * 
         */
        public Builder arpInspection(SwitchDhcpServerPolicyArpInspectionArgs arpInspection) {
            return arpInspection(Output.of(arpInspection));
        }

        /**
         * @param blockedServers List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
         *   to allow.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder blockedServers(@Nullable Output<List<String>> blockedServers) {
            $.blockedServers = blockedServers;
            return this;
        }

        /**
         * @param blockedServers List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
         *   to allow.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder blockedServers(List<String> blockedServers) {
            return blockedServers(Output.of(blockedServers));
        }

        /**
         * @param blockedServers List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
         *   to allow.An empty array will clear the entries.
         * 
         * @return builder
         * 
         */
        public Builder blockedServers(String... blockedServers) {
            return blockedServers(List.of(blockedServers));
        }

        /**
         * @param defaultPolicy &#39;allow&#39; or &#39;block&#39; new DHCP servers. Default value is &#39;allow&#39;.
         * 
         * @return builder
         * 
         */
        public Builder defaultPolicy(@Nullable Output<String> defaultPolicy) {
            $.defaultPolicy = defaultPolicy;
            return this;
        }

        /**
         * @param defaultPolicy &#39;allow&#39; or &#39;block&#39; new DHCP servers. Default value is &#39;allow&#39;.
         * 
         * @return builder
         * 
         */
        public Builder defaultPolicy(String defaultPolicy) {
            return defaultPolicy(Output.of(defaultPolicy));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        public SwitchDhcpServerPolicyState build() {
            return $;
        }
    }

}
