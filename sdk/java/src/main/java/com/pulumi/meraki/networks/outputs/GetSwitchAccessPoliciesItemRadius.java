// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemRadiusCriticalAuth;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetSwitchAccessPoliciesItemRadius {
    /**
     * @return Critical auth settings for when authentication is rejected by the RADIUS server
     * 
     */
    private GetSwitchAccessPoliciesItemRadiusCriticalAuth criticalAuth;
    /**
     * @return VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    private Integer failedAuthVlanId;
    /**
     * @return Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
     * 
     */
    private Integer reAuthenticationInterval;

    private GetSwitchAccessPoliciesItemRadius() {}
    /**
     * @return Critical auth settings for when authentication is rejected by the RADIUS server
     * 
     */
    public GetSwitchAccessPoliciesItemRadiusCriticalAuth criticalAuth() {
        return this.criticalAuth;
    }
    /**
     * @return VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    public Integer failedAuthVlanId() {
        return this.failedAuthVlanId;
    }
    /**
     * @return Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
     * 
     */
    public Integer reAuthenticationInterval() {
        return this.reAuthenticationInterval;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchAccessPoliciesItemRadius defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSwitchAccessPoliciesItemRadiusCriticalAuth criticalAuth;
        private Integer failedAuthVlanId;
        private Integer reAuthenticationInterval;
        public Builder() {}
        public Builder(GetSwitchAccessPoliciesItemRadius defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.criticalAuth = defaults.criticalAuth;
    	      this.failedAuthVlanId = defaults.failedAuthVlanId;
    	      this.reAuthenticationInterval = defaults.reAuthenticationInterval;
        }

        @CustomType.Setter
        public Builder criticalAuth(GetSwitchAccessPoliciesItemRadiusCriticalAuth criticalAuth) {
            if (criticalAuth == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItemRadius", "criticalAuth");
            }
            this.criticalAuth = criticalAuth;
            return this;
        }
        @CustomType.Setter
        public Builder failedAuthVlanId(Integer failedAuthVlanId) {
            if (failedAuthVlanId == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItemRadius", "failedAuthVlanId");
            }
            this.failedAuthVlanId = failedAuthVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder reAuthenticationInterval(Integer reAuthenticationInterval) {
            if (reAuthenticationInterval == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItemRadius", "reAuthenticationInterval");
            }
            this.reAuthenticationInterval = reAuthenticationInterval;
            return this;
        }
        public GetSwitchAccessPoliciesItemRadius build() {
            final var _resultValue = new GetSwitchAccessPoliciesItemRadius();
            _resultValue.criticalAuth = criticalAuth;
            _resultValue.failedAuthVlanId = failedAuthVlanId;
            _resultValue.reAuthenticationInterval = reAuthenticationInterval;
            return _resultValue;
        }
    }
}
