// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplianceFirewallPortForwardingRulesItemRule {
    private List<String> allowedIps;
    private String lanIp;
    private String localPort;
    private String name;
    private String protocol;
    private String publicPort;
    private String uplink;

    private GetApplianceFirewallPortForwardingRulesItemRule() {}
    public List<String> allowedIps() {
        return this.allowedIps;
    }
    public String lanIp() {
        return this.lanIp;
    }
    public String localPort() {
        return this.localPort;
    }
    public String name() {
        return this.name;
    }
    public String protocol() {
        return this.protocol;
    }
    public String publicPort() {
        return this.publicPort;
    }
    public String uplink() {
        return this.uplink;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceFirewallPortForwardingRulesItemRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedIps;
        private String lanIp;
        private String localPort;
        private String name;
        private String protocol;
        private String publicPort;
        private String uplink;
        public Builder() {}
        public Builder(GetApplianceFirewallPortForwardingRulesItemRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIps = defaults.allowedIps;
    	      this.lanIp = defaults.lanIp;
    	      this.localPort = defaults.localPort;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.publicPort = defaults.publicPort;
    	      this.uplink = defaults.uplink;
        }

        @CustomType.Setter
        public Builder allowedIps(List<String> allowedIps) {
            if (allowedIps == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "allowedIps");
            }
            this.allowedIps = allowedIps;
            return this;
        }
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }
        @CustomType.Setter
        public Builder lanIp(String lanIp) {
            if (lanIp == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "lanIp");
            }
            this.lanIp = lanIp;
            return this;
        }
        @CustomType.Setter
        public Builder localPort(String localPort) {
            if (localPort == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "localPort");
            }
            this.localPort = localPort;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder publicPort(String publicPort) {
            if (publicPort == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "publicPort");
            }
            this.publicPort = publicPort;
            return this;
        }
        @CustomType.Setter
        public Builder uplink(String uplink) {
            if (uplink == null) {
              throw new MissingRequiredPropertyException("GetApplianceFirewallPortForwardingRulesItemRule", "uplink");
            }
            this.uplink = uplink;
            return this;
        }
        public GetApplianceFirewallPortForwardingRulesItemRule build() {
            final var _resultValue = new GetApplianceFirewallPortForwardingRulesItemRule();
            _resultValue.allowedIps = allowedIps;
            _resultValue.lanIp = lanIp;
            _resultValue.localPort = localPort;
            _resultValue.name = name;
            _resultValue.protocol = protocol;
            _resultValue.publicPort = publicPort;
            _resultValue.uplink = uplink;
            return _resultValue;
        }
    }
}
