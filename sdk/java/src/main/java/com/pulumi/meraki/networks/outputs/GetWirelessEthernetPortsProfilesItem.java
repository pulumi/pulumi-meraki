// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessEthernetPortsProfilesItemPort;
import com.pulumi.meraki.networks.outputs.GetWirelessEthernetPortsProfilesItemUsbPort;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWirelessEthernetPortsProfilesItem {
    /**
     * @return Is default profile
     * 
     */
    private Boolean isDefault;
    /**
     * @return AP port profile name
     * 
     */
    private String name;
    /**
     * @return Ports config
     * 
     */
    private List<GetWirelessEthernetPortsProfilesItemPort> ports;
    /**
     * @return AP port profile ID
     * 
     */
    private String profileId;
    /**
     * @return Usb ports config
     * 
     */
    private List<GetWirelessEthernetPortsProfilesItemUsbPort> usbPorts;

    private GetWirelessEthernetPortsProfilesItem() {}
    /**
     * @return Is default profile
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return AP port profile name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Ports config
     * 
     */
    public List<GetWirelessEthernetPortsProfilesItemPort> ports() {
        return this.ports;
    }
    /**
     * @return AP port profile ID
     * 
     */
    public String profileId() {
        return this.profileId;
    }
    /**
     * @return Usb ports config
     * 
     */
    public List<GetWirelessEthernetPortsProfilesItemUsbPort> usbPorts() {
        return this.usbPorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessEthernetPortsProfilesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isDefault;
        private String name;
        private List<GetWirelessEthernetPortsProfilesItemPort> ports;
        private String profileId;
        private List<GetWirelessEthernetPortsProfilesItemUsbPort> usbPorts;
        public Builder() {}
        public Builder(GetWirelessEthernetPortsProfilesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.profileId = defaults.profileId;
    	      this.usbPorts = defaults.usbPorts;
        }

        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetWirelessEthernetPortsProfilesItem", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWirelessEthernetPortsProfilesItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetWirelessEthernetPortsProfilesItemPort> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetWirelessEthernetPortsProfilesItem", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(GetWirelessEthernetPortsProfilesItemPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder profileId(String profileId) {
            if (profileId == null) {
              throw new MissingRequiredPropertyException("GetWirelessEthernetPortsProfilesItem", "profileId");
            }
            this.profileId = profileId;
            return this;
        }
        @CustomType.Setter
        public Builder usbPorts(List<GetWirelessEthernetPortsProfilesItemUsbPort> usbPorts) {
            if (usbPorts == null) {
              throw new MissingRequiredPropertyException("GetWirelessEthernetPortsProfilesItem", "usbPorts");
            }
            this.usbPorts = usbPorts;
            return this;
        }
        public Builder usbPorts(GetWirelessEthernetPortsProfilesItemUsbPort... usbPorts) {
            return usbPorts(List.of(usbPorts));
        }
        public GetWirelessEthernetPortsProfilesItem build() {
            final var _resultValue = new GetWirelessEthernetPortsProfilesItem();
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.ports = ports;
            _resultValue.profileId = profileId;
            _resultValue.usbPorts = usbPorts;
            return _resultValue;
        }
    }
}
