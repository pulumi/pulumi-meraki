// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.outputs.GetNetworksItem;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworksResult {
    /**
     * @return configTemplateId query parameter. An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * 
     */
    private @Nullable String configTemplateId;
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return isBoundToConfigTemplate query parameter. An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
     * 
     */
    private @Nullable Boolean isBoundToConfigTemplate;
    private GetNetworksItem item;
    /**
     * @return Array of ResponseOrganizationsGetOrganizationNetworks
     * 
     */
    private List<GetNetworksItem> items;
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    private @Nullable String networkId;
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    private @Nullable String organizationId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 100000. Default is 1000.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;
    /**
     * @return tags query parameter. An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return tagsFilterType query parameter. An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
     * 
     */
    private @Nullable String tagsFilterType;

    private GetNetworksResult() {}
    /**
     * @return configTemplateId query parameter. An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * 
     */
    public Optional<String> configTemplateId() {
        return Optional.ofNullable(this.configTemplateId);
    }
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return isBoundToConfigTemplate query parameter. An optional parameter to filter config template bound networks. If configTemplateId is set, this cannot be false.
     * 
     */
    public Optional<Boolean> isBoundToConfigTemplate() {
        return Optional.ofNullable(this.isBoundToConfigTemplate);
    }
    public GetNetworksItem item() {
        return this.item;
    }
    /**
     * @return Array of ResponseOrganizationsGetOrganizationNetworks
     * 
     */
    public List<GetNetworksItem> items() {
        return this.items;
    }
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 100000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }
    /**
     * @return tags query parameter. An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return tagsFilterType query parameter. An optional parameter of value &#39;withAnyTags&#39; or &#39;withAllTags&#39; to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, &#39;withAnyTags&#39; will be selected.
     * 
     */
    public Optional<String> tagsFilterType() {
        return Optional.ofNullable(this.tagsFilterType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworksResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configTemplateId;
        private @Nullable String endingBefore;
        private String id;
        private @Nullable Boolean isBoundToConfigTemplate;
        private GetNetworksItem item;
        private List<GetNetworksItem> items;
        private @Nullable String networkId;
        private @Nullable String organizationId;
        private @Nullable Integer perPage;
        private @Nullable String startingAfter;
        private @Nullable List<String> tags;
        private @Nullable String tagsFilterType;
        public Builder() {}
        public Builder(GetNetworksResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configTemplateId = defaults.configTemplateId;
    	      this.endingBefore = defaults.endingBefore;
    	      this.id = defaults.id;
    	      this.isBoundToConfigTemplate = defaults.isBoundToConfigTemplate;
    	      this.item = defaults.item;
    	      this.items = defaults.items;
    	      this.networkId = defaults.networkId;
    	      this.organizationId = defaults.organizationId;
    	      this.perPage = defaults.perPage;
    	      this.startingAfter = defaults.startingAfter;
    	      this.tags = defaults.tags;
    	      this.tagsFilterType = defaults.tagsFilterType;
        }

        @CustomType.Setter
        public Builder configTemplateId(@Nullable String configTemplateId) {

            this.configTemplateId = configTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworksResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isBoundToConfigTemplate(@Nullable Boolean isBoundToConfigTemplate) {

            this.isBoundToConfigTemplate = isBoundToConfigTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder item(GetNetworksItem item) {
            if (item == null) {
              throw new MissingRequiredPropertyException("GetNetworksResult", "item");
            }
            this.item = item;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetNetworksItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetNetworksResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetNetworksItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder networkId(@Nullable String networkId) {

            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(@Nullable String organizationId) {

            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tagsFilterType(@Nullable String tagsFilterType) {

            this.tagsFilterType = tagsFilterType;
            return this;
        }
        public GetNetworksResult build() {
            final var _resultValue = new GetNetworksResult();
            _resultValue.configTemplateId = configTemplateId;
            _resultValue.endingBefore = endingBefore;
            _resultValue.id = id;
            _resultValue.isBoundToConfigTemplate = isBoundToConfigTemplate;
            _resultValue.item = item;
            _resultValue.items = items;
            _resultValue.networkId = networkId;
            _resultValue.organizationId = organizationId;
            _resultValue.perPage = perPage;
            _resultValue.startingAfter = startingAfter;
            _resultValue.tags = tags;
            _resultValue.tagsFilterType = tagsFilterType;
            return _resultValue;
        }
    }
}
