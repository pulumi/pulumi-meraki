// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSmUsersPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSmUsersPlainArgs Empty = new GetSmUsersPlainArgs();

    /**
     * emails query parameter. Filter users by email(s).
     * 
     */
    @Import(name="emails")
    private @Nullable List<String> emails;

    /**
     * @return emails query parameter. Filter users by email(s).
     * 
     */
    public Optional<List<String>> emails() {
        return Optional.ofNullable(this.emails);
    }

    /**
     * ids query parameter. Filter users by id(s).
     * 
     */
    @Import(name="ids")
    private @Nullable List<String> ids;

    /**
     * @return ids query parameter. Filter users by id(s).
     * 
     */
    public Optional<List<String>> ids() {
        return Optional.ofNullable(this.ids);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private String networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     * 
     */
    @Import(name="scopes")
    private @Nullable List<String> scopes;

    /**
     * @return scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
     * 
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * usernames query parameter. Filter users by username(s).
     * 
     */
    @Import(name="usernames")
    private @Nullable List<String> usernames;

    /**
     * @return usernames query parameter. Filter users by username(s).
     * 
     */
    public Optional<List<String>> usernames() {
        return Optional.ofNullable(this.usernames);
    }

    private GetSmUsersPlainArgs() {}

    private GetSmUsersPlainArgs(GetSmUsersPlainArgs $) {
        this.emails = $.emails;
        this.ids = $.ids;
        this.networkId = $.networkId;
        this.scopes = $.scopes;
        this.usernames = $.usernames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSmUsersPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSmUsersPlainArgs $;

        public Builder() {
            $ = new GetSmUsersPlainArgs();
        }

        public Builder(GetSmUsersPlainArgs defaults) {
            $ = new GetSmUsersPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emails emails query parameter. Filter users by email(s).
         * 
         * @return builder
         * 
         */
        public Builder emails(@Nullable List<String> emails) {
            $.emails = emails;
            return this;
        }

        /**
         * @param emails emails query parameter. Filter users by email(s).
         * 
         * @return builder
         * 
         */
        public Builder emails(String... emails) {
            return emails(List.of(emails));
        }

        /**
         * @param ids ids query parameter. Filter users by id(s).
         * 
         * @return builder
         * 
         */
        public Builder ids(@Nullable List<String> ids) {
            $.ids = ids;
            return this;
        }

        /**
         * @param ids ids query parameter. Filter users by id(s).
         * 
         * @return builder
         * 
         */
        public Builder ids(String... ids) {
            return ids(List.of(ids));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param scopes scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable List<String> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes scope query parameter. Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param usernames usernames query parameter. Filter users by username(s).
         * 
         * @return builder
         * 
         */
        public Builder usernames(@Nullable List<String> usernames) {
            $.usernames = usernames;
            return this;
        }

        /**
         * @param usernames usernames query parameter. Filter users by username(s).
         * 
         * @return builder
         * 
         */
        public Builder usernames(String... usernames) {
            return usernames(List.of(usernames));
        }

        public GetSmUsersPlainArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetSmUsersPlainArgs", "networkId");
            }
            return $;
        }
    }

}
