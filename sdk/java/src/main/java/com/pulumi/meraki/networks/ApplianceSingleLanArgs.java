// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.ApplianceSingleLanIpv6Args;
import com.pulumi.meraki.networks.inputs.ApplianceSingleLanMandatoryDhcpArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceSingleLanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceSingleLanArgs Empty = new ApplianceSingleLanArgs();

    /**
     * The local IP of the appliance on the single LAN
     * 
     */
    @Import(name="applianceIp")
    private @Nullable Output<String> applianceIp;

    /**
     * @return The local IP of the appliance on the single LAN
     * 
     */
    public Optional<Output<String>> applianceIp() {
        return Optional.ofNullable(this.applianceIp);
    }

    /**
     * IPv6 configuration on the single LAN
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<ApplianceSingleLanIpv6Args> ipv6;

    /**
     * @return IPv6 configuration on the single LAN
     * 
     */
    public Optional<Output<ApplianceSingleLanIpv6Args>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won&#39;t be able to associate. Only available on firmware versions 17.0 and above
     * 
     */
    @Import(name="mandatoryDhcp")
    private @Nullable Output<ApplianceSingleLanMandatoryDhcpArgs> mandatoryDhcp;

    /**
     * @return Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won&#39;t be able to associate. Only available on firmware versions 17.0 and above
     * 
     */
    public Optional<Output<ApplianceSingleLanMandatoryDhcpArgs>> mandatoryDhcp() {
        return Optional.ofNullable(this.mandatoryDhcp);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The subnet of the single LAN
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return The subnet of the single LAN
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private ApplianceSingleLanArgs() {}

    private ApplianceSingleLanArgs(ApplianceSingleLanArgs $) {
        this.applianceIp = $.applianceIp;
        this.ipv6 = $.ipv6;
        this.mandatoryDhcp = $.mandatoryDhcp;
        this.networkId = $.networkId;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceSingleLanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceSingleLanArgs $;

        public Builder() {
            $ = new ApplianceSingleLanArgs();
        }

        public Builder(ApplianceSingleLanArgs defaults) {
            $ = new ApplianceSingleLanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applianceIp The local IP of the appliance on the single LAN
         * 
         * @return builder
         * 
         */
        public Builder applianceIp(@Nullable Output<String> applianceIp) {
            $.applianceIp = applianceIp;
            return this;
        }

        /**
         * @param applianceIp The local IP of the appliance on the single LAN
         * 
         * @return builder
         * 
         */
        public Builder applianceIp(String applianceIp) {
            return applianceIp(Output.of(applianceIp));
        }

        /**
         * @param ipv6 IPv6 configuration on the single LAN
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<ApplianceSingleLanIpv6Args> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 IPv6 configuration on the single LAN
         * 
         * @return builder
         * 
         */
        public Builder ipv6(ApplianceSingleLanIpv6Args ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param mandatoryDhcp Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won&#39;t be able to associate. Only available on firmware versions 17.0 and above
         * 
         * @return builder
         * 
         */
        public Builder mandatoryDhcp(@Nullable Output<ApplianceSingleLanMandatoryDhcpArgs> mandatoryDhcp) {
            $.mandatoryDhcp = mandatoryDhcp;
            return this;
        }

        /**
         * @param mandatoryDhcp Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won&#39;t be able to associate. Only available on firmware versions 17.0 and above
         * 
         * @return builder
         * 
         */
        public Builder mandatoryDhcp(ApplianceSingleLanMandatoryDhcpArgs mandatoryDhcp) {
            return mandatoryDhcp(Output.of(mandatoryDhcp));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param subnet The subnet of the single LAN
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The subnet of the single LAN
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public ApplianceSingleLanArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("ApplianceSingleLanArgs", "networkId");
            }
            return $;
        }
    }

}
