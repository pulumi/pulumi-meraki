// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPoliciesBonjourForwardingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPoliciesBonjourForwardingRuleArgs Empty = new GroupPoliciesBonjourForwardingRuleArgs();

    /**
     * A description for your Bonjour forwarding rule. Optional.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for your Bonjour forwarding rule. Optional.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * The ID of the service VLAN. Required.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<String> vlanId;

    /**
     * @return The ID of the service VLAN. Required.
     * 
     */
    public Optional<Output<String>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    private GroupPoliciesBonjourForwardingRuleArgs() {}

    private GroupPoliciesBonjourForwardingRuleArgs(GroupPoliciesBonjourForwardingRuleArgs $) {
        this.description = $.description;
        this.services = $.services;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPoliciesBonjourForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPoliciesBonjourForwardingRuleArgs $;

        public Builder() {
            $ = new GroupPoliciesBonjourForwardingRuleArgs();
        }

        public Builder(GroupPoliciesBonjourForwardingRuleArgs defaults) {
            $ = new GroupPoliciesBonjourForwardingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for your Bonjour forwarding rule. Optional.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for your Bonjour forwarding rule. Optional.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param services A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services A list of Bonjour services. At least one service must be specified. Available services are &#39;All Services&#39;, &#39;AirPlay&#39;, &#39;AFP&#39;, &#39;BitTorrent&#39;, &#39;FTP&#39;, &#39;iChat&#39;, &#39;iTunes&#39;, &#39;Printers&#39;, &#39;Samba&#39;, &#39;Scanners&#39; and &#39;SSH&#39;
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param vlanId The ID of the service VLAN. Required.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId The ID of the service VLAN. Required.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public GroupPoliciesBonjourForwardingRuleArgs build() {
            return $;
        }
    }

}
