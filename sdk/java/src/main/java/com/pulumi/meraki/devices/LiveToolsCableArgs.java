// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.inputs.LiveToolsCableCallbackArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveToolsCableArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveToolsCableArgs Empty = new LiveToolsCableArgs();

    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    @Import(name="callback")
    private @Nullable Output<LiveToolsCableCallbackArgs> callback;

    /**
     * @return Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    public Optional<Output<LiveToolsCableCallbackArgs>> callback() {
        return Optional.ofNullable(this.callback);
    }

    /**
     * A list of ports for which to perform the cable test.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<String>> ports;

    /**
     * @return A list of ports for which to perform the cable test.
     * 
     */
    public Optional<Output<List<String>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial", required=true)
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }

    private LiveToolsCableArgs() {}

    private LiveToolsCableArgs(LiveToolsCableArgs $) {
        this.callback = $.callback;
        this.ports = $.ports;
        this.serial = $.serial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveToolsCableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveToolsCableArgs $;

        public Builder() {
            $ = new LiveToolsCableArgs();
        }

        public Builder(LiveToolsCableArgs defaults) {
            $ = new LiveToolsCableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param callback Details for the callback. Please include either an httpServerId OR url and sharedSecret
         * 
         * @return builder
         * 
         */
        public Builder callback(@Nullable Output<LiveToolsCableCallbackArgs> callback) {
            $.callback = callback;
            return this;
        }

        /**
         * @param callback Details for the callback. Please include either an httpServerId OR url and sharedSecret
         * 
         * @return builder
         * 
         */
        public Builder callback(LiveToolsCableCallbackArgs callback) {
            return callback(Output.of(callback));
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<String>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<String> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports A list of ports for which to perform the cable test.
         * 
         * @return builder
         * 
         */
        public Builder ports(String... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public LiveToolsCableArgs build() {
            if ($.serial == null) {
                throw new MissingRequiredPropertyException("LiveToolsCableArgs", "serial");
            }
            return $;
        }
    }

}
