// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.devices.LiveToolsCableArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsCableState;
import com.pulumi.meraki.devices.outputs.LiveToolsCableCallback;
import com.pulumi.meraki.devices.outputs.LiveToolsCableRequest;
import com.pulumi.meraki.devices.outputs.LiveToolsCableResult;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

@ResourceType(type="meraki:devices/liveToolsCable:LiveToolsCable")
public class LiveToolsCable extends com.pulumi.resources.CustomResource {
    /**
     * Id of the cable test request. Used to check the status of the request.
     * 
     */
    @Export(name="cableTestId", refs={String.class}, tree="[0]")
    private Output<String> cableTestId;

    /**
     * @return Id of the cable test request. Used to check the status of the request.
     * 
     */
    public Output<String> cableTestId() {
        return this.cableTestId;
    }
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    @Export(name="callback", refs={LiveToolsCableCallback.class}, tree="[0]")
    private Output<LiveToolsCableCallback> callback;

    /**
     * @return Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    public Output<LiveToolsCableCallback> callback() {
        return this.callback;
    }
    /**
     * An error message for a failed execution
     * 
     */
    @Export(name="error", refs={String.class}, tree="[0]")
    private Output<String> error;

    /**
     * @return An error message for a failed execution
     * 
     */
    public Output<String> error() {
        return this.error;
    }
    /**
     * A list of ports for which to perform the cable test.
     * 
     */
    @Export(name="ports", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> ports;

    /**
     * @return A list of ports for which to perform the cable test.
     * 
     */
    public Output<List<String>> ports() {
        return this.ports;
    }
    /**
     * Cable test request parameters
     * 
     */
    @Export(name="request", refs={LiveToolsCableRequest.class}, tree="[0]")
    private Output<LiveToolsCableRequest> request;

    /**
     * @return Cable test request parameters
     * 
     */
    public Output<LiveToolsCableRequest> request() {
        return this.request;
    }
    /**
     * Results of the cable test request, one for each requested port.
     * 
     */
    @Export(name="results", refs={List.class,LiveToolsCableResult.class}, tree="[0,1]")
    private Output<List<LiveToolsCableResult>> results;

    /**
     * @return Results of the cable test request, one for each requested port.
     * 
     */
    public Output<List<LiveToolsCableResult>> results() {
        return this.results;
    }
    /**
     * serial path parameter.
     * 
     */
    @Export(name="serial", refs={String.class}, tree="[0]")
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }
    /**
     * Status of the cable test request.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the cable test request.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * GET this url to check the status of your cable test request.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return GET this url to check the status of your cable test request.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LiveToolsCable(java.lang.String name) {
        this(name, LiveToolsCableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LiveToolsCable(java.lang.String name, LiveToolsCableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LiveToolsCable(java.lang.String name, LiveToolsCableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsCable:LiveToolsCable", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LiveToolsCable(java.lang.String name, Output<java.lang.String> id, @Nullable LiveToolsCableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsCable:LiveToolsCable", name, state, makeResourceOptions(options, id), false);
    }

    private static LiveToolsCableArgs makeArgs(LiveToolsCableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LiveToolsCableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-meraki")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LiveToolsCable get(java.lang.String name, Output<java.lang.String> id, @Nullable LiveToolsCableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LiveToolsCable(name, id, state, options);
    }
}
