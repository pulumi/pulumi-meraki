// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdApparentPower;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdCurrent;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdDoor;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdFrequency;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdHumidity;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdIndoorAirQuality;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdNoise;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdPm25;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdPowerFactor;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdRealPower;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdTemperature;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdTvoc;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdUpstreamPower;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdVoltage;
import com.pulumi.meraki.networks.outputs.GetSensorAlertsProfilesItemConditionThresholdWater;
import java.util.Objects;

@CustomType
public final class GetSensorAlertsProfilesItemConditionThreshold {
    /**
     * @return Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdApparentPower apparentPower;
    /**
     * @return Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdCurrent current;
    /**
     * @return Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdDoor door;
    /**
     * @return Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdFrequency frequency;
    /**
     * @return Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdHumidity humidity;
    /**
     * @return Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdIndoorAirQuality indoorAirQuality;
    /**
     * @return Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdNoise noise;
    /**
     * @return PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdPm25 pm25;
    /**
     * @return Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdPowerFactor powerFactor;
    /**
     * @return Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdRealPower realPower;
    /**
     * @return Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdTemperature temperature;
    /**
     * @return TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdTvoc tvoc;
    /**
     * @return Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdUpstreamPower upstreamPower;
    /**
     * @return Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdVoltage voltage;
    /**
     * @return Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    private GetSensorAlertsProfilesItemConditionThresholdWater water;

    private GetSensorAlertsProfilesItemConditionThreshold() {}
    /**
     * @return Apparent power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdApparentPower apparentPower() {
        return this.apparentPower;
    }
    /**
     * @return Electrical current threshold. &#39;level&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdCurrent current() {
        return this.current;
    }
    /**
     * @return Door open threshold. &#39;open&#39; must be provided and set to true.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdDoor door() {
        return this.door;
    }
    /**
     * @return Electrical frequency threshold. &#39;level&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdFrequency frequency() {
        return this.frequency;
    }
    /**
     * @return Humidity threshold. One of &#39;relativePercentage&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdHumidity humidity() {
        return this.humidity;
    }
    /**
     * @return Indoor air quality score threshold. One of &#39;score&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdIndoorAirQuality indoorAirQuality() {
        return this.indoorAirQuality;
    }
    /**
     * @return Noise threshold. &#39;ambient&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdNoise noise() {
        return this.noise;
    }
    /**
     * @return PM2.5 concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdPm25 pm25() {
        return this.pm25;
    }
    /**
     * @return Power factor threshold. &#39;percentage&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdPowerFactor powerFactor() {
        return this.powerFactor;
    }
    /**
     * @return Real power threshold. &#39;draw&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdRealPower realPower() {
        return this.realPower;
    }
    /**
     * @return Temperature threshold. One of &#39;celsius&#39;, &#39;fahrenheit&#39;, or &#39;quality&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdTemperature temperature() {
        return this.temperature;
    }
    /**
     * @return TVOC concentration threshold. One of &#39;concentration&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdTvoc tvoc() {
        return this.tvoc;
    }
    /**
     * @return Upstream power threshold. &#39;outageDetected&#39; must be provided and set to true.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdUpstreamPower upstreamPower() {
        return this.upstreamPower;
    }
    /**
     * @return Voltage threshold. &#39;level&#39; must be provided.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdVoltage voltage() {
        return this.voltage;
    }
    /**
     * @return Water detection threshold. &#39;present&#39; must be provided and set to true.
     * 
     */
    public GetSensorAlertsProfilesItemConditionThresholdWater water() {
        return this.water;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorAlertsProfilesItemConditionThreshold defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorAlertsProfilesItemConditionThresholdApparentPower apparentPower;
        private GetSensorAlertsProfilesItemConditionThresholdCurrent current;
        private GetSensorAlertsProfilesItemConditionThresholdDoor door;
        private GetSensorAlertsProfilesItemConditionThresholdFrequency frequency;
        private GetSensorAlertsProfilesItemConditionThresholdHumidity humidity;
        private GetSensorAlertsProfilesItemConditionThresholdIndoorAirQuality indoorAirQuality;
        private GetSensorAlertsProfilesItemConditionThresholdNoise noise;
        private GetSensorAlertsProfilesItemConditionThresholdPm25 pm25;
        private GetSensorAlertsProfilesItemConditionThresholdPowerFactor powerFactor;
        private GetSensorAlertsProfilesItemConditionThresholdRealPower realPower;
        private GetSensorAlertsProfilesItemConditionThresholdTemperature temperature;
        private GetSensorAlertsProfilesItemConditionThresholdTvoc tvoc;
        private GetSensorAlertsProfilesItemConditionThresholdUpstreamPower upstreamPower;
        private GetSensorAlertsProfilesItemConditionThresholdVoltage voltage;
        private GetSensorAlertsProfilesItemConditionThresholdWater water;
        public Builder() {}
        public Builder(GetSensorAlertsProfilesItemConditionThreshold defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apparentPower = defaults.apparentPower;
    	      this.current = defaults.current;
    	      this.door = defaults.door;
    	      this.frequency = defaults.frequency;
    	      this.humidity = defaults.humidity;
    	      this.indoorAirQuality = defaults.indoorAirQuality;
    	      this.noise = defaults.noise;
    	      this.pm25 = defaults.pm25;
    	      this.powerFactor = defaults.powerFactor;
    	      this.realPower = defaults.realPower;
    	      this.temperature = defaults.temperature;
    	      this.tvoc = defaults.tvoc;
    	      this.upstreamPower = defaults.upstreamPower;
    	      this.voltage = defaults.voltage;
    	      this.water = defaults.water;
        }

        @CustomType.Setter
        public Builder apparentPower(GetSensorAlertsProfilesItemConditionThresholdApparentPower apparentPower) {
            if (apparentPower == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "apparentPower");
            }
            this.apparentPower = apparentPower;
            return this;
        }
        @CustomType.Setter
        public Builder current(GetSensorAlertsProfilesItemConditionThresholdCurrent current) {
            if (current == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "current");
            }
            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder door(GetSensorAlertsProfilesItemConditionThresholdDoor door) {
            if (door == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "door");
            }
            this.door = door;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(GetSensorAlertsProfilesItemConditionThresholdFrequency frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder humidity(GetSensorAlertsProfilesItemConditionThresholdHumidity humidity) {
            if (humidity == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "humidity");
            }
            this.humidity = humidity;
            return this;
        }
        @CustomType.Setter
        public Builder indoorAirQuality(GetSensorAlertsProfilesItemConditionThresholdIndoorAirQuality indoorAirQuality) {
            if (indoorAirQuality == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "indoorAirQuality");
            }
            this.indoorAirQuality = indoorAirQuality;
            return this;
        }
        @CustomType.Setter
        public Builder noise(GetSensorAlertsProfilesItemConditionThresholdNoise noise) {
            if (noise == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "noise");
            }
            this.noise = noise;
            return this;
        }
        @CustomType.Setter
        public Builder pm25(GetSensorAlertsProfilesItemConditionThresholdPm25 pm25) {
            if (pm25 == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "pm25");
            }
            this.pm25 = pm25;
            return this;
        }
        @CustomType.Setter
        public Builder powerFactor(GetSensorAlertsProfilesItemConditionThresholdPowerFactor powerFactor) {
            if (powerFactor == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "powerFactor");
            }
            this.powerFactor = powerFactor;
            return this;
        }
        @CustomType.Setter
        public Builder realPower(GetSensorAlertsProfilesItemConditionThresholdRealPower realPower) {
            if (realPower == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "realPower");
            }
            this.realPower = realPower;
            return this;
        }
        @CustomType.Setter
        public Builder temperature(GetSensorAlertsProfilesItemConditionThresholdTemperature temperature) {
            if (temperature == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "temperature");
            }
            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder tvoc(GetSensorAlertsProfilesItemConditionThresholdTvoc tvoc) {
            if (tvoc == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "tvoc");
            }
            this.tvoc = tvoc;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamPower(GetSensorAlertsProfilesItemConditionThresholdUpstreamPower upstreamPower) {
            if (upstreamPower == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "upstreamPower");
            }
            this.upstreamPower = upstreamPower;
            return this;
        }
        @CustomType.Setter
        public Builder voltage(GetSensorAlertsProfilesItemConditionThresholdVoltage voltage) {
            if (voltage == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "voltage");
            }
            this.voltage = voltage;
            return this;
        }
        @CustomType.Setter
        public Builder water(GetSensorAlertsProfilesItemConditionThresholdWater water) {
            if (water == null) {
              throw new MissingRequiredPropertyException("GetSensorAlertsProfilesItemConditionThreshold", "water");
            }
            this.water = water;
            return this;
        }
        public GetSensorAlertsProfilesItemConditionThreshold build() {
            final var _resultValue = new GetSensorAlertsProfilesItemConditionThreshold();
            _resultValue.apparentPower = apparentPower;
            _resultValue.current = current;
            _resultValue.door = door;
            _resultValue.frequency = frequency;
            _resultValue.humidity = humidity;
            _resultValue.indoorAirQuality = indoorAirQuality;
            _resultValue.noise = noise;
            _resultValue.pm25 = pm25;
            _resultValue.powerFactor = powerFactor;
            _resultValue.realPower = realPower;
            _resultValue.temperature = temperature;
            _resultValue.tvoc = tvoc;
            _resultValue.upstreamPower = upstreamPower;
            _resultValue.voltage = voltage;
            _resultValue.water = water;
            return _resultValue;
        }
    }
}
