// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MqttBrokersItemSecurityTlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MqttBrokersItemSecurityTlsArgs Empty = new MqttBrokersItemSecurityTlsArgs();

    /**
     * Indicates whether the CA certificate is set
     * 
     */
    @Import(name="hasCaCertificate")
    private @Nullable Output<Boolean> hasCaCertificate;

    /**
     * @return Indicates whether the CA certificate is set
     * 
     */
    public Optional<Output<Boolean>> hasCaCertificate() {
        return Optional.ofNullable(this.hasCaCertificate);
    }

    /**
     * Whether the TLS hostname verification is enabled for the MQTT broker.
     * 
     */
    @Import(name="verifyHostnames")
    private @Nullable Output<Boolean> verifyHostnames;

    /**
     * @return Whether the TLS hostname verification is enabled for the MQTT broker.
     * 
     */
    public Optional<Output<Boolean>> verifyHostnames() {
        return Optional.ofNullable(this.verifyHostnames);
    }

    private MqttBrokersItemSecurityTlsArgs() {}

    private MqttBrokersItemSecurityTlsArgs(MqttBrokersItemSecurityTlsArgs $) {
        this.hasCaCertificate = $.hasCaCertificate;
        this.verifyHostnames = $.verifyHostnames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MqttBrokersItemSecurityTlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MqttBrokersItemSecurityTlsArgs $;

        public Builder() {
            $ = new MqttBrokersItemSecurityTlsArgs();
        }

        public Builder(MqttBrokersItemSecurityTlsArgs defaults) {
            $ = new MqttBrokersItemSecurityTlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hasCaCertificate Indicates whether the CA certificate is set
         * 
         * @return builder
         * 
         */
        public Builder hasCaCertificate(@Nullable Output<Boolean> hasCaCertificate) {
            $.hasCaCertificate = hasCaCertificate;
            return this;
        }

        /**
         * @param hasCaCertificate Indicates whether the CA certificate is set
         * 
         * @return builder
         * 
         */
        public Builder hasCaCertificate(Boolean hasCaCertificate) {
            return hasCaCertificate(Output.of(hasCaCertificate));
        }

        /**
         * @param verifyHostnames Whether the TLS hostname verification is enabled for the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder verifyHostnames(@Nullable Output<Boolean> verifyHostnames) {
            $.verifyHostnames = verifyHostnames;
            return this;
        }

        /**
         * @param verifyHostnames Whether the TLS hostname verification is enabled for the MQTT broker.
         * 
         * @return builder
         * 
         */
        public Builder verifyHostnames(Boolean verifyHostnames) {
            return verifyHostnames(Output.of(verifyHostnames));
        }

        public MqttBrokersItemSecurityTlsArgs build() {
            return $;
        }
    }

}
