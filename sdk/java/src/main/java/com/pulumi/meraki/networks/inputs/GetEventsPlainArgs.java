// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEventsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEventsPlainArgs Empty = new GetEventsPlainArgs();

    /**
     * clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    @Import(name="clientIp")
    private @Nullable String clientIp;

    /**
     * @return clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    public Optional<String> clientIp() {
        return Optional.ofNullable(this.clientIp);
    }

    /**
     * clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    @Import(name="clientMac")
    private @Nullable String clientMac;

    /**
     * @return clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    public Optional<String> clientMac() {
        return Optional.ofNullable(this.clientMac);
    }

    /**
     * clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    @Import(name="clientName")
    private @Nullable String clientName;

    /**
     * @return clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    /**
     * deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceMac")
    private @Nullable String deviceMac;

    /**
     * @return deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceMac() {
        return Optional.ofNullable(this.deviceMac);
    }

    /**
     * deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceName")
    private @Nullable String deviceName;

    /**
     * @return deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    @Import(name="deviceSerial")
    private @Nullable String deviceSerial;

    /**
     * @return deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable String endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    @Import(name="excludedEventTypes")
    private @Nullable List<String> excludedEventTypes;

    /**
     * @return excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    public Optional<List<String>> excludedEventTypes() {
        return Optional.ofNullable(this.excludedEventTypes);
    }

    /**
     * includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    @Import(name="includedEventTypes")
    private @Nullable List<String> includedEventTypes;

    /**
     * @return includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    public Optional<List<String>> includedEventTypes() {
        return Optional.ofNullable(this.includedEventTypes);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private String networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    @Import(name="perPage")
    private @Nullable Integer perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    @Import(name="productType")
    private @Nullable String productType;

    /**
     * @return productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    public Optional<String> productType() {
        return Optional.ofNullable(this.productType);
    }

    /**
     * smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    @Import(name="smDeviceMac")
    private @Nullable String smDeviceMac;

    /**
     * @return smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<String> smDeviceMac() {
        return Optional.ofNullable(this.smDeviceMac);
    }

    /**
     * smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    @Import(name="smDeviceName")
    private @Nullable String smDeviceName;

    /**
     * @return smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<String> smDeviceName() {
        return Optional.ofNullable(this.smDeviceName);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable String startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    private GetEventsPlainArgs() {}

    private GetEventsPlainArgs(GetEventsPlainArgs $) {
        this.clientIp = $.clientIp;
        this.clientMac = $.clientMac;
        this.clientName = $.clientName;
        this.deviceMac = $.deviceMac;
        this.deviceName = $.deviceName;
        this.deviceSerial = $.deviceSerial;
        this.endingBefore = $.endingBefore;
        this.excludedEventTypes = $.excludedEventTypes;
        this.includedEventTypes = $.includedEventTypes;
        this.networkId = $.networkId;
        this.perPage = $.perPage;
        this.productType = $.productType;
        this.smDeviceMac = $.smDeviceMac;
        this.smDeviceName = $.smDeviceName;
        this.startingAfter = $.startingAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEventsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEventsPlainArgs $;

        public Builder() {
            $ = new GetEventsPlainArgs();
        }

        public Builder(GetEventsPlainArgs defaults) {
            $ = new GetEventsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIp clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
         * 
         * @return builder
         * 
         */
        public Builder clientIp(@Nullable String clientIp) {
            $.clientIp = clientIp;
            return this;
        }

        /**
         * @param clientMac clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
         * 
         * @return builder
         * 
         */
        public Builder clientMac(@Nullable String clientMac) {
            $.clientMac = clientMac;
            return this;
        }

        /**
         * @param clientName clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder clientName(@Nullable String clientName) {
            $.clientName = clientName;
            return this;
        }

        /**
         * @param deviceMac deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceMac(@Nullable String deviceMac) {
            $.deviceMac = deviceMac;
            return this;
        }

        /**
         * @param deviceName deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable String deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceSerial deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(@Nullable String deviceSerial) {
            $.deviceSerial = deviceSerial;
            return this;
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable String endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param excludedEventTypes excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
         * 
         * @return builder
         * 
         */
        public Builder excludedEventTypes(@Nullable List<String> excludedEventTypes) {
            $.excludedEventTypes = excludedEventTypes;
            return this;
        }

        /**
         * @param excludedEventTypes excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
         * 
         * @return builder
         * 
         */
        public Builder excludedEventTypes(String... excludedEventTypes) {
            return excludedEventTypes(List.of(excludedEventTypes));
        }

        /**
         * @param includedEventTypes includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(@Nullable List<String> includedEventTypes) {
            $.includedEventTypes = includedEventTypes;
            return this;
        }

        /**
         * @param includedEventTypes includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(String... includedEventTypes) {
            return includedEventTypes(List.of(includedEventTypes));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Integer perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param productType productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
         * 
         * @return builder
         * 
         */
        public Builder productType(@Nullable String productType) {
            $.productType = productType;
            return this;
        }

        /**
         * @param smDeviceMac smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceMac(@Nullable String smDeviceMac) {
            $.smDeviceMac = smDeviceMac;
            return this;
        }

        /**
         * @param smDeviceName smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
         * 
         * @return builder
         * 
         */
        public Builder smDeviceName(@Nullable String smDeviceName) {
            $.smDeviceName = smDeviceName;
            return this;
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable String startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        public GetEventsPlainArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetEventsPlainArgs", "networkId");
            }
            return $;
        }
    }

}
