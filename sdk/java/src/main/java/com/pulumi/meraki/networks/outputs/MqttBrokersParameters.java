// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.networks.outputs.MqttBrokersParametersAuthentication;
import com.pulumi.meraki.networks.outputs.MqttBrokersParametersSecurity;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MqttBrokersParameters {
    /**
     * @return Authentication settings of the MQTT broker
     * 
     */
    private @Nullable MqttBrokersParametersAuthentication authentication;
    /**
     * @return Host name/IP address where the MQTT broker runs.
     * 
     */
    private @Nullable String host;
    /**
     * @return Name of the MQTT broker.
     * 
     */
    private @Nullable String name;
    /**
     * @return Host port though which the MQTT broker can be reached.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Security settings of the MQTT broker.
     * 
     */
    private @Nullable MqttBrokersParametersSecurity security;

    private MqttBrokersParameters() {}
    /**
     * @return Authentication settings of the MQTT broker
     * 
     */
    public Optional<MqttBrokersParametersAuthentication> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return Host name/IP address where the MQTT broker runs.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Name of the MQTT broker.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Host port though which the MQTT broker can be reached.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Security settings of the MQTT broker.
     * 
     */
    public Optional<MqttBrokersParametersSecurity> security() {
        return Optional.ofNullable(this.security);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MqttBrokersParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable MqttBrokersParametersAuthentication authentication;
        private @Nullable String host;
        private @Nullable String name;
        private @Nullable Integer port;
        private @Nullable MqttBrokersParametersSecurity security;
        public Builder() {}
        public Builder(MqttBrokersParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.host = defaults.host;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.security = defaults.security;
        }

        @CustomType.Setter
        public Builder authentication(@Nullable MqttBrokersParametersAuthentication authentication) {

            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder security(@Nullable MqttBrokersParametersSecurity security) {

            this.security = security;
            return this;
        }
        public MqttBrokersParameters build() {
            final var _resultValue = new MqttBrokersParameters();
            _resultValue.authentication = authentication;
            _resultValue.host = host;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.security = security;
            return _resultValue;
        }
    }
}
