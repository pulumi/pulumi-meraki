// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.ClientsProvisionParametersClientArgs;
import com.pulumi.meraki.networks.inputs.ClientsProvisionParametersPoliciesBySecurityApplianceArgs;
import com.pulumi.meraki.networks.inputs.ClientsProvisionParametersPoliciesBySsidArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientsProvisionParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientsProvisionParametersArgs Empty = new ClientsProvisionParametersArgs();

    /**
     * The array of clients to provision
     * 
     */
    @Import(name="clients")
    private @Nullable Output<List<ClientsProvisionParametersClientArgs>> clients;

    /**
     * @return The array of clients to provision
     * 
     */
    public Optional<Output<List<ClientsProvisionParametersClientArgs>>> clients() {
        return Optional.ofNullable(this.clients);
    }

    /**
     * The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
     * 
     */
    @Import(name="devicePolicy")
    private @Nullable Output<String> devicePolicy;

    /**
     * @return The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
     * 
     */
    public Optional<Output<String>> devicePolicy() {
        return Optional.ofNullable(this.devicePolicy);
    }

    /**
     * The ID of the desired group policy to apply to the client. Required if &#39;devicePolicy&#39; is set to &#34;Group policy&#34;. Otherwise this is ignored.
     * 
     */
    @Import(name="groupPolicyId")
    private @Nullable Output<String> groupPolicyId;

    /**
     * @return The ID of the desired group policy to apply to the client. Required if &#39;devicePolicy&#39; is set to &#34;Group policy&#34;. Otherwise this is ignored.
     * 
     */
    public Optional<Output<String>> groupPolicyId() {
        return Optional.ofNullable(this.groupPolicyId);
    }

    /**
     * An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
     * 
     */
    @Import(name="policiesBySecurityAppliance")
    private @Nullable Output<ClientsProvisionParametersPoliciesBySecurityApplianceArgs> policiesBySecurityAppliance;

    /**
     * @return An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
     * 
     */
    public Optional<Output<ClientsProvisionParametersPoliciesBySecurityApplianceArgs>> policiesBySecurityAppliance() {
        return Optional.ofNullable(this.policiesBySecurityAppliance);
    }

    /**
     * An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client&#39;s policy
     * 
     */
    @Import(name="policiesBySsid")
    private @Nullable Output<ClientsProvisionParametersPoliciesBySsidArgs> policiesBySsid;

    /**
     * @return An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client&#39;s policy
     * 
     */
    public Optional<Output<ClientsProvisionParametersPoliciesBySsidArgs>> policiesBySsid() {
        return Optional.ofNullable(this.policiesBySsid);
    }

    private ClientsProvisionParametersArgs() {}

    private ClientsProvisionParametersArgs(ClientsProvisionParametersArgs $) {
        this.clients = $.clients;
        this.devicePolicy = $.devicePolicy;
        this.groupPolicyId = $.groupPolicyId;
        this.policiesBySecurityAppliance = $.policiesBySecurityAppliance;
        this.policiesBySsid = $.policiesBySsid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientsProvisionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientsProvisionParametersArgs $;

        public Builder() {
            $ = new ClientsProvisionParametersArgs();
        }

        public Builder(ClientsProvisionParametersArgs defaults) {
            $ = new ClientsProvisionParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clients The array of clients to provision
         * 
         * @return builder
         * 
         */
        public Builder clients(@Nullable Output<List<ClientsProvisionParametersClientArgs>> clients) {
            $.clients = clients;
            return this;
        }

        /**
         * @param clients The array of clients to provision
         * 
         * @return builder
         * 
         */
        public Builder clients(List<ClientsProvisionParametersClientArgs> clients) {
            return clients(Output.of(clients));
        }

        /**
         * @param clients The array of clients to provision
         * 
         * @return builder
         * 
         */
        public Builder clients(ClientsProvisionParametersClientArgs... clients) {
            return clients(List.of(clients));
        }

        /**
         * @param devicePolicy The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
         * 
         * @return builder
         * 
         */
        public Builder devicePolicy(@Nullable Output<String> devicePolicy) {
            $.devicePolicy = devicePolicy;
            return this;
        }

        /**
         * @param devicePolicy The policy to apply to the specified client. Can be &#39;Group policy&#39;, &#39;Allowed&#39;, &#39;Blocked&#39;, &#39;Per connection&#39; or &#39;Normal&#39;. Required.
         * 
         * @return builder
         * 
         */
        public Builder devicePolicy(String devicePolicy) {
            return devicePolicy(Output.of(devicePolicy));
        }

        /**
         * @param groupPolicyId The ID of the desired group policy to apply to the client. Required if &#39;devicePolicy&#39; is set to &#34;Group policy&#34;. Otherwise this is ignored.
         * 
         * @return builder
         * 
         */
        public Builder groupPolicyId(@Nullable Output<String> groupPolicyId) {
            $.groupPolicyId = groupPolicyId;
            return this;
        }

        /**
         * @param groupPolicyId The ID of the desired group policy to apply to the client. Required if &#39;devicePolicy&#39; is set to &#34;Group policy&#34;. Otherwise this is ignored.
         * 
         * @return builder
         * 
         */
        public Builder groupPolicyId(String groupPolicyId) {
            return groupPolicyId(Output.of(groupPolicyId));
        }

        /**
         * @param policiesBySecurityAppliance An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
         * 
         * @return builder
         * 
         */
        public Builder policiesBySecurityAppliance(@Nullable Output<ClientsProvisionParametersPoliciesBySecurityApplianceArgs> policiesBySecurityAppliance) {
            $.policiesBySecurityAppliance = policiesBySecurityAppliance;
            return this;
        }

        /**
         * @param policiesBySecurityAppliance An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
         * 
         * @return builder
         * 
         */
        public Builder policiesBySecurityAppliance(ClientsProvisionParametersPoliciesBySecurityApplianceArgs policiesBySecurityAppliance) {
            return policiesBySecurityAppliance(Output.of(policiesBySecurityAppliance));
        }

        /**
         * @param policiesBySsid An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client&#39;s policy
         * 
         * @return builder
         * 
         */
        public Builder policiesBySsid(@Nullable Output<ClientsProvisionParametersPoliciesBySsidArgs> policiesBySsid) {
            $.policiesBySsid = policiesBySsid;
            return this;
        }

        /**
         * @param policiesBySsid An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client&#39;s policy
         * 
         * @return builder
         * 
         */
        public Builder policiesBySsid(ClientsProvisionParametersPoliciesBySsidArgs policiesBySsid) {
            return policiesBySsid(Output.of(policiesBySsid));
        }

        public ClientsProvisionParametersArgs build() {
            return $;
        }
    }

}
