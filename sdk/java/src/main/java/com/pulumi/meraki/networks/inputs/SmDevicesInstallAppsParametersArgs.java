// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SmDevicesInstallAppsParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final SmDevicesInstallAppsParametersArgs Empty = new SmDevicesInstallAppsParametersArgs();

    /**
     * ids of applications to be installed
     * 
     */
    @Import(name="appIds")
    private @Nullable Output<List<String>> appIds;

    /**
     * @return ids of applications to be installed
     * 
     */
    public Optional<Output<List<String>>> appIds() {
        return Optional.ofNullable(this.appIds);
    }

    /**
     * By default, installation of an app which is believed to already be present on the device will be skipped. If you&#39;d like to force the installation of the app, set this parameter to true.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return By default, installation of an app which is believed to already be present on the device will be skipped. If you&#39;d like to force the installation of the app, set this parameter to true.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    private SmDevicesInstallAppsParametersArgs() {}

    private SmDevicesInstallAppsParametersArgs(SmDevicesInstallAppsParametersArgs $) {
        this.appIds = $.appIds;
        this.force = $.force;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SmDevicesInstallAppsParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SmDevicesInstallAppsParametersArgs $;

        public Builder() {
            $ = new SmDevicesInstallAppsParametersArgs();
        }

        public Builder(SmDevicesInstallAppsParametersArgs defaults) {
            $ = new SmDevicesInstallAppsParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appIds ids of applications to be installed
         * 
         * @return builder
         * 
         */
        public Builder appIds(@Nullable Output<List<String>> appIds) {
            $.appIds = appIds;
            return this;
        }

        /**
         * @param appIds ids of applications to be installed
         * 
         * @return builder
         * 
         */
        public Builder appIds(List<String> appIds) {
            return appIds(Output.of(appIds));
        }

        /**
         * @param appIds ids of applications to be installed
         * 
         * @return builder
         * 
         */
        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }

        /**
         * @param force By default, installation of an app which is believed to already be present on the device will be skipped. If you&#39;d like to force the installation of the app, set this parameter to true.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force By default, installation of an app which is believed to already be present on the device will be skipped. If you&#39;d like to force the installation of the app, set this parameter to true.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        public SmDevicesInstallAppsParametersArgs build() {
            return $;
        }
    }

}
