// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.outputs.GetLiveToolsThroughputTestItem;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLiveToolsThroughputTestResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private GetLiveToolsThroughputTestItem item;
    /**
     * @return serial path parameter.
     * 
     */
    private String serial;
    /**
     * @return throughputTestId path parameter. Throughput test ID
     * 
     */
    private String throughputTestId;

    private GetLiveToolsThroughputTestResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public GetLiveToolsThroughputTestItem item() {
        return this.item;
    }
    /**
     * @return serial path parameter.
     * 
     */
    public String serial() {
        return this.serial;
    }
    /**
     * @return throughputTestId path parameter. Throughput test ID
     * 
     */
    public String throughputTestId() {
        return this.throughputTestId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLiveToolsThroughputTestResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private GetLiveToolsThroughputTestItem item;
        private String serial;
        private String throughputTestId;
        public Builder() {}
        public Builder(GetLiveToolsThroughputTestResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.item = defaults.item;
    	      this.serial = defaults.serial;
    	      this.throughputTestId = defaults.throughputTestId;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLiveToolsThroughputTestResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder item(GetLiveToolsThroughputTestItem item) {
            if (item == null) {
              throw new MissingRequiredPropertyException("GetLiveToolsThroughputTestResult", "item");
            }
            this.item = item;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetLiveToolsThroughputTestResult", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder throughputTestId(String throughputTestId) {
            if (throughputTestId == null) {
              throw new MissingRequiredPropertyException("GetLiveToolsThroughputTestResult", "throughputTestId");
            }
            this.throughputTestId = throughputTestId;
            return this;
        }
        public GetLiveToolsThroughputTestResult build() {
            final var _resultValue = new GetLiveToolsThroughputTestResult();
            _resultValue.id = id;
            _resultValue.item = item;
            _resultValue.serial = serial;
            _resultValue.throughputTestId = throughputTestId;
            return _resultValue;
        }
    }
}
