// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagementInterfaceWan1 {
    /**
     * @return Up to two DNS IPs.
     * 
     */
    private @Nullable List<String> staticDns;
    /**
     * @return The IP of the gateway on the WAN.
     * 
     */
    private @Nullable String staticGatewayIp;
    /**
     * @return The IP the device should use on the WAN.
     * 
     */
    private @Nullable String staticIp;
    /**
     * @return The subnet mask for the WAN.
     * 
     */
    private @Nullable String staticSubnetMask;
    /**
     * @return Configure the interface to have static IP settings or use DHCP.
     * 
     */
    private @Nullable Boolean usingStaticIp;
    /**
     * @return The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     * 
     */
    private @Nullable Integer vlan;
    /**
     * @return Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
     * 
     */
    private @Nullable String wanEnabled;

    private ManagementInterfaceWan1() {}
    /**
     * @return Up to two DNS IPs.
     * 
     */
    public List<String> staticDns() {
        return this.staticDns == null ? List.of() : this.staticDns;
    }
    /**
     * @return The IP of the gateway on the WAN.
     * 
     */
    public Optional<String> staticGatewayIp() {
        return Optional.ofNullable(this.staticGatewayIp);
    }
    /**
     * @return The IP the device should use on the WAN.
     * 
     */
    public Optional<String> staticIp() {
        return Optional.ofNullable(this.staticIp);
    }
    /**
     * @return The subnet mask for the WAN.
     * 
     */
    public Optional<String> staticSubnetMask() {
        return Optional.ofNullable(this.staticSubnetMask);
    }
    /**
     * @return Configure the interface to have static IP settings or use DHCP.
     * 
     */
    public Optional<Boolean> usingStaticIp() {
        return Optional.ofNullable(this.usingStaticIp);
    }
    /**
     * @return The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
     * 
     */
    public Optional<Integer> vlan() {
        return Optional.ofNullable(this.vlan);
    }
    /**
     * @return Enable or disable the interface (only for MX devices). Valid values are &#39;enabled&#39;, &#39;disabled&#39;, and &#39;not configured&#39;.
     * 
     */
    public Optional<String> wanEnabled() {
        return Optional.ofNullable(this.wanEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagementInterfaceWan1 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> staticDns;
        private @Nullable String staticGatewayIp;
        private @Nullable String staticIp;
        private @Nullable String staticSubnetMask;
        private @Nullable Boolean usingStaticIp;
        private @Nullable Integer vlan;
        private @Nullable String wanEnabled;
        public Builder() {}
        public Builder(ManagementInterfaceWan1 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.staticDns = defaults.staticDns;
    	      this.staticGatewayIp = defaults.staticGatewayIp;
    	      this.staticIp = defaults.staticIp;
    	      this.staticSubnetMask = defaults.staticSubnetMask;
    	      this.usingStaticIp = defaults.usingStaticIp;
    	      this.vlan = defaults.vlan;
    	      this.wanEnabled = defaults.wanEnabled;
        }

        @CustomType.Setter
        public Builder staticDns(@Nullable List<String> staticDns) {

            this.staticDns = staticDns;
            return this;
        }
        public Builder staticDns(String... staticDns) {
            return staticDns(List.of(staticDns));
        }
        @CustomType.Setter
        public Builder staticGatewayIp(@Nullable String staticGatewayIp) {

            this.staticGatewayIp = staticGatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder staticIp(@Nullable String staticIp) {

            this.staticIp = staticIp;
            return this;
        }
        @CustomType.Setter
        public Builder staticSubnetMask(@Nullable String staticSubnetMask) {

            this.staticSubnetMask = staticSubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder usingStaticIp(@Nullable Boolean usingStaticIp) {

            this.usingStaticIp = usingStaticIp;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(@Nullable Integer vlan) {

            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder wanEnabled(@Nullable String wanEnabled) {

            this.wanEnabled = wanEnabled;
            return this;
        }
        public ManagementInterfaceWan1 build() {
            final var _resultValue = new ManagementInterfaceWan1();
            _resultValue.staticDns = staticDns;
            _resultValue.staticGatewayIp = staticGatewayIp;
            _resultValue.staticIp = staticIp;
            _resultValue.staticSubnetMask = staticSubnetMask;
            _resultValue.usingStaticIp = usingStaticIp;
            _resultValue.vlan = vlan;
            _resultValue.wanEnabled = wanEnabled;
            return _resultValue;
        }
    }
}
