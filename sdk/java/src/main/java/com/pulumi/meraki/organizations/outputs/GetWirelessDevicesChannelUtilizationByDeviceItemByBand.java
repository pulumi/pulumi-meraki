// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifi;
import com.pulumi.meraki.organizations.outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotal;
import com.pulumi.meraki.organizations.outputs.GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifi;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWirelessDevicesChannelUtilizationByDeviceItemByBand {
    /**
     * @return The band for the given metrics.
     * 
     */
    private String band;
    /**
     * @return An object containing non-wifi utilization.
     * 
     */
    private GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifi nonWifi;
    /**
     * @return An object containing total channel utilization.
     * 
     */
    private GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotal total;
    /**
     * @return An object containing wifi utilization.
     * 
     */
    private GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifi wifi;

    private GetWirelessDevicesChannelUtilizationByDeviceItemByBand() {}
    /**
     * @return The band for the given metrics.
     * 
     */
    public String band() {
        return this.band;
    }
    /**
     * @return An object containing non-wifi utilization.
     * 
     */
    public GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifi nonWifi() {
        return this.nonWifi;
    }
    /**
     * @return An object containing total channel utilization.
     * 
     */
    public GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotal total() {
        return this.total;
    }
    /**
     * @return An object containing wifi utilization.
     * 
     */
    public GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifi wifi() {
        return this.wifi;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessDevicesChannelUtilizationByDeviceItemByBand defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String band;
        private GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifi nonWifi;
        private GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotal total;
        private GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifi wifi;
        public Builder() {}
        public Builder(GetWirelessDevicesChannelUtilizationByDeviceItemByBand defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.band = defaults.band;
    	      this.nonWifi = defaults.nonWifi;
    	      this.total = defaults.total;
    	      this.wifi = defaults.wifi;
        }

        @CustomType.Setter
        public Builder band(String band) {
            if (band == null) {
              throw new MissingRequiredPropertyException("GetWirelessDevicesChannelUtilizationByDeviceItemByBand", "band");
            }
            this.band = band;
            return this;
        }
        @CustomType.Setter
        public Builder nonWifi(GetWirelessDevicesChannelUtilizationByDeviceItemByBandNonWifi nonWifi) {
            if (nonWifi == null) {
              throw new MissingRequiredPropertyException("GetWirelessDevicesChannelUtilizationByDeviceItemByBand", "nonWifi");
            }
            this.nonWifi = nonWifi;
            return this;
        }
        @CustomType.Setter
        public Builder total(GetWirelessDevicesChannelUtilizationByDeviceItemByBandTotal total) {
            if (total == null) {
              throw new MissingRequiredPropertyException("GetWirelessDevicesChannelUtilizationByDeviceItemByBand", "total");
            }
            this.total = total;
            return this;
        }
        @CustomType.Setter
        public Builder wifi(GetWirelessDevicesChannelUtilizationByDeviceItemByBandWifi wifi) {
            if (wifi == null) {
              throw new MissingRequiredPropertyException("GetWirelessDevicesChannelUtilizationByDeviceItemByBand", "wifi");
            }
            this.wifi = wifi;
            return this;
        }
        public GetWirelessDevicesChannelUtilizationByDeviceItemByBand build() {
            final var _resultValue = new GetWirelessDevicesChannelUtilizationByDeviceItemByBand();
            _resultValue.band = band;
            _resultValue.nonWifi = nonWifi;
            _resultValue.total = total;
            _resultValue.wifi = wifi;
            return _resultValue;
        }
    }
}
