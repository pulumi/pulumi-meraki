// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsLdapCredentialsArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsLdapServerArgs;
import com.pulumi.meraki.networks.inputs.WirelessSsidsLdapServerCaCertificateArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsLdapArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsLdapArgs Empty = new WirelessSsidsLdapArgs();

    /**
     * The base distinguished name of users on the LDAP server.
     * 
     */
    @Import(name="baseDistinguishedName")
    private @Nullable Output<String> baseDistinguishedName;

    /**
     * @return The base distinguished name of users on the LDAP server.
     * 
     */
    public Optional<Output<String>> baseDistinguishedName() {
        return Optional.ofNullable(this.baseDistinguishedName);
    }

    /**
     * (Optional) The credentials of the user account to be used by the AP to bind to your LDAP server. The LDAP account should have permissions on all your LDAP servers.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<WirelessSsidsLdapCredentialsArgs> credentials;

    /**
     * @return (Optional) The credentials of the user account to be used by the AP to bind to your LDAP server. The LDAP account should have permissions on all your LDAP servers.
     * 
     */
    public Optional<Output<WirelessSsidsLdapCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The CA certificate used to sign the LDAP server&#39;s key.
     * 
     */
    @Import(name="serverCaCertificate")
    private @Nullable Output<WirelessSsidsLdapServerCaCertificateArgs> serverCaCertificate;

    /**
     * @return The CA certificate used to sign the LDAP server&#39;s key.
     * 
     */
    public Optional<Output<WirelessSsidsLdapServerCaCertificateArgs>> serverCaCertificate() {
        return Optional.ofNullable(this.serverCaCertificate);
    }

    /**
     * The LDAP servers to be used for authentication.
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<WirelessSsidsLdapServerArgs>> servers;

    /**
     * @return The LDAP servers to be used for authentication.
     * 
     */
    public Optional<Output<List<WirelessSsidsLdapServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    private WirelessSsidsLdapArgs() {}

    private WirelessSsidsLdapArgs(WirelessSsidsLdapArgs $) {
        this.baseDistinguishedName = $.baseDistinguishedName;
        this.credentials = $.credentials;
        this.serverCaCertificate = $.serverCaCertificate;
        this.servers = $.servers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsLdapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsLdapArgs $;

        public Builder() {
            $ = new WirelessSsidsLdapArgs();
        }

        public Builder(WirelessSsidsLdapArgs defaults) {
            $ = new WirelessSsidsLdapArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseDistinguishedName The base distinguished name of users on the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder baseDistinguishedName(@Nullable Output<String> baseDistinguishedName) {
            $.baseDistinguishedName = baseDistinguishedName;
            return this;
        }

        /**
         * @param baseDistinguishedName The base distinguished name of users on the LDAP server.
         * 
         * @return builder
         * 
         */
        public Builder baseDistinguishedName(String baseDistinguishedName) {
            return baseDistinguishedName(Output.of(baseDistinguishedName));
        }

        /**
         * @param credentials (Optional) The credentials of the user account to be used by the AP to bind to your LDAP server. The LDAP account should have permissions on all your LDAP servers.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<WirelessSsidsLdapCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials (Optional) The credentials of the user account to be used by the AP to bind to your LDAP server. The LDAP account should have permissions on all your LDAP servers.
         * 
         * @return builder
         * 
         */
        public Builder credentials(WirelessSsidsLdapCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param serverCaCertificate The CA certificate used to sign the LDAP server&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder serverCaCertificate(@Nullable Output<WirelessSsidsLdapServerCaCertificateArgs> serverCaCertificate) {
            $.serverCaCertificate = serverCaCertificate;
            return this;
        }

        /**
         * @param serverCaCertificate The CA certificate used to sign the LDAP server&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder serverCaCertificate(WirelessSsidsLdapServerCaCertificateArgs serverCaCertificate) {
            return serverCaCertificate(Output.of(serverCaCertificate));
        }

        /**
         * @param servers The LDAP servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<WirelessSsidsLdapServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers The LDAP servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<WirelessSsidsLdapServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers The LDAP servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder servers(WirelessSsidsLdapServerArgs... servers) {
            return servers(List.of(servers));
        }

        public WirelessSsidsLdapArgs build() {
            return $;
        }
    }

}
