// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetActionBatchesItemAction;
import com.pulumi.meraki.organizations.outputs.GetActionBatchesItemStatus;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetActionBatchesItem {
    /**
     * @return A set of changes made as part of this action (\n\nmore details\n\n)
     * 
     */
    private List<GetActionBatchesItemAction> actions;
    /**
     * @return Flag describing whether the action should be previewed before executing or not
     * 
     */
    private Boolean confirmed;
    /**
     * @return ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
     * 
     */
    private String id;
    /**
     * @return ID of the organization this action batch belongs to
     * 
     */
    private String organizationId;
    /**
     * @return Status of action batch
     * 
     */
    private GetActionBatchesItemStatus status;
    /**
     * @return Flag describing whether actions should run synchronously or asynchronously
     * 
     */
    private Boolean synchronous;

    private GetActionBatchesItem() {}
    /**
     * @return A set of changes made as part of this action (\n\nmore details\n\n)
     * 
     */
    public List<GetActionBatchesItemAction> actions() {
        return this.actions;
    }
    /**
     * @return Flag describing whether the action should be previewed before executing or not
     * 
     */
    public Boolean confirmed() {
        return this.confirmed;
    }
    /**
     * @return ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ID of the organization this action batch belongs to
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return Status of action batch
     * 
     */
    public GetActionBatchesItemStatus status() {
        return this.status;
    }
    /**
     * @return Flag describing whether actions should run synchronously or asynchronously
     * 
     */
    public Boolean synchronous() {
        return this.synchronous;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetActionBatchesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetActionBatchesItemAction> actions;
        private Boolean confirmed;
        private String id;
        private String organizationId;
        private GetActionBatchesItemStatus status;
        private Boolean synchronous;
        public Builder() {}
        public Builder(GetActionBatchesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.confirmed = defaults.confirmed;
    	      this.id = defaults.id;
    	      this.organizationId = defaults.organizationId;
    	      this.status = defaults.status;
    	      this.synchronous = defaults.synchronous;
        }

        @CustomType.Setter
        public Builder actions(List<GetActionBatchesItemAction> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(GetActionBatchesItemAction... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder confirmed(Boolean confirmed) {
            if (confirmed == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "confirmed");
            }
            this.confirmed = confirmed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder status(GetActionBatchesItemStatus status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder synchronous(Boolean synchronous) {
            if (synchronous == null) {
              throw new MissingRequiredPropertyException("GetActionBatchesItem", "synchronous");
            }
            this.synchronous = synchronous;
            return this;
        }
        public GetActionBatchesItem build() {
            final var _resultValue = new GetActionBatchesItem();
            _resultValue.actions = actions;
            _resultValue.confirmed = confirmed;
            _resultValue.id = id;
            _resultValue.organizationId = organizationId;
            _resultValue.status = status;
            _resultValue.synchronous = synchronous;
            return _resultValue;
        }
    }
}
