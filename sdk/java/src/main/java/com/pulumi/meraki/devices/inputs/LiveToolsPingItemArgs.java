// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.devices.inputs.LiveToolsPingItemCallbackArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsPingItemRequestArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveToolsPingItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveToolsPingItemArgs Empty = new LiveToolsPingItemArgs();

    /**
     * Information for callback used to send back results
     * 
     */
    @Import(name="callback")
    private @Nullable Output<LiveToolsPingItemCallbackArgs> callback;

    /**
     * @return Information for callback used to send back results
     * 
     */
    public Optional<Output<LiveToolsPingItemCallbackArgs>> callback() {
        return Optional.ofNullable(this.callback);
    }

    /**
     * Id to check the status of your ping request.
     * 
     */
    @Import(name="pingId")
    private @Nullable Output<String> pingId;

    /**
     * @return Id to check the status of your ping request.
     * 
     */
    public Optional<Output<String>> pingId() {
        return Optional.ofNullable(this.pingId);
    }

    /**
     * Ping request parameters
     * 
     */
    @Import(name="request")
    private @Nullable Output<LiveToolsPingItemRequestArgs> request;

    /**
     * @return Ping request parameters
     * 
     */
    public Optional<Output<LiveToolsPingItemRequestArgs>> request() {
        return Optional.ofNullable(this.request);
    }

    /**
     * Status of the ping request.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the ping request.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * GET this url to check the status of your ping request.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return GET this url to check the status of your ping request.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private LiveToolsPingItemArgs() {}

    private LiveToolsPingItemArgs(LiveToolsPingItemArgs $) {
        this.callback = $.callback;
        this.pingId = $.pingId;
        this.request = $.request;
        this.status = $.status;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveToolsPingItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveToolsPingItemArgs $;

        public Builder() {
            $ = new LiveToolsPingItemArgs();
        }

        public Builder(LiveToolsPingItemArgs defaults) {
            $ = new LiveToolsPingItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param callback Information for callback used to send back results
         * 
         * @return builder
         * 
         */
        public Builder callback(@Nullable Output<LiveToolsPingItemCallbackArgs> callback) {
            $.callback = callback;
            return this;
        }

        /**
         * @param callback Information for callback used to send back results
         * 
         * @return builder
         * 
         */
        public Builder callback(LiveToolsPingItemCallbackArgs callback) {
            return callback(Output.of(callback));
        }

        /**
         * @param pingId Id to check the status of your ping request.
         * 
         * @return builder
         * 
         */
        public Builder pingId(@Nullable Output<String> pingId) {
            $.pingId = pingId;
            return this;
        }

        /**
         * @param pingId Id to check the status of your ping request.
         * 
         * @return builder
         * 
         */
        public Builder pingId(String pingId) {
            return pingId(Output.of(pingId));
        }

        /**
         * @param request Ping request parameters
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<LiveToolsPingItemRequestArgs> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request Ping request parameters
         * 
         * @return builder
         * 
         */
        public Builder request(LiveToolsPingItemRequestArgs request) {
            return request(Output.of(request));
        }

        /**
         * @param status Status of the ping request.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the ping request.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param url GET this url to check the status of your ping request.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url GET this url to check the status of your ping request.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public LiveToolsPingItemArgs build() {
            return $;
        }
    }

}
