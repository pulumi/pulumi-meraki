// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CameraGenerateSnapshotParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final CameraGenerateSnapshotParametersArgs Empty = new CameraGenerateSnapshotParametersArgs();

    /**
     * [optional] If set to &#34;true&#34; the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
     * 
     */
    @Import(name="fullframe")
    private @Nullable Output<Boolean> fullframe;

    /**
     * @return [optional] If set to &#34;true&#34; the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
     * 
     */
    public Optional<Output<Boolean>> fullframe() {
        return Optional.ofNullable(this.fullframe);
    }

    /**
     * [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
     * 
     */
    @Import(name="timestamp")
    private @Nullable Output<String> timestamp;

    /**
     * @return [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
     * 
     */
    public Optional<Output<String>> timestamp() {
        return Optional.ofNullable(this.timestamp);
    }

    private CameraGenerateSnapshotParametersArgs() {}

    private CameraGenerateSnapshotParametersArgs(CameraGenerateSnapshotParametersArgs $) {
        this.fullframe = $.fullframe;
        this.timestamp = $.timestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CameraGenerateSnapshotParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CameraGenerateSnapshotParametersArgs $;

        public Builder() {
            $ = new CameraGenerateSnapshotParametersArgs();
        }

        public Builder(CameraGenerateSnapshotParametersArgs defaults) {
            $ = new CameraGenerateSnapshotParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fullframe [optional] If set to &#34;true&#34; the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
         * 
         * @return builder
         * 
         */
        public Builder fullframe(@Nullable Output<Boolean> fullframe) {
            $.fullframe = fullframe;
            return this;
        }

        /**
         * @param fullframe [optional] If set to &#34;true&#34; the snapshot will be taken at full sensor resolution. This will error if used with timestamp.
         * 
         * @return builder
         * 
         */
        public Builder fullframe(Boolean fullframe) {
            return fullframe(Output.of(fullframe));
        }

        /**
         * @param timestamp [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
         * 
         * @return builder
         * 
         */
        public Builder timestamp(@Nullable Output<String> timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param timestamp [optional] The snapshot will be taken from this time on the camera. The timestamp is expected to be in ISO 8601 format. If no timestamp is specified, we will assume current time.
         * 
         * @return builder
         * 
         */
        public Builder timestamp(String timestamp) {
            return timestamp(Output.of(timestamp));
        }

        public CameraGenerateSnapshotParametersArgs build() {
            return $;
        }
    }

}
