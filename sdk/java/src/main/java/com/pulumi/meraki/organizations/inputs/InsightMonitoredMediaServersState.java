// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InsightMonitoredMediaServersState extends com.pulumi.resources.ResourceArgs {

    public static final InsightMonitoredMediaServersState Empty = new InsightMonitoredMediaServersState();

    /**
     * The IP address (IPv4 only) or hostname of the media server to monitor
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The IP address (IPv4 only) or hostname of the media server to monitor
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Indicates that if the media server doesn&#39;t respond to ICMP pings, the nearest hop will be used in its stead
     * 
     */
    @Import(name="bestEffortMonitoringEnabled")
    private @Nullable Output<Boolean> bestEffortMonitoringEnabled;

    /**
     * @return Indicates that if the media server doesn&#39;t respond to ICMP pings, the nearest hop will be used in its stead
     * 
     */
    public Optional<Output<Boolean>> bestEffortMonitoringEnabled() {
        return Optional.ofNullable(this.bestEffortMonitoringEnabled);
    }

    /**
     * monitoredMediaServerId path parameter. Monitored media server ID
     * 
     */
    @Import(name="monitoredMediaServerId")
    private @Nullable Output<String> monitoredMediaServerId;

    /**
     * @return monitoredMediaServerId path parameter. Monitored media server ID
     * 
     */
    public Optional<Output<String>> monitoredMediaServerId() {
        return Optional.ofNullable(this.monitoredMediaServerId);
    }

    /**
     * The name of the VoIP provider
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VoIP provider
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    private InsightMonitoredMediaServersState() {}

    private InsightMonitoredMediaServersState(InsightMonitoredMediaServersState $) {
        this.address = $.address;
        this.bestEffortMonitoringEnabled = $.bestEffortMonitoringEnabled;
        this.monitoredMediaServerId = $.monitoredMediaServerId;
        this.name = $.name;
        this.organizationId = $.organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InsightMonitoredMediaServersState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InsightMonitoredMediaServersState $;

        public Builder() {
            $ = new InsightMonitoredMediaServersState();
        }

        public Builder(InsightMonitoredMediaServersState defaults) {
            $ = new InsightMonitoredMediaServersState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The IP address (IPv4 only) or hostname of the media server to monitor
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The IP address (IPv4 only) or hostname of the media server to monitor
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param bestEffortMonitoringEnabled Indicates that if the media server doesn&#39;t respond to ICMP pings, the nearest hop will be used in its stead
         * 
         * @return builder
         * 
         */
        public Builder bestEffortMonitoringEnabled(@Nullable Output<Boolean> bestEffortMonitoringEnabled) {
            $.bestEffortMonitoringEnabled = bestEffortMonitoringEnabled;
            return this;
        }

        /**
         * @param bestEffortMonitoringEnabled Indicates that if the media server doesn&#39;t respond to ICMP pings, the nearest hop will be used in its stead
         * 
         * @return builder
         * 
         */
        public Builder bestEffortMonitoringEnabled(Boolean bestEffortMonitoringEnabled) {
            return bestEffortMonitoringEnabled(Output.of(bestEffortMonitoringEnabled));
        }

        /**
         * @param monitoredMediaServerId monitoredMediaServerId path parameter. Monitored media server ID
         * 
         * @return builder
         * 
         */
        public Builder monitoredMediaServerId(@Nullable Output<String> monitoredMediaServerId) {
            $.monitoredMediaServerId = monitoredMediaServerId;
            return this;
        }

        /**
         * @param monitoredMediaServerId monitoredMediaServerId path parameter. Monitored media server ID
         * 
         * @return builder
         * 
         */
        public Builder monitoredMediaServerId(String monitoredMediaServerId) {
            return monitoredMediaServerId(Output.of(monitoredMediaServerId));
        }

        /**
         * @param name The name of the VoIP provider
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VoIP provider
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public InsightMonitoredMediaServersState build() {
            return $;
        }
    }

}
