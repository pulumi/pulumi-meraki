// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.networks.outputs.WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificate;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WirelessSsidsLocalRadiusCertificateAuthentication {
    /**
     * @return The Client CA Certificate used to sign the client certificate.
     * 
     */
    private @Nullable WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate;
    /**
     * @return Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return (Optional) The URL of the OCSP responder to verify client certificate status.
     * 
     */
    private @Nullable String ocspResponderUrl;
    /**
     * @return Whether or not to verify the certificate with LDAP.
     * 
     */
    private @Nullable Boolean useLdap;
    /**
     * @return Whether or not to verify the certificate with OCSP.
     * 
     */
    private @Nullable Boolean useOcsp;

    private WirelessSsidsLocalRadiusCertificateAuthentication() {}
    /**
     * @return The Client CA Certificate used to sign the client certificate.
     * 
     */
    public Optional<WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificate> clientRootCaCertificate() {
        return Optional.ofNullable(this.clientRootCaCertificate);
    }
    /**
     * @return Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return (Optional) The URL of the OCSP responder to verify client certificate status.
     * 
     */
    public Optional<String> ocspResponderUrl() {
        return Optional.ofNullable(this.ocspResponderUrl);
    }
    /**
     * @return Whether or not to verify the certificate with LDAP.
     * 
     */
    public Optional<Boolean> useLdap() {
        return Optional.ofNullable(this.useLdap);
    }
    /**
     * @return Whether or not to verify the certificate with OCSP.
     * 
     */
    public Optional<Boolean> useOcsp() {
        return Optional.ofNullable(this.useOcsp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WirelessSsidsLocalRadiusCertificateAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate;
        private @Nullable Boolean enabled;
        private @Nullable String ocspResponderUrl;
        private @Nullable Boolean useLdap;
        private @Nullable Boolean useOcsp;
        public Builder() {}
        public Builder(WirelessSsidsLocalRadiusCertificateAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientRootCaCertificate = defaults.clientRootCaCertificate;
    	      this.enabled = defaults.enabled;
    	      this.ocspResponderUrl = defaults.ocspResponderUrl;
    	      this.useLdap = defaults.useLdap;
    	      this.useOcsp = defaults.useOcsp;
        }

        @CustomType.Setter
        public Builder clientRootCaCertificate(@Nullable WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificate clientRootCaCertificate) {

            this.clientRootCaCertificate = clientRootCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder ocspResponderUrl(@Nullable String ocspResponderUrl) {

            this.ocspResponderUrl = ocspResponderUrl;
            return this;
        }
        @CustomType.Setter
        public Builder useLdap(@Nullable Boolean useLdap) {

            this.useLdap = useLdap;
            return this;
        }
        @CustomType.Setter
        public Builder useOcsp(@Nullable Boolean useOcsp) {

            this.useOcsp = useOcsp;
            return this;
        }
        public WirelessSsidsLocalRadiusCertificateAuthentication build() {
            final var _resultValue = new WirelessSsidsLocalRadiusCertificateAuthentication();
            _resultValue.clientRootCaCertificate = clientRootCaCertificate;
            _resultValue.enabled = enabled;
            _resultValue.ocspResponderUrl = ocspResponderUrl;
            _resultValue.useLdap = useLdap;
            _resultValue.useOcsp = useOcsp;
            return _resultValue;
        }
    }
}
