// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemApparentPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemBattery;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemButton;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemCo2;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemCurrent;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemDoor;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemDownstreamPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemFrequency;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemHumidity;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemIndoorAirQuality;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemNetwork;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemNoise;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemPm25;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemPowerFactor;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemRealPower;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemRemoteLockoutSwitch;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemTemperature;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemTvoc;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemVoltage;
import com.pulumi.meraki.organizations.outputs.GetSensorReadingsHistoryItemWater;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSensorReadingsHistoryItem {
    /**
     * @return Reading for the &#39;apparentPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;apparentPower&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemApparentPower apparentPower;
    /**
     * @return Reading for the &#39;battery&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;battery&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemBattery battery;
    /**
     * @return Reading for the &#39;button&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;button&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemButton button;
    /**
     * @return Reading for the &#39;co2&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;co2&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemCo2 co2;
    /**
     * @return Reading for the &#39;current&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;current&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemCurrent current;
    /**
     * @return Reading for the &#39;door&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;door&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemDoor door;
    /**
     * @return Reading for the &#39;downstreamPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;downstreamPower&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemDownstreamPower downstreamPower;
    /**
     * @return Reading for the &#39;frequency&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;frequency&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemFrequency frequency;
    /**
     * @return Reading for the &#39;humidity&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;humidity&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemHumidity humidity;
    /**
     * @return Reading for the &#39;indoorAirQuality&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;indoorAirQuality&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemIndoorAirQuality indoorAirQuality;
    /**
     * @return Type of sensor reading.
     * 
     */
    private String metric;
    /**
     * @return Network to which the sensor belongs.
     * 
     */
    private GetSensorReadingsHistoryItemNetwork network;
    /**
     * @return Reading for the &#39;noise&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;noise&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemNoise noise;
    /**
     * @return Reading for the &#39;pm25&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;pm25&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemPm25 pm25;
    /**
     * @return Reading for the &#39;powerFactor&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;powerFactor&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemPowerFactor powerFactor;
    /**
     * @return Reading for the &#39;realPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;realPower&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemRealPower realPower;
    /**
     * @return Reading for the &#39;remoteLockoutSwitch&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;remoteLockoutSwitch&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemRemoteLockoutSwitch remoteLockoutSwitch;
    /**
     * @return Serial number of the sensor that took the reading.
     * 
     */
    private String serial;
    /**
     * @return Reading for the &#39;temperature&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;temperature&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemTemperature temperature;
    /**
     * @return Time at which the reading occurred, in ISO8601 format.
     * 
     */
    private String ts;
    /**
     * @return Reading for the &#39;tvoc&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;tvoc&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemTvoc tvoc;
    /**
     * @return Reading for the &#39;voltage&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;voltage&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemVoltage voltage;
    /**
     * @return Reading for the &#39;water&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;water&#39;.
     * 
     */
    private GetSensorReadingsHistoryItemWater water;

    private GetSensorReadingsHistoryItem() {}
    /**
     * @return Reading for the &#39;apparentPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;apparentPower&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemApparentPower apparentPower() {
        return this.apparentPower;
    }
    /**
     * @return Reading for the &#39;battery&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;battery&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemBattery battery() {
        return this.battery;
    }
    /**
     * @return Reading for the &#39;button&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;button&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemButton button() {
        return this.button;
    }
    /**
     * @return Reading for the &#39;co2&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;co2&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemCo2 co2() {
        return this.co2;
    }
    /**
     * @return Reading for the &#39;current&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;current&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemCurrent current() {
        return this.current;
    }
    /**
     * @return Reading for the &#39;door&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;door&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemDoor door() {
        return this.door;
    }
    /**
     * @return Reading for the &#39;downstreamPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;downstreamPower&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemDownstreamPower downstreamPower() {
        return this.downstreamPower;
    }
    /**
     * @return Reading for the &#39;frequency&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;frequency&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemFrequency frequency() {
        return this.frequency;
    }
    /**
     * @return Reading for the &#39;humidity&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;humidity&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemHumidity humidity() {
        return this.humidity;
    }
    /**
     * @return Reading for the &#39;indoorAirQuality&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;indoorAirQuality&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemIndoorAirQuality indoorAirQuality() {
        return this.indoorAirQuality;
    }
    /**
     * @return Type of sensor reading.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return Network to which the sensor belongs.
     * 
     */
    public GetSensorReadingsHistoryItemNetwork network() {
        return this.network;
    }
    /**
     * @return Reading for the &#39;noise&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;noise&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemNoise noise() {
        return this.noise;
    }
    /**
     * @return Reading for the &#39;pm25&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;pm25&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemPm25 pm25() {
        return this.pm25;
    }
    /**
     * @return Reading for the &#39;powerFactor&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;powerFactor&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemPowerFactor powerFactor() {
        return this.powerFactor;
    }
    /**
     * @return Reading for the &#39;realPower&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;realPower&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemRealPower realPower() {
        return this.realPower;
    }
    /**
     * @return Reading for the &#39;remoteLockoutSwitch&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;remoteLockoutSwitch&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemRemoteLockoutSwitch remoteLockoutSwitch() {
        return this.remoteLockoutSwitch;
    }
    /**
     * @return Serial number of the sensor that took the reading.
     * 
     */
    public String serial() {
        return this.serial;
    }
    /**
     * @return Reading for the &#39;temperature&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;temperature&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemTemperature temperature() {
        return this.temperature;
    }
    /**
     * @return Time at which the reading occurred, in ISO8601 format.
     * 
     */
    public String ts() {
        return this.ts;
    }
    /**
     * @return Reading for the &#39;tvoc&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;tvoc&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemTvoc tvoc() {
        return this.tvoc;
    }
    /**
     * @return Reading for the &#39;voltage&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;voltage&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemVoltage voltage() {
        return this.voltage;
    }
    /**
     * @return Reading for the &#39;water&#39; metric. This will only be present if the &#39;metric&#39; property equals &#39;water&#39;.
     * 
     */
    public GetSensorReadingsHistoryItemWater water() {
        return this.water;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSensorReadingsHistoryItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSensorReadingsHistoryItemApparentPower apparentPower;
        private GetSensorReadingsHistoryItemBattery battery;
        private GetSensorReadingsHistoryItemButton button;
        private GetSensorReadingsHistoryItemCo2 co2;
        private GetSensorReadingsHistoryItemCurrent current;
        private GetSensorReadingsHistoryItemDoor door;
        private GetSensorReadingsHistoryItemDownstreamPower downstreamPower;
        private GetSensorReadingsHistoryItemFrequency frequency;
        private GetSensorReadingsHistoryItemHumidity humidity;
        private GetSensorReadingsHistoryItemIndoorAirQuality indoorAirQuality;
        private String metric;
        private GetSensorReadingsHistoryItemNetwork network;
        private GetSensorReadingsHistoryItemNoise noise;
        private GetSensorReadingsHistoryItemPm25 pm25;
        private GetSensorReadingsHistoryItemPowerFactor powerFactor;
        private GetSensorReadingsHistoryItemRealPower realPower;
        private GetSensorReadingsHistoryItemRemoteLockoutSwitch remoteLockoutSwitch;
        private String serial;
        private GetSensorReadingsHistoryItemTemperature temperature;
        private String ts;
        private GetSensorReadingsHistoryItemTvoc tvoc;
        private GetSensorReadingsHistoryItemVoltage voltage;
        private GetSensorReadingsHistoryItemWater water;
        public Builder() {}
        public Builder(GetSensorReadingsHistoryItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apparentPower = defaults.apparentPower;
    	      this.battery = defaults.battery;
    	      this.button = defaults.button;
    	      this.co2 = defaults.co2;
    	      this.current = defaults.current;
    	      this.door = defaults.door;
    	      this.downstreamPower = defaults.downstreamPower;
    	      this.frequency = defaults.frequency;
    	      this.humidity = defaults.humidity;
    	      this.indoorAirQuality = defaults.indoorAirQuality;
    	      this.metric = defaults.metric;
    	      this.network = defaults.network;
    	      this.noise = defaults.noise;
    	      this.pm25 = defaults.pm25;
    	      this.powerFactor = defaults.powerFactor;
    	      this.realPower = defaults.realPower;
    	      this.remoteLockoutSwitch = defaults.remoteLockoutSwitch;
    	      this.serial = defaults.serial;
    	      this.temperature = defaults.temperature;
    	      this.ts = defaults.ts;
    	      this.tvoc = defaults.tvoc;
    	      this.voltage = defaults.voltage;
    	      this.water = defaults.water;
        }

        @CustomType.Setter
        public Builder apparentPower(GetSensorReadingsHistoryItemApparentPower apparentPower) {
            if (apparentPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "apparentPower");
            }
            this.apparentPower = apparentPower;
            return this;
        }
        @CustomType.Setter
        public Builder battery(GetSensorReadingsHistoryItemBattery battery) {
            if (battery == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "battery");
            }
            this.battery = battery;
            return this;
        }
        @CustomType.Setter
        public Builder button(GetSensorReadingsHistoryItemButton button) {
            if (button == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "button");
            }
            this.button = button;
            return this;
        }
        @CustomType.Setter
        public Builder co2(GetSensorReadingsHistoryItemCo2 co2) {
            if (co2 == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "co2");
            }
            this.co2 = co2;
            return this;
        }
        @CustomType.Setter
        public Builder current(GetSensorReadingsHistoryItemCurrent current) {
            if (current == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "current");
            }
            this.current = current;
            return this;
        }
        @CustomType.Setter
        public Builder door(GetSensorReadingsHistoryItemDoor door) {
            if (door == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "door");
            }
            this.door = door;
            return this;
        }
        @CustomType.Setter
        public Builder downstreamPower(GetSensorReadingsHistoryItemDownstreamPower downstreamPower) {
            if (downstreamPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "downstreamPower");
            }
            this.downstreamPower = downstreamPower;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(GetSensorReadingsHistoryItemFrequency frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder humidity(GetSensorReadingsHistoryItemHumidity humidity) {
            if (humidity == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "humidity");
            }
            this.humidity = humidity;
            return this;
        }
        @CustomType.Setter
        public Builder indoorAirQuality(GetSensorReadingsHistoryItemIndoorAirQuality indoorAirQuality) {
            if (indoorAirQuality == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "indoorAirQuality");
            }
            this.indoorAirQuality = indoorAirQuality;
            return this;
        }
        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder network(GetSensorReadingsHistoryItemNetwork network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder noise(GetSensorReadingsHistoryItemNoise noise) {
            if (noise == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "noise");
            }
            this.noise = noise;
            return this;
        }
        @CustomType.Setter
        public Builder pm25(GetSensorReadingsHistoryItemPm25 pm25) {
            if (pm25 == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "pm25");
            }
            this.pm25 = pm25;
            return this;
        }
        @CustomType.Setter
        public Builder powerFactor(GetSensorReadingsHistoryItemPowerFactor powerFactor) {
            if (powerFactor == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "powerFactor");
            }
            this.powerFactor = powerFactor;
            return this;
        }
        @CustomType.Setter
        public Builder realPower(GetSensorReadingsHistoryItemRealPower realPower) {
            if (realPower == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "realPower");
            }
            this.realPower = realPower;
            return this;
        }
        @CustomType.Setter
        public Builder remoteLockoutSwitch(GetSensorReadingsHistoryItemRemoteLockoutSwitch remoteLockoutSwitch) {
            if (remoteLockoutSwitch == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "remoteLockoutSwitch");
            }
            this.remoteLockoutSwitch = remoteLockoutSwitch;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder temperature(GetSensorReadingsHistoryItemTemperature temperature) {
            if (temperature == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "temperature");
            }
            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder ts(String ts) {
            if (ts == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "ts");
            }
            this.ts = ts;
            return this;
        }
        @CustomType.Setter
        public Builder tvoc(GetSensorReadingsHistoryItemTvoc tvoc) {
            if (tvoc == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "tvoc");
            }
            this.tvoc = tvoc;
            return this;
        }
        @CustomType.Setter
        public Builder voltage(GetSensorReadingsHistoryItemVoltage voltage) {
            if (voltage == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "voltage");
            }
            this.voltage = voltage;
            return this;
        }
        @CustomType.Setter
        public Builder water(GetSensorReadingsHistoryItemWater water) {
            if (water == null) {
              throw new MissingRequiredPropertyException("GetSensorReadingsHistoryItem", "water");
            }
            this.water = water;
            return this;
        }
        public GetSensorReadingsHistoryItem build() {
            final var _resultValue = new GetSensorReadingsHistoryItem();
            _resultValue.apparentPower = apparentPower;
            _resultValue.battery = battery;
            _resultValue.button = button;
            _resultValue.co2 = co2;
            _resultValue.current = current;
            _resultValue.door = door;
            _resultValue.downstreamPower = downstreamPower;
            _resultValue.frequency = frequency;
            _resultValue.humidity = humidity;
            _resultValue.indoorAirQuality = indoorAirQuality;
            _resultValue.metric = metric;
            _resultValue.network = network;
            _resultValue.noise = noise;
            _resultValue.pm25 = pm25;
            _resultValue.powerFactor = powerFactor;
            _resultValue.realPower = realPower;
            _resultValue.remoteLockoutSwitch = remoteLockoutSwitch;
            _resultValue.serial = serial;
            _resultValue.temperature = temperature;
            _resultValue.ts = ts;
            _resultValue.tvoc = tvoc;
            _resultValue.voltage = voltage;
            _resultValue.water = water;
            return _resultValue;
        }
    }
}
