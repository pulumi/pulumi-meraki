// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.administered;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsPlainArgs;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesPlainArgs;
import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsPlainArgs;
import com.pulumi.meraki.administered.outputs.GetIdentitiesMeResult;
import com.pulumi.meraki.administered.outputs.GetLicensingSubscriptionEntitlementsResult;
import com.pulumi.meraki.administered.outputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesResult;
import com.pulumi.meraki.administered.outputs.GetLicensingSubscriptionSubscriptionsResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class AdministeredFunctions {
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdentitiesMeResult> getIdentitiesMe() {
        return getIdentitiesMe(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIdentitiesMeResult> getIdentitiesMePlain() {
        return getIdentitiesMePlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdentitiesMeResult> getIdentitiesMe(InvokeArgs args) {
        return getIdentitiesMe(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIdentitiesMeResult> getIdentitiesMePlain(InvokeArgs args) {
        return getIdentitiesMePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdentitiesMeResult> getIdentitiesMe(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getIdentitiesMe:getIdentitiesMe", TypeShape.of(GetIdentitiesMeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdentitiesMeResult> getIdentitiesMe(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getIdentitiesMe:getIdentitiesMe", TypeShape.of(GetIdentitiesMeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getIdentitiesMe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
     * 
     *         ctx.export("merakiAdministeredIdentitiesMeExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIdentitiesMeResult> getIdentitiesMePlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:administered/getIdentitiesMe:getIdentitiesMe", TypeShape.of(GetIdentitiesMeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlements() {
        return getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlementsPlain() {
        return getLicensingSubscriptionEntitlementsPlain(GetLicensingSubscriptionEntitlementsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs args) {
        return getLicensingSubscriptionEntitlements(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlementsPlain(GetLicensingSubscriptionEntitlementsPlainArgs args) {
        return getLicensingSubscriptionEntitlementsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionEntitlements:getLicensingSubscriptionEntitlements", TypeShape.of(GetLicensingSubscriptionEntitlementsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionEntitlements:getLicensingSubscriptionEntitlements", TypeShape.of(GetLicensingSubscriptionEntitlementsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionEntitlementsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionEntitlements(GetLicensingSubscriptionEntitlementsArgs.builder()
     *             .skuses("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionEntitlementsExample", example.item());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionEntitlementsResult> getLicensingSubscriptionEntitlementsPlain(GetLicensingSubscriptionEntitlementsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:administered/getLicensingSubscriptionEntitlements:getLicensingSubscriptionEntitlements", TypeShape.of(GetLicensingSubscriptionEntitlementsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptions() {
        return getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptionsPlain() {
        return getLicensingSubscriptionSubscriptionsPlain(GetLicensingSubscriptionSubscriptionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs args) {
        return getLicensingSubscriptionSubscriptions(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptionsPlain(GetLicensingSubscriptionSubscriptionsPlainArgs args) {
        return getLicensingSubscriptionSubscriptionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionSubscriptions:getLicensingSubscriptionSubscriptions", TypeShape.of(GetLicensingSubscriptionSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionSubscriptions:getLicensingSubscriptionSubscriptions", TypeShape.of(GetLicensingSubscriptionSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptions(GetLicensingSubscriptionSubscriptionsArgs.builder()
     *             .endDate("string")
     *             .endingBefore("string")
     *             .organizationIds("string")
     *             .perPage(1)
     *             .productTypes("string")
     *             .startDate("string")
     *             .startingAfter("string")
     *             .statuses("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsResult> getLicensingSubscriptionSubscriptionsPlain(GetLicensingSubscriptionSubscriptionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:administered/getLicensingSubscriptionSubscriptions:getLicensingSubscriptionSubscriptions", TypeShape.of(GetLicensingSubscriptionSubscriptionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatuses() {
        return getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatusesPlain() {
        return getLicensingSubscriptionSubscriptionsComplianceStatusesPlain(GetLicensingSubscriptionSubscriptionsComplianceStatusesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs args) {
        return getLicensingSubscriptionSubscriptionsComplianceStatuses(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatusesPlain(GetLicensingSubscriptionSubscriptionsComplianceStatusesPlainArgs args) {
        return getLicensingSubscriptionSubscriptionsComplianceStatusesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionSubscriptionsComplianceStatuses:getLicensingSubscriptionSubscriptionsComplianceStatuses", TypeShape.of(GetLicensingSubscriptionSubscriptionsComplianceStatusesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("meraki:administered/getLicensingSubscriptionSubscriptionsComplianceStatuses:getLicensingSubscriptionSubscriptionsComplianceStatuses", TypeShape.of(GetLicensingSubscriptionSubscriptionsComplianceStatusesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.administered.AdministeredFunctions;
     * import com.pulumi.meraki.administered.inputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AdministeredFunctions.getLicensingSubscriptionSubscriptionsComplianceStatuses(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs.builder()
     *             .organizationIds("string")
     *             .subscriptionIds("string")
     *             .build());
     * 
     *         ctx.export("merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample", example.items());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> getLicensingSubscriptionSubscriptionsComplianceStatusesPlain(GetLicensingSubscriptionSubscriptionsComplianceStatusesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:administered/getLicensingSubscriptionSubscriptionsComplianceStatuses:getLicensingSubscriptionSubscriptionsComplianceStatuses", TypeShape.of(GetLicensingSubscriptionSubscriptionsComplianceStatusesResult.class), args, Utilities.withVersion(options));
    }
}
