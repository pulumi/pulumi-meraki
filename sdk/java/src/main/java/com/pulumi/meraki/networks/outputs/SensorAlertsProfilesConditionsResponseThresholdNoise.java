// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.networks.outputs.SensorAlertsProfilesConditionsResponseThresholdNoiseAmbient;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SensorAlertsProfilesConditionsResponseThresholdNoise {
    /**
     * @return Ambient noise threshold. One of &#39;level&#39; or &#39;quality&#39; must be provided.
     * 
     */
    private @Nullable SensorAlertsProfilesConditionsResponseThresholdNoiseAmbient ambient;

    private SensorAlertsProfilesConditionsResponseThresholdNoise() {}
    /**
     * @return Ambient noise threshold. One of &#39;level&#39; or &#39;quality&#39; must be provided.
     * 
     */
    public Optional<SensorAlertsProfilesConditionsResponseThresholdNoiseAmbient> ambient() {
        return Optional.ofNullable(this.ambient);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SensorAlertsProfilesConditionsResponseThresholdNoise defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SensorAlertsProfilesConditionsResponseThresholdNoiseAmbient ambient;
        public Builder() {}
        public Builder(SensorAlertsProfilesConditionsResponseThresholdNoise defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ambient = defaults.ambient;
        }

        @CustomType.Setter
        public Builder ambient(@Nullable SensorAlertsProfilesConditionsResponseThresholdNoiseAmbient ambient) {

            this.ambient = ambient;
            return this;
        }
        public SensorAlertsProfilesConditionsResponseThresholdNoise build() {
            final var _resultValue = new SensorAlertsProfilesConditionsResponseThresholdNoise();
            _resultValue.ambient = ambient;
            return _resultValue;
        }
    }
}
