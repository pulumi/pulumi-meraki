// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemBilling;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemGuestSponsorship;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemSelfRegistration;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemSentryEnrollment;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemSplashImage;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemSplashLogo;
import com.pulumi.meraki.networks.outputs.GetWirelessSsidsSplashSettingsItemSplashPrepaidFront;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWirelessSsidsSplashSettingsItem {
    /**
     * @return Whether or not to allow simultaneous logins from different devices.
     * 
     */
    private Boolean allowSimultaneousLogins;
    /**
     * @return Details associated with billing splash
     * 
     */
    private GetWirelessSsidsSplashSettingsItemBilling billing;
    /**
     * @return How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    private Boolean blockAllTrafficBeforeSignOn;
    /**
     * @return How login attempts should be handled when the controller is unreachable.
     * 
     */
    private String controllerDisconnectionBehavior;
    /**
     * @return Details associated with guest sponsored splash
     * 
     */
    private GetWirelessSsidsSplashSettingsItemGuestSponsorship guestSponsorship;
    /**
     * @return The custom redirect URL where the users will go after the splash page.
     * 
     */
    private String redirectUrl;
    /**
     * @return Self-registration for splash with Meraki authentication.
     * 
     */
    private GetWirelessSsidsSplashSettingsItemSelfRegistration selfRegistration;
    /**
     * @return Systems Manager sentry enrollment splash settings.
     * 
     */
    private GetWirelessSsidsSplashSettingsItemSentryEnrollment sentryEnrollment;
    /**
     * @return The image used in the splash page.
     * 
     */
    private GetWirelessSsidsSplashSettingsItemSplashImage splashImage;
    /**
     * @return The logo used in the splash page.
     * 
     */
    private GetWirelessSsidsSplashSettingsItemSplashLogo splashLogo;
    /**
     * @return The type of splash page for this SSID
     * 
     */
    private String splashPage;
    /**
     * @return The prepaid front image used in the splash page.
     * 
     */
    private GetWirelessSsidsSplashSettingsItemSplashPrepaidFront splashPrepaidFront;
    /**
     * @return Splash timeout in minutes.
     * 
     */
    private Integer splashTimeout;
    /**
     * @return The custom splash URL of the click-through splash page.
     * 
     */
    private String splashUrl;
    /**
     * @return SSID number
     * 
     */
    private Integer ssidNumber;
    /**
     * @return The id of the selected splash theme.
     * 
     */
    private String themeId;
    /**
     * @return The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    private Boolean useRedirectUrl;
    /**
     * @return Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    private Boolean useSplashUrl;
    /**
     * @return The welcome message for the users on the splash page.
     * 
     */
    private String welcomeMessage;

    private GetWirelessSsidsSplashSettingsItem() {}
    /**
     * @return Whether or not to allow simultaneous logins from different devices.
     * 
     */
    public Boolean allowSimultaneousLogins() {
        return this.allowSimultaneousLogins;
    }
    /**
     * @return Details associated with billing splash
     * 
     */
    public GetWirelessSsidsSplashSettingsItemBilling billing() {
        return this.billing;
    }
    /**
     * @return How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     * 
     */
    public Boolean blockAllTrafficBeforeSignOn() {
        return this.blockAllTrafficBeforeSignOn;
    }
    /**
     * @return How login attempts should be handled when the controller is unreachable.
     * 
     */
    public String controllerDisconnectionBehavior() {
        return this.controllerDisconnectionBehavior;
    }
    /**
     * @return Details associated with guest sponsored splash
     * 
     */
    public GetWirelessSsidsSplashSettingsItemGuestSponsorship guestSponsorship() {
        return this.guestSponsorship;
    }
    /**
     * @return The custom redirect URL where the users will go after the splash page.
     * 
     */
    public String redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * @return Self-registration for splash with Meraki authentication.
     * 
     */
    public GetWirelessSsidsSplashSettingsItemSelfRegistration selfRegistration() {
        return this.selfRegistration;
    }
    /**
     * @return Systems Manager sentry enrollment splash settings.
     * 
     */
    public GetWirelessSsidsSplashSettingsItemSentryEnrollment sentryEnrollment() {
        return this.sentryEnrollment;
    }
    /**
     * @return The image used in the splash page.
     * 
     */
    public GetWirelessSsidsSplashSettingsItemSplashImage splashImage() {
        return this.splashImage;
    }
    /**
     * @return The logo used in the splash page.
     * 
     */
    public GetWirelessSsidsSplashSettingsItemSplashLogo splashLogo() {
        return this.splashLogo;
    }
    /**
     * @return The type of splash page for this SSID
     * 
     */
    public String splashPage() {
        return this.splashPage;
    }
    /**
     * @return The prepaid front image used in the splash page.
     * 
     */
    public GetWirelessSsidsSplashSettingsItemSplashPrepaidFront splashPrepaidFront() {
        return this.splashPrepaidFront;
    }
    /**
     * @return Splash timeout in minutes.
     * 
     */
    public Integer splashTimeout() {
        return this.splashTimeout;
    }
    /**
     * @return The custom splash URL of the click-through splash page.
     * 
     */
    public String splashUrl() {
        return this.splashUrl;
    }
    /**
     * @return SSID number
     * 
     */
    public Integer ssidNumber() {
        return this.ssidNumber;
    }
    /**
     * @return The id of the selected splash theme.
     * 
     */
    public String themeId() {
        return this.themeId;
    }
    /**
     * @return The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
     * 
     */
    public Boolean useRedirectUrl() {
        return this.useRedirectUrl;
    }
    /**
     * @return Boolean indicating whether the users will be redirected to the custom splash url
     * 
     */
    public Boolean useSplashUrl() {
        return this.useSplashUrl;
    }
    /**
     * @return The welcome message for the users on the splash page.
     * 
     */
    public String welcomeMessage() {
        return this.welcomeMessage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWirelessSsidsSplashSettingsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowSimultaneousLogins;
        private GetWirelessSsidsSplashSettingsItemBilling billing;
        private Boolean blockAllTrafficBeforeSignOn;
        private String controllerDisconnectionBehavior;
        private GetWirelessSsidsSplashSettingsItemGuestSponsorship guestSponsorship;
        private String redirectUrl;
        private GetWirelessSsidsSplashSettingsItemSelfRegistration selfRegistration;
        private GetWirelessSsidsSplashSettingsItemSentryEnrollment sentryEnrollment;
        private GetWirelessSsidsSplashSettingsItemSplashImage splashImage;
        private GetWirelessSsidsSplashSettingsItemSplashLogo splashLogo;
        private String splashPage;
        private GetWirelessSsidsSplashSettingsItemSplashPrepaidFront splashPrepaidFront;
        private Integer splashTimeout;
        private String splashUrl;
        private Integer ssidNumber;
        private String themeId;
        private Boolean useRedirectUrl;
        private Boolean useSplashUrl;
        private String welcomeMessage;
        public Builder() {}
        public Builder(GetWirelessSsidsSplashSettingsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowSimultaneousLogins = defaults.allowSimultaneousLogins;
    	      this.billing = defaults.billing;
    	      this.blockAllTrafficBeforeSignOn = defaults.blockAllTrafficBeforeSignOn;
    	      this.controllerDisconnectionBehavior = defaults.controllerDisconnectionBehavior;
    	      this.guestSponsorship = defaults.guestSponsorship;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.selfRegistration = defaults.selfRegistration;
    	      this.sentryEnrollment = defaults.sentryEnrollment;
    	      this.splashImage = defaults.splashImage;
    	      this.splashLogo = defaults.splashLogo;
    	      this.splashPage = defaults.splashPage;
    	      this.splashPrepaidFront = defaults.splashPrepaidFront;
    	      this.splashTimeout = defaults.splashTimeout;
    	      this.splashUrl = defaults.splashUrl;
    	      this.ssidNumber = defaults.ssidNumber;
    	      this.themeId = defaults.themeId;
    	      this.useRedirectUrl = defaults.useRedirectUrl;
    	      this.useSplashUrl = defaults.useSplashUrl;
    	      this.welcomeMessage = defaults.welcomeMessage;
        }

        @CustomType.Setter
        public Builder allowSimultaneousLogins(Boolean allowSimultaneousLogins) {
            if (allowSimultaneousLogins == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "allowSimultaneousLogins");
            }
            this.allowSimultaneousLogins = allowSimultaneousLogins;
            return this;
        }
        @CustomType.Setter
        public Builder billing(GetWirelessSsidsSplashSettingsItemBilling billing) {
            if (billing == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "billing");
            }
            this.billing = billing;
            return this;
        }
        @CustomType.Setter
        public Builder blockAllTrafficBeforeSignOn(Boolean blockAllTrafficBeforeSignOn) {
            if (blockAllTrafficBeforeSignOn == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "blockAllTrafficBeforeSignOn");
            }
            this.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
            return this;
        }
        @CustomType.Setter
        public Builder controllerDisconnectionBehavior(String controllerDisconnectionBehavior) {
            if (controllerDisconnectionBehavior == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "controllerDisconnectionBehavior");
            }
            this.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder guestSponsorship(GetWirelessSsidsSplashSettingsItemGuestSponsorship guestSponsorship) {
            if (guestSponsorship == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "guestSponsorship");
            }
            this.guestSponsorship = guestSponsorship;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            if (redirectUrl == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "redirectUrl");
            }
            this.redirectUrl = redirectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder selfRegistration(GetWirelessSsidsSplashSettingsItemSelfRegistration selfRegistration) {
            if (selfRegistration == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "selfRegistration");
            }
            this.selfRegistration = selfRegistration;
            return this;
        }
        @CustomType.Setter
        public Builder sentryEnrollment(GetWirelessSsidsSplashSettingsItemSentryEnrollment sentryEnrollment) {
            if (sentryEnrollment == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "sentryEnrollment");
            }
            this.sentryEnrollment = sentryEnrollment;
            return this;
        }
        @CustomType.Setter
        public Builder splashImage(GetWirelessSsidsSplashSettingsItemSplashImage splashImage) {
            if (splashImage == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashImage");
            }
            this.splashImage = splashImage;
            return this;
        }
        @CustomType.Setter
        public Builder splashLogo(GetWirelessSsidsSplashSettingsItemSplashLogo splashLogo) {
            if (splashLogo == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashLogo");
            }
            this.splashLogo = splashLogo;
            return this;
        }
        @CustomType.Setter
        public Builder splashPage(String splashPage) {
            if (splashPage == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashPage");
            }
            this.splashPage = splashPage;
            return this;
        }
        @CustomType.Setter
        public Builder splashPrepaidFront(GetWirelessSsidsSplashSettingsItemSplashPrepaidFront splashPrepaidFront) {
            if (splashPrepaidFront == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashPrepaidFront");
            }
            this.splashPrepaidFront = splashPrepaidFront;
            return this;
        }
        @CustomType.Setter
        public Builder splashTimeout(Integer splashTimeout) {
            if (splashTimeout == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashTimeout");
            }
            this.splashTimeout = splashTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder splashUrl(String splashUrl) {
            if (splashUrl == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "splashUrl");
            }
            this.splashUrl = splashUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ssidNumber(Integer ssidNumber) {
            if (ssidNumber == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "ssidNumber");
            }
            this.ssidNumber = ssidNumber;
            return this;
        }
        @CustomType.Setter
        public Builder themeId(String themeId) {
            if (themeId == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "themeId");
            }
            this.themeId = themeId;
            return this;
        }
        @CustomType.Setter
        public Builder useRedirectUrl(Boolean useRedirectUrl) {
            if (useRedirectUrl == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "useRedirectUrl");
            }
            this.useRedirectUrl = useRedirectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder useSplashUrl(Boolean useSplashUrl) {
            if (useSplashUrl == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "useSplashUrl");
            }
            this.useSplashUrl = useSplashUrl;
            return this;
        }
        @CustomType.Setter
        public Builder welcomeMessage(String welcomeMessage) {
            if (welcomeMessage == null) {
              throw new MissingRequiredPropertyException("GetWirelessSsidsSplashSettingsItem", "welcomeMessage");
            }
            this.welcomeMessage = welcomeMessage;
            return this;
        }
        public GetWirelessSsidsSplashSettingsItem build() {
            final var _resultValue = new GetWirelessSsidsSplashSettingsItem();
            _resultValue.allowSimultaneousLogins = allowSimultaneousLogins;
            _resultValue.billing = billing;
            _resultValue.blockAllTrafficBeforeSignOn = blockAllTrafficBeforeSignOn;
            _resultValue.controllerDisconnectionBehavior = controllerDisconnectionBehavior;
            _resultValue.guestSponsorship = guestSponsorship;
            _resultValue.redirectUrl = redirectUrl;
            _resultValue.selfRegistration = selfRegistration;
            _resultValue.sentryEnrollment = sentryEnrollment;
            _resultValue.splashImage = splashImage;
            _resultValue.splashLogo = splashLogo;
            _resultValue.splashPage = splashPage;
            _resultValue.splashPrepaidFront = splashPrepaidFront;
            _resultValue.splashTimeout = splashTimeout;
            _resultValue.splashUrl = splashUrl;
            _resultValue.ssidNumber = ssidNumber;
            _resultValue.themeId = themeId;
            _resultValue.useRedirectUrl = useRedirectUrl;
            _resultValue.useSplashUrl = useSplashUrl;
            _resultValue.welcomeMessage = welcomeMessage;
            return _resultValue;
        }
    }
}
