// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceFirewallOneToManyNatRulesRulePortRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceFirewallOneToManyNatRulesRulePortRuleArgs Empty = new ApplianceFirewallOneToManyNatRulesRulePortRuleArgs();

    /**
     * Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
     * 
     */
    @Import(name="allowedIps")
    private @Nullable Output<List<String>> allowedIps;

    /**
     * @return Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
     * 
     */
    public Optional<Output<List<String>>> allowedIps() {
        return Optional.ofNullable(this.allowedIps);
    }

    /**
     * Local IP address to which traffic will be forwarded
     * 
     */
    @Import(name="localIp")
    private @Nullable Output<String> localIp;

    /**
     * @return Local IP address to which traffic will be forwarded
     * 
     */
    public Optional<Output<String>> localIp() {
        return Optional.ofNullable(this.localIp);
    }

    /**
     * Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
     * 
     */
    @Import(name="localPort")
    private @Nullable Output<String> localPort;

    /**
     * @return Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
     * 
     */
    public Optional<Output<String>> localPort() {
        return Optional.ofNullable(this.localPort);
    }

    /**
     * A description of the rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A description of the rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * &#39;tcp&#39; or &#39;udp&#39;
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return &#39;tcp&#39; or &#39;udp&#39;
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Destination port of the traffic that is arriving on the WAN
     * 
     */
    @Import(name="publicPort")
    private @Nullable Output<String> publicPort;

    /**
     * @return Destination port of the traffic that is arriving on the WAN
     * 
     */
    public Optional<Output<String>> publicPort() {
        return Optional.ofNullable(this.publicPort);
    }

    private ApplianceFirewallOneToManyNatRulesRulePortRuleArgs() {}

    private ApplianceFirewallOneToManyNatRulesRulePortRuleArgs(ApplianceFirewallOneToManyNatRulesRulePortRuleArgs $) {
        this.allowedIps = $.allowedIps;
        this.localIp = $.localIp;
        this.localPort = $.localPort;
        this.name = $.name;
        this.protocol = $.protocol;
        this.publicPort = $.publicPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceFirewallOneToManyNatRulesRulePortRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceFirewallOneToManyNatRulesRulePortRuleArgs $;

        public Builder() {
            $ = new ApplianceFirewallOneToManyNatRulesRulePortRuleArgs();
        }

        public Builder(ApplianceFirewallOneToManyNatRulesRulePortRuleArgs defaults) {
            $ = new ApplianceFirewallOneToManyNatRulesRulePortRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIps Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(@Nullable Output<List<String>> allowedIps) {
            $.allowedIps = allowedIps;
            return this;
        }

        /**
         * @param allowedIps Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(List<String> allowedIps) {
            return allowedIps(Output.of(allowedIps));
        }

        /**
         * @param allowedIps Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }

        /**
         * @param localIp Local IP address to which traffic will be forwarded
         * 
         * @return builder
         * 
         */
        public Builder localIp(@Nullable Output<String> localIp) {
            $.localIp = localIp;
            return this;
        }

        /**
         * @param localIp Local IP address to which traffic will be forwarded
         * 
         * @return builder
         * 
         */
        public Builder localIp(String localIp) {
            return localIp(Output.of(localIp));
        }

        /**
         * @param localPort Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
         * 
         * @return builder
         * 
         */
        public Builder localPort(@Nullable Output<String> localPort) {
            $.localPort = localPort;
            return this;
        }

        /**
         * @param localPort Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
         * 
         * @return builder
         * 
         */
        public Builder localPort(String localPort) {
            return localPort(Output.of(localPort));
        }

        /**
         * @param name A description of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A description of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol &#39;tcp&#39; or &#39;udp&#39;
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol &#39;tcp&#39; or &#39;udp&#39;
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param publicPort Destination port of the traffic that is arriving on the WAN
         * 
         * @return builder
         * 
         */
        public Builder publicPort(@Nullable Output<String> publicPort) {
            $.publicPort = publicPort;
            return this;
        }

        /**
         * @param publicPort Destination port of the traffic that is arriving on the WAN
         * 
         * @return builder
         * 
         */
        public Builder publicPort(String publicPort) {
            return publicPort(Output.of(publicPort));
        }

        public ApplianceFirewallOneToManyNatRulesRulePortRuleArgs build() {
            return $;
        }
    }

}
