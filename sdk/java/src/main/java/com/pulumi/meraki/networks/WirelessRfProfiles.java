// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.networks.WirelessRfProfilesArgs;
import com.pulumi.meraki.networks.inputs.WirelessRfProfilesState;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesApBandSettings;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesFiveGhzSettings;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesFlexRadios;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesPerSsidSettings;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesSixGhzSettings;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesTransmission;
import com.pulumi.meraki.networks.outputs.WirelessRfProfilesTwoFourGhzSettings;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.networks.WirelessRfProfiles;
 * import com.pulumi.meraki.networks.WirelessRfProfilesArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesApBandSettingsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesApBandSettingsBandsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesFiveGhzSettingsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesFlexRadiosArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesPerSsidSettingsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesSixGhzSettingsArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesTransmissionArgs;
 * import com.pulumi.meraki.networks.inputs.WirelessRfProfilesTwoFourGhzSettingsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new WirelessRfProfiles("example", WirelessRfProfilesArgs.builder()
 *             .apBandSettings(WirelessRfProfilesApBandSettingsArgs.builder()
 *                 .band_operation_mode("dual")
 *                 .band_steering_enabled(true)
 *                 .bands(WirelessRfProfilesApBandSettingsBandsArgs.builder()
 *                     .enabled(List.of(                    
 *                         "2.4",
 *                         "5"))
 *                     .build())
 *                 .build())
 *             .bandSelectionType("ap")
 *             .clientBalancingEnabled(true)
 *             .fiveGhzSettings(WirelessRfProfilesFiveGhzSettingsArgs.builder()
 *                 .channel_width("auto")
 *                 .max_power(30)
 *                 .min_bitrate(12)
 *                 .min_power(8)
 *                 .rxsop(-95)
 *                 .valid_auto_channels(List.of(                
 *                     36,
 *                     40,
 *                     44,
 *                     48,
 *                     52,
 *                     56,
 *                     60,
 *                     64,
 *                     100,
 *                     104,
 *                     108,
 *                     112,
 *                     116,
 *                     120,
 *                     124,
 *                     128,
 *                     132,
 *                     136,
 *                     140,
 *                     144,
 *                     149,
 *                     153,
 *                     157,
 *                     161,
 *                     165))
 *                 .build())
 *             .flexRadios(WirelessRfProfilesFlexRadiosArgs.builder()
 *                 .by_model(List.of(Map.ofEntries(
 *                     Map.entry("bands", List.of("5")),
 *                     Map.entry("model", "MR34")
 *                 )))
 *                 .build())
 *             .minBitrateType("band")
 *             .name("Main Office")
 *             .networkId("string")
 *             .perSsidSettings(WirelessRfProfilesPerSsidSettingsArgs.builder()
 *                 .status_0(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_1(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_10(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_11(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_12(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_13(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_14(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_2(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_3(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_4(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_5(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_6(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_7(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_8(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .status_9(Map.ofEntries(
 *                     Map.entry("bandOperationMode", "dual"),
 *                     Map.entry("bandSteeringEnabled", true),
 *                     Map.entry("bands", Map.of("enabled", List.of(                    
 *                         "2.4",
 *                         "5"))),
 *                     Map.entry("minBitrate", 11)
 *                 ))
 *                 .build())
 *             .sixGhzSettings(WirelessRfProfilesSixGhzSettingsArgs.builder()
 *                 .channel_width("auto")
 *                 .max_power(30)
 *                 .min_bitrate(12)
 *                 .min_power(8)
 *                 .rxsop(-95)
 *                 .valid_auto_channels(List.of(                
 *                     1,
 *                     5,
 *                     9,
 *                     13,
 *                     17,
 *                     21,
 *                     25,
 *                     29,
 *                     33,
 *                     37,
 *                     41,
 *                     45,
 *                     49,
 *                     53,
 *                     57,
 *                     61,
 *                     65,
 *                     69,
 *                     73,
 *                     77,
 *                     81,
 *                     85,
 *                     89,
 *                     93,
 *                     97,
 *                     101,
 *                     105,
 *                     109,
 *                     113,
 *                     117,
 *                     121,
 *                     125,
 *                     129,
 *                     133,
 *                     137,
 *                     141,
 *                     145,
 *                     149,
 *                     153,
 *                     157,
 *                     161,
 *                     165,
 *                     169,
 *                     173,
 *                     177,
 *                     181,
 *                     185,
 *                     189,
 *                     193,
 *                     197,
 *                     201,
 *                     205,
 *                     209,
 *                     213,
 *                     217,
 *                     221,
 *                     225,
 *                     229,
 *                     233))
 *                 .build())
 *             .transmission(WirelessRfProfilesTransmissionArgs.builder()
 *                 .enabled(true)
 *                 .build())
 *             .twoFourGhzSettings(WirelessRfProfilesTwoFourGhzSettingsArgs.builder()
 *                 .ax_enabled(true)
 *                 .max_power(30)
 *                 .min_bitrate(11)
 *                 .min_power(5)
 *                 .rxsop(-95)
 *                 .valid_auto_channels(List.of(                
 *                     1,
 *                     6,
 *                     11))
 *                 .build())
 *             .build());
 * 
 *         ctx.export("merakiNetworksWirelessRfProfilesExample", example);
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:networks/wirelessRfProfiles:WirelessRfProfiles example &#34;network_id,rf_profile_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:networks/wirelessRfProfiles:WirelessRfProfiles")
public class WirelessRfProfiles extends com.pulumi.resources.CustomResource {
    /**
     * Settings that will be enabled if selectionType is set to &#39;ap&#39;.
     * 
     */
    @Export(name="apBandSettings", refs={WirelessRfProfilesApBandSettings.class}, tree="[0]")
    private Output<WirelessRfProfilesApBandSettings> apBandSettings;

    /**
     * @return Settings that will be enabled if selectionType is set to &#39;ap&#39;.
     * 
     */
    public Output<WirelessRfProfilesApBandSettings> apBandSettings() {
        return this.apBandSettings;
    }
    /**
     * Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
     * 
     */
    @Export(name="bandSelectionType", refs={String.class}, tree="[0]")
    private Output<String> bandSelectionType;

    /**
     * @return Band selection can be set to either &#39;ssid&#39; or &#39;ap&#39;. This param is required on creation.
     * 
     */
    public Output<String> bandSelectionType() {
        return this.bandSelectionType;
    }
    /**
     * Steers client to best available access point. Can be either true or false. Defaults to true.
     * 
     */
    @Export(name="clientBalancingEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> clientBalancingEnabled;

    /**
     * @return Steers client to best available access point. Can be either true or false. Defaults to true.
     * 
     */
    public Output<Boolean> clientBalancingEnabled() {
        return this.clientBalancingEnabled;
    }
    /**
     * Settings related to 5Ghz band
     * 
     */
    @Export(name="fiveGhzSettings", refs={WirelessRfProfilesFiveGhzSettings.class}, tree="[0]")
    private Output<WirelessRfProfilesFiveGhzSettings> fiveGhzSettings;

    /**
     * @return Settings related to 5Ghz band
     * 
     */
    public Output<WirelessRfProfilesFiveGhzSettings> fiveGhzSettings() {
        return this.fiveGhzSettings;
    }
    /**
     * Flex radio settings.
     * 
     */
    @Export(name="flexRadios", refs={WirelessRfProfilesFlexRadios.class}, tree="[0]")
    private Output</* @Nullable */ WirelessRfProfilesFlexRadios> flexRadios;

    /**
     * @return Flex radio settings.
     * 
     */
    public Output<Optional<WirelessRfProfilesFlexRadios>> flexRadios() {
        return Codegen.optional(this.flexRadios);
    }
    /**
     * Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
     * 
     */
    @Export(name="minBitrateType", refs={String.class}, tree="[0]")
    private Output<String> minBitrateType;

    /**
     * @return Minimum bitrate can be set to either &#39;band&#39; or &#39;ssid&#39;. Defaults to band.
     * 
     */
    public Output<String> minBitrateType() {
        return this.minBitrateType;
    }
    /**
     * The name of the new profile. Must be unique. This param is required on creation.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the new profile. Must be unique. This param is required on creation.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The network ID of the RF Profile
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return The network ID of the RF Profile
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * Per-SSID radio settings by number.
     * 
     */
    @Export(name="perSsidSettings", refs={WirelessRfProfilesPerSsidSettings.class}, tree="[0]")
    private Output<WirelessRfProfilesPerSsidSettings> perSsidSettings;

    /**
     * @return Per-SSID radio settings by number.
     * 
     */
    public Output<WirelessRfProfilesPerSsidSettings> perSsidSettings() {
        return this.perSsidSettings;
    }
    /**
     * rfProfileId path parameter. Rf profile ID
     * 
     */
    @Export(name="rfProfileId", refs={String.class}, tree="[0]")
    private Output<String> rfProfileId;

    /**
     * @return rfProfileId path parameter. Rf profile ID
     * 
     */
    public Output<String> rfProfileId() {
        return this.rfProfileId;
    }
    /**
     * Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
     * 
     */
    @Export(name="sixGhzSettings", refs={WirelessRfProfilesSixGhzSettings.class}, tree="[0]")
    private Output<WirelessRfProfilesSixGhzSettings> sixGhzSettings;

    /**
     * @return Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
     * 
     */
    public Output<WirelessRfProfilesSixGhzSettings> sixGhzSettings() {
        return this.sixGhzSettings;
    }
    /**
     * Settings related to radio transmission.
     * 
     */
    @Export(name="transmission", refs={WirelessRfProfilesTransmission.class}, tree="[0]")
    private Output<WirelessRfProfilesTransmission> transmission;

    /**
     * @return Settings related to radio transmission.
     * 
     */
    public Output<WirelessRfProfilesTransmission> transmission() {
        return this.transmission;
    }
    /**
     * Settings related to 2.4Ghz band
     * 
     */
    @Export(name="twoFourGhzSettings", refs={WirelessRfProfilesTwoFourGhzSettings.class}, tree="[0]")
    private Output<WirelessRfProfilesTwoFourGhzSettings> twoFourGhzSettings;

    /**
     * @return Settings related to 2.4Ghz band
     * 
     */
    public Output<WirelessRfProfilesTwoFourGhzSettings> twoFourGhzSettings() {
        return this.twoFourGhzSettings;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WirelessRfProfiles(java.lang.String name) {
        this(name, WirelessRfProfilesArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WirelessRfProfiles(java.lang.String name, WirelessRfProfilesArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WirelessRfProfiles(java.lang.String name, WirelessRfProfilesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/wirelessRfProfiles:WirelessRfProfiles", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WirelessRfProfiles(java.lang.String name, Output<java.lang.String> id, @Nullable WirelessRfProfilesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/wirelessRfProfiles:WirelessRfProfiles", name, state, makeResourceOptions(options, id), false);
    }

    private static WirelessRfProfilesArgs makeArgs(WirelessRfProfilesArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WirelessRfProfilesArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-meraki")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WirelessRfProfiles get(java.lang.String name, Output<java.lang.String> id, @Nullable WirelessRfProfilesState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WirelessRfProfiles(name, id, state, options);
    }
}
