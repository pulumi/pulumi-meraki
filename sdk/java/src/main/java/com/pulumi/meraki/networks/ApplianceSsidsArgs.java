// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.ApplianceSsidsDhcpEnforcedDeauthenticationArgs;
import com.pulumi.meraki.networks.inputs.ApplianceSsidsDot11wArgs;
import com.pulumi.meraki.networks.inputs.ApplianceSsidsRadiusServerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceSsidsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceSsidsArgs Empty = new ApplianceSsidsArgs();

    /**
     * The association control method for the SSID.
     * 
     */
    @Import(name="authMode")
    private @Nullable Output<String> authMode;

    /**
     * @return The association control method for the SSID.
     * 
     */
    public Optional<Output<String>> authMode() {
        return Optional.ofNullable(this.authMode);
    }

    /**
     * The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    @Import(name="defaultVlanId")
    private @Nullable Output<Integer> defaultVlanId;

    /**
     * @return The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    public Optional<Output<Integer>> defaultVlanId() {
        return Optional.ofNullable(this.defaultVlanId);
    }

    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     * 
     */
    @Import(name="dhcpEnforcedDeauthentication")
    private @Nullable Output<ApplianceSsidsDhcpEnforcedDeauthenticationArgs> dhcpEnforcedDeauthentication;

    /**
     * @return DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     * 
     */
    public Optional<Output<ApplianceSsidsDhcpEnforcedDeauthenticationArgs>> dhcpEnforcedDeauthentication() {
        return Optional.ofNullable(this.dhcpEnforcedDeauthentication);
    }

    /**
     * The current setting for Protected Management Frames (802.11w).
     * 
     */
    @Import(name="dot11w")
    private @Nullable Output<ApplianceSsidsDot11wArgs> dot11w;

    /**
     * @return The current setting for Protected Management Frames (802.11w).
     * 
     */
    public Optional<Output<ApplianceSsidsDot11wArgs>> dot11w() {
        return Optional.ofNullable(this.dot11w);
    }

    /**
     * Whether or not the SSID is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not the SSID is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The psk encryption mode for the SSID.
     * 
     */
    @Import(name="encryptionMode")
    private @Nullable Output<String> encryptionMode;

    /**
     * @return The psk encryption mode for the SSID.
     * 
     */
    public Optional<Output<String>> encryptionMode() {
        return Optional.ofNullable(this.encryptionMode);
    }

    /**
     * The name of the SSID.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the SSID.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The number of the SSID.
     * 
     */
    @Import(name="number", required=true)
    private Output<Integer> number;

    /**
     * @return The number of the SSID.
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }

    /**
     * The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
     * 
     */
    @Import(name="psk")
    private @Nullable Output<String> psk;

    /**
     * @return The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
     * 
     */
    public Optional<Output<String>> psk() {
        return Optional.ofNullable(this.psk);
    }

    /**
     * The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    @Import(name="radiusServers")
    private @Nullable Output<List<ApplianceSsidsRadiusServerArgs>> radiusServers;

    /**
     * @return The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    public Optional<Output<List<ApplianceSsidsRadiusServerArgs>>> radiusServers() {
        return Optional.ofNullable(this.radiusServers);
    }

    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    @Import(name="visible")
    private @Nullable Output<Boolean> visible;

    /**
     * @return Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    public Optional<Output<Boolean>> visible() {
        return Optional.ofNullable(this.visible);
    }

    /**
     * WPA encryption mode for the SSID.
     * 
     */
    @Import(name="wpaEncryptionMode")
    private @Nullable Output<String> wpaEncryptionMode;

    /**
     * @return WPA encryption mode for the SSID.
     * 
     */
    public Optional<Output<String>> wpaEncryptionMode() {
        return Optional.ofNullable(this.wpaEncryptionMode);
    }

    private ApplianceSsidsArgs() {}

    private ApplianceSsidsArgs(ApplianceSsidsArgs $) {
        this.authMode = $.authMode;
        this.defaultVlanId = $.defaultVlanId;
        this.dhcpEnforcedDeauthentication = $.dhcpEnforcedDeauthentication;
        this.dot11w = $.dot11w;
        this.enabled = $.enabled;
        this.encryptionMode = $.encryptionMode;
        this.name = $.name;
        this.networkId = $.networkId;
        this.number = $.number;
        this.psk = $.psk;
        this.radiusServers = $.radiusServers;
        this.visible = $.visible;
        this.wpaEncryptionMode = $.wpaEncryptionMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceSsidsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceSsidsArgs $;

        public Builder() {
            $ = new ApplianceSsidsArgs();
        }

        public Builder(ApplianceSsidsArgs defaults) {
            $ = new ApplianceSsidsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authMode The association control method for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder authMode(@Nullable Output<String> authMode) {
            $.authMode = authMode;
            return this;
        }

        /**
         * @param authMode The association control method for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder authMode(String authMode) {
            return authMode(Output.of(authMode));
        }

        /**
         * @param defaultVlanId The VLAN ID of the VLAN associated to this SSID.
         * 
         * @return builder
         * 
         */
        public Builder defaultVlanId(@Nullable Output<Integer> defaultVlanId) {
            $.defaultVlanId = defaultVlanId;
            return this;
        }

        /**
         * @param defaultVlanId The VLAN ID of the VLAN associated to this SSID.
         * 
         * @return builder
         * 
         */
        public Builder defaultVlanId(Integer defaultVlanId) {
            return defaultVlanId(Output.of(defaultVlanId));
        }

        /**
         * @param dhcpEnforcedDeauthentication DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnforcedDeauthentication(@Nullable Output<ApplianceSsidsDhcpEnforcedDeauthenticationArgs> dhcpEnforcedDeauthentication) {
            $.dhcpEnforcedDeauthentication = dhcpEnforcedDeauthentication;
            return this;
        }

        /**
         * @param dhcpEnforcedDeauthentication DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
         * 
         * @return builder
         * 
         */
        public Builder dhcpEnforcedDeauthentication(ApplianceSsidsDhcpEnforcedDeauthenticationArgs dhcpEnforcedDeauthentication) {
            return dhcpEnforcedDeauthentication(Output.of(dhcpEnforcedDeauthentication));
        }

        /**
         * @param dot11w The current setting for Protected Management Frames (802.11w).
         * 
         * @return builder
         * 
         */
        public Builder dot11w(@Nullable Output<ApplianceSsidsDot11wArgs> dot11w) {
            $.dot11w = dot11w;
            return this;
        }

        /**
         * @param dot11w The current setting for Protected Management Frames (802.11w).
         * 
         * @return builder
         * 
         */
        public Builder dot11w(ApplianceSsidsDot11wArgs dot11w) {
            return dot11w(Output.of(dot11w));
        }

        /**
         * @param enabled Whether or not the SSID is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not the SSID is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param encryptionMode The psk encryption mode for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder encryptionMode(@Nullable Output<String> encryptionMode) {
            $.encryptionMode = encryptionMode;
            return this;
        }

        /**
         * @param encryptionMode The psk encryption mode for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder encryptionMode(String encryptionMode) {
            return encryptionMode(Output.of(encryptionMode));
        }

        /**
         * @param name The name of the SSID.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SSID.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param number The number of the SSID.
         * 
         * @return builder
         * 
         */
        public Builder number(Output<Integer> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number The number of the SSID.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        /**
         * @param psk The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder psk(@Nullable Output<String> psk) {
            $.psk = psk;
            return this;
        }

        /**
         * @param psk The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder psk(String psk) {
            return psk(Output.of(psk));
        }

        /**
         * @param radiusServers The RADIUS 802.1x servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(@Nullable Output<List<ApplianceSsidsRadiusServerArgs>> radiusServers) {
            $.radiusServers = radiusServers;
            return this;
        }

        /**
         * @param radiusServers The RADIUS 802.1x servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(List<ApplianceSsidsRadiusServerArgs> radiusServers) {
            return radiusServers(Output.of(radiusServers));
        }

        /**
         * @param radiusServers The RADIUS 802.1x servers to be used for authentication.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(ApplianceSsidsRadiusServerArgs... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }

        /**
         * @param visible Boolean indicating whether the MX should advertise or hide this SSID.
         * 
         * @return builder
         * 
         */
        public Builder visible(@Nullable Output<Boolean> visible) {
            $.visible = visible;
            return this;
        }

        /**
         * @param visible Boolean indicating whether the MX should advertise or hide this SSID.
         * 
         * @return builder
         * 
         */
        public Builder visible(Boolean visible) {
            return visible(Output.of(visible));
        }

        /**
         * @param wpaEncryptionMode WPA encryption mode for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder wpaEncryptionMode(@Nullable Output<String> wpaEncryptionMode) {
            $.wpaEncryptionMode = wpaEncryptionMode;
            return this;
        }

        /**
         * @param wpaEncryptionMode WPA encryption mode for the SSID.
         * 
         * @return builder
         * 
         */
        public Builder wpaEncryptionMode(String wpaEncryptionMode) {
            return wpaEncryptionMode(Output.of(wpaEncryptionMode));
        }

        public ApplianceSsidsArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("ApplianceSsidsArgs", "networkId");
            }
            if ($.number == null) {
                throw new MissingRequiredPropertyException("ApplianceSsidsArgs", "number");
            }
            return $;
        }
    }

}
