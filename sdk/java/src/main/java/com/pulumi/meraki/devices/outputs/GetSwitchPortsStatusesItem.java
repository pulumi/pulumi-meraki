// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemCdp;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemLldp;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemSecurePort;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemSpanningTree;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemTrafficInKbps;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesItemUsageInKb;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchPortsStatusesItem {
    /**
     * @return The Cisco Discovery Protocol (CDP) information of the connected device.
     * 
     */
    private GetSwitchPortsStatusesItemCdp cdp;
    /**
     * @return The number of clients connected through this port.
     * 
     */
    private Integer clientCount;
    /**
     * @return The current duplex of a connected port.
     * 
     */
    private String duplex;
    /**
     * @return Whether the port is configured to be enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return All errors present on the port.
     * 
     */
    private List<String> errors;
    /**
     * @return Whether the port is the switch&#39;s uplink.
     * 
     */
    private Boolean isUplink;
    /**
     * @return The Link Layer Discovery Protocol (LLDP) information of the connected device.
     * 
     */
    private GetSwitchPortsStatusesItemLldp lldp;
    /**
     * @return The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
     * 
     */
    private String portId;
    /**
     * @return How much power (in watt-hours) has been delivered by this port during the timespan.
     * 
     */
    private Double powerUsageInWh;
    /**
     * @return The Secure Port status of the port.
     * 
     */
    private GetSwitchPortsStatusesItemSecurePort securePort;
    /**
     * @return The Spanning Tree Protocol (STP) information of the connected device.
     * 
     */
    private GetSwitchPortsStatusesItemSpanningTree spanningTree;
    /**
     * @return The current data transfer rate which the port is operating at.
     * 
     */
    private String speed;
    /**
     * @return The current connection status of the port.
     * 
     */
    private String status;
    /**
     * @return A breakdown of the average speed of data that has passed through this port during the timespan.
     * 
     */
    private GetSwitchPortsStatusesItemTrafficInKbps trafficInKbps;
    /**
     * @return A breakdown of how many kilobytes have passed through this port during the timespan.
     * 
     */
    private GetSwitchPortsStatusesItemUsageInKb usageInKb;
    /**
     * @return All warnings present on the port.
     * 
     */
    private List<String> warnings;

    private GetSwitchPortsStatusesItem() {}
    /**
     * @return The Cisco Discovery Protocol (CDP) information of the connected device.
     * 
     */
    public GetSwitchPortsStatusesItemCdp cdp() {
        return this.cdp;
    }
    /**
     * @return The number of clients connected through this port.
     * 
     */
    public Integer clientCount() {
        return this.clientCount;
    }
    /**
     * @return The current duplex of a connected port.
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Whether the port is configured to be enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return All errors present on the port.
     * 
     */
    public List<String> errors() {
        return this.errors;
    }
    /**
     * @return Whether the port is the switch&#39;s uplink.
     * 
     */
    public Boolean isUplink() {
        return this.isUplink;
    }
    /**
     * @return The Link Layer Discovery Protocol (LLDP) information of the connected device.
     * 
     */
    public GetSwitchPortsStatusesItemLldp lldp() {
        return this.lldp;
    }
    /**
     * @return The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
     * 
     */
    public String portId() {
        return this.portId;
    }
    /**
     * @return How much power (in watt-hours) has been delivered by this port during the timespan.
     * 
     */
    public Double powerUsageInWh() {
        return this.powerUsageInWh;
    }
    /**
     * @return The Secure Port status of the port.
     * 
     */
    public GetSwitchPortsStatusesItemSecurePort securePort() {
        return this.securePort;
    }
    /**
     * @return The Spanning Tree Protocol (STP) information of the connected device.
     * 
     */
    public GetSwitchPortsStatusesItemSpanningTree spanningTree() {
        return this.spanningTree;
    }
    /**
     * @return The current data transfer rate which the port is operating at.
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return The current connection status of the port.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A breakdown of the average speed of data that has passed through this port during the timespan.
     * 
     */
    public GetSwitchPortsStatusesItemTrafficInKbps trafficInKbps() {
        return this.trafficInKbps;
    }
    /**
     * @return A breakdown of how many kilobytes have passed through this port during the timespan.
     * 
     */
    public GetSwitchPortsStatusesItemUsageInKb usageInKb() {
        return this.usageInKb;
    }
    /**
     * @return All warnings present on the port.
     * 
     */
    public List<String> warnings() {
        return this.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchPortsStatusesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSwitchPortsStatusesItemCdp cdp;
        private Integer clientCount;
        private String duplex;
        private Boolean enabled;
        private List<String> errors;
        private Boolean isUplink;
        private GetSwitchPortsStatusesItemLldp lldp;
        private String portId;
        private Double powerUsageInWh;
        private GetSwitchPortsStatusesItemSecurePort securePort;
        private GetSwitchPortsStatusesItemSpanningTree spanningTree;
        private String speed;
        private String status;
        private GetSwitchPortsStatusesItemTrafficInKbps trafficInKbps;
        private GetSwitchPortsStatusesItemUsageInKb usageInKb;
        private List<String> warnings;
        public Builder() {}
        public Builder(GetSwitchPortsStatusesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cdp = defaults.cdp;
    	      this.clientCount = defaults.clientCount;
    	      this.duplex = defaults.duplex;
    	      this.enabled = defaults.enabled;
    	      this.errors = defaults.errors;
    	      this.isUplink = defaults.isUplink;
    	      this.lldp = defaults.lldp;
    	      this.portId = defaults.portId;
    	      this.powerUsageInWh = defaults.powerUsageInWh;
    	      this.securePort = defaults.securePort;
    	      this.spanningTree = defaults.spanningTree;
    	      this.speed = defaults.speed;
    	      this.status = defaults.status;
    	      this.trafficInKbps = defaults.trafficInKbps;
    	      this.usageInKb = defaults.usageInKb;
    	      this.warnings = defaults.warnings;
        }

        @CustomType.Setter
        public Builder cdp(GetSwitchPortsStatusesItemCdp cdp) {
            if (cdp == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "cdp");
            }
            this.cdp = cdp;
            return this;
        }
        @CustomType.Setter
        public Builder clientCount(Integer clientCount) {
            if (clientCount == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "clientCount");
            }
            this.clientCount = clientCount;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<String> errors) {
            if (errors == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "errors");
            }
            this.errors = errors;
            return this;
        }
        public Builder errors(String... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder isUplink(Boolean isUplink) {
            if (isUplink == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "isUplink");
            }
            this.isUplink = isUplink;
            return this;
        }
        @CustomType.Setter
        public Builder lldp(GetSwitchPortsStatusesItemLldp lldp) {
            if (lldp == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "lldp");
            }
            this.lldp = lldp;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder powerUsageInWh(Double powerUsageInWh) {
            if (powerUsageInWh == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "powerUsageInWh");
            }
            this.powerUsageInWh = powerUsageInWh;
            return this;
        }
        @CustomType.Setter
        public Builder securePort(GetSwitchPortsStatusesItemSecurePort securePort) {
            if (securePort == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "securePort");
            }
            this.securePort = securePort;
            return this;
        }
        @CustomType.Setter
        public Builder spanningTree(GetSwitchPortsStatusesItemSpanningTree spanningTree) {
            if (spanningTree == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "spanningTree");
            }
            this.spanningTree = spanningTree;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder trafficInKbps(GetSwitchPortsStatusesItemTrafficInKbps trafficInKbps) {
            if (trafficInKbps == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "trafficInKbps");
            }
            this.trafficInKbps = trafficInKbps;
            return this;
        }
        @CustomType.Setter
        public Builder usageInKb(GetSwitchPortsStatusesItemUsageInKb usageInKb) {
            if (usageInKb == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "usageInKb");
            }
            this.usageInKb = usageInKb;
            return this;
        }
        @CustomType.Setter
        public Builder warnings(List<String> warnings) {
            if (warnings == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItem", "warnings");
            }
            this.warnings = warnings;
            return this;
        }
        public Builder warnings(String... warnings) {
            return warnings(List.of(warnings));
        }
        public GetSwitchPortsStatusesItem build() {
            final var _resultValue = new GetSwitchPortsStatusesItem();
            _resultValue.cdp = cdp;
            _resultValue.clientCount = clientCount;
            _resultValue.duplex = duplex;
            _resultValue.enabled = enabled;
            _resultValue.errors = errors;
            _resultValue.isUplink = isUplink;
            _resultValue.lldp = lldp;
            _resultValue.portId = portId;
            _resultValue.powerUsageInWh = powerUsageInWh;
            _resultValue.securePort = securePort;
            _resultValue.spanningTree = spanningTree;
            _resultValue.speed = speed;
            _resultValue.status = status;
            _resultValue.trafficInKbps = trafficInKbps;
            _resultValue.usageInKb = usageInKb;
            _resultValue.warnings = warnings;
            return _resultValue;
        }
    }
}
