// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetEventsItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEventsResult {
    /**
     * @return clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    private @Nullable String clientIp;
    /**
     * @return clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    private @Nullable String clientMac;
    /**
     * @return clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    private @Nullable String clientName;
    /**
     * @return deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    private @Nullable String deviceMac;
    /**
     * @return deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    private @Nullable String deviceName;
    /**
     * @return deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    private @Nullable String deviceSerial;
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    private @Nullable List<String> excludedEventTypes;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    private @Nullable List<String> includedEventTypes;
    private GetEventsItem item;
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    private String networkId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    private @Nullable String productType;
    /**
     * @return smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    private @Nullable String smDeviceMac;
    /**
     * @return smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    private @Nullable String smDeviceName;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;

    private GetEventsResult() {}
    /**
     * @return clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * 
     */
    public Optional<String> clientIp() {
        return Optional.ofNullable(this.clientIp);
    }
    /**
     * @return clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * 
     */
    public Optional<String> clientMac() {
        return Optional.ofNullable(this.clientMac);
    }
    /**
     * @return clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
     * 
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }
    /**
     * @return deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceMac() {
        return Optional.ofNullable(this.deviceMac);
    }
    /**
     * @return deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }
    /**
     * @return deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
     * 
     */
    public Optional<String> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
     * 
     */
    public List<String> excludedEventTypes() {
        return this.excludedEventTypes == null ? List.of() : this.excludedEventTypes;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
     * 
     */
    public List<String> includedEventTypes() {
        return this.includedEventTypes == null ? List.of() : this.includedEventTypes;
    }
    public GetEventsItem item() {
        return this.item;
    }
    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * 
     */
    public Optional<String> productType() {
        return Optional.ofNullable(this.productType);
    }
    /**
     * @return smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<String> smDeviceMac() {
        return Optional.ofNullable(this.smDeviceMac);
    }
    /**
     * @return smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
     * 
     */
    public Optional<String> smDeviceName() {
        return Optional.ofNullable(this.smDeviceName);
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clientIp;
        private @Nullable String clientMac;
        private @Nullable String clientName;
        private @Nullable String deviceMac;
        private @Nullable String deviceName;
        private @Nullable String deviceSerial;
        private @Nullable String endingBefore;
        private @Nullable List<String> excludedEventTypes;
        private String id;
        private @Nullable List<String> includedEventTypes;
        private GetEventsItem item;
        private String networkId;
        private @Nullable Integer perPage;
        private @Nullable String productType;
        private @Nullable String smDeviceMac;
        private @Nullable String smDeviceName;
        private @Nullable String startingAfter;
        public Builder() {}
        public Builder(GetEventsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIp = defaults.clientIp;
    	      this.clientMac = defaults.clientMac;
    	      this.clientName = defaults.clientName;
    	      this.deviceMac = defaults.deviceMac;
    	      this.deviceName = defaults.deviceName;
    	      this.deviceSerial = defaults.deviceSerial;
    	      this.endingBefore = defaults.endingBefore;
    	      this.excludedEventTypes = defaults.excludedEventTypes;
    	      this.id = defaults.id;
    	      this.includedEventTypes = defaults.includedEventTypes;
    	      this.item = defaults.item;
    	      this.networkId = defaults.networkId;
    	      this.perPage = defaults.perPage;
    	      this.productType = defaults.productType;
    	      this.smDeviceMac = defaults.smDeviceMac;
    	      this.smDeviceName = defaults.smDeviceName;
    	      this.startingAfter = defaults.startingAfter;
        }

        @CustomType.Setter
        public Builder clientIp(@Nullable String clientIp) {

            this.clientIp = clientIp;
            return this;
        }
        @CustomType.Setter
        public Builder clientMac(@Nullable String clientMac) {

            this.clientMac = clientMac;
            return this;
        }
        @CustomType.Setter
        public Builder clientName(@Nullable String clientName) {

            this.clientName = clientName;
            return this;
        }
        @CustomType.Setter
        public Builder deviceMac(@Nullable String deviceMac) {

            this.deviceMac = deviceMac;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(@Nullable String deviceName) {

            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSerial(@Nullable String deviceSerial) {

            this.deviceSerial = deviceSerial;
            return this;
        }
        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder excludedEventTypes(@Nullable List<String> excludedEventTypes) {

            this.excludedEventTypes = excludedEventTypes;
            return this;
        }
        public Builder excludedEventTypes(String... excludedEventTypes) {
            return excludedEventTypes(List.of(excludedEventTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEventsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includedEventTypes(@Nullable List<String> includedEventTypes) {

            this.includedEventTypes = includedEventTypes;
            return this;
        }
        public Builder includedEventTypes(String... includedEventTypes) {
            return includedEventTypes(List.of(includedEventTypes));
        }
        @CustomType.Setter
        public Builder item(GetEventsItem item) {
            if (item == null) {
              throw new MissingRequiredPropertyException("GetEventsResult", "item");
            }
            this.item = item;
            return this;
        }
        @CustomType.Setter
        public Builder networkId(String networkId) {
            if (networkId == null) {
              throw new MissingRequiredPropertyException("GetEventsResult", "networkId");
            }
            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder productType(@Nullable String productType) {

            this.productType = productType;
            return this;
        }
        @CustomType.Setter
        public Builder smDeviceMac(@Nullable String smDeviceMac) {

            this.smDeviceMac = smDeviceMac;
            return this;
        }
        @CustomType.Setter
        public Builder smDeviceName(@Nullable String smDeviceName) {

            this.smDeviceName = smDeviceName;
            return this;
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        public GetEventsResult build() {
            final var _resultValue = new GetEventsResult();
            _resultValue.clientIp = clientIp;
            _resultValue.clientMac = clientMac;
            _resultValue.clientName = clientName;
            _resultValue.deviceMac = deviceMac;
            _resultValue.deviceName = deviceName;
            _resultValue.deviceSerial = deviceSerial;
            _resultValue.endingBefore = endingBefore;
            _resultValue.excludedEventTypes = excludedEventTypes;
            _resultValue.id = id;
            _resultValue.includedEventTypes = includedEventTypes;
            _resultValue.item = item;
            _resultValue.networkId = networkId;
            _resultValue.perPage = perPage;
            _resultValue.productType = productType;
            _resultValue.smDeviceMac = smDeviceMac;
            _resultValue.smDeviceName = smDeviceName;
            _resultValue.startingAfter = startingAfter;
            return _resultValue;
        }
    }
}
