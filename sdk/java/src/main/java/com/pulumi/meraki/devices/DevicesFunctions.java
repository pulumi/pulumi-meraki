// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.devices.inputs.GetAppliancePerformanceArgs;
import com.pulumi.meraki.devices.inputs.GetAppliancePerformancePlainArgs;
import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsArgs;
import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsArgs;
import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLiveArgs;
import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLivePlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsArgs;
import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionArgs;
import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraSenseArgs;
import com.pulumi.meraki.devices.inputs.GetCameraSensePlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkArgs;
import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsArgs;
import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesArgs;
import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanArgs;
import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesArgs;
import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesPlainArgs;
import com.pulumi.meraki.devices.inputs.GetCellularSimsArgs;
import com.pulumi.meraki.devices.inputs.GetCellularSimsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTableArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTablePlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestPlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsPingArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDeviceArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDevicePlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsPingPlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestPlainArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanArgs;
import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanPlainArgs;
import com.pulumi.meraki.devices.inputs.GetLldpCdpArgs;
import com.pulumi.meraki.devices.inputs.GetLldpCdpPlainArgs;
import com.pulumi.meraki.devices.inputs.GetManagementInterfaceArgs;
import com.pulumi.meraki.devices.inputs.GetManagementInterfacePlainArgs;
import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsArgs;
import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchPortsArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchPortsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingStaticRoutesArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchRoutingStaticRoutesPlainArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchWarmSpareArgs;
import com.pulumi.meraki.devices.inputs.GetSwitchWarmSparePlainArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsPlainArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessStatusArgs;
import com.pulumi.meraki.devices.inputs.GetWirelessStatusPlainArgs;
import com.pulumi.meraki.devices.outputs.GetAppliancePerformanceResult;
import com.pulumi.meraki.devices.outputs.GetApplianceRadioSettingsResult;
import com.pulumi.meraki.devices.outputs.GetApplianceUplinksSettingsResult;
import com.pulumi.meraki.devices.outputs.GetCameraAnalyticsLiveResult;
import com.pulumi.meraki.devices.outputs.GetCameraCustomAnalyticsResult;
import com.pulumi.meraki.devices.outputs.GetCameraQualityAndRetentionResult;
import com.pulumi.meraki.devices.outputs.GetCameraSenseResult;
import com.pulumi.meraki.devices.outputs.GetCameraVideoLinkResult;
import com.pulumi.meraki.devices.outputs.GetCameraVideoSettingsResult;
import com.pulumi.meraki.devices.outputs.GetCameraWirelessProfilesResult;
import com.pulumi.meraki.devices.outputs.GetCellularGatewayLanResult;
import com.pulumi.meraki.devices.outputs.GetCellularGatewayPortForwardingRulesResult;
import com.pulumi.meraki.devices.outputs.GetCellularSimsResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsArpTableResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsCableTestResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsPingDeviceResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsPingResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsThroughputTestResult;
import com.pulumi.meraki.devices.outputs.GetLiveToolsWakeOnLanResult;
import com.pulumi.meraki.devices.outputs.GetLldpCdpResult;
import com.pulumi.meraki.devices.outputs.GetManagementInterfaceResult;
import com.pulumi.meraki.devices.outputs.GetSensorRelationshipsResult;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsResult;
import com.pulumi.meraki.devices.outputs.GetSwitchPortsStatusesResult;
import com.pulumi.meraki.devices.outputs.GetSwitchRoutingInterfacesDhcpResult;
import com.pulumi.meraki.devices.outputs.GetSwitchRoutingInterfacesResult;
import com.pulumi.meraki.devices.outputs.GetSwitchRoutingStaticRoutesResult;
import com.pulumi.meraki.devices.outputs.GetSwitchWarmSpareResult;
import com.pulumi.meraki.devices.outputs.GetWirelessBluetoothSettingsResult;
import com.pulumi.meraki.devices.outputs.GetWirelessConnectionStatsResult;
import com.pulumi.meraki.devices.outputs.GetWirelessLatencyStatsResult;
import com.pulumi.meraki.devices.outputs.GetWirelessRadioSettingsResult;
import com.pulumi.meraki.devices.outputs.GetWirelessStatusResult;
import java.util.concurrent.CompletableFuture;

public final class DevicesFunctions {
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetAppliancePerformanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getAppliancePerformance(GetAppliancePerformanceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesAppliancePerformanceExample&#34;, example.applyValue(getAppliancePerformanceResult -&gt; getAppliancePerformanceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppliancePerformanceResult> getAppliancePerformance(GetAppliancePerformanceArgs args) {
        return getAppliancePerformance(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetAppliancePerformanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getAppliancePerformance(GetAppliancePerformanceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesAppliancePerformanceExample&#34;, example.applyValue(getAppliancePerformanceResult -&gt; getAppliancePerformanceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppliancePerformanceResult> getAppliancePerformancePlain(GetAppliancePerformancePlainArgs args) {
        return getAppliancePerformancePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetAppliancePerformanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getAppliancePerformance(GetAppliancePerformanceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesAppliancePerformanceExample&#34;, example.applyValue(getAppliancePerformanceResult -&gt; getAppliancePerformanceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAppliancePerformanceResult> getAppliancePerformance(GetAppliancePerformanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getAppliancePerformance:getAppliancePerformance", TypeShape.of(GetAppliancePerformanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetAppliancePerformanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getAppliancePerformance(GetAppliancePerformanceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesAppliancePerformanceExample&#34;, example.applyValue(getAppliancePerformanceResult -&gt; getAppliancePerformanceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAppliancePerformanceResult> getAppliancePerformancePlain(GetAppliancePerformancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getAppliancePerformance:getAppliancePerformance", TypeShape.of(GetAppliancePerformanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceRadioSettings(GetApplianceRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceRadioSettingsExample&#34;, example.applyValue(getApplianceRadioSettingsResult -&gt; getApplianceRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplianceRadioSettingsResult> getApplianceRadioSettings(GetApplianceRadioSettingsArgs args) {
        return getApplianceRadioSettings(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceRadioSettings(GetApplianceRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceRadioSettingsExample&#34;, example.applyValue(getApplianceRadioSettingsResult -&gt; getApplianceRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplianceRadioSettingsResult> getApplianceRadioSettingsPlain(GetApplianceRadioSettingsPlainArgs args) {
        return getApplianceRadioSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceRadioSettings(GetApplianceRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceRadioSettingsExample&#34;, example.applyValue(getApplianceRadioSettingsResult -&gt; getApplianceRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplianceRadioSettingsResult> getApplianceRadioSettings(GetApplianceRadioSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getApplianceRadioSettings:getApplianceRadioSettings", TypeShape.of(GetApplianceRadioSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceRadioSettings(GetApplianceRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceRadioSettingsExample&#34;, example.applyValue(getApplianceRadioSettingsResult -&gt; getApplianceRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplianceRadioSettingsResult> getApplianceRadioSettingsPlain(GetApplianceRadioSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getApplianceRadioSettings:getApplianceRadioSettings", TypeShape.of(GetApplianceRadioSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceUplinksSettingsExample&#34;, example.applyValue(getApplianceUplinksSettingsResult -&gt; getApplianceUplinksSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplianceUplinksSettingsResult> getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs args) {
        return getApplianceUplinksSettings(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceUplinksSettingsExample&#34;, example.applyValue(getApplianceUplinksSettingsResult -&gt; getApplianceUplinksSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplianceUplinksSettingsResult> getApplianceUplinksSettingsPlain(GetApplianceUplinksSettingsPlainArgs args) {
        return getApplianceUplinksSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceUplinksSettingsExample&#34;, example.applyValue(getApplianceUplinksSettingsResult -&gt; getApplianceUplinksSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplianceUplinksSettingsResult> getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getApplianceUplinksSettings:getApplianceUplinksSettings", TypeShape.of(GetApplianceUplinksSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetApplianceUplinksSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getApplianceUplinksSettings(GetApplianceUplinksSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesApplianceUplinksSettingsExample&#34;, example.applyValue(getApplianceUplinksSettingsResult -&gt; getApplianceUplinksSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplianceUplinksSettingsResult> getApplianceUplinksSettingsPlain(GetApplianceUplinksSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getApplianceUplinksSettings:getApplianceUplinksSettings", TypeShape.of(GetApplianceUplinksSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraAnalyticsLiveExample&#34;, example.applyValue(getCameraAnalyticsLiveResult -&gt; getCameraAnalyticsLiveResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraAnalyticsLiveResult> getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs args) {
        return getCameraAnalyticsLive(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraAnalyticsLiveExample&#34;, example.applyValue(getCameraAnalyticsLiveResult -&gt; getCameraAnalyticsLiveResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraAnalyticsLiveResult> getCameraAnalyticsLivePlain(GetCameraAnalyticsLivePlainArgs args) {
        return getCameraAnalyticsLivePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraAnalyticsLiveExample&#34;, example.applyValue(getCameraAnalyticsLiveResult -&gt; getCameraAnalyticsLiveResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraAnalyticsLiveResult> getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraAnalyticsLive:getCameraAnalyticsLive", TypeShape.of(GetCameraAnalyticsLiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraAnalyticsLiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraAnalyticsLive(GetCameraAnalyticsLiveArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraAnalyticsLiveExample&#34;, example.applyValue(getCameraAnalyticsLiveResult -&gt; getCameraAnalyticsLiveResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraAnalyticsLiveResult> getCameraAnalyticsLivePlain(GetCameraAnalyticsLivePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraAnalyticsLive:getCameraAnalyticsLive", TypeShape.of(GetCameraAnalyticsLiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraCustomAnalyticsExample&#34;, example.applyValue(getCameraCustomAnalyticsResult -&gt; getCameraCustomAnalyticsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraCustomAnalyticsResult> getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs args) {
        return getCameraCustomAnalytics(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraCustomAnalyticsExample&#34;, example.applyValue(getCameraCustomAnalyticsResult -&gt; getCameraCustomAnalyticsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraCustomAnalyticsResult> getCameraCustomAnalyticsPlain(GetCameraCustomAnalyticsPlainArgs args) {
        return getCameraCustomAnalyticsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraCustomAnalyticsExample&#34;, example.applyValue(getCameraCustomAnalyticsResult -&gt; getCameraCustomAnalyticsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraCustomAnalyticsResult> getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraCustomAnalytics:getCameraCustomAnalytics", TypeShape.of(GetCameraCustomAnalyticsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraCustomAnalyticsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraCustomAnalytics(GetCameraCustomAnalyticsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraCustomAnalyticsExample&#34;, example.applyValue(getCameraCustomAnalyticsResult -&gt; getCameraCustomAnalyticsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraCustomAnalyticsResult> getCameraCustomAnalyticsPlain(GetCameraCustomAnalyticsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraCustomAnalytics:getCameraCustomAnalytics", TypeShape.of(GetCameraCustomAnalyticsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraQualityAndRetentionExample&#34;, example.applyValue(getCameraQualityAndRetentionResult -&gt; getCameraQualityAndRetentionResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraQualityAndRetentionResult> getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs args) {
        return getCameraQualityAndRetention(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraQualityAndRetentionExample&#34;, example.applyValue(getCameraQualityAndRetentionResult -&gt; getCameraQualityAndRetentionResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraQualityAndRetentionResult> getCameraQualityAndRetentionPlain(GetCameraQualityAndRetentionPlainArgs args) {
        return getCameraQualityAndRetentionPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraQualityAndRetentionExample&#34;, example.applyValue(getCameraQualityAndRetentionResult -&gt; getCameraQualityAndRetentionResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraQualityAndRetentionResult> getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraQualityAndRetention:getCameraQualityAndRetention", TypeShape.of(GetCameraQualityAndRetentionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraQualityAndRetentionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraQualityAndRetention(GetCameraQualityAndRetentionArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraQualityAndRetentionExample&#34;, example.applyValue(getCameraQualityAndRetentionResult -&gt; getCameraQualityAndRetentionResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraQualityAndRetentionResult> getCameraQualityAndRetentionPlain(GetCameraQualityAndRetentionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraQualityAndRetention:getCameraQualityAndRetention", TypeShape.of(GetCameraQualityAndRetentionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraSenseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraSense(GetCameraSenseArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraSenseExample&#34;, example.applyValue(getCameraSenseResult -&gt; getCameraSenseResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraSenseResult> getCameraSense(GetCameraSenseArgs args) {
        return getCameraSense(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraSenseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraSense(GetCameraSenseArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraSenseExample&#34;, example.applyValue(getCameraSenseResult -&gt; getCameraSenseResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraSenseResult> getCameraSensePlain(GetCameraSensePlainArgs args) {
        return getCameraSensePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraSenseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraSense(GetCameraSenseArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraSenseExample&#34;, example.applyValue(getCameraSenseResult -&gt; getCameraSenseResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraSenseResult> getCameraSense(GetCameraSenseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraSense:getCameraSense", TypeShape.of(GetCameraSenseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraSenseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraSense(GetCameraSenseArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraSenseExample&#34;, example.applyValue(getCameraSenseResult -&gt; getCameraSenseResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraSenseResult> getCameraSensePlain(GetCameraSensePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraSense:getCameraSense", TypeShape.of(GetCameraSenseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoLink(GetCameraVideoLinkArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .timestamp(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoLinkExample&#34;, example.applyValue(getCameraVideoLinkResult -&gt; getCameraVideoLinkResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraVideoLinkResult> getCameraVideoLink(GetCameraVideoLinkArgs args) {
        return getCameraVideoLink(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoLink(GetCameraVideoLinkArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .timestamp(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoLinkExample&#34;, example.applyValue(getCameraVideoLinkResult -&gt; getCameraVideoLinkResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraVideoLinkResult> getCameraVideoLinkPlain(GetCameraVideoLinkPlainArgs args) {
        return getCameraVideoLinkPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoLink(GetCameraVideoLinkArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .timestamp(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoLinkExample&#34;, example.applyValue(getCameraVideoLinkResult -&gt; getCameraVideoLinkResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraVideoLinkResult> getCameraVideoLink(GetCameraVideoLinkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraVideoLink:getCameraVideoLink", TypeShape.of(GetCameraVideoLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoLinkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoLink(GetCameraVideoLinkArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .timestamp(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoLinkExample&#34;, example.applyValue(getCameraVideoLinkResult -&gt; getCameraVideoLinkResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraVideoLinkResult> getCameraVideoLinkPlain(GetCameraVideoLinkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraVideoLink:getCameraVideoLink", TypeShape.of(GetCameraVideoLinkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoSettings(GetCameraVideoSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoSettingsExample&#34;, example.applyValue(getCameraVideoSettingsResult -&gt; getCameraVideoSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraVideoSettingsResult> getCameraVideoSettings(GetCameraVideoSettingsArgs args) {
        return getCameraVideoSettings(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoSettings(GetCameraVideoSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoSettingsExample&#34;, example.applyValue(getCameraVideoSettingsResult -&gt; getCameraVideoSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraVideoSettingsResult> getCameraVideoSettingsPlain(GetCameraVideoSettingsPlainArgs args) {
        return getCameraVideoSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoSettings(GetCameraVideoSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoSettingsExample&#34;, example.applyValue(getCameraVideoSettingsResult -&gt; getCameraVideoSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraVideoSettingsResult> getCameraVideoSettings(GetCameraVideoSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraVideoSettings:getCameraVideoSettings", TypeShape.of(GetCameraVideoSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraVideoSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraVideoSettings(GetCameraVideoSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraVideoSettingsExample&#34;, example.applyValue(getCameraVideoSettingsResult -&gt; getCameraVideoSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraVideoSettingsResult> getCameraVideoSettingsPlain(GetCameraVideoSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraVideoSettings:getCameraVideoSettings", TypeShape.of(GetCameraVideoSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraWirelessProfiles(GetCameraWirelessProfilesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraWirelessProfilesExample&#34;, example.applyValue(getCameraWirelessProfilesResult -&gt; getCameraWirelessProfilesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraWirelessProfilesResult> getCameraWirelessProfiles(GetCameraWirelessProfilesArgs args) {
        return getCameraWirelessProfiles(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraWirelessProfiles(GetCameraWirelessProfilesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraWirelessProfilesExample&#34;, example.applyValue(getCameraWirelessProfilesResult -&gt; getCameraWirelessProfilesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraWirelessProfilesResult> getCameraWirelessProfilesPlain(GetCameraWirelessProfilesPlainArgs args) {
        return getCameraWirelessProfilesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraWirelessProfiles(GetCameraWirelessProfilesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraWirelessProfilesExample&#34;, example.applyValue(getCameraWirelessProfilesResult -&gt; getCameraWirelessProfilesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCameraWirelessProfilesResult> getCameraWirelessProfiles(GetCameraWirelessProfilesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCameraWirelessProfiles:getCameraWirelessProfiles", TypeShape.of(GetCameraWirelessProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCameraWirelessProfilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCameraWirelessProfiles(GetCameraWirelessProfilesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCameraWirelessProfilesExample&#34;, example.applyValue(getCameraWirelessProfilesResult -&gt; getCameraWirelessProfilesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCameraWirelessProfilesResult> getCameraWirelessProfilesPlain(GetCameraWirelessProfilesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCameraWirelessProfiles:getCameraWirelessProfiles", TypeShape.of(GetCameraWirelessProfilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayLan(GetCellularGatewayLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayLanExample&#34;, example.applyValue(getCellularGatewayLanResult -&gt; getCellularGatewayLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularGatewayLanResult> getCellularGatewayLan(GetCellularGatewayLanArgs args) {
        return getCellularGatewayLan(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayLan(GetCellularGatewayLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayLanExample&#34;, example.applyValue(getCellularGatewayLanResult -&gt; getCellularGatewayLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularGatewayLanResult> getCellularGatewayLanPlain(GetCellularGatewayLanPlainArgs args) {
        return getCellularGatewayLanPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayLan(GetCellularGatewayLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayLanExample&#34;, example.applyValue(getCellularGatewayLanResult -&gt; getCellularGatewayLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularGatewayLanResult> getCellularGatewayLan(GetCellularGatewayLanArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCellularGatewayLan:getCellularGatewayLan", TypeShape.of(GetCellularGatewayLanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayLan(GetCellularGatewayLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayLanExample&#34;, example.applyValue(getCellularGatewayLanResult -&gt; getCellularGatewayLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularGatewayLanResult> getCellularGatewayLanPlain(GetCellularGatewayLanPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCellularGatewayLan:getCellularGatewayLan", TypeShape.of(GetCellularGatewayLanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayPortForwardingRulesExample&#34;, example.applyValue(getCellularGatewayPortForwardingRulesResult -&gt; getCellularGatewayPortForwardingRulesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularGatewayPortForwardingRulesResult> getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs args) {
        return getCellularGatewayPortForwardingRules(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayPortForwardingRulesExample&#34;, example.applyValue(getCellularGatewayPortForwardingRulesResult -&gt; getCellularGatewayPortForwardingRulesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularGatewayPortForwardingRulesResult> getCellularGatewayPortForwardingRulesPlain(GetCellularGatewayPortForwardingRulesPlainArgs args) {
        return getCellularGatewayPortForwardingRulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayPortForwardingRulesExample&#34;, example.applyValue(getCellularGatewayPortForwardingRulesResult -&gt; getCellularGatewayPortForwardingRulesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularGatewayPortForwardingRulesResult> getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCellularGatewayPortForwardingRules:getCellularGatewayPortForwardingRules", TypeShape.of(GetCellularGatewayPortForwardingRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularGatewayPortForwardingRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularGatewayPortForwardingRules(GetCellularGatewayPortForwardingRulesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularGatewayPortForwardingRulesExample&#34;, example.applyValue(getCellularGatewayPortForwardingRulesResult -&gt; getCellularGatewayPortForwardingRulesResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularGatewayPortForwardingRulesResult> getCellularGatewayPortForwardingRulesPlain(GetCellularGatewayPortForwardingRulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCellularGatewayPortForwardingRules:getCellularGatewayPortForwardingRules", TypeShape.of(GetCellularGatewayPortForwardingRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularSimsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularSims(GetCellularSimsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularSimsExample&#34;, example.applyValue(getCellularSimsResult -&gt; getCellularSimsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularSimsResult> getCellularSims(GetCellularSimsArgs args) {
        return getCellularSims(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularSimsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularSims(GetCellularSimsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularSimsExample&#34;, example.applyValue(getCellularSimsResult -&gt; getCellularSimsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularSimsResult> getCellularSimsPlain(GetCellularSimsPlainArgs args) {
        return getCellularSimsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularSimsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularSims(GetCellularSimsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularSimsExample&#34;, example.applyValue(getCellularSimsResult -&gt; getCellularSimsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCellularSimsResult> getCellularSims(GetCellularSimsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getCellularSims:getCellularSims", TypeShape.of(GetCellularSimsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetCellularSimsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getCellularSims(GetCellularSimsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesCellularSimsExample&#34;, example.applyValue(getCellularSimsResult -&gt; getCellularSimsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCellularSimsResult> getCellularSimsPlain(GetCellularSimsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getCellularSims:getCellularSims", TypeShape.of(GetCellularSimsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsArpTable(GetLiveToolsArpTableArgs.builder()
     *             .arpTableId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsArpTableExample&#34;, example.applyValue(getLiveToolsArpTableResult -&gt; getLiveToolsArpTableResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsArpTableResult> getLiveToolsArpTable(GetLiveToolsArpTableArgs args) {
        return getLiveToolsArpTable(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsArpTable(GetLiveToolsArpTableArgs.builder()
     *             .arpTableId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsArpTableExample&#34;, example.applyValue(getLiveToolsArpTableResult -&gt; getLiveToolsArpTableResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsArpTableResult> getLiveToolsArpTablePlain(GetLiveToolsArpTablePlainArgs args) {
        return getLiveToolsArpTablePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsArpTable(GetLiveToolsArpTableArgs.builder()
     *             .arpTableId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsArpTableExample&#34;, example.applyValue(getLiveToolsArpTableResult -&gt; getLiveToolsArpTableResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsArpTableResult> getLiveToolsArpTable(GetLiveToolsArpTableArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsArpTable:getLiveToolsArpTable", TypeShape.of(GetLiveToolsArpTableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsArpTableArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsArpTable(GetLiveToolsArpTableArgs.builder()
     *             .arpTableId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsArpTableExample&#34;, example.applyValue(getLiveToolsArpTableResult -&gt; getLiveToolsArpTableResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsArpTableResult> getLiveToolsArpTablePlain(GetLiveToolsArpTablePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsArpTable:getLiveToolsArpTable", TypeShape.of(GetLiveToolsArpTableResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsCableTest(GetLiveToolsCableTestArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsCableTestExample&#34;, example.applyValue(getLiveToolsCableTestResult -&gt; getLiveToolsCableTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsCableTestResult> getLiveToolsCableTest(GetLiveToolsCableTestArgs args) {
        return getLiveToolsCableTest(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsCableTest(GetLiveToolsCableTestArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsCableTestExample&#34;, example.applyValue(getLiveToolsCableTestResult -&gt; getLiveToolsCableTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsCableTestResult> getLiveToolsCableTestPlain(GetLiveToolsCableTestPlainArgs args) {
        return getLiveToolsCableTestPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsCableTest(GetLiveToolsCableTestArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsCableTestExample&#34;, example.applyValue(getLiveToolsCableTestResult -&gt; getLiveToolsCableTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsCableTestResult> getLiveToolsCableTest(GetLiveToolsCableTestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsCableTest:getLiveToolsCableTest", TypeShape.of(GetLiveToolsCableTestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsCableTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsCableTest(GetLiveToolsCableTestArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsCableTestExample&#34;, example.applyValue(getLiveToolsCableTestResult -&gt; getLiveToolsCableTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsCableTestResult> getLiveToolsCableTestPlain(GetLiveToolsCableTestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsCableTest:getLiveToolsCableTest", TypeShape.of(GetLiveToolsCableTestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPing(GetLiveToolsPingArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingExample&#34;, example.applyValue(getLiveToolsPingResult -&gt; getLiveToolsPingResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsPingResult> getLiveToolsPing(GetLiveToolsPingArgs args) {
        return getLiveToolsPing(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPing(GetLiveToolsPingArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingExample&#34;, example.applyValue(getLiveToolsPingResult -&gt; getLiveToolsPingResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsPingResult> getLiveToolsPingPlain(GetLiveToolsPingPlainArgs args) {
        return getLiveToolsPingPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPing(GetLiveToolsPingArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingExample&#34;, example.applyValue(getLiveToolsPingResult -&gt; getLiveToolsPingResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsPingResult> getLiveToolsPing(GetLiveToolsPingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsPing:getLiveToolsPing", TypeShape.of(GetLiveToolsPingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPing(GetLiveToolsPingArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingExample&#34;, example.applyValue(getLiveToolsPingResult -&gt; getLiveToolsPingResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsPingResult> getLiveToolsPingPlain(GetLiveToolsPingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsPing:getLiveToolsPing", TypeShape.of(GetLiveToolsPingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingDeviceExample&#34;, example.applyValue(getLiveToolsPingDeviceResult -&gt; getLiveToolsPingDeviceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsPingDeviceResult> getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs args) {
        return getLiveToolsPingDevice(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingDeviceExample&#34;, example.applyValue(getLiveToolsPingDeviceResult -&gt; getLiveToolsPingDeviceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsPingDeviceResult> getLiveToolsPingDevicePlain(GetLiveToolsPingDevicePlainArgs args) {
        return getLiveToolsPingDevicePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingDeviceExample&#34;, example.applyValue(getLiveToolsPingDeviceResult -&gt; getLiveToolsPingDeviceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsPingDeviceResult> getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsPingDevice:getLiveToolsPingDevice", TypeShape.of(GetLiveToolsPingDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsPingDeviceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsPingDevice(GetLiveToolsPingDeviceArgs.builder()
     *             .id(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsPingDeviceExample&#34;, example.applyValue(getLiveToolsPingDeviceResult -&gt; getLiveToolsPingDeviceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsPingDeviceResult> getLiveToolsPingDevicePlain(GetLiveToolsPingDevicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsPingDevice:getLiveToolsPingDevice", TypeShape.of(GetLiveToolsPingDeviceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .throughputTestId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsThroughputTestExample&#34;, example.applyValue(getLiveToolsThroughputTestResult -&gt; getLiveToolsThroughputTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsThroughputTestResult> getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs args) {
        return getLiveToolsThroughputTest(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .throughputTestId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsThroughputTestExample&#34;, example.applyValue(getLiveToolsThroughputTestResult -&gt; getLiveToolsThroughputTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsThroughputTestResult> getLiveToolsThroughputTestPlain(GetLiveToolsThroughputTestPlainArgs args) {
        return getLiveToolsThroughputTestPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .throughputTestId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsThroughputTestExample&#34;, example.applyValue(getLiveToolsThroughputTestResult -&gt; getLiveToolsThroughputTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsThroughputTestResult> getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsThroughputTest:getLiveToolsThroughputTest", TypeShape.of(GetLiveToolsThroughputTestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsThroughputTestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsThroughputTest(GetLiveToolsThroughputTestArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .throughputTestId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsThroughputTestExample&#34;, example.applyValue(getLiveToolsThroughputTestResult -&gt; getLiveToolsThroughputTestResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsThroughputTestResult> getLiveToolsThroughputTestPlain(GetLiveToolsThroughputTestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsThroughputTest:getLiveToolsThroughputTest", TypeShape.of(GetLiveToolsThroughputTestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .wakeOnLanId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsWakeOnLanExample&#34;, example.applyValue(getLiveToolsWakeOnLanResult -&gt; getLiveToolsWakeOnLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsWakeOnLanResult> getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs args) {
        return getLiveToolsWakeOnLan(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .wakeOnLanId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsWakeOnLanExample&#34;, example.applyValue(getLiveToolsWakeOnLanResult -&gt; getLiveToolsWakeOnLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsWakeOnLanResult> getLiveToolsWakeOnLanPlain(GetLiveToolsWakeOnLanPlainArgs args) {
        return getLiveToolsWakeOnLanPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .wakeOnLanId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsWakeOnLanExample&#34;, example.applyValue(getLiveToolsWakeOnLanResult -&gt; getLiveToolsWakeOnLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLiveToolsWakeOnLanResult> getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLiveToolsWakeOnLan:getLiveToolsWakeOnLan", TypeShape.of(GetLiveToolsWakeOnLanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLiveToolsWakeOnLanArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLiveToolsWakeOnLan(GetLiveToolsWakeOnLanArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .wakeOnLanId(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLiveToolsWakeOnLanExample&#34;, example.applyValue(getLiveToolsWakeOnLanResult -&gt; getLiveToolsWakeOnLanResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLiveToolsWakeOnLanResult> getLiveToolsWakeOnLanPlain(GetLiveToolsWakeOnLanPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLiveToolsWakeOnLan:getLiveToolsWakeOnLan", TypeShape.of(GetLiveToolsWakeOnLanResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLldpCdpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLldpCdp(GetLldpCdpArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLldpCdpExample&#34;, example.applyValue(getLldpCdpResult -&gt; getLldpCdpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLldpCdpResult> getLldpCdp(GetLldpCdpArgs args) {
        return getLldpCdp(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLldpCdpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLldpCdp(GetLldpCdpArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLldpCdpExample&#34;, example.applyValue(getLldpCdpResult -&gt; getLldpCdpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLldpCdpResult> getLldpCdpPlain(GetLldpCdpPlainArgs args) {
        return getLldpCdpPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLldpCdpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLldpCdp(GetLldpCdpArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLldpCdpExample&#34;, example.applyValue(getLldpCdpResult -&gt; getLldpCdpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLldpCdpResult> getLldpCdp(GetLldpCdpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getLldpCdp:getLldpCdp", TypeShape.of(GetLldpCdpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetLldpCdpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getLldpCdp(GetLldpCdpArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesLldpCdpExample&#34;, example.applyValue(getLldpCdpResult -&gt; getLldpCdpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLldpCdpResult> getLldpCdpPlain(GetLldpCdpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getLldpCdp:getLldpCdp", TypeShape.of(GetLldpCdpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetManagementInterfaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getManagementInterface(GetManagementInterfaceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesManagementInterfaceExample&#34;, example.applyValue(getManagementInterfaceResult -&gt; getManagementInterfaceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagementInterfaceResult> getManagementInterface(GetManagementInterfaceArgs args) {
        return getManagementInterface(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetManagementInterfaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getManagementInterface(GetManagementInterfaceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesManagementInterfaceExample&#34;, example.applyValue(getManagementInterfaceResult -&gt; getManagementInterfaceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagementInterfaceResult> getManagementInterfacePlain(GetManagementInterfacePlainArgs args) {
        return getManagementInterfacePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetManagementInterfaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getManagementInterface(GetManagementInterfaceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesManagementInterfaceExample&#34;, example.applyValue(getManagementInterfaceResult -&gt; getManagementInterfaceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetManagementInterfaceResult> getManagementInterface(GetManagementInterfaceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getManagementInterface:getManagementInterface", TypeShape.of(GetManagementInterfaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetManagementInterfaceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getManagementInterface(GetManagementInterfaceArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesManagementInterfaceExample&#34;, example.applyValue(getManagementInterfaceResult -&gt; getManagementInterfaceResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetManagementInterfaceResult> getManagementInterfacePlain(GetManagementInterfacePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getManagementInterface:getManagementInterface", TypeShape.of(GetManagementInterfaceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSensorRelationships(GetSensorRelationshipsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSensorRelationshipsExample&#34;, example.applyValue(getSensorRelationshipsResult -&gt; getSensorRelationshipsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSensorRelationshipsResult> getSensorRelationships(GetSensorRelationshipsArgs args) {
        return getSensorRelationships(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSensorRelationships(GetSensorRelationshipsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSensorRelationshipsExample&#34;, example.applyValue(getSensorRelationshipsResult -&gt; getSensorRelationshipsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSensorRelationshipsResult> getSensorRelationshipsPlain(GetSensorRelationshipsPlainArgs args) {
        return getSensorRelationshipsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSensorRelationships(GetSensorRelationshipsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSensorRelationshipsExample&#34;, example.applyValue(getSensorRelationshipsResult -&gt; getSensorRelationshipsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSensorRelationshipsResult> getSensorRelationships(GetSensorRelationshipsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSensorRelationships:getSensorRelationships", TypeShape.of(GetSensorRelationshipsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSensorRelationshipsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSensorRelationships(GetSensorRelationshipsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSensorRelationshipsExample&#34;, example.applyValue(getSensorRelationshipsResult -&gt; getSensorRelationshipsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSensorRelationshipsResult> getSensorRelationshipsPlain(GetSensorRelationshipsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSensorRelationships:getSensorRelationships", TypeShape.of(GetSensorRelationshipsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchPortsResult> getSwitchPorts() {
        return getSwitchPorts(GetSwitchPortsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchPortsResult> getSwitchPortsPlain() {
        return getSwitchPortsPlain(GetSwitchPortsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchPortsResult> getSwitchPorts(GetSwitchPortsArgs args) {
        return getSwitchPorts(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchPortsResult> getSwitchPortsPlain(GetSwitchPortsPlainArgs args) {
        return getSwitchPortsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchPortsResult> getSwitchPorts(GetSwitchPortsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchPorts:getSwitchPorts", TypeShape.of(GetSwitchPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchPortsResult> getSwitchPortsPlain(GetSwitchPortsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchPorts:getSwitchPorts", TypeShape.of(GetSwitchPortsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchPortsStatuses(GetSwitchPortsStatusesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .t0(&#34;string&#34;)
     *             .timespan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchPortsStatusesExample&#34;, example.applyValue(getSwitchPortsStatusesResult -&gt; getSwitchPortsStatusesResult.items()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchPortsStatusesResult> getSwitchPortsStatuses(GetSwitchPortsStatusesArgs args) {
        return getSwitchPortsStatuses(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchPortsStatuses(GetSwitchPortsStatusesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .t0(&#34;string&#34;)
     *             .timespan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchPortsStatusesExample&#34;, example.applyValue(getSwitchPortsStatusesResult -&gt; getSwitchPortsStatusesResult.items()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchPortsStatusesResult> getSwitchPortsStatusesPlain(GetSwitchPortsStatusesPlainArgs args) {
        return getSwitchPortsStatusesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchPortsStatuses(GetSwitchPortsStatusesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .t0(&#34;string&#34;)
     *             .timespan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchPortsStatusesExample&#34;, example.applyValue(getSwitchPortsStatusesResult -&gt; getSwitchPortsStatusesResult.items()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchPortsStatusesResult> getSwitchPortsStatuses(GetSwitchPortsStatusesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchPortsStatuses:getSwitchPortsStatuses", TypeShape.of(GetSwitchPortsStatusesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchPortsStatusesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchPortsStatuses(GetSwitchPortsStatusesArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .t0(&#34;string&#34;)
     *             .timespan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchPortsStatusesExample&#34;, example.applyValue(getSwitchPortsStatusesResult -&gt; getSwitchPortsStatusesResult.items()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchPortsStatusesResult> getSwitchPortsStatusesPlain(GetSwitchPortsStatusesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchPortsStatuses:getSwitchPortsStatuses", TypeShape.of(GetSwitchPortsStatusesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfaces() {
        return getSwitchRoutingInterfaces(GetSwitchRoutingInterfacesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfacesPlain() {
        return getSwitchRoutingInterfacesPlain(GetSwitchRoutingInterfacesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfaces(GetSwitchRoutingInterfacesArgs args) {
        return getSwitchRoutingInterfaces(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfacesPlain(GetSwitchRoutingInterfacesPlainArgs args) {
        return getSwitchRoutingInterfacesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfaces(GetSwitchRoutingInterfacesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchRoutingInterfaces:getSwitchRoutingInterfaces", TypeShape.of(GetSwitchRoutingInterfacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingInterfacesResult> getSwitchRoutingInterfacesPlain(GetSwitchRoutingInterfacesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchRoutingInterfaces:getSwitchRoutingInterfaces", TypeShape.of(GetSwitchRoutingInterfacesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs.builder()
     *             .interfaceId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchRoutingInterfacesDhcpExample&#34;, example.applyValue(getSwitchRoutingInterfacesDhcpResult -&gt; getSwitchRoutingInterfacesDhcpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchRoutingInterfacesDhcpResult> getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs args) {
        return getSwitchRoutingInterfacesDhcp(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs.builder()
     *             .interfaceId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchRoutingInterfacesDhcpExample&#34;, example.applyValue(getSwitchRoutingInterfacesDhcpResult -&gt; getSwitchRoutingInterfacesDhcpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchRoutingInterfacesDhcpResult> getSwitchRoutingInterfacesDhcpPlain(GetSwitchRoutingInterfacesDhcpPlainArgs args) {
        return getSwitchRoutingInterfacesDhcpPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs.builder()
     *             .interfaceId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchRoutingInterfacesDhcpExample&#34;, example.applyValue(getSwitchRoutingInterfacesDhcpResult -&gt; getSwitchRoutingInterfacesDhcpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchRoutingInterfacesDhcpResult> getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchRoutingInterfacesDhcp:getSwitchRoutingInterfacesDhcp", TypeShape.of(GetSwitchRoutingInterfacesDhcpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchRoutingInterfacesDhcpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchRoutingInterfacesDhcp(GetSwitchRoutingInterfacesDhcpArgs.builder()
     *             .interfaceId(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchRoutingInterfacesDhcpExample&#34;, example.applyValue(getSwitchRoutingInterfacesDhcpResult -&gt; getSwitchRoutingInterfacesDhcpResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchRoutingInterfacesDhcpResult> getSwitchRoutingInterfacesDhcpPlain(GetSwitchRoutingInterfacesDhcpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchRoutingInterfacesDhcp:getSwitchRoutingInterfacesDhcp", TypeShape.of(GetSwitchRoutingInterfacesDhcpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutes() {
        return getSwitchRoutingStaticRoutes(GetSwitchRoutingStaticRoutesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutesPlain() {
        return getSwitchRoutingStaticRoutesPlain(GetSwitchRoutingStaticRoutesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutes(GetSwitchRoutingStaticRoutesArgs args) {
        return getSwitchRoutingStaticRoutes(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutesPlain(GetSwitchRoutingStaticRoutesPlainArgs args) {
        return getSwitchRoutingStaticRoutesPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutes(GetSwitchRoutingStaticRoutesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchRoutingStaticRoutes:getSwitchRoutingStaticRoutes", TypeShape.of(GetSwitchRoutingStaticRoutesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetSwitchRoutingStaticRoutesResult> getSwitchRoutingStaticRoutesPlain(GetSwitchRoutingStaticRoutesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchRoutingStaticRoutes:getSwitchRoutingStaticRoutes", TypeShape.of(GetSwitchRoutingStaticRoutesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchWarmSpareArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchWarmSpare(GetSwitchWarmSpareArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchWarmSpareExample&#34;, example.applyValue(getSwitchWarmSpareResult -&gt; getSwitchWarmSpareResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchWarmSpareResult> getSwitchWarmSpare(GetSwitchWarmSpareArgs args) {
        return getSwitchWarmSpare(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchWarmSpareArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchWarmSpare(GetSwitchWarmSpareArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchWarmSpareExample&#34;, example.applyValue(getSwitchWarmSpareResult -&gt; getSwitchWarmSpareResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchWarmSpareResult> getSwitchWarmSparePlain(GetSwitchWarmSparePlainArgs args) {
        return getSwitchWarmSparePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchWarmSpareArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchWarmSpare(GetSwitchWarmSpareArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchWarmSpareExample&#34;, example.applyValue(getSwitchWarmSpareResult -&gt; getSwitchWarmSpareResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSwitchWarmSpareResult> getSwitchWarmSpare(GetSwitchWarmSpareArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getSwitchWarmSpare:getSwitchWarmSpare", TypeShape.of(GetSwitchWarmSpareResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetSwitchWarmSpareArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getSwitchWarmSpare(GetSwitchWarmSpareArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesSwitchWarmSpareExample&#34;, example.applyValue(getSwitchWarmSpareResult -&gt; getSwitchWarmSpareResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSwitchWarmSpareResult> getSwitchWarmSparePlain(GetSwitchWarmSparePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getSwitchWarmSpare:getSwitchWarmSpare", TypeShape.of(GetSwitchWarmSpareResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessBluetoothSettingsExample&#34;, example.applyValue(getWirelessBluetoothSettingsResult -&gt; getWirelessBluetoothSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessBluetoothSettingsResult> getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs args) {
        return getWirelessBluetoothSettings(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessBluetoothSettingsExample&#34;, example.applyValue(getWirelessBluetoothSettingsResult -&gt; getWirelessBluetoothSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessBluetoothSettingsResult> getWirelessBluetoothSettingsPlain(GetWirelessBluetoothSettingsPlainArgs args) {
        return getWirelessBluetoothSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessBluetoothSettingsExample&#34;, example.applyValue(getWirelessBluetoothSettingsResult -&gt; getWirelessBluetoothSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessBluetoothSettingsResult> getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getWirelessBluetoothSettings:getWirelessBluetoothSettings", TypeShape.of(GetWirelessBluetoothSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessBluetoothSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessBluetoothSettings(GetWirelessBluetoothSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessBluetoothSettingsExample&#34;, example.applyValue(getWirelessBluetoothSettingsResult -&gt; getWirelessBluetoothSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessBluetoothSettingsResult> getWirelessBluetoothSettingsPlain(GetWirelessBluetoothSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getWirelessBluetoothSettings:getWirelessBluetoothSettings", TypeShape.of(GetWirelessBluetoothSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessConnectionStats(GetWirelessConnectionStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessConnectionStatsExample&#34;, example.applyValue(getWirelessConnectionStatsResult -&gt; getWirelessConnectionStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessConnectionStatsResult> getWirelessConnectionStats(GetWirelessConnectionStatsArgs args) {
        return getWirelessConnectionStats(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessConnectionStats(GetWirelessConnectionStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessConnectionStatsExample&#34;, example.applyValue(getWirelessConnectionStatsResult -&gt; getWirelessConnectionStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessConnectionStatsResult> getWirelessConnectionStatsPlain(GetWirelessConnectionStatsPlainArgs args) {
        return getWirelessConnectionStatsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessConnectionStats(GetWirelessConnectionStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessConnectionStatsExample&#34;, example.applyValue(getWirelessConnectionStatsResult -&gt; getWirelessConnectionStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessConnectionStatsResult> getWirelessConnectionStats(GetWirelessConnectionStatsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getWirelessConnectionStats:getWirelessConnectionStats", TypeShape.of(GetWirelessConnectionStatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessConnectionStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessConnectionStats(GetWirelessConnectionStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessConnectionStatsExample&#34;, example.applyValue(getWirelessConnectionStatsResult -&gt; getWirelessConnectionStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessConnectionStatsResult> getWirelessConnectionStatsPlain(GetWirelessConnectionStatsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getWirelessConnectionStats:getWirelessConnectionStats", TypeShape.of(GetWirelessConnectionStatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessLatencyStats(GetWirelessLatencyStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .fields(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessLatencyStatsExample&#34;, example.applyValue(getWirelessLatencyStatsResult -&gt; getWirelessLatencyStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessLatencyStatsResult> getWirelessLatencyStats(GetWirelessLatencyStatsArgs args) {
        return getWirelessLatencyStats(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessLatencyStats(GetWirelessLatencyStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .fields(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessLatencyStatsExample&#34;, example.applyValue(getWirelessLatencyStatsResult -&gt; getWirelessLatencyStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessLatencyStatsResult> getWirelessLatencyStatsPlain(GetWirelessLatencyStatsPlainArgs args) {
        return getWirelessLatencyStatsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessLatencyStats(GetWirelessLatencyStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .fields(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessLatencyStatsExample&#34;, example.applyValue(getWirelessLatencyStatsResult -&gt; getWirelessLatencyStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessLatencyStatsResult> getWirelessLatencyStats(GetWirelessLatencyStatsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getWirelessLatencyStats:getWirelessLatencyStats", TypeShape.of(GetWirelessLatencyStatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessLatencyStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessLatencyStats(GetWirelessLatencyStatsArgs.builder()
     *             .apTag(&#34;string&#34;)
     *             .band(&#34;string&#34;)
     *             .fields(&#34;string&#34;)
     *             .serial(&#34;string&#34;)
     *             .ssid(1)
     *             .t0(&#34;string&#34;)
     *             .t1(&#34;string&#34;)
     *             .timespan(1)
     *             .vlan(1)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessLatencyStatsExample&#34;, example.applyValue(getWirelessLatencyStatsResult -&gt; getWirelessLatencyStatsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessLatencyStatsResult> getWirelessLatencyStatsPlain(GetWirelessLatencyStatsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getWirelessLatencyStats:getWirelessLatencyStats", TypeShape.of(GetWirelessLatencyStatsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessRadioSettings(GetWirelessRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessRadioSettingsExample&#34;, example.applyValue(getWirelessRadioSettingsResult -&gt; getWirelessRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessRadioSettingsResult> getWirelessRadioSettings(GetWirelessRadioSettingsArgs args) {
        return getWirelessRadioSettings(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessRadioSettings(GetWirelessRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessRadioSettingsExample&#34;, example.applyValue(getWirelessRadioSettingsResult -&gt; getWirelessRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessRadioSettingsResult> getWirelessRadioSettingsPlain(GetWirelessRadioSettingsPlainArgs args) {
        return getWirelessRadioSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessRadioSettings(GetWirelessRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessRadioSettingsExample&#34;, example.applyValue(getWirelessRadioSettingsResult -&gt; getWirelessRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessRadioSettingsResult> getWirelessRadioSettings(GetWirelessRadioSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getWirelessRadioSettings:getWirelessRadioSettings", TypeShape.of(GetWirelessRadioSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessRadioSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessRadioSettings(GetWirelessRadioSettingsArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessRadioSettingsExample&#34;, example.applyValue(getWirelessRadioSettingsResult -&gt; getWirelessRadioSettingsResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessRadioSettingsResult> getWirelessRadioSettingsPlain(GetWirelessRadioSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getWirelessRadioSettings:getWirelessRadioSettings", TypeShape.of(GetWirelessRadioSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessStatusArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessStatus(GetWirelessStatusArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessStatusExample&#34;, example.applyValue(getWirelessStatusResult -&gt; getWirelessStatusResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessStatusResult> getWirelessStatus(GetWirelessStatusArgs args) {
        return getWirelessStatus(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessStatusArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessStatus(GetWirelessStatusArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessStatusExample&#34;, example.applyValue(getWirelessStatusResult -&gt; getWirelessStatusResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessStatusResult> getWirelessStatusPlain(GetWirelessStatusPlainArgs args) {
        return getWirelessStatusPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessStatusArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessStatus(GetWirelessStatusArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessStatusExample&#34;, example.applyValue(getWirelessStatusResult -&gt; getWirelessStatusResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWirelessStatusResult> getWirelessStatus(GetWirelessStatusArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("meraki:devices/getWirelessStatus:getWirelessStatus", TypeShape.of(GetWirelessStatusResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.meraki.devices.DevicesFunctions;
     * import com.pulumi.meraki.devices.inputs.GetWirelessStatusArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DevicesFunctions.getWirelessStatus(GetWirelessStatusArgs.builder()
     *             .serial(&#34;string&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;merakiDevicesWirelessStatusExample&#34;, example.applyValue(getWirelessStatusResult -&gt; getWirelessStatusResult.item()));
     *     }
     * }
     * ```
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWirelessStatusResult> getWirelessStatusPlain(GetWirelessStatusPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("meraki:devices/getWirelessStatus:getWirelessStatus", TypeShape.of(GetWirelessStatusResult.class), args, Utilities.withVersion(options));
    }
}
