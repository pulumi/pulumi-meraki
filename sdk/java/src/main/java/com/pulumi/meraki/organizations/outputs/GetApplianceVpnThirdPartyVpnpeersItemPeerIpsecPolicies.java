// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies {
    /**
     * @return This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    private List<String> childAuthAlgos;
    /**
     * @return This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    private List<String> childCipherAlgos;
    /**
     * @return The lifetime of the Phase 2 SA in seconds.
     * 
     */
    private Integer childLifetime;
    /**
     * @return This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    private List<String> childPfsGroups;
    /**
     * @return This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    private List<String> ikeAuthAlgos;
    /**
     * @return This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    private List<String> ikeCipherAlgos;
    /**
     * @return This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    private List<String> ikeDiffieHellmanGroups;
    /**
     * @return The lifetime of the Phase 1 SA in seconds.
     * 
     */
    private Integer ikeLifetime;
    /**
     * @return [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    private List<String> ikePrfAlgos;

    private GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies() {}
    /**
     * @return This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public List<String> childAuthAlgos() {
        return this.childAuthAlgos;
    }
    /**
     * @return This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    public List<String> childCipherAlgos() {
        return this.childCipherAlgos;
    }
    /**
     * @return The lifetime of the Phase 2 SA in seconds.
     * 
     */
    public Integer childLifetime() {
        return this.childLifetime;
    }
    /**
     * @return This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public List<String> childPfsGroups() {
        return this.childPfsGroups;
    }
    /**
     * @return This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public List<String> ikeAuthAlgos() {
        return this.ikeAuthAlgos;
    }
    /**
     * @return This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    public List<String> ikeCipherAlgos() {
        return this.ikeCipherAlgos;
    }
    /**
     * @return This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public List<String> ikeDiffieHellmanGroups() {
        return this.ikeDiffieHellmanGroups;
    }
    /**
     * @return The lifetime of the Phase 1 SA in seconds.
     * 
     */
    public Integer ikeLifetime() {
        return this.ikeLifetime;
    }
    /**
     * @return [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    public List<String> ikePrfAlgos() {
        return this.ikePrfAlgos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> childAuthAlgos;
        private List<String> childCipherAlgos;
        private Integer childLifetime;
        private List<String> childPfsGroups;
        private List<String> ikeAuthAlgos;
        private List<String> ikeCipherAlgos;
        private List<String> ikeDiffieHellmanGroups;
        private Integer ikeLifetime;
        private List<String> ikePrfAlgos;
        public Builder() {}
        public Builder(GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childAuthAlgos = defaults.childAuthAlgos;
    	      this.childCipherAlgos = defaults.childCipherAlgos;
    	      this.childLifetime = defaults.childLifetime;
    	      this.childPfsGroups = defaults.childPfsGroups;
    	      this.ikeAuthAlgos = defaults.ikeAuthAlgos;
    	      this.ikeCipherAlgos = defaults.ikeCipherAlgos;
    	      this.ikeDiffieHellmanGroups = defaults.ikeDiffieHellmanGroups;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikePrfAlgos = defaults.ikePrfAlgos;
        }

        @CustomType.Setter
        public Builder childAuthAlgos(List<String> childAuthAlgos) {
            if (childAuthAlgos == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "childAuthAlgos");
            }
            this.childAuthAlgos = childAuthAlgos;
            return this;
        }
        public Builder childAuthAlgos(String... childAuthAlgos) {
            return childAuthAlgos(List.of(childAuthAlgos));
        }
        @CustomType.Setter
        public Builder childCipherAlgos(List<String> childCipherAlgos) {
            if (childCipherAlgos == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "childCipherAlgos");
            }
            this.childCipherAlgos = childCipherAlgos;
            return this;
        }
        public Builder childCipherAlgos(String... childCipherAlgos) {
            return childCipherAlgos(List.of(childCipherAlgos));
        }
        @CustomType.Setter
        public Builder childLifetime(Integer childLifetime) {
            if (childLifetime == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "childLifetime");
            }
            this.childLifetime = childLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder childPfsGroups(List<String> childPfsGroups) {
            if (childPfsGroups == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "childPfsGroups");
            }
            this.childPfsGroups = childPfsGroups;
            return this;
        }
        public Builder childPfsGroups(String... childPfsGroups) {
            return childPfsGroups(List.of(childPfsGroups));
        }
        @CustomType.Setter
        public Builder ikeAuthAlgos(List<String> ikeAuthAlgos) {
            if (ikeAuthAlgos == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "ikeAuthAlgos");
            }
            this.ikeAuthAlgos = ikeAuthAlgos;
            return this;
        }
        public Builder ikeAuthAlgos(String... ikeAuthAlgos) {
            return ikeAuthAlgos(List.of(ikeAuthAlgos));
        }
        @CustomType.Setter
        public Builder ikeCipherAlgos(List<String> ikeCipherAlgos) {
            if (ikeCipherAlgos == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "ikeCipherAlgos");
            }
            this.ikeCipherAlgos = ikeCipherAlgos;
            return this;
        }
        public Builder ikeCipherAlgos(String... ikeCipherAlgos) {
            return ikeCipherAlgos(List.of(ikeCipherAlgos));
        }
        @CustomType.Setter
        public Builder ikeDiffieHellmanGroups(List<String> ikeDiffieHellmanGroups) {
            if (ikeDiffieHellmanGroups == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "ikeDiffieHellmanGroups");
            }
            this.ikeDiffieHellmanGroups = ikeDiffieHellmanGroups;
            return this;
        }
        public Builder ikeDiffieHellmanGroups(String... ikeDiffieHellmanGroups) {
            return ikeDiffieHellmanGroups(List.of(ikeDiffieHellmanGroups));
        }
        @CustomType.Setter
        public Builder ikeLifetime(Integer ikeLifetime) {
            if (ikeLifetime == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "ikeLifetime");
            }
            this.ikeLifetime = ikeLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder ikePrfAlgos(List<String> ikePrfAlgos) {
            if (ikePrfAlgos == null) {
              throw new MissingRequiredPropertyException("GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies", "ikePrfAlgos");
            }
            this.ikePrfAlgos = ikePrfAlgos;
            return this;
        }
        public Builder ikePrfAlgos(String... ikePrfAlgos) {
            return ikePrfAlgos(List.of(ikePrfAlgos));
        }
        public GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies build() {
            final var _resultValue = new GetApplianceVpnThirdPartyVpnpeersItemPeerIpsecPolicies();
            _resultValue.childAuthAlgos = childAuthAlgos;
            _resultValue.childCipherAlgos = childCipherAlgos;
            _resultValue.childLifetime = childLifetime;
            _resultValue.childPfsGroups = childPfsGroups;
            _resultValue.ikeAuthAlgos = ikeAuthAlgos;
            _resultValue.ikeCipherAlgos = ikeCipherAlgos;
            _resultValue.ikeDiffieHellmanGroups = ikeDiffieHellmanGroups;
            _resultValue.ikeLifetime = ikeLifetime;
            _resultValue.ikePrfAlgos = ikePrfAlgos;
            return _resultValue;
        }
    }
}
