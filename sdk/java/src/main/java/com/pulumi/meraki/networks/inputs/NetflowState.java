// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetflowState extends com.pulumi.resources.ResourceArgs {

    public static final NetflowState Empty = new NetflowState();

    /**
     * The IPv4 address of the NetFlow collector.
     * 
     */
    @Import(name="collectorIp")
    private @Nullable Output<String> collectorIp;

    /**
     * @return The IPv4 address of the NetFlow collector.
     * 
     */
    public Optional<Output<String>> collectorIp() {
        return Optional.ofNullable(this.collectorIp);
    }

    /**
     * The port that the NetFlow collector will be listening on.
     * 
     */
    @Import(name="collectorPort")
    private @Nullable Output<Integer> collectorPort;

    /**
     * @return The port that the NetFlow collector will be listening on.
     * 
     */
    public Optional<Output<Integer>> collectorPort() {
        return Optional.ofNullable(this.collectorPort);
    }

    /**
     * The port that the Encrypted Traffic Analytics collector will be listening on.
     * 
     */
    @Import(name="etaDstPort")
    private @Nullable Output<Integer> etaDstPort;

    /**
     * @return The port that the Encrypted Traffic Analytics collector will be listening on.
     * 
     */
    public Optional<Output<Integer>> etaDstPort() {
        return Optional.ofNullable(this.etaDstPort);
    }

    /**
     * Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
     * 
     */
    @Import(name="etaEnabled")
    private @Nullable Output<Boolean> etaEnabled;

    /**
     * @return Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
     * 
     */
    public Optional<Output<Boolean>> etaEnabled() {
        return Optional.ofNullable(this.etaEnabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
     * 
     */
    @Import(name="reportingEnabled")
    private @Nullable Output<Boolean> reportingEnabled;

    /**
     * @return Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
     * 
     */
    public Optional<Output<Boolean>> reportingEnabled() {
        return Optional.ofNullable(this.reportingEnabled);
    }

    private NetflowState() {}

    private NetflowState(NetflowState $) {
        this.collectorIp = $.collectorIp;
        this.collectorPort = $.collectorPort;
        this.etaDstPort = $.etaDstPort;
        this.etaEnabled = $.etaEnabled;
        this.networkId = $.networkId;
        this.reportingEnabled = $.reportingEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetflowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetflowState $;

        public Builder() {
            $ = new NetflowState();
        }

        public Builder(NetflowState defaults) {
            $ = new NetflowState(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectorIp The IPv4 address of the NetFlow collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorIp(@Nullable Output<String> collectorIp) {
            $.collectorIp = collectorIp;
            return this;
        }

        /**
         * @param collectorIp The IPv4 address of the NetFlow collector.
         * 
         * @return builder
         * 
         */
        public Builder collectorIp(String collectorIp) {
            return collectorIp(Output.of(collectorIp));
        }

        /**
         * @param collectorPort The port that the NetFlow collector will be listening on.
         * 
         * @return builder
         * 
         */
        public Builder collectorPort(@Nullable Output<Integer> collectorPort) {
            $.collectorPort = collectorPort;
            return this;
        }

        /**
         * @param collectorPort The port that the NetFlow collector will be listening on.
         * 
         * @return builder
         * 
         */
        public Builder collectorPort(Integer collectorPort) {
            return collectorPort(Output.of(collectorPort));
        }

        /**
         * @param etaDstPort The port that the Encrypted Traffic Analytics collector will be listening on.
         * 
         * @return builder
         * 
         */
        public Builder etaDstPort(@Nullable Output<Integer> etaDstPort) {
            $.etaDstPort = etaDstPort;
            return this;
        }

        /**
         * @param etaDstPort The port that the Encrypted Traffic Analytics collector will be listening on.
         * 
         * @return builder
         * 
         */
        public Builder etaDstPort(Integer etaDstPort) {
            return etaDstPort(Output.of(etaDstPort));
        }

        /**
         * @param etaEnabled Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder etaEnabled(@Nullable Output<Boolean> etaEnabled) {
            $.etaEnabled = etaEnabled;
            return this;
        }

        /**
         * @param etaEnabled Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder etaEnabled(Boolean etaEnabled) {
            return etaEnabled(Output.of(etaEnabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param reportingEnabled Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder reportingEnabled(@Nullable Output<Boolean> reportingEnabled) {
            $.reportingEnabled = reportingEnabled;
            return this;
        }

        /**
         * @param reportingEnabled Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
         * 
         * @return builder
         * 
         */
        public Builder reportingEnabled(Boolean reportingEnabled) {
            return reportingEnabled(Output.of(reportingEnabled));
        }

        public NetflowState build() {
            return $;
        }
    }

}
