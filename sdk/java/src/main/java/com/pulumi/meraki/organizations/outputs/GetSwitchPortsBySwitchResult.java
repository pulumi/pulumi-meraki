// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetSwitchPortsBySwitchItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSwitchPortsBySwitchResult {
    /**
     * @return configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * 
     */
    private @Nullable String configurationUpdatedAfter;
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Array of ResponseSwitchGetOrganizationSwitchPortsBySwitch
     * 
     */
    private List<GetSwitchPortsBySwitchItem> items;
    /**
     * @return mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * 
     */
    private @Nullable String mac;
    /**
     * @return macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * 
     */
    private @Nullable List<String> macs;
    /**
     * @return name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * 
     */
    private @Nullable String name;
    /**
     * @return networkIds query parameter. Optional parameter to filter switchports by network.
     * 
     */
    private @Nullable List<String> networkIds;
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    private String organizationId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     * 
     */
    private @Nullable List<String> portProfileIds;
    /**
     * @return serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * 
     */
    private @Nullable String serial;
    /**
     * @return serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * 
     */
    private @Nullable List<String> serials;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;

    private GetSwitchPortsBySwitchResult() {}
    /**
     * @return configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * 
     */
    public Optional<String> configurationUpdatedAfter() {
        return Optional.ofNullable(this.configurationUpdatedAfter);
    }
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Array of ResponseSwitchGetOrganizationSwitchPortsBySwitch
     * 
     */
    public List<GetSwitchPortsBySwitchItem> items() {
        return this.items;
    }
    /**
     * @return mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * 
     */
    public Optional<String> mac() {
        return Optional.ofNullable(this.mac);
    }
    /**
     * @return macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * 
     */
    public List<String> macs() {
        return this.macs == null ? List.of() : this.macs;
    }
    /**
     * @return name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return networkIds query parameter. Optional parameter to filter switchports by network.
     * 
     */
    public List<String> networkIds() {
        return this.networkIds == null ? List.of() : this.networkIds;
    }
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     * 
     */
    public List<String> portProfileIds() {
        return this.portProfileIds == null ? List.of() : this.portProfileIds;
    }
    /**
     * @return serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * 
     */
    public Optional<String> serial() {
        return Optional.ofNullable(this.serial);
    }
    /**
     * @return serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * 
     */
    public List<String> serials() {
        return this.serials == null ? List.of() : this.serials;
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchPortsBySwitchResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configurationUpdatedAfter;
        private @Nullable String endingBefore;
        private String id;
        private List<GetSwitchPortsBySwitchItem> items;
        private @Nullable String mac;
        private @Nullable List<String> macs;
        private @Nullable String name;
        private @Nullable List<String> networkIds;
        private String organizationId;
        private @Nullable Integer perPage;
        private @Nullable List<String> portProfileIds;
        private @Nullable String serial;
        private @Nullable List<String> serials;
        private @Nullable String startingAfter;
        public Builder() {}
        public Builder(GetSwitchPortsBySwitchResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationUpdatedAfter = defaults.configurationUpdatedAfter;
    	      this.endingBefore = defaults.endingBefore;
    	      this.id = defaults.id;
    	      this.items = defaults.items;
    	      this.mac = defaults.mac;
    	      this.macs = defaults.macs;
    	      this.name = defaults.name;
    	      this.networkIds = defaults.networkIds;
    	      this.organizationId = defaults.organizationId;
    	      this.perPage = defaults.perPage;
    	      this.portProfileIds = defaults.portProfileIds;
    	      this.serial = defaults.serial;
    	      this.serials = defaults.serials;
    	      this.startingAfter = defaults.startingAfter;
        }

        @CustomType.Setter
        public Builder configurationUpdatedAfter(@Nullable String configurationUpdatedAfter) {

            this.configurationUpdatedAfter = configurationUpdatedAfter;
            return this;
        }
        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsBySwitchResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetSwitchPortsBySwitchItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsBySwitchResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetSwitchPortsBySwitchItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder mac(@Nullable String mac) {

            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder macs(@Nullable List<String> macs) {

            this.macs = macs;
            return this;
        }
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkIds(@Nullable List<String> networkIds) {

            this.networkIds = networkIds;
            return this;
        }
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            if (organizationId == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsBySwitchResult", "organizationId");
            }
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder portProfileIds(@Nullable List<String> portProfileIds) {

            this.portProfileIds = portProfileIds;
            return this;
        }
        public Builder portProfileIds(String... portProfileIds) {
            return portProfileIds(List.of(portProfileIds));
        }
        @CustomType.Setter
        public Builder serial(@Nullable String serial) {

            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder serials(@Nullable List<String> serials) {

            this.serials = serials;
            return this;
        }
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        public GetSwitchPortsBySwitchResult build() {
            final var _resultValue = new GetSwitchPortsBySwitchResult();
            _resultValue.configurationUpdatedAfter = configurationUpdatedAfter;
            _resultValue.endingBefore = endingBefore;
            _resultValue.id = id;
            _resultValue.items = items;
            _resultValue.mac = mac;
            _resultValue.macs = macs;
            _resultValue.name = name;
            _resultValue.networkIds = networkIds;
            _resultValue.organizationId = organizationId;
            _resultValue.perPage = perPage;
            _resultValue.portProfileIds = portProfileIds;
            _resultValue.serial = serial;
            _resultValue.serials = serials;
            _resultValue.startingAfter = startingAfter;
            return _resultValue;
        }
    }
}
