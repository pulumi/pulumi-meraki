// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.inputs.BrandingPoliciesAdminSettingsArgs;
import com.pulumi.meraki.organizations.inputs.BrandingPoliciesCustomLogoArgs;
import com.pulumi.meraki.organizations.inputs.BrandingPoliciesHelpSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BrandingPoliciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrandingPoliciesArgs Empty = new BrandingPoliciesArgs();

    /**
     * Settings for describing which kinds of admins this policy applies to.
     * 
     */
    @Import(name="adminSettings")
    private @Nullable Output<BrandingPoliciesAdminSettingsArgs> adminSettings;

    /**
     * @return Settings for describing which kinds of admins this policy applies to.
     * 
     */
    public Optional<Output<BrandingPoliciesAdminSettingsArgs>> adminSettings() {
        return Optional.ofNullable(this.adminSettings);
    }

    /**
     * brandingPolicyId path parameter. Branding policy ID
     * 
     */
    @Import(name="brandingPolicyId")
    private @Nullable Output<String> brandingPolicyId;

    /**
     * @return brandingPolicyId path parameter. Branding policy ID
     * 
     */
    public Optional<Output<String>> brandingPolicyId() {
        return Optional.ofNullable(this.brandingPolicyId);
    }

    /**
     * Properties describing the custom logo attached to the branding policy.
     * 
     */
    @Import(name="customLogo")
    private @Nullable Output<BrandingPoliciesCustomLogoArgs> customLogo;

    /**
     * @return Properties describing the custom logo attached to the branding policy.
     * 
     */
    public Optional<Output<BrandingPoliciesCustomLogoArgs>> customLogo() {
        return Optional.ofNullable(this.customLogo);
    }

    /**
     * Boolean indicating whether this policy is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Boolean indicating whether this policy is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Settings for describing the modifications to various Help page features. Each property in this object accepts one of
     *   &#39;default or inherit&#39; (do not modify functionality), &#39;hide&#39; (remove the section from Dashboard), or &#39;show&#39; (always show
     *   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
     *   Dashboard; see the documentation for each property to see the allowed values.
     * 
     */
    @Import(name="helpSettings")
    private @Nullable Output<BrandingPoliciesHelpSettingsArgs> helpSettings;

    /**
     * @return Settings for describing the modifications to various Help page features. Each property in this object accepts one of
     *   &#39;default or inherit&#39; (do not modify functionality), &#39;hide&#39; (remove the section from Dashboard), or &#39;show&#39; (always show
     *   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
     *   Dashboard; see the documentation for each property to see the allowed values.
     * 
     */
    public Optional<Output<BrandingPoliciesHelpSettingsArgs>> helpSettings() {
        return Optional.ofNullable(this.helpSettings);
    }

    /**
     * Name of the Dashboard branding policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Dashboard branding policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    private BrandingPoliciesArgs() {}

    private BrandingPoliciesArgs(BrandingPoliciesArgs $) {
        this.adminSettings = $.adminSettings;
        this.brandingPolicyId = $.brandingPolicyId;
        this.customLogo = $.customLogo;
        this.enabled = $.enabled;
        this.helpSettings = $.helpSettings;
        this.name = $.name;
        this.organizationId = $.organizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BrandingPoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BrandingPoliciesArgs $;

        public Builder() {
            $ = new BrandingPoliciesArgs();
        }

        public Builder(BrandingPoliciesArgs defaults) {
            $ = new BrandingPoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminSettings Settings for describing which kinds of admins this policy applies to.
         * 
         * @return builder
         * 
         */
        public Builder adminSettings(@Nullable Output<BrandingPoliciesAdminSettingsArgs> adminSettings) {
            $.adminSettings = adminSettings;
            return this;
        }

        /**
         * @param adminSettings Settings for describing which kinds of admins this policy applies to.
         * 
         * @return builder
         * 
         */
        public Builder adminSettings(BrandingPoliciesAdminSettingsArgs adminSettings) {
            return adminSettings(Output.of(adminSettings));
        }

        /**
         * @param brandingPolicyId brandingPolicyId path parameter. Branding policy ID
         * 
         * @return builder
         * 
         */
        public Builder brandingPolicyId(@Nullable Output<String> brandingPolicyId) {
            $.brandingPolicyId = brandingPolicyId;
            return this;
        }

        /**
         * @param brandingPolicyId brandingPolicyId path parameter. Branding policy ID
         * 
         * @return builder
         * 
         */
        public Builder brandingPolicyId(String brandingPolicyId) {
            return brandingPolicyId(Output.of(brandingPolicyId));
        }

        /**
         * @param customLogo Properties describing the custom logo attached to the branding policy.
         * 
         * @return builder
         * 
         */
        public Builder customLogo(@Nullable Output<BrandingPoliciesCustomLogoArgs> customLogo) {
            $.customLogo = customLogo;
            return this;
        }

        /**
         * @param customLogo Properties describing the custom logo attached to the branding policy.
         * 
         * @return builder
         * 
         */
        public Builder customLogo(BrandingPoliciesCustomLogoArgs customLogo) {
            return customLogo(Output.of(customLogo));
        }

        /**
         * @param enabled Boolean indicating whether this policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Boolean indicating whether this policy is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param helpSettings Settings for describing the modifications to various Help page features. Each property in this object accepts one of
         *   &#39;default or inherit&#39; (do not modify functionality), &#39;hide&#39; (remove the section from Dashboard), or &#39;show&#39; (always show
         *   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
         *   Dashboard; see the documentation for each property to see the allowed values.
         * 
         * @return builder
         * 
         */
        public Builder helpSettings(@Nullable Output<BrandingPoliciesHelpSettingsArgs> helpSettings) {
            $.helpSettings = helpSettings;
            return this;
        }

        /**
         * @param helpSettings Settings for describing the modifications to various Help page features. Each property in this object accepts one of
         *   &#39;default or inherit&#39; (do not modify functionality), &#39;hide&#39; (remove the section from Dashboard), or &#39;show&#39; (always show
         *   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
         *   Dashboard; see the documentation for each property to see the allowed values.
         * 
         * @return builder
         * 
         */
        public Builder helpSettings(BrandingPoliciesHelpSettingsArgs helpSettings) {
            return helpSettings(Output.of(helpSettings));
        }

        /**
         * @param name Name of the Dashboard branding policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Dashboard branding policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public BrandingPoliciesArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("BrandingPoliciesArgs", "organizationId");
            }
            return $;
        }
    }

}
