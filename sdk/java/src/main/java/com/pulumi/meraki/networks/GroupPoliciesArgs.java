// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.GroupPoliciesBandwidthArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesBonjourForwardingArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesContentFilteringArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesFirewallAndTrafficShapingArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesSchedulingArgs;
import com.pulumi.meraki.networks.inputs.GroupPoliciesVlanTaggingArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupPoliciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupPoliciesArgs Empty = new GroupPoliciesArgs();

    /**
     * The bandwidth settings for clients bound to your group policy.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<GroupPoliciesBandwidthArgs> bandwidth;

    /**
     * @return The bandwidth settings for clients bound to your group policy.
     * 
     */
    public Optional<Output<GroupPoliciesBandwidthArgs>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     * 
     */
    @Import(name="bonjourForwarding")
    private @Nullable Output<GroupPoliciesBonjourForwardingArgs> bonjourForwarding;

    /**
     * @return The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
     * 
     */
    public Optional<Output<GroupPoliciesBonjourForwardingArgs>> bonjourForwarding() {
        return Optional.ofNullable(this.bonjourForwarding);
    }

    /**
     * The content filtering settings for your group policy
     * 
     */
    @Import(name="contentFiltering")
    private @Nullable Output<GroupPoliciesContentFilteringArgs> contentFiltering;

    /**
     * @return The content filtering settings for your group policy
     * 
     */
    public Optional<Output<GroupPoliciesContentFilteringArgs>> contentFiltering() {
        return Optional.ofNullable(this.contentFiltering);
    }

    /**
     * The firewall and traffic shaping rules and settings for your policy.
     * 
     */
    @Import(name="firewallAndTrafficShaping")
    private @Nullable Output<GroupPoliciesFirewallAndTrafficShapingArgs> firewallAndTrafficShaping;

    /**
     * @return The firewall and traffic shaping rules and settings for your policy.
     * 
     */
    public Optional<Output<GroupPoliciesFirewallAndTrafficShapingArgs>> firewallAndTrafficShaping() {
        return Optional.ofNullable(this.firewallAndTrafficShaping);
    }

    /**
     * The name for your group policy. Required.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for your group policy. Required.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The schedule for the group policy. Schedules are applied to days of the week.
     * 
     */
    @Import(name="scheduling")
    private @Nullable Output<GroupPoliciesSchedulingArgs> scheduling;

    /**
     * @return The schedule for the group policy. Schedules are applied to days of the week.
     * 
     */
    public Optional<Output<GroupPoliciesSchedulingArgs>> scheduling() {
        return Optional.ofNullable(this.scheduling);
    }

    /**
     * Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
     * 
     */
    @Import(name="splashAuthSettings")
    private @Nullable Output<String> splashAuthSettings;

    /**
     * @return Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
     * 
     */
    public Optional<Output<String>> splashAuthSettings() {
        return Optional.ofNullable(this.splashAuthSettings);
    }

    /**
     * The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     * 
     */
    @Import(name="vlanTagging")
    private @Nullable Output<GroupPoliciesVlanTaggingArgs> vlanTagging;

    /**
     * @return The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
     * 
     */
    public Optional<Output<GroupPoliciesVlanTaggingArgs>> vlanTagging() {
        return Optional.ofNullable(this.vlanTagging);
    }

    private GroupPoliciesArgs() {}

    private GroupPoliciesArgs(GroupPoliciesArgs $) {
        this.bandwidth = $.bandwidth;
        this.bonjourForwarding = $.bonjourForwarding;
        this.contentFiltering = $.contentFiltering;
        this.firewallAndTrafficShaping = $.firewallAndTrafficShaping;
        this.name = $.name;
        this.networkId = $.networkId;
        this.scheduling = $.scheduling;
        this.splashAuthSettings = $.splashAuthSettings;
        this.vlanTagging = $.vlanTagging;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPoliciesArgs $;

        public Builder() {
            $ = new GroupPoliciesArgs();
        }

        public Builder(GroupPoliciesArgs defaults) {
            $ = new GroupPoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth The bandwidth settings for clients bound to your group policy.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<GroupPoliciesBandwidthArgs> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The bandwidth settings for clients bound to your group policy.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(GroupPoliciesBandwidthArgs bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bonjourForwarding The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder bonjourForwarding(@Nullable Output<GroupPoliciesBonjourForwardingArgs> bonjourForwarding) {
            $.bonjourForwarding = bonjourForwarding;
            return this;
        }

        /**
         * @param bonjourForwarding The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder bonjourForwarding(GroupPoliciesBonjourForwardingArgs bonjourForwarding) {
            return bonjourForwarding(Output.of(bonjourForwarding));
        }

        /**
         * @param contentFiltering The content filtering settings for your group policy
         * 
         * @return builder
         * 
         */
        public Builder contentFiltering(@Nullable Output<GroupPoliciesContentFilteringArgs> contentFiltering) {
            $.contentFiltering = contentFiltering;
            return this;
        }

        /**
         * @param contentFiltering The content filtering settings for your group policy
         * 
         * @return builder
         * 
         */
        public Builder contentFiltering(GroupPoliciesContentFilteringArgs contentFiltering) {
            return contentFiltering(Output.of(contentFiltering));
        }

        /**
         * @param firewallAndTrafficShaping The firewall and traffic shaping rules and settings for your policy.
         * 
         * @return builder
         * 
         */
        public Builder firewallAndTrafficShaping(@Nullable Output<GroupPoliciesFirewallAndTrafficShapingArgs> firewallAndTrafficShaping) {
            $.firewallAndTrafficShaping = firewallAndTrafficShaping;
            return this;
        }

        /**
         * @param firewallAndTrafficShaping The firewall and traffic shaping rules and settings for your policy.
         * 
         * @return builder
         * 
         */
        public Builder firewallAndTrafficShaping(GroupPoliciesFirewallAndTrafficShapingArgs firewallAndTrafficShaping) {
            return firewallAndTrafficShaping(Output.of(firewallAndTrafficShaping));
        }

        /**
         * @param name The name for your group policy. Required.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for your group policy. Required.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param scheduling The schedule for the group policy. Schedules are applied to days of the week.
         * 
         * @return builder
         * 
         */
        public Builder scheduling(@Nullable Output<GroupPoliciesSchedulingArgs> scheduling) {
            $.scheduling = scheduling;
            return this;
        }

        /**
         * @param scheduling The schedule for the group policy. Schedules are applied to days of the week.
         * 
         * @return builder
         * 
         */
        public Builder scheduling(GroupPoliciesSchedulingArgs scheduling) {
            return scheduling(Output.of(scheduling));
        }

        /**
         * @param splashAuthSettings Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder splashAuthSettings(@Nullable Output<String> splashAuthSettings) {
            $.splashAuthSettings = splashAuthSettings;
            return this;
        }

        /**
         * @param splashAuthSettings Whether clients bound to your policy will bypass splash authorization or behave according to the network&#39;s rules. Can be one of &#39;network default&#39; or &#39;bypass&#39;. Only available if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder splashAuthSettings(String splashAuthSettings) {
            return splashAuthSettings(Output.of(splashAuthSettings));
        }

        /**
         * @param vlanTagging The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder vlanTagging(@Nullable Output<GroupPoliciesVlanTaggingArgs> vlanTagging) {
            $.vlanTagging = vlanTagging;
            return this;
        }

        /**
         * @param vlanTagging The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
         * 
         * @return builder
         * 
         */
        public Builder vlanTagging(GroupPoliciesVlanTaggingArgs vlanTagging) {
            return vlanTagging(Output.of(vlanTagging));
        }

        public GroupPoliciesArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GroupPoliciesArgs", "networkId");
            }
            return $;
        }
    }

}
