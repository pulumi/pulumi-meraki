// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInventoryDevicesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInventoryDevicesPlainArgs Empty = new GetInventoryDevicesPlainArgs();

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable String endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * macs query parameter. Search for devices in inventory based on mac addresses.
     * 
     */
    @Import(name="macs")
    private @Nullable List<String> macs;

    /**
     * @return macs query parameter. Search for devices in inventory based on mac addresses.
     * 
     */
    public Optional<List<String>> macs() {
        return Optional.ofNullable(this.macs);
    }

    /**
     * models query parameter. Search for devices in inventory based on model.
     * 
     */
    @Import(name="models")
    private @Nullable List<String> models;

    /**
     * @return models query parameter. Search for devices in inventory based on model.
     * 
     */
    public Optional<List<String>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
     * 
     */
    @Import(name="networkIds")
    private @Nullable List<String> networkIds;

    /**
     * @return networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
     * 
     */
    public Optional<List<String>> networkIds() {
        return Optional.ofNullable(this.networkIds);
    }

    /**
     * orderNumbers query parameter. Search for devices in inventory based on order numbers.
     * 
     */
    @Import(name="orderNumbers")
    private @Nullable List<String> orderNumbers;

    /**
     * @return orderNumbers query parameter. Search for devices in inventory based on order numbers.
     * 
     */
    public Optional<List<String>> orderNumbers() {
        return Optional.ofNullable(this.orderNumbers);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable String organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    @Import(name="perPage")
    private @Nullable Integer perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * 
     */
    @Import(name="productTypes")
    private @Nullable List<String> productTypes;

    /**
     * @return productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * 
     */
    public Optional<List<String>> productTypes() {
        return Optional.ofNullable(this.productTypes);
    }

    /**
     * search query parameter. Search for devices in inventory based on serial number, mac address, or model.
     * 
     */
    @Import(name="search")
    private @Nullable String search;

    /**
     * @return search query parameter. Search for devices in inventory based on serial number, mac address, or model.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial")
    private @Nullable String serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Optional<String> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * serials query parameter. Search for devices in inventory based on serials.
     * 
     */
    @Import(name="serials")
    private @Nullable List<String> serials;

    /**
     * @return serials query parameter. Search for devices in inventory based on serials.
     * 
     */
    public Optional<List<String>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable String startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    /**
     * tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * tagsFilterType query parameter. To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
     * 
     */
    @Import(name="tagsFilterType")
    private @Nullable String tagsFilterType;

    /**
     * @return tagsFilterType query parameter. To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
     * 
     */
    public Optional<String> tagsFilterType() {
        return Optional.ofNullable(this.tagsFilterType);
    }

    /**
     * usedState query parameter. Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
     * 
     */
    @Import(name="usedState")
    private @Nullable String usedState;

    /**
     * @return usedState query parameter. Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
     * 
     */
    public Optional<String> usedState() {
        return Optional.ofNullable(this.usedState);
    }

    private GetInventoryDevicesPlainArgs() {}

    private GetInventoryDevicesPlainArgs(GetInventoryDevicesPlainArgs $) {
        this.endingBefore = $.endingBefore;
        this.macs = $.macs;
        this.models = $.models;
        this.networkIds = $.networkIds;
        this.orderNumbers = $.orderNumbers;
        this.organizationId = $.organizationId;
        this.perPage = $.perPage;
        this.productTypes = $.productTypes;
        this.search = $.search;
        this.serial = $.serial;
        this.serials = $.serials;
        this.startingAfter = $.startingAfter;
        this.tags = $.tags;
        this.tagsFilterType = $.tagsFilterType;
        this.usedState = $.usedState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInventoryDevicesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInventoryDevicesPlainArgs $;

        public Builder() {
            $ = new GetInventoryDevicesPlainArgs();
        }

        public Builder(GetInventoryDevicesPlainArgs defaults) {
            $ = new GetInventoryDevicesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable String endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param macs macs query parameter. Search for devices in inventory based on mac addresses.
         * 
         * @return builder
         * 
         */
        public Builder macs(@Nullable List<String> macs) {
            $.macs = macs;
            return this;
        }

        /**
         * @param macs macs query parameter. Search for devices in inventory based on mac addresses.
         * 
         * @return builder
         * 
         */
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }

        /**
         * @param models models query parameter. Search for devices in inventory based on model.
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable List<String> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models models query parameter. Search for devices in inventory based on model.
         * 
         * @return builder
         * 
         */
        public Builder models(String... models) {
            return models(List.of(models));
        }

        /**
         * @param networkIds networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(@Nullable List<String> networkIds) {
            $.networkIds = networkIds;
            return this;
        }

        /**
         * @param networkIds networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }

        /**
         * @param orderNumbers orderNumbers query parameter. Search for devices in inventory based on order numbers.
         * 
         * @return builder
         * 
         */
        public Builder orderNumbers(@Nullable List<String> orderNumbers) {
            $.orderNumbers = orderNumbers;
            return this;
        }

        /**
         * @param orderNumbers orderNumbers query parameter. Search for devices in inventory based on order numbers.
         * 
         * @return builder
         * 
         */
        public Builder orderNumbers(String... orderNumbers) {
            return orderNumbers(List.of(orderNumbers));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable String organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Integer perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param productTypes productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(@Nullable List<String> productTypes) {
            $.productTypes = productTypes;
            return this;
        }

        /**
         * @param productTypes productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }

        /**
         * @param search search query parameter. Search for devices in inventory based on serial number, mac address, or model.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable String search) {
            $.search = search;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable String serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serials serials query parameter. Search for devices in inventory based on serials.
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable List<String> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials serials query parameter. Search for devices in inventory based on serials.
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable String startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        /**
         * @param tags tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tagsFilterType tagsFilterType query parameter. To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
         * 
         * @return builder
         * 
         */
        public Builder tagsFilterType(@Nullable String tagsFilterType) {
            $.tagsFilterType = tagsFilterType;
            return this;
        }

        /**
         * @param usedState usedState query parameter. Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
         * 
         * @return builder
         * 
         */
        public Builder usedState(@Nullable String usedState) {
            $.usedState = usedState;
            return this;
        }

        public GetInventoryDevicesPlainArgs build() {
            return $;
        }
    }

}
