// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetFirmwareUpgradesItemProductsSensorAvailableVersion;
import com.pulumi.meraki.networks.outputs.GetFirmwareUpgradesItemProductsSensorCurrentVersion;
import com.pulumi.meraki.networks.outputs.GetFirmwareUpgradesItemProductsSensorLastUpgrade;
import com.pulumi.meraki.networks.outputs.GetFirmwareUpgradesItemProductsSensorNextUpgrade;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFirmwareUpgradesItemProductsSensor {
    /**
     * @return Firmware versions available for upgrade
     * 
     */
    private List<GetFirmwareUpgradesItemProductsSensorAvailableVersion> availableVersions;
    /**
     * @return Details of the current version on the device
     * 
     */
    private GetFirmwareUpgradesItemProductsSensorCurrentVersion currentVersion;
    /**
     * @return Details of the last firmware upgrade on the device
     * 
     */
    private GetFirmwareUpgradesItemProductsSensorLastUpgrade lastUpgrade;
    /**
     * @return Details of the next firmware upgrade on the device
     * 
     */
    private GetFirmwareUpgradesItemProductsSensorNextUpgrade nextUpgrade;
    /**
     * @return Whether or not the network wants beta firmware
     * 
     */
    private Boolean participateInNextBetaRelease;

    private GetFirmwareUpgradesItemProductsSensor() {}
    /**
     * @return Firmware versions available for upgrade
     * 
     */
    public List<GetFirmwareUpgradesItemProductsSensorAvailableVersion> availableVersions() {
        return this.availableVersions;
    }
    /**
     * @return Details of the current version on the device
     * 
     */
    public GetFirmwareUpgradesItemProductsSensorCurrentVersion currentVersion() {
        return this.currentVersion;
    }
    /**
     * @return Details of the last firmware upgrade on the device
     * 
     */
    public GetFirmwareUpgradesItemProductsSensorLastUpgrade lastUpgrade() {
        return this.lastUpgrade;
    }
    /**
     * @return Details of the next firmware upgrade on the device
     * 
     */
    public GetFirmwareUpgradesItemProductsSensorNextUpgrade nextUpgrade() {
        return this.nextUpgrade;
    }
    /**
     * @return Whether or not the network wants beta firmware
     * 
     */
    public Boolean participateInNextBetaRelease() {
        return this.participateInNextBetaRelease;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFirmwareUpgradesItemProductsSensor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetFirmwareUpgradesItemProductsSensorAvailableVersion> availableVersions;
        private GetFirmwareUpgradesItemProductsSensorCurrentVersion currentVersion;
        private GetFirmwareUpgradesItemProductsSensorLastUpgrade lastUpgrade;
        private GetFirmwareUpgradesItemProductsSensorNextUpgrade nextUpgrade;
        private Boolean participateInNextBetaRelease;
        public Builder() {}
        public Builder(GetFirmwareUpgradesItemProductsSensor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableVersions = defaults.availableVersions;
    	      this.currentVersion = defaults.currentVersion;
    	      this.lastUpgrade = defaults.lastUpgrade;
    	      this.nextUpgrade = defaults.nextUpgrade;
    	      this.participateInNextBetaRelease = defaults.participateInNextBetaRelease;
        }

        @CustomType.Setter
        public Builder availableVersions(List<GetFirmwareUpgradesItemProductsSensorAvailableVersion> availableVersions) {
            if (availableVersions == null) {
              throw new MissingRequiredPropertyException("GetFirmwareUpgradesItemProductsSensor", "availableVersions");
            }
            this.availableVersions = availableVersions;
            return this;
        }
        public Builder availableVersions(GetFirmwareUpgradesItemProductsSensorAvailableVersion... availableVersions) {
            return availableVersions(List.of(availableVersions));
        }
        @CustomType.Setter
        public Builder currentVersion(GetFirmwareUpgradesItemProductsSensorCurrentVersion currentVersion) {
            if (currentVersion == null) {
              throw new MissingRequiredPropertyException("GetFirmwareUpgradesItemProductsSensor", "currentVersion");
            }
            this.currentVersion = currentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpgrade(GetFirmwareUpgradesItemProductsSensorLastUpgrade lastUpgrade) {
            if (lastUpgrade == null) {
              throw new MissingRequiredPropertyException("GetFirmwareUpgradesItemProductsSensor", "lastUpgrade");
            }
            this.lastUpgrade = lastUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder nextUpgrade(GetFirmwareUpgradesItemProductsSensorNextUpgrade nextUpgrade) {
            if (nextUpgrade == null) {
              throw new MissingRequiredPropertyException("GetFirmwareUpgradesItemProductsSensor", "nextUpgrade");
            }
            this.nextUpgrade = nextUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder participateInNextBetaRelease(Boolean participateInNextBetaRelease) {
            if (participateInNextBetaRelease == null) {
              throw new MissingRequiredPropertyException("GetFirmwareUpgradesItemProductsSensor", "participateInNextBetaRelease");
            }
            this.participateInNextBetaRelease = participateInNextBetaRelease;
            return this;
        }
        public GetFirmwareUpgradesItemProductsSensor build() {
            final var _resultValue = new GetFirmwareUpgradesItemProductsSensor();
            _resultValue.availableVersions = availableVersions;
            _resultValue.currentVersion = currentVersion;
            _resultValue.lastUpgrade = lastUpgrade;
            _resultValue.nextUpgrade = nextUpgrade;
            _resultValue.participateInNextBetaRelease = participateInNextBetaRelease;
            return _resultValue;
        }
    }
}
