// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.ApplianceFirewallPortForwardingRulesRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceFirewallPortForwardingRulesState extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceFirewallPortForwardingRulesState Empty = new ApplianceFirewallPortForwardingRulesState();

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * An array of port forwarding params
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<ApplianceFirewallPortForwardingRulesRuleArgs>> rules;

    /**
     * @return An array of port forwarding params
     * 
     */
    public Optional<Output<List<ApplianceFirewallPortForwardingRulesRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private ApplianceFirewallPortForwardingRulesState() {}

    private ApplianceFirewallPortForwardingRulesState(ApplianceFirewallPortForwardingRulesState $) {
        this.networkId = $.networkId;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceFirewallPortForwardingRulesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceFirewallPortForwardingRulesState $;

        public Builder() {
            $ = new ApplianceFirewallPortForwardingRulesState();
        }

        public Builder(ApplianceFirewallPortForwardingRulesState defaults) {
            $ = new ApplianceFirewallPortForwardingRulesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param rules An array of port forwarding params
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<ApplianceFirewallPortForwardingRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules An array of port forwarding params
         * 
         * @return builder
         * 
         */
        public Builder rules(List<ApplianceFirewallPortForwardingRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules An array of port forwarding params
         * 
         * @return builder
         * 
         */
        public Builder rules(ApplianceFirewallPortForwardingRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public ApplianceFirewallPortForwardingRulesState build() {
            return $;
        }
    }

}
