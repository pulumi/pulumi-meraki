// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.AdaptivePolicyGroupsPolicyObjectArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdaptivePolicyGroupsState extends com.pulumi.resources.ResourceArgs {

    public static final AdaptivePolicyGroupsState Empty = new AdaptivePolicyGroupsState();

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Description of the group (default: &#34;&#34;)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the group (default: &#34;&#34;)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    @Import(name="isDefaultGroup")
    private @Nullable Output<Boolean> isDefaultGroup;

    public Optional<Output<Boolean>> isDefaultGroup() {
        return Optional.ofNullable(this.isDefaultGroup);
    }

    /**
     * Name of the group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group&#39;s SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
     * 
     */
    @Import(name="policyObjects")
    private @Nullable Output<List<AdaptivePolicyGroupsPolicyObjectArgs>> policyObjects;

    /**
     * @return The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group&#39;s SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
     * 
     */
    public Optional<Output<List<AdaptivePolicyGroupsPolicyObjectArgs>>> policyObjects() {
        return Optional.ofNullable(this.policyObjects);
    }

    @Import(name="requiredIpMappings")
    private @Nullable Output<List<String>> requiredIpMappings;

    public Optional<Output<List<String>>> requiredIpMappings() {
        return Optional.ofNullable(this.requiredIpMappings);
    }

    /**
     * SGT value of the group
     * 
     */
    @Import(name="sgt")
    private @Nullable Output<Integer> sgt;

    /**
     * @return SGT value of the group
     * 
     */
    public Optional<Output<Integer>> sgt() {
        return Optional.ofNullable(this.sgt);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private AdaptivePolicyGroupsState() {}

    private AdaptivePolicyGroupsState(AdaptivePolicyGroupsState $) {
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.groupId = $.groupId;
        this.isDefaultGroup = $.isDefaultGroup;
        this.name = $.name;
        this.organizationId = $.organizationId;
        this.policyObjects = $.policyObjects;
        this.requiredIpMappings = $.requiredIpMappings;
        this.sgt = $.sgt;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdaptivePolicyGroupsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdaptivePolicyGroupsState $;

        public Builder() {
            $ = new AdaptivePolicyGroupsState();
        }

        public Builder(AdaptivePolicyGroupsState defaults) {
            $ = new AdaptivePolicyGroupsState(Objects.requireNonNull(defaults));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Description of the group (default: &#34;&#34;)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the group (default: &#34;&#34;)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        public Builder isDefaultGroup(@Nullable Output<Boolean> isDefaultGroup) {
            $.isDefaultGroup = isDefaultGroup;
            return this;
        }

        public Builder isDefaultGroup(Boolean isDefaultGroup) {
            return isDefaultGroup(Output.of(isDefaultGroup));
        }

        /**
         * @param name Name of the group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param policyObjects The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group&#39;s SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
         * 
         * @return builder
         * 
         */
        public Builder policyObjects(@Nullable Output<List<AdaptivePolicyGroupsPolicyObjectArgs>> policyObjects) {
            $.policyObjects = policyObjects;
            return this;
        }

        /**
         * @param policyObjects The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group&#39;s SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
         * 
         * @return builder
         * 
         */
        public Builder policyObjects(List<AdaptivePolicyGroupsPolicyObjectArgs> policyObjects) {
            return policyObjects(Output.of(policyObjects));
        }

        /**
         * @param policyObjects The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group&#39;s SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
         * 
         * @return builder
         * 
         */
        public Builder policyObjects(AdaptivePolicyGroupsPolicyObjectArgs... policyObjects) {
            return policyObjects(List.of(policyObjects));
        }

        public Builder requiredIpMappings(@Nullable Output<List<String>> requiredIpMappings) {
            $.requiredIpMappings = requiredIpMappings;
            return this;
        }

        public Builder requiredIpMappings(List<String> requiredIpMappings) {
            return requiredIpMappings(Output.of(requiredIpMappings));
        }

        public Builder requiredIpMappings(String... requiredIpMappings) {
            return requiredIpMappings(List.of(requiredIpMappings));
        }

        /**
         * @param sgt SGT value of the group
         * 
         * @return builder
         * 
         */
        public Builder sgt(@Nullable Output<Integer> sgt) {
            $.sgt = sgt;
            return this;
        }

        /**
         * @param sgt SGT value of the group
         * 
         * @return builder
         * 
         */
        public Builder sgt(Integer sgt) {
            return sgt(Output.of(sgt));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public AdaptivePolicyGroupsState build() {
            return $;
        }
    }

}
