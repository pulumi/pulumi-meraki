// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemCounts;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemDot1x;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemRadius;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemRadiusAccountingServer;
import com.pulumi.meraki.networks.outputs.GetSwitchAccessPoliciesItemRadiusServer;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchAccessPoliciesItem {
    /**
     * @return Access Type of the policy. Automatically &#39;Hybrid authentication&#39; when hostMode is &#39;Multi-Domain&#39;.
     * 
     */
    private String accessPolicyType;
    /**
     * @return Counts associated with the access policy
     * 
     */
    private GetSwitchAccessPoliciesItemCounts counts;
    /**
     * @return 802.1x Settings
     * 
     */
    private GetSwitchAccessPoliciesItemDot1x dot1x;
    /**
     * @return If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     */
    private Boolean guestPortBouncing;
    /**
     * @return ID for the guest VLAN allow unauthorized devices access to limited network resources
     * 
     */
    private Integer guestVlanId;
    /**
     * @return Choose the Host Mode for the access policy.
     * 
     */
    private String hostMode;
    /**
     * @return Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is &#39;Hybrid Authentication.
     * 
     */
    private Boolean increaseAccessSpeed;
    /**
     * @return Name of the access policy
     * 
     */
    private String name;
    /**
     * @return Object for RADIUS Settings
     * 
     */
    private GetSwitchAccessPoliciesItemRadius radius;
    /**
     * @return Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
     * 
     */
    private Boolean radiusAccountingEnabled;
    /**
     * @return List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
     * 
     */
    private List<GetSwitchAccessPoliciesItemRadiusAccountingServer> radiusAccountingServers;
    /**
     * @return Change of authentication for RADIUS re-authentication and disconnection
     * 
     */
    private Boolean radiusCoaSupportEnabled;
    /**
     * @return Acceptable values are *&#39;&#39;* for None, or *&#39;11&#39;* for Group Policies ACL
     * 
     */
    private String radiusGroupAttribute;
    /**
     * @return List of RADIUS servers to require connecting devices to authenticate against before granting network access
     * 
     */
    private List<GetSwitchAccessPoliciesItemRadiusServer> radiusServers;
    /**
     * @return If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     */
    private Boolean radiusTestingEnabled;
    /**
     * @return Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
     * 
     */
    private Boolean urlRedirectWalledGardenEnabled;
    /**
     * @return IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     * 
     */
    private List<String> urlRedirectWalledGardenRanges;
    /**
     * @return CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is &#39;Multi-Domain&#39;.
     * 
     */
    private Boolean voiceVlanClients;

    private GetSwitchAccessPoliciesItem() {}
    /**
     * @return Access Type of the policy. Automatically &#39;Hybrid authentication&#39; when hostMode is &#39;Multi-Domain&#39;.
     * 
     */
    public String accessPolicyType() {
        return this.accessPolicyType;
    }
    /**
     * @return Counts associated with the access policy
     * 
     */
    public GetSwitchAccessPoliciesItemCounts counts() {
        return this.counts;
    }
    /**
     * @return 802.1x Settings
     * 
     */
    public GetSwitchAccessPoliciesItemDot1x dot1x() {
        return this.dot1x;
    }
    /**
     * @return If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     */
    public Boolean guestPortBouncing() {
        return this.guestPortBouncing;
    }
    /**
     * @return ID for the guest VLAN allow unauthorized devices access to limited network resources
     * 
     */
    public Integer guestVlanId() {
        return this.guestVlanId;
    }
    /**
     * @return Choose the Host Mode for the access policy.
     * 
     */
    public String hostMode() {
        return this.hostMode;
    }
    /**
     * @return Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is &#39;Hybrid Authentication.
     * 
     */
    public Boolean increaseAccessSpeed() {
        return this.increaseAccessSpeed;
    }
    /**
     * @return Name of the access policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object for RADIUS Settings
     * 
     */
    public GetSwitchAccessPoliciesItemRadius radius() {
        return this.radius;
    }
    /**
     * @return Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
     * 
     */
    public Boolean radiusAccountingEnabled() {
        return this.radiusAccountingEnabled;
    }
    /**
     * @return List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
     * 
     */
    public List<GetSwitchAccessPoliciesItemRadiusAccountingServer> radiusAccountingServers() {
        return this.radiusAccountingServers;
    }
    /**
     * @return Change of authentication for RADIUS re-authentication and disconnection
     * 
     */
    public Boolean radiusCoaSupportEnabled() {
        return this.radiusCoaSupportEnabled;
    }
    /**
     * @return Acceptable values are *&#39;&#39;* for None, or *&#39;11&#39;* for Group Policies ACL
     * 
     */
    public String radiusGroupAttribute() {
        return this.radiusGroupAttribute;
    }
    /**
     * @return List of RADIUS servers to require connecting devices to authenticate against before granting network access
     * 
     */
    public List<GetSwitchAccessPoliciesItemRadiusServer> radiusServers() {
        return this.radiusServers;
    }
    /**
     * @return If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     * 
     */
    public Boolean radiusTestingEnabled() {
        return this.radiusTestingEnabled;
    }
    /**
     * @return Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
     * 
     */
    public Boolean urlRedirectWalledGardenEnabled() {
        return this.urlRedirectWalledGardenEnabled;
    }
    /**
     * @return IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     * 
     */
    public List<String> urlRedirectWalledGardenRanges() {
        return this.urlRedirectWalledGardenRanges;
    }
    /**
     * @return CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is &#39;Multi-Domain&#39;.
     * 
     */
    public Boolean voiceVlanClients() {
        return this.voiceVlanClients;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchAccessPoliciesItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPolicyType;
        private GetSwitchAccessPoliciesItemCounts counts;
        private GetSwitchAccessPoliciesItemDot1x dot1x;
        private Boolean guestPortBouncing;
        private Integer guestVlanId;
        private String hostMode;
        private Boolean increaseAccessSpeed;
        private String name;
        private GetSwitchAccessPoliciesItemRadius radius;
        private Boolean radiusAccountingEnabled;
        private List<GetSwitchAccessPoliciesItemRadiusAccountingServer> radiusAccountingServers;
        private Boolean radiusCoaSupportEnabled;
        private String radiusGroupAttribute;
        private List<GetSwitchAccessPoliciesItemRadiusServer> radiusServers;
        private Boolean radiusTestingEnabled;
        private Boolean urlRedirectWalledGardenEnabled;
        private List<String> urlRedirectWalledGardenRanges;
        private Boolean voiceVlanClients;
        public Builder() {}
        public Builder(GetSwitchAccessPoliciesItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicyType = defaults.accessPolicyType;
    	      this.counts = defaults.counts;
    	      this.dot1x = defaults.dot1x;
    	      this.guestPortBouncing = defaults.guestPortBouncing;
    	      this.guestVlanId = defaults.guestVlanId;
    	      this.hostMode = defaults.hostMode;
    	      this.increaseAccessSpeed = defaults.increaseAccessSpeed;
    	      this.name = defaults.name;
    	      this.radius = defaults.radius;
    	      this.radiusAccountingEnabled = defaults.radiusAccountingEnabled;
    	      this.radiusAccountingServers = defaults.radiusAccountingServers;
    	      this.radiusCoaSupportEnabled = defaults.radiusCoaSupportEnabled;
    	      this.radiusGroupAttribute = defaults.radiusGroupAttribute;
    	      this.radiusServers = defaults.radiusServers;
    	      this.radiusTestingEnabled = defaults.radiusTestingEnabled;
    	      this.urlRedirectWalledGardenEnabled = defaults.urlRedirectWalledGardenEnabled;
    	      this.urlRedirectWalledGardenRanges = defaults.urlRedirectWalledGardenRanges;
    	      this.voiceVlanClients = defaults.voiceVlanClients;
        }

        @CustomType.Setter
        public Builder accessPolicyType(String accessPolicyType) {
            if (accessPolicyType == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "accessPolicyType");
            }
            this.accessPolicyType = accessPolicyType;
            return this;
        }
        @CustomType.Setter
        public Builder counts(GetSwitchAccessPoliciesItemCounts counts) {
            if (counts == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "counts");
            }
            this.counts = counts;
            return this;
        }
        @CustomType.Setter
        public Builder dot1x(GetSwitchAccessPoliciesItemDot1x dot1x) {
            if (dot1x == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "dot1x");
            }
            this.dot1x = dot1x;
            return this;
        }
        @CustomType.Setter
        public Builder guestPortBouncing(Boolean guestPortBouncing) {
            if (guestPortBouncing == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "guestPortBouncing");
            }
            this.guestPortBouncing = guestPortBouncing;
            return this;
        }
        @CustomType.Setter
        public Builder guestVlanId(Integer guestVlanId) {
            if (guestVlanId == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "guestVlanId");
            }
            this.guestVlanId = guestVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder hostMode(String hostMode) {
            if (hostMode == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "hostMode");
            }
            this.hostMode = hostMode;
            return this;
        }
        @CustomType.Setter
        public Builder increaseAccessSpeed(Boolean increaseAccessSpeed) {
            if (increaseAccessSpeed == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "increaseAccessSpeed");
            }
            this.increaseAccessSpeed = increaseAccessSpeed;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder radius(GetSwitchAccessPoliciesItemRadius radius) {
            if (radius == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radius");
            }
            this.radius = radius;
            return this;
        }
        @CustomType.Setter
        public Builder radiusAccountingEnabled(Boolean radiusAccountingEnabled) {
            if (radiusAccountingEnabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusAccountingEnabled");
            }
            this.radiusAccountingEnabled = radiusAccountingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder radiusAccountingServers(List<GetSwitchAccessPoliciesItemRadiusAccountingServer> radiusAccountingServers) {
            if (radiusAccountingServers == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusAccountingServers");
            }
            this.radiusAccountingServers = radiusAccountingServers;
            return this;
        }
        public Builder radiusAccountingServers(GetSwitchAccessPoliciesItemRadiusAccountingServer... radiusAccountingServers) {
            return radiusAccountingServers(List.of(radiusAccountingServers));
        }
        @CustomType.Setter
        public Builder radiusCoaSupportEnabled(Boolean radiusCoaSupportEnabled) {
            if (radiusCoaSupportEnabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusCoaSupportEnabled");
            }
            this.radiusCoaSupportEnabled = radiusCoaSupportEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder radiusGroupAttribute(String radiusGroupAttribute) {
            if (radiusGroupAttribute == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusGroupAttribute");
            }
            this.radiusGroupAttribute = radiusGroupAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServers(List<GetSwitchAccessPoliciesItemRadiusServer> radiusServers) {
            if (radiusServers == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusServers");
            }
            this.radiusServers = radiusServers;
            return this;
        }
        public Builder radiusServers(GetSwitchAccessPoliciesItemRadiusServer... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }
        @CustomType.Setter
        public Builder radiusTestingEnabled(Boolean radiusTestingEnabled) {
            if (radiusTestingEnabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "radiusTestingEnabled");
            }
            this.radiusTestingEnabled = radiusTestingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder urlRedirectWalledGardenEnabled(Boolean urlRedirectWalledGardenEnabled) {
            if (urlRedirectWalledGardenEnabled == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "urlRedirectWalledGardenEnabled");
            }
            this.urlRedirectWalledGardenEnabled = urlRedirectWalledGardenEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder urlRedirectWalledGardenRanges(List<String> urlRedirectWalledGardenRanges) {
            if (urlRedirectWalledGardenRanges == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "urlRedirectWalledGardenRanges");
            }
            this.urlRedirectWalledGardenRanges = urlRedirectWalledGardenRanges;
            return this;
        }
        public Builder urlRedirectWalledGardenRanges(String... urlRedirectWalledGardenRanges) {
            return urlRedirectWalledGardenRanges(List.of(urlRedirectWalledGardenRanges));
        }
        @CustomType.Setter
        public Builder voiceVlanClients(Boolean voiceVlanClients) {
            if (voiceVlanClients == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItem", "voiceVlanClients");
            }
            this.voiceVlanClients = voiceVlanClients;
            return this;
        }
        public GetSwitchAccessPoliciesItem build() {
            final var _resultValue = new GetSwitchAccessPoliciesItem();
            _resultValue.accessPolicyType = accessPolicyType;
            _resultValue.counts = counts;
            _resultValue.dot1x = dot1x;
            _resultValue.guestPortBouncing = guestPortBouncing;
            _resultValue.guestVlanId = guestVlanId;
            _resultValue.hostMode = hostMode;
            _resultValue.increaseAccessSpeed = increaseAccessSpeed;
            _resultValue.name = name;
            _resultValue.radius = radius;
            _resultValue.radiusAccountingEnabled = radiusAccountingEnabled;
            _resultValue.radiusAccountingServers = radiusAccountingServers;
            _resultValue.radiusCoaSupportEnabled = radiusCoaSupportEnabled;
            _resultValue.radiusGroupAttribute = radiusGroupAttribute;
            _resultValue.radiusServers = radiusServers;
            _resultValue.radiusTestingEnabled = radiusTestingEnabled;
            _resultValue.urlRedirectWalledGardenEnabled = urlRedirectWalledGardenEnabled;
            _resultValue.urlRedirectWalledGardenRanges = urlRedirectWalledGardenRanges;
            _resultValue.voiceVlanClients = voiceVlanClients;
            return _resultValue;
        }
    }
}
