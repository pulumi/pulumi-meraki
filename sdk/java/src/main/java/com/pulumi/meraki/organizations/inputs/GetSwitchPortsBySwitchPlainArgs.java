// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSwitchPortsBySwitchPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSwitchPortsBySwitchPlainArgs Empty = new GetSwitchPortsBySwitchPlainArgs();

    /**
     * configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * 
     */
    @Import(name="configurationUpdatedAfter")
    private @Nullable String configurationUpdatedAfter;

    /**
     * @return configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
     * 
     */
    public Optional<String> configurationUpdatedAfter() {
        return Optional.ofNullable(this.configurationUpdatedAfter);
    }

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable String endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * 
     */
    @Import(name="mac")
    private @Nullable String mac;

    /**
     * @return mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
     * 
     */
    public Optional<String> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * 
     */
    @Import(name="macs")
    private @Nullable List<String> macs;

    /**
     * @return macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
     * 
     */
    public Optional<List<String>> macs() {
        return Optional.ofNullable(this.macs);
    }

    /**
     * name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkIds query parameter. Optional parameter to filter switchports by network.
     * 
     */
    @Import(name="networkIds")
    private @Nullable List<String> networkIds;

    /**
     * @return networkIds query parameter. Optional parameter to filter switchports by network.
     * 
     */
    public Optional<List<String>> networkIds() {
        return Optional.ofNullable(this.networkIds);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private String organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     * 
     */
    @Import(name="perPage")
    private @Nullable Integer perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     * 
     */
    @Import(name="portProfileIds")
    private @Nullable List<String> portProfileIds;

    /**
     * @return portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
     * 
     */
    public Optional<List<String>> portProfileIds() {
        return Optional.ofNullable(this.portProfileIds);
    }

    /**
     * serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * 
     */
    @Import(name="serial")
    private @Nullable String serial;

    /**
     * @return serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
     * 
     */
    public Optional<String> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * 
     */
    @Import(name="serials")
    private @Nullable List<String> serials;

    /**
     * @return serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
     * 
     */
    public Optional<List<String>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable String startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    private GetSwitchPortsBySwitchPlainArgs() {}

    private GetSwitchPortsBySwitchPlainArgs(GetSwitchPortsBySwitchPlainArgs $) {
        this.configurationUpdatedAfter = $.configurationUpdatedAfter;
        this.endingBefore = $.endingBefore;
        this.mac = $.mac;
        this.macs = $.macs;
        this.name = $.name;
        this.networkIds = $.networkIds;
        this.organizationId = $.organizationId;
        this.perPage = $.perPage;
        this.portProfileIds = $.portProfileIds;
        this.serial = $.serial;
        this.serials = $.serials;
        this.startingAfter = $.startingAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSwitchPortsBySwitchPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSwitchPortsBySwitchPlainArgs $;

        public Builder() {
            $ = new GetSwitchPortsBySwitchPlainArgs();
        }

        public Builder(GetSwitchPortsBySwitchPlainArgs defaults) {
            $ = new GetSwitchPortsBySwitchPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationUpdatedAfter configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
         * 
         * @return builder
         * 
         */
        public Builder configurationUpdatedAfter(@Nullable String configurationUpdatedAfter) {
            $.configurationUpdatedAfter = configurationUpdatedAfter;
            return this;
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable String endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param mac mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable String mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(@Nullable List<String> macs) {
            $.macs = macs;
            return this;
        }

        /**
         * @param macs macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }

        /**
         * @param name name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter switchports by network.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(@Nullable List<String> networkIds) {
            $.networkIds = networkIds;
            return this;
        }

        /**
         * @param networkIds networkIds query parameter. Optional parameter to filter switchports by network.
         * 
         * @return builder
         * 
         */
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Integer perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param portProfileIds portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
         * 
         * @return builder
         * 
         */
        public Builder portProfileIds(@Nullable List<String> portProfileIds) {
            $.portProfileIds = portProfileIds;
            return this;
        }

        /**
         * @param portProfileIds portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
         * 
         * @return builder
         * 
         */
        public Builder portProfileIds(String... portProfileIds) {
            return portProfileIds(List.of(portProfileIds));
        }

        /**
         * @param serial serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable String serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable List<String> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable String startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        public GetSwitchPortsBySwitchPlainArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("GetSwitchPortsBySwitchPlainArgs", "organizationId");
            }
            return $;
        }
    }

}
