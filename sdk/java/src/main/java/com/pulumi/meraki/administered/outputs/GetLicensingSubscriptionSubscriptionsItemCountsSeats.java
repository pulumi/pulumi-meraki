// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.administered.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetLicensingSubscriptionSubscriptionsItemCountsSeats {
    /**
     * @return Number of seats in use
     * 
     */
    private Integer assigned;
    /**
     * @return Number of seats available for use
     * 
     */
    private Integer available;
    /**
     * @return Total number of seats provided by this subscription
     * 
     */
    private Integer limit;

    private GetLicensingSubscriptionSubscriptionsItemCountsSeats() {}
    /**
     * @return Number of seats in use
     * 
     */
    public Integer assigned() {
        return this.assigned;
    }
    /**
     * @return Number of seats available for use
     * 
     */
    public Integer available() {
        return this.available;
    }
    /**
     * @return Total number of seats provided by this subscription
     * 
     */
    public Integer limit() {
        return this.limit;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensingSubscriptionSubscriptionsItemCountsSeats defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer assigned;
        private Integer available;
        private Integer limit;
        public Builder() {}
        public Builder(GetLicensingSubscriptionSubscriptionsItemCountsSeats defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assigned = defaults.assigned;
    	      this.available = defaults.available;
    	      this.limit = defaults.limit;
        }

        @CustomType.Setter
        public Builder assigned(Integer assigned) {
            if (assigned == null) {
              throw new MissingRequiredPropertyException("GetLicensingSubscriptionSubscriptionsItemCountsSeats", "assigned");
            }
            this.assigned = assigned;
            return this;
        }
        @CustomType.Setter
        public Builder available(Integer available) {
            if (available == null) {
              throw new MissingRequiredPropertyException("GetLicensingSubscriptionSubscriptionsItemCountsSeats", "available");
            }
            this.available = available;
            return this;
        }
        @CustomType.Setter
        public Builder limit(Integer limit) {
            if (limit == null) {
              throw new MissingRequiredPropertyException("GetLicensingSubscriptionSubscriptionsItemCountsSeats", "limit");
            }
            this.limit = limit;
            return this;
        }
        public GetLicensingSubscriptionSubscriptionsItemCountsSeats build() {
            final var _resultValue = new GetLicensingSubscriptionSubscriptionsItemCountsSeats();
            _resultValue.assigned = assigned;
            _resultValue.available = available;
            _resultValue.limit = limit;
            return _resultValue;
        }
    }
}
