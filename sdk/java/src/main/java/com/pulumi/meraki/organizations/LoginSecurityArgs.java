// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.inputs.LoginSecurityApiAuthenticationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoginSecurityArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoginSecurityArgs Empty = new LoginSecurityArgs();

    /**
     * Number of consecutive failed login attempts after which users&#39; accounts will be locked.
     * 
     */
    @Import(name="accountLockoutAttempts")
    private @Nullable Output<Integer> accountLockoutAttempts;

    /**
     * @return Number of consecutive failed login attempts after which users&#39; accounts will be locked.
     * 
     */
    public Optional<Output<Integer>> accountLockoutAttempts() {
        return Optional.ofNullable(this.accountLockoutAttempts);
    }

    /**
     * Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     * 
     */
    @Import(name="apiAuthentication")
    private @Nullable Output<LoginSecurityApiAuthenticationArgs> apiAuthentication;

    /**
     * @return Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
     * 
     */
    public Optional<Output<LoginSecurityApiAuthenticationArgs>> apiAuthentication() {
        return Optional.ofNullable(this.apiAuthentication);
    }

    /**
     * Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     * 
     */
    @Import(name="enforceAccountLockout")
    private @Nullable Output<Boolean> enforceAccountLockout;

    /**
     * @return Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
     * 
     */
    public Optional<Output<Boolean>> enforceAccountLockout() {
        return Optional.ofNullable(this.enforceAccountLockout);
    }

    /**
     * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     * 
     */
    @Import(name="enforceDifferentPasswords")
    private @Nullable Output<Boolean> enforceDifferentPasswords;

    /**
     * @return Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
     * 
     */
    public Optional<Output<Boolean>> enforceDifferentPasswords() {
        return Optional.ofNullable(this.enforceDifferentPasswords);
    }

    /**
     * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     * 
     */
    @Import(name="enforceIdleTimeout")
    private @Nullable Output<Boolean> enforceIdleTimeout;

    /**
     * @return Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
     * 
     */
    public Optional<Output<Boolean>> enforceIdleTimeout() {
        return Optional.ofNullable(this.enforceIdleTimeout);
    }

    /**
     * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     * 
     */
    @Import(name="enforceLoginIpRanges")
    private @Nullable Output<Boolean> enforceLoginIpRanges;

    /**
     * @return Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
     * 
     */
    public Optional<Output<Boolean>> enforceLoginIpRanges() {
        return Optional.ofNullable(this.enforceLoginIpRanges);
    }

    /**
     * Boolean indicating whether users are forced to change their password every X number of days.
     * 
     */
    @Import(name="enforcePasswordExpiration")
    private @Nullable Output<Boolean> enforcePasswordExpiration;

    /**
     * @return Boolean indicating whether users are forced to change their password every X number of days.
     * 
     */
    public Optional<Output<Boolean>> enforcePasswordExpiration() {
        return Optional.ofNullable(this.enforcePasswordExpiration);
    }

    /**
     * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     * 
     */
    @Import(name="enforceStrongPasswords")
    private @Nullable Output<Boolean> enforceStrongPasswords;

    /**
     * @return Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
     * 
     */
    public Optional<Output<Boolean>> enforceStrongPasswords() {
        return Optional.ofNullable(this.enforceStrongPasswords);
    }

    /**
     * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     * 
     */
    @Import(name="enforceTwoFactorAuth")
    private @Nullable Output<Boolean> enforceTwoFactorAuth;

    /**
     * @return Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
     * 
     */
    public Optional<Output<Boolean>> enforceTwoFactorAuth() {
        return Optional.ofNullable(this.enforceTwoFactorAuth);
    }

    /**
     * Number of minutes users can remain idle before being logged out of their accounts.
     * 
     */
    @Import(name="idleTimeoutMinutes")
    private @Nullable Output<Integer> idleTimeoutMinutes;

    /**
     * @return Number of minutes users can remain idle before being logged out of their accounts.
     * 
     */
    public Optional<Output<Integer>> idleTimeoutMinutes() {
        return Optional.ofNullable(this.idleTimeoutMinutes);
    }

    /**
     * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     * 
     */
    @Import(name="loginIpRanges")
    private @Nullable Output<List<String>> loginIpRanges;

    /**
     * @return List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
     * 
     */
    public Optional<Output<List<String>>> loginIpRanges() {
        return Optional.ofNullable(this.loginIpRanges);
    }

    /**
     * Number of recent passwords that new password must be distinct from.
     * 
     */
    @Import(name="numDifferentPasswords")
    private @Nullable Output<Integer> numDifferentPasswords;

    /**
     * @return Number of recent passwords that new password must be distinct from.
     * 
     */
    public Optional<Output<Integer>> numDifferentPasswords() {
        return Optional.ofNullable(this.numDifferentPasswords);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Number of days after which users will be forced to change their password.
     * 
     */
    @Import(name="passwordExpirationDays")
    private @Nullable Output<Integer> passwordExpirationDays;

    /**
     * @return Number of days after which users will be forced to change their password.
     * 
     */
    public Optional<Output<Integer>> passwordExpirationDays() {
        return Optional.ofNullable(this.passwordExpirationDays);
    }

    private LoginSecurityArgs() {}

    private LoginSecurityArgs(LoginSecurityArgs $) {
        this.accountLockoutAttempts = $.accountLockoutAttempts;
        this.apiAuthentication = $.apiAuthentication;
        this.enforceAccountLockout = $.enforceAccountLockout;
        this.enforceDifferentPasswords = $.enforceDifferentPasswords;
        this.enforceIdleTimeout = $.enforceIdleTimeout;
        this.enforceLoginIpRanges = $.enforceLoginIpRanges;
        this.enforcePasswordExpiration = $.enforcePasswordExpiration;
        this.enforceStrongPasswords = $.enforceStrongPasswords;
        this.enforceTwoFactorAuth = $.enforceTwoFactorAuth;
        this.idleTimeoutMinutes = $.idleTimeoutMinutes;
        this.loginIpRanges = $.loginIpRanges;
        this.numDifferentPasswords = $.numDifferentPasswords;
        this.organizationId = $.organizationId;
        this.passwordExpirationDays = $.passwordExpirationDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoginSecurityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoginSecurityArgs $;

        public Builder() {
            $ = new LoginSecurityArgs();
        }

        public Builder(LoginSecurityArgs defaults) {
            $ = new LoginSecurityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountLockoutAttempts Number of consecutive failed login attempts after which users&#39; accounts will be locked.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutAttempts(@Nullable Output<Integer> accountLockoutAttempts) {
            $.accountLockoutAttempts = accountLockoutAttempts;
            return this;
        }

        /**
         * @param accountLockoutAttempts Number of consecutive failed login attempts after which users&#39; accounts will be locked.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutAttempts(Integer accountLockoutAttempts) {
            return accountLockoutAttempts(Output.of(accountLockoutAttempts));
        }

        /**
         * @param apiAuthentication Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder apiAuthentication(@Nullable Output<LoginSecurityApiAuthenticationArgs> apiAuthentication) {
            $.apiAuthentication = apiAuthentication;
            return this;
        }

        /**
         * @param apiAuthentication Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder apiAuthentication(LoginSecurityApiAuthenticationArgs apiAuthentication) {
            return apiAuthentication(Output.of(apiAuthentication));
        }

        /**
         * @param enforceAccountLockout Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enforceAccountLockout(@Nullable Output<Boolean> enforceAccountLockout) {
            $.enforceAccountLockout = enforceAccountLockout;
            return this;
        }

        /**
         * @param enforceAccountLockout Boolean indicating whether users&#39; Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
         * 
         * @return builder
         * 
         */
        public Builder enforceAccountLockout(Boolean enforceAccountLockout) {
            return enforceAccountLockout(Output.of(enforceAccountLockout));
        }

        /**
         * @param enforceDifferentPasswords Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
         * 
         * @return builder
         * 
         */
        public Builder enforceDifferentPasswords(@Nullable Output<Boolean> enforceDifferentPasswords) {
            $.enforceDifferentPasswords = enforceDifferentPasswords;
            return this;
        }

        /**
         * @param enforceDifferentPasswords Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
         * 
         * @return builder
         * 
         */
        public Builder enforceDifferentPasswords(Boolean enforceDifferentPasswords) {
            return enforceDifferentPasswords(Output.of(enforceDifferentPasswords));
        }

        /**
         * @param enforceIdleTimeout Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
         * 
         * @return builder
         * 
         */
        public Builder enforceIdleTimeout(@Nullable Output<Boolean> enforceIdleTimeout) {
            $.enforceIdleTimeout = enforceIdleTimeout;
            return this;
        }

        /**
         * @param enforceIdleTimeout Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
         * 
         * @return builder
         * 
         */
        public Builder enforceIdleTimeout(Boolean enforceIdleTimeout) {
            return enforceIdleTimeout(Output.of(enforceIdleTimeout));
        }

        /**
         * @param enforceLoginIpRanges Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder enforceLoginIpRanges(@Nullable Output<Boolean> enforceLoginIpRanges) {
            $.enforceLoginIpRanges = enforceLoginIpRanges;
            return this;
        }

        /**
         * @param enforceLoginIpRanges Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder enforceLoginIpRanges(Boolean enforceLoginIpRanges) {
            return enforceLoginIpRanges(Output.of(enforceLoginIpRanges));
        }

        /**
         * @param enforcePasswordExpiration Boolean indicating whether users are forced to change their password every X number of days.
         * 
         * @return builder
         * 
         */
        public Builder enforcePasswordExpiration(@Nullable Output<Boolean> enforcePasswordExpiration) {
            $.enforcePasswordExpiration = enforcePasswordExpiration;
            return this;
        }

        /**
         * @param enforcePasswordExpiration Boolean indicating whether users are forced to change their password every X number of days.
         * 
         * @return builder
         * 
         */
        public Builder enforcePasswordExpiration(Boolean enforcePasswordExpiration) {
            return enforcePasswordExpiration(Output.of(enforcePasswordExpiration));
        }

        /**
         * @param enforceStrongPasswords Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
         * 
         * @return builder
         * 
         */
        public Builder enforceStrongPasswords(@Nullable Output<Boolean> enforceStrongPasswords) {
            $.enforceStrongPasswords = enforceStrongPasswords;
            return this;
        }

        /**
         * @param enforceStrongPasswords Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
         * 
         * @return builder
         * 
         */
        public Builder enforceStrongPasswords(Boolean enforceStrongPasswords) {
            return enforceStrongPasswords(Output.of(enforceStrongPasswords));
        }

        /**
         * @param enforceTwoFactorAuth Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
         * 
         * @return builder
         * 
         */
        public Builder enforceTwoFactorAuth(@Nullable Output<Boolean> enforceTwoFactorAuth) {
            $.enforceTwoFactorAuth = enforceTwoFactorAuth;
            return this;
        }

        /**
         * @param enforceTwoFactorAuth Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
         * 
         * @return builder
         * 
         */
        public Builder enforceTwoFactorAuth(Boolean enforceTwoFactorAuth) {
            return enforceTwoFactorAuth(Output.of(enforceTwoFactorAuth));
        }

        /**
         * @param idleTimeoutMinutes Number of minutes users can remain idle before being logged out of their accounts.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutMinutes(@Nullable Output<Integer> idleTimeoutMinutes) {
            $.idleTimeoutMinutes = idleTimeoutMinutes;
            return this;
        }

        /**
         * @param idleTimeoutMinutes Number of minutes users can remain idle before being logged out of their accounts.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeoutMinutes(Integer idleTimeoutMinutes) {
            return idleTimeoutMinutes(Output.of(idleTimeoutMinutes));
        }

        /**
         * @param loginIpRanges List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
         * 
         * @return builder
         * 
         */
        public Builder loginIpRanges(@Nullable Output<List<String>> loginIpRanges) {
            $.loginIpRanges = loginIpRanges;
            return this;
        }

        /**
         * @param loginIpRanges List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
         * 
         * @return builder
         * 
         */
        public Builder loginIpRanges(List<String> loginIpRanges) {
            return loginIpRanges(Output.of(loginIpRanges));
        }

        /**
         * @param loginIpRanges List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
         * 
         * @return builder
         * 
         */
        public Builder loginIpRanges(String... loginIpRanges) {
            return loginIpRanges(List.of(loginIpRanges));
        }

        /**
         * @param numDifferentPasswords Number of recent passwords that new password must be distinct from.
         * 
         * @return builder
         * 
         */
        public Builder numDifferentPasswords(@Nullable Output<Integer> numDifferentPasswords) {
            $.numDifferentPasswords = numDifferentPasswords;
            return this;
        }

        /**
         * @param numDifferentPasswords Number of recent passwords that new password must be distinct from.
         * 
         * @return builder
         * 
         */
        public Builder numDifferentPasswords(Integer numDifferentPasswords) {
            return numDifferentPasswords(Output.of(numDifferentPasswords));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param passwordExpirationDays Number of days after which users will be forced to change their password.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpirationDays(@Nullable Output<Integer> passwordExpirationDays) {
            $.passwordExpirationDays = passwordExpirationDays;
            return this;
        }

        /**
         * @param passwordExpirationDays Number of days after which users will be forced to change their password.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpirationDays(Integer passwordExpirationDays) {
            return passwordExpirationDays(Output.of(passwordExpirationDays));
        }

        public LoginSecurityArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("LoginSecurityArgs", "organizationId");
            }
            return $;
        }
    }

}
