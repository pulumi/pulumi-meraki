// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSwitchSettingsItemMacBlocklist;
import com.pulumi.meraki.networks.outputs.GetSwitchSettingsItemPowerException;
import com.pulumi.meraki.networks.outputs.GetSwitchSettingsItemUplinkClientSampling;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchSettingsItem {
    /**
     * @return MAC blocklist
     * 
     */
    private GetSwitchSettingsItemMacBlocklist macBlocklist;
    /**
     * @return Exceptions on a per switch basis to &#34;useCombinedPower&#34;
     * 
     */
    private List<GetSwitchSettingsItemPowerException> powerExceptions;
    /**
     * @return Uplink client sampling
     * 
     */
    private GetSwitchSettingsItemUplinkClientSampling uplinkClientSampling;
    /**
     * @return The use Combined Power as the default behavior of secondary power supplies on supported devices.
     * 
     */
    private Boolean useCombinedPower;
    /**
     * @return Management VLAN
     * 
     */
    private Integer vlan;

    private GetSwitchSettingsItem() {}
    /**
     * @return MAC blocklist
     * 
     */
    public GetSwitchSettingsItemMacBlocklist macBlocklist() {
        return this.macBlocklist;
    }
    /**
     * @return Exceptions on a per switch basis to &#34;useCombinedPower&#34;
     * 
     */
    public List<GetSwitchSettingsItemPowerException> powerExceptions() {
        return this.powerExceptions;
    }
    /**
     * @return Uplink client sampling
     * 
     */
    public GetSwitchSettingsItemUplinkClientSampling uplinkClientSampling() {
        return this.uplinkClientSampling;
    }
    /**
     * @return The use Combined Power as the default behavior of secondary power supplies on supported devices.
     * 
     */
    public Boolean useCombinedPower() {
        return this.useCombinedPower;
    }
    /**
     * @return Management VLAN
     * 
     */
    public Integer vlan() {
        return this.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchSettingsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSwitchSettingsItemMacBlocklist macBlocklist;
        private List<GetSwitchSettingsItemPowerException> powerExceptions;
        private GetSwitchSettingsItemUplinkClientSampling uplinkClientSampling;
        private Boolean useCombinedPower;
        private Integer vlan;
        public Builder() {}
        public Builder(GetSwitchSettingsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.macBlocklist = defaults.macBlocklist;
    	      this.powerExceptions = defaults.powerExceptions;
    	      this.uplinkClientSampling = defaults.uplinkClientSampling;
    	      this.useCombinedPower = defaults.useCombinedPower;
    	      this.vlan = defaults.vlan;
        }

        @CustomType.Setter
        public Builder macBlocklist(GetSwitchSettingsItemMacBlocklist macBlocklist) {
            if (macBlocklist == null) {
              throw new MissingRequiredPropertyException("GetSwitchSettingsItem", "macBlocklist");
            }
            this.macBlocklist = macBlocklist;
            return this;
        }
        @CustomType.Setter
        public Builder powerExceptions(List<GetSwitchSettingsItemPowerException> powerExceptions) {
            if (powerExceptions == null) {
              throw new MissingRequiredPropertyException("GetSwitchSettingsItem", "powerExceptions");
            }
            this.powerExceptions = powerExceptions;
            return this;
        }
        public Builder powerExceptions(GetSwitchSettingsItemPowerException... powerExceptions) {
            return powerExceptions(List.of(powerExceptions));
        }
        @CustomType.Setter
        public Builder uplinkClientSampling(GetSwitchSettingsItemUplinkClientSampling uplinkClientSampling) {
            if (uplinkClientSampling == null) {
              throw new MissingRequiredPropertyException("GetSwitchSettingsItem", "uplinkClientSampling");
            }
            this.uplinkClientSampling = uplinkClientSampling;
            return this;
        }
        @CustomType.Setter
        public Builder useCombinedPower(Boolean useCombinedPower) {
            if (useCombinedPower == null) {
              throw new MissingRequiredPropertyException("GetSwitchSettingsItem", "useCombinedPower");
            }
            this.useCombinedPower = useCombinedPower;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(Integer vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchSettingsItem", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        public GetSwitchSettingsItem build() {
            final var _resultValue = new GetSwitchSettingsItem();
            _resultValue.macBlocklist = macBlocklist;
            _resultValue.powerExceptions = powerExceptions;
            _resultValue.uplinkClientSampling = uplinkClientSampling;
            _resultValue.useCombinedPower = useCombinedPower;
            _resultValue.vlan = vlan;
            return _resultValue;
        }
    }
}
