// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final BaseArgs Empty = new BaseArgs();

    /**
     * Physical address of the device
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Physical address of the device
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The floor plan to associate to this device. null disassociates the device from the floorplan.
     * 
     */
    @Import(name="floorPlanId")
    private @Nullable Output<String> floorPlanId;

    /**
     * @return The floor plan to associate to this device. null disassociates the device from the floorplan.
     * 
     */
    public Optional<Output<String>> floorPlanId() {
        return Optional.ofNullable(this.floorPlanId);
    }

    /**
     * Latitude of the device
     * 
     */
    @Import(name="lat")
    private @Nullable Output<Double> lat;

    /**
     * @return Latitude of the device
     * 
     */
    public Optional<Output<Double>> lat() {
        return Optional.ofNullable(this.lat);
    }

    /**
     * Longitude of the device
     * 
     */
    @Import(name="lng")
    private @Nullable Output<Double> lng;

    /**
     * @return Longitude of the device
     * 
     */
    public Optional<Output<Double>> lng() {
        return Optional.ofNullable(this.lng);
    }

    /**
     * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
     * 
     */
    @Import(name="moveMapMarker")
    private @Nullable Output<Boolean> moveMapMarker;

    /**
     * @return Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
     * 
     */
    public Optional<Output<Boolean>> moveMapMarker() {
        return Optional.ofNullable(this.moveMapMarker);
    }

    /**
     * Name of the device
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the device
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Notes for the device, limited to 255 characters
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Notes for the device, limited to 255 characters
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * Serial number of the device
     * 
     */
    @Import(name="serial", required=true)
    private Output<String> serial;

    /**
     * @return Serial number of the device
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }

    /**
     * The ID of a switch template to bind to the device (for available switch templates, see the &#39;Switch Templates&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
     * 
     */
    @Import(name="switchProfileId")
    private @Nullable Output<String> switchProfileId;

    /**
     * @return The ID of a switch template to bind to the device (for available switch templates, see the &#39;Switch Templates&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
     * 
     */
    public Optional<Output<String>> switchProfileId() {
        return Optional.ofNullable(this.switchProfileId);
    }

    /**
     * List of tags assigned to the device
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return List of tags assigned to the device
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private BaseArgs() {}

    private BaseArgs(BaseArgs $) {
        this.address = $.address;
        this.floorPlanId = $.floorPlanId;
        this.lat = $.lat;
        this.lng = $.lng;
        this.moveMapMarker = $.moveMapMarker;
        this.name = $.name;
        this.notes = $.notes;
        this.serial = $.serial;
        this.switchProfileId = $.switchProfileId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaseArgs $;

        public Builder() {
            $ = new BaseArgs();
        }

        public Builder(BaseArgs defaults) {
            $ = new BaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Physical address of the device
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Physical address of the device
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param floorPlanId The floor plan to associate to this device. null disassociates the device from the floorplan.
         * 
         * @return builder
         * 
         */
        public Builder floorPlanId(@Nullable Output<String> floorPlanId) {
            $.floorPlanId = floorPlanId;
            return this;
        }

        /**
         * @param floorPlanId The floor plan to associate to this device. null disassociates the device from the floorplan.
         * 
         * @return builder
         * 
         */
        public Builder floorPlanId(String floorPlanId) {
            return floorPlanId(Output.of(floorPlanId));
        }

        /**
         * @param lat Latitude of the device
         * 
         * @return builder
         * 
         */
        public Builder lat(@Nullable Output<Double> lat) {
            $.lat = lat;
            return this;
        }

        /**
         * @param lat Latitude of the device
         * 
         * @return builder
         * 
         */
        public Builder lat(Double lat) {
            return lat(Output.of(lat));
        }

        /**
         * @param lng Longitude of the device
         * 
         * @return builder
         * 
         */
        public Builder lng(@Nullable Output<Double> lng) {
            $.lng = lng;
            return this;
        }

        /**
         * @param lng Longitude of the device
         * 
         * @return builder
         * 
         */
        public Builder lng(Double lng) {
            return lng(Output.of(lng));
        }

        /**
         * @param moveMapMarker Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
         * 
         * @return builder
         * 
         */
        public Builder moveMapMarker(@Nullable Output<Boolean> moveMapMarker) {
            $.moveMapMarker = moveMapMarker;
            return this;
        }

        /**
         * @param moveMapMarker Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
         * 
         * @return builder
         * 
         */
        public Builder moveMapMarker(Boolean moveMapMarker) {
            return moveMapMarker(Output.of(moveMapMarker));
        }

        /**
         * @param name Name of the device
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the device
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes Notes for the device, limited to 255 characters
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Notes for the device, limited to 255 characters
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param serial Serial number of the device
         * 
         * @return builder
         * 
         */
        public Builder serial(Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial Serial number of the device
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param switchProfileId The ID of a switch template to bind to the device (for available switch templates, see the &#39;Switch Templates&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
         * 
         * @return builder
         * 
         */
        public Builder switchProfileId(@Nullable Output<String> switchProfileId) {
            $.switchProfileId = switchProfileId;
            return this;
        }

        /**
         * @param switchProfileId The ID of a switch template to bind to the device (for available switch templates, see the &#39;Switch Templates&#39; endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch template, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
         * 
         * @return builder
         * 
         */
        public Builder switchProfileId(String switchProfileId) {
            return switchProfileId(Output.of(switchProfileId));
        }

        /**
         * @param tags List of tags assigned to the device
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of tags assigned to the device
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of tags assigned to the device
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public BaseArgs build() {
            if ($.serial == null) {
                throw new MissingRequiredPropertyException("BaseArgs", "serial");
            }
            return $;
        }
    }

}
