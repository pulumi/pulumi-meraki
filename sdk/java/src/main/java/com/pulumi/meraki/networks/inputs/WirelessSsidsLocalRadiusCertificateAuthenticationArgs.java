// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsLocalRadiusCertificateAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsLocalRadiusCertificateAuthenticationArgs Empty = new WirelessSsidsLocalRadiusCertificateAuthenticationArgs();

    /**
     * The Client CA Certificate used to sign the client certificate.
     * 
     */
    @Import(name="clientRootCaCertificate")
    private @Nullable Output<WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificateArgs> clientRootCaCertificate;

    /**
     * @return The Client CA Certificate used to sign the client certificate.
     * 
     */
    public Optional<Output<WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificateArgs>> clientRootCaCertificate() {
        return Optional.ofNullable(this.clientRootCaCertificate);
    }

    /**
     * Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * (Optional) The URL of the OCSP responder to verify client certificate status.
     * 
     */
    @Import(name="ocspResponderUrl")
    private @Nullable Output<String> ocspResponderUrl;

    /**
     * @return (Optional) The URL of the OCSP responder to verify client certificate status.
     * 
     */
    public Optional<Output<String>> ocspResponderUrl() {
        return Optional.ofNullable(this.ocspResponderUrl);
    }

    /**
     * Whether or not to verify the certificate with LDAP.
     * 
     */
    @Import(name="useLdap")
    private @Nullable Output<Boolean> useLdap;

    /**
     * @return Whether or not to verify the certificate with LDAP.
     * 
     */
    public Optional<Output<Boolean>> useLdap() {
        return Optional.ofNullable(this.useLdap);
    }

    /**
     * Whether or not to verify the certificate with OCSP.
     * 
     */
    @Import(name="useOcsp")
    private @Nullable Output<Boolean> useOcsp;

    /**
     * @return Whether or not to verify the certificate with OCSP.
     * 
     */
    public Optional<Output<Boolean>> useOcsp() {
        return Optional.ofNullable(this.useOcsp);
    }

    private WirelessSsidsLocalRadiusCertificateAuthenticationArgs() {}

    private WirelessSsidsLocalRadiusCertificateAuthenticationArgs(WirelessSsidsLocalRadiusCertificateAuthenticationArgs $) {
        this.clientRootCaCertificate = $.clientRootCaCertificate;
        this.enabled = $.enabled;
        this.ocspResponderUrl = $.ocspResponderUrl;
        this.useLdap = $.useLdap;
        this.useOcsp = $.useOcsp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsLocalRadiusCertificateAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsLocalRadiusCertificateAuthenticationArgs $;

        public Builder() {
            $ = new WirelessSsidsLocalRadiusCertificateAuthenticationArgs();
        }

        public Builder(WirelessSsidsLocalRadiusCertificateAuthenticationArgs defaults) {
            $ = new WirelessSsidsLocalRadiusCertificateAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientRootCaCertificate The Client CA Certificate used to sign the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientRootCaCertificate(@Nullable Output<WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificateArgs> clientRootCaCertificate) {
            $.clientRootCaCertificate = clientRootCaCertificate;
            return this;
        }

        /**
         * @param clientRootCaCertificate The Client CA Certificate used to sign the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientRootCaCertificate(WirelessSsidsLocalRadiusCertificateAuthenticationClientRootCaCertificateArgs clientRootCaCertificate) {
            return clientRootCaCertificate(Output.of(clientRootCaCertificate));
        }

        /**
         * @param enabled Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not to use EAP-TLS certificate-based authentication to validate wireless clients.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param ocspResponderUrl (Optional) The URL of the OCSP responder to verify client certificate status.
         * 
         * @return builder
         * 
         */
        public Builder ocspResponderUrl(@Nullable Output<String> ocspResponderUrl) {
            $.ocspResponderUrl = ocspResponderUrl;
            return this;
        }

        /**
         * @param ocspResponderUrl (Optional) The URL of the OCSP responder to verify client certificate status.
         * 
         * @return builder
         * 
         */
        public Builder ocspResponderUrl(String ocspResponderUrl) {
            return ocspResponderUrl(Output.of(ocspResponderUrl));
        }

        /**
         * @param useLdap Whether or not to verify the certificate with LDAP.
         * 
         * @return builder
         * 
         */
        public Builder useLdap(@Nullable Output<Boolean> useLdap) {
            $.useLdap = useLdap;
            return this;
        }

        /**
         * @param useLdap Whether or not to verify the certificate with LDAP.
         * 
         * @return builder
         * 
         */
        public Builder useLdap(Boolean useLdap) {
            return useLdap(Output.of(useLdap));
        }

        /**
         * @param useOcsp Whether or not to verify the certificate with OCSP.
         * 
         * @return builder
         * 
         */
        public Builder useOcsp(@Nullable Output<Boolean> useOcsp) {
            $.useOcsp = useOcsp;
            return this;
        }

        /**
         * @param useOcsp Whether or not to verify the certificate with OCSP.
         * 
         * @return builder
         * 
         */
        public Builder useOcsp(Boolean useOcsp) {
            return useOcsp(Output.of(useOcsp));
        }

        public WirelessSsidsLocalRadiusCertificateAuthenticationArgs build() {
            return $;
        }
    }

}
