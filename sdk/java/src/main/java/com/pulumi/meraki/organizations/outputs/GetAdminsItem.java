// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetAdminsItemNetwork;
import com.pulumi.meraki.organizations.outputs.GetAdminsItemTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAdminsItem {
    /**
     * @return Status of the admin&#39;s account
     * 
     */
    private String accountStatus;
    /**
     * @return Admin&#39;s authentication method
     * 
     */
    private String authenticationMethod;
    /**
     * @return Admin&#39;s email address
     * 
     */
    private String email;
    /**
     * @return Indicates whether the admin has an API key
     * 
     */
    private Boolean hasApiKey;
    /**
     * @return Admin&#39;s ID
     * 
     */
    private String id;
    /**
     * @return Time when the admin was last active
     * 
     */
    private String lastActive;
    /**
     * @return Admin&#39;s username
     * 
     */
    private String name;
    /**
     * @return Admin network access information
     * 
     */
    private List<GetAdminsItemNetwork> networks;
    /**
     * @return Admin&#39;s level of access to the organization
     * 
     */
    private String orgAccess;
    /**
     * @return Admin tag information
     * 
     */
    private List<GetAdminsItemTag> tags;
    /**
     * @return Indicates whether two-factor authentication is enabled
     * 
     */
    private Boolean twoFactorAuthEnabled;

    private GetAdminsItem() {}
    /**
     * @return Status of the admin&#39;s account
     * 
     */
    public String accountStatus() {
        return this.accountStatus;
    }
    /**
     * @return Admin&#39;s authentication method
     * 
     */
    public String authenticationMethod() {
        return this.authenticationMethod;
    }
    /**
     * @return Admin&#39;s email address
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Indicates whether the admin has an API key
     * 
     */
    public Boolean hasApiKey() {
        return this.hasApiKey;
    }
    /**
     * @return Admin&#39;s ID
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Time when the admin was last active
     * 
     */
    public String lastActive() {
        return this.lastActive;
    }
    /**
     * @return Admin&#39;s username
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Admin network access information
     * 
     */
    public List<GetAdminsItemNetwork> networks() {
        return this.networks;
    }
    /**
     * @return Admin&#39;s level of access to the organization
     * 
     */
    public String orgAccess() {
        return this.orgAccess;
    }
    /**
     * @return Admin tag information
     * 
     */
    public List<GetAdminsItemTag> tags() {
        return this.tags;
    }
    /**
     * @return Indicates whether two-factor authentication is enabled
     * 
     */
    public Boolean twoFactorAuthEnabled() {
        return this.twoFactorAuthEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAdminsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountStatus;
        private String authenticationMethod;
        private String email;
        private Boolean hasApiKey;
        private String id;
        private String lastActive;
        private String name;
        private List<GetAdminsItemNetwork> networks;
        private String orgAccess;
        private List<GetAdminsItemTag> tags;
        private Boolean twoFactorAuthEnabled;
        public Builder() {}
        public Builder(GetAdminsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountStatus = defaults.accountStatus;
    	      this.authenticationMethod = defaults.authenticationMethod;
    	      this.email = defaults.email;
    	      this.hasApiKey = defaults.hasApiKey;
    	      this.id = defaults.id;
    	      this.lastActive = defaults.lastActive;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.orgAccess = defaults.orgAccess;
    	      this.tags = defaults.tags;
    	      this.twoFactorAuthEnabled = defaults.twoFactorAuthEnabled;
        }

        @CustomType.Setter
        public Builder accountStatus(String accountStatus) {
            if (accountStatus == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "accountStatus");
            }
            this.accountStatus = accountStatus;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationMethod(String authenticationMethod) {
            if (authenticationMethod == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "authenticationMethod");
            }
            this.authenticationMethod = authenticationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder hasApiKey(Boolean hasApiKey) {
            if (hasApiKey == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "hasApiKey");
            }
            this.hasApiKey = hasApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastActive(String lastActive) {
            if (lastActive == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "lastActive");
            }
            this.lastActive = lastActive;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<GetAdminsItemNetwork> networks) {
            if (networks == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "networks");
            }
            this.networks = networks;
            return this;
        }
        public Builder networks(GetAdminsItemNetwork... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder orgAccess(String orgAccess) {
            if (orgAccess == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "orgAccess");
            }
            this.orgAccess = orgAccess;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetAdminsItemTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetAdminsItemTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder twoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
            if (twoFactorAuthEnabled == null) {
              throw new MissingRequiredPropertyException("GetAdminsItem", "twoFactorAuthEnabled");
            }
            this.twoFactorAuthEnabled = twoFactorAuthEnabled;
            return this;
        }
        public GetAdminsItem build() {
            final var _resultValue = new GetAdminsItem();
            _resultValue.accountStatus = accountStatus;
            _resultValue.authenticationMethod = authenticationMethod;
            _resultValue.email = email;
            _resultValue.hasApiKey = hasApiKey;
            _resultValue.id = id;
            _resultValue.lastActive = lastActive;
            _resultValue.name = name;
            _resultValue.networks = networks;
            _resultValue.orgAccess = orgAccess;
            _resultValue.tags = tags;
            _resultValue.twoFactorAuthEnabled = twoFactorAuthEnabled;
            return _resultValue;
        }
    }
}
