// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplianceFirewallOneToManyNatRulesRulePortRule {
    /**
     * @return Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
     * 
     */
    private @Nullable List<String> allowedIps;
    /**
     * @return Local IP address to which traffic will be forwarded
     * 
     */
    private @Nullable String localIp;
    /**
     * @return Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
     * 
     */
    private @Nullable String localPort;
    /**
     * @return A description of the rule
     * 
     */
    private @Nullable String name;
    /**
     * @return &#39;tcp&#39; or &#39;udp&#39;
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Destination port of the traffic that is arriving on the WAN
     * 
     */
    private @Nullable String publicPort;

    private ApplianceFirewallOneToManyNatRulesRulePortRule() {}
    /**
     * @return Remote IP addresses or ranges that are permitted to access the internal resource via this port forwarding rule, or &#39;any&#39;
     * 
     */
    public List<String> allowedIps() {
        return this.allowedIps == null ? List.of() : this.allowedIps;
    }
    /**
     * @return Local IP address to which traffic will be forwarded
     * 
     */
    public Optional<String> localIp() {
        return Optional.ofNullable(this.localIp);
    }
    /**
     * @return Destination port of the forwarded traffic that will be sent from the MX to the specified host on the LAN. If you simply wish to forward the traffic without translating the port, this should be the same as the Public port
     * 
     */
    public Optional<String> localPort() {
        return Optional.ofNullable(this.localPort);
    }
    /**
     * @return A description of the rule
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return &#39;tcp&#39; or &#39;udp&#39;
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Destination port of the traffic that is arriving on the WAN
     * 
     */
    public Optional<String> publicPort() {
        return Optional.ofNullable(this.publicPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceFirewallOneToManyNatRulesRulePortRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> allowedIps;
        private @Nullable String localIp;
        private @Nullable String localPort;
        private @Nullable String name;
        private @Nullable String protocol;
        private @Nullable String publicPort;
        public Builder() {}
        public Builder(ApplianceFirewallOneToManyNatRulesRulePortRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIps = defaults.allowedIps;
    	      this.localIp = defaults.localIp;
    	      this.localPort = defaults.localPort;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.publicPort = defaults.publicPort;
        }

        @CustomType.Setter
        public Builder allowedIps(@Nullable List<String> allowedIps) {

            this.allowedIps = allowedIps;
            return this;
        }
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }
        @CustomType.Setter
        public Builder localIp(@Nullable String localIp) {

            this.localIp = localIp;
            return this;
        }
        @CustomType.Setter
        public Builder localPort(@Nullable String localPort) {

            this.localPort = localPort;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder publicPort(@Nullable String publicPort) {

            this.publicPort = publicPort;
            return this;
        }
        public ApplianceFirewallOneToManyNatRulesRulePortRule build() {
            final var _resultValue = new ApplianceFirewallOneToManyNatRulesRulePortRule();
            _resultValue.allowedIps = allowedIps;
            _resultValue.localIp = localIp;
            _resultValue.localPort = localPort;
            _resultValue.name = name;
            _resultValue.protocol = protocol;
            _resultValue.publicPort = publicPort;
            return _resultValue;
        }
    }
}
