// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWirelessChannelUtilizationHistoryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWirelessChannelUtilizationHistoryArgs Empty = new GetWirelessChannelUtilizationHistoryArgs();

    /**
     * apTag query parameter. Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
     * 
     */
    @Import(name="apTag")
    private @Nullable Output<String> apTag;

    /**
     * @return apTag query parameter. Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
     * 
     */
    public Optional<Output<String>> apTag() {
        return Optional.ofNullable(this.apTag);
    }

    /**
     * autoResolution query parameter. Automatically select a data resolution based on the given timespan; this overrides the value specified by the &#39;resolution&#39; parameter. The default setting is false.
     * 
     */
    @Import(name="autoResolution")
    private @Nullable Output<Boolean> autoResolution;

    /**
     * @return autoResolution query parameter. Automatically select a data resolution based on the given timespan; this overrides the value specified by the &#39;resolution&#39; parameter. The default setting is false.
     * 
     */
    public Optional<Output<Boolean>> autoResolution() {
        return Optional.ofNullable(this.autoResolution);
    }

    /**
     * band query parameter. Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;).
     * 
     */
    @Import(name="band")
    private @Nullable Output<String> band;

    /**
     * @return band query parameter. Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;).
     * 
     */
    public Optional<Output<String>> band() {
        return Optional.ofNullable(this.band);
    }

    /**
     * clientId query parameter. Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client&#39;s connection history.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return clientId query parameter. Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client&#39;s connection history.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * deviceSerial query parameter. Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
     * 
     */
    @Import(name="deviceSerial")
    private @Nullable Output<String> deviceSerial;

    /**
     * @return deviceSerial query parameter. Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
     * 
     */
    public Optional<Output<String>> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
     * 
     */
    @Import(name="resolution")
    private @Nullable Output<Integer> resolution;

    /**
     * @return resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
     * 
     */
    public Optional<Output<Integer>> resolution() {
        return Optional.ofNullable(this.resolution);
    }

    /**
     * t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * 
     */
    @Import(name="t0")
    private @Nullable Output<String> t0;

    /**
     * @return t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * 
     */
    public Optional<Output<String>> t0() {
        return Optional.ofNullable(this.t0);
    }

    /**
     * t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * 
     */
    @Import(name="t1")
    private @Nullable Output<String> t1;

    /**
     * @return t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * 
     */
    public Optional<Output<String>> t1() {
        return Optional.ofNullable(this.t1);
    }

    /**
     * timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * 
     */
    @Import(name="timespan")
    private @Nullable Output<Double> timespan;

    /**
     * @return timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
     * 
     */
    public Optional<Output<Double>> timespan() {
        return Optional.ofNullable(this.timespan);
    }

    private GetWirelessChannelUtilizationHistoryArgs() {}

    private GetWirelessChannelUtilizationHistoryArgs(GetWirelessChannelUtilizationHistoryArgs $) {
        this.apTag = $.apTag;
        this.autoResolution = $.autoResolution;
        this.band = $.band;
        this.clientId = $.clientId;
        this.deviceSerial = $.deviceSerial;
        this.networkId = $.networkId;
        this.resolution = $.resolution;
        this.t0 = $.t0;
        this.t1 = $.t1;
        this.timespan = $.timespan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWirelessChannelUtilizationHistoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWirelessChannelUtilizationHistoryArgs $;

        public Builder() {
            $ = new GetWirelessChannelUtilizationHistoryArgs();
        }

        public Builder(GetWirelessChannelUtilizationHistoryArgs defaults) {
            $ = new GetWirelessChannelUtilizationHistoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apTag apTag query parameter. Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
         * 
         * @return builder
         * 
         */
        public Builder apTag(@Nullable Output<String> apTag) {
            $.apTag = apTag;
            return this;
        }

        /**
         * @param apTag apTag query parameter. Filter results by AP tag to return AP channel utilization metrics for devices labeled with the given tag; either :clientId or :deviceSerial must be jointly specified.
         * 
         * @return builder
         * 
         */
        public Builder apTag(String apTag) {
            return apTag(Output.of(apTag));
        }

        /**
         * @param autoResolution autoResolution query parameter. Automatically select a data resolution based on the given timespan; this overrides the value specified by the &#39;resolution&#39; parameter. The default setting is false.
         * 
         * @return builder
         * 
         */
        public Builder autoResolution(@Nullable Output<Boolean> autoResolution) {
            $.autoResolution = autoResolution;
            return this;
        }

        /**
         * @param autoResolution autoResolution query parameter. Automatically select a data resolution based on the given timespan; this overrides the value specified by the &#39;resolution&#39; parameter. The default setting is false.
         * 
         * @return builder
         * 
         */
        public Builder autoResolution(Boolean autoResolution) {
            return autoResolution(Output.of(autoResolution));
        }

        /**
         * @param band band query parameter. Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;).
         * 
         * @return builder
         * 
         */
        public Builder band(@Nullable Output<String> band) {
            $.band = band;
            return this;
        }

        /**
         * @param band band query parameter. Filter results by band (either &#39;2.4&#39;, &#39;5&#39; or &#39;6&#39;).
         * 
         * @return builder
         * 
         */
        public Builder band(String band) {
            return band(Output.of(band));
        }

        /**
         * @param clientId clientId query parameter. Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client&#39;s connection history.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId clientId query parameter. Filter results by network client to return per-device, per-band AP channel utilization metrics inner joined by the queried client&#39;s connection history.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param deviceSerial deviceSerial query parameter. Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(@Nullable Output<String> deviceSerial) {
            $.deviceSerial = deviceSerial;
            return this;
        }

        /**
         * @param deviceSerial deviceSerial query parameter. Filter results by device to return AP channel utilization metrics for the queried device; either :band or :clientId must be jointly specified.
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(String deviceSerial) {
            return deviceSerial(Output.of(deviceSerial));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param resolution resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
         * 
         * @return builder
         * 
         */
        public Builder resolution(@Nullable Output<Integer> resolution) {
            $.resolution = resolution;
            return this;
        }

        /**
         * @param resolution resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 600, 1200, 3600, 14400, 86400. The default is 86400.
         * 
         * @return builder
         * 
         */
        public Builder resolution(Integer resolution) {
            return resolution(Output.of(resolution));
        }

        /**
         * @param t0 t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
         * 
         * @return builder
         * 
         */
        public Builder t0(@Nullable Output<String> t0) {
            $.t0 = t0;
            return this;
        }

        /**
         * @param t0 t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
         * 
         * @return builder
         * 
         */
        public Builder t0(String t0) {
            return t0(Output.of(t0));
        }

        /**
         * @param t1 t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
         * 
         * @return builder
         * 
         */
        public Builder t1(@Nullable Output<String> t1) {
            $.t1 = t1;
            return this;
        }

        /**
         * @param t1 t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
         * 
         * @return builder
         * 
         */
        public Builder t1(String t1) {
            return t1(Output.of(t1));
        }

        /**
         * @param timespan timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
         * 
         * @return builder
         * 
         */
        public Builder timespan(@Nullable Output<Double> timespan) {
            $.timespan = timespan;
            return this;
        }

        /**
         * @param timespan timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
         * 
         * @return builder
         * 
         */
        public Builder timespan(Double timespan) {
            return timespan(Output.of(timespan));
        }

        public GetWirelessChannelUtilizationHistoryArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetWirelessChannelUtilizationHistoryArgs", "networkId");
            }
            return $;
        }
    }

}
