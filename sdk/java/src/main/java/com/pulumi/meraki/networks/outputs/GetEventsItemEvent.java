// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetEventsItemEventEventData;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEventsItemEvent {
    /**
     * @return The category that the event type belongs to
     * 
     */
    private String category;
    /**
     * @return A description of the client. This is usually the client&#39;s device name.
     * 
     */
    private String clientDescription;
    /**
     * @return A string identifying the client. This could be a client&#39;s MAC or IP address
     * 
     */
    private String clientId;
    /**
     * @return The client&#39;s MAC address.
     * 
     */
    private String clientMac;
    /**
     * @return A description of the event the happened.
     * 
     */
    private String description;
    /**
     * @return The name of the device. Only shown if the device is an access point.
     * 
     */
    private String deviceName;
    /**
     * @return The serial number of the device. Only shown if the device is an access point.
     * 
     */
    private String deviceSerial;
    /**
     * @return An object containing more data related to the event.
     * 
     */
    private GetEventsItemEventEventData eventData;
    /**
     * @return The ID of the network.
     * 
     */
    private String networkId;
    /**
     * @return An UTC ISO8601 string of the time the event occurred at.
     * 
     */
    private String occurredAt;
    /**
     * @return The SSID number of the device.
     * 
     */
    private Integer ssidNumber;
    /**
     * @return The type of event being listed.
     * 
     */
    private String type;

    private GetEventsItemEvent() {}
    /**
     * @return The category that the event type belongs to
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return A description of the client. This is usually the client&#39;s device name.
     * 
     */
    public String clientDescription() {
        return this.clientDescription;
    }
    /**
     * @return A string identifying the client. This could be a client&#39;s MAC or IP address
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The client&#39;s MAC address.
     * 
     */
    public String clientMac() {
        return this.clientMac;
    }
    /**
     * @return A description of the event the happened.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The name of the device. Only shown if the device is an access point.
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }
    /**
     * @return The serial number of the device. Only shown if the device is an access point.
     * 
     */
    public String deviceSerial() {
        return this.deviceSerial;
    }
    /**
     * @return An object containing more data related to the event.
     * 
     */
    public GetEventsItemEventEventData eventData() {
        return this.eventData;
    }
    /**
     * @return The ID of the network.
     * 
     */
    public String networkId() {
        return this.networkId;
    }
    /**
     * @return An UTC ISO8601 string of the time the event occurred at.
     * 
     */
    public String occurredAt() {
        return this.occurredAt;
    }
    /**
     * @return The SSID number of the device.
     * 
     */
    public Integer ssidNumber() {
        return this.ssidNumber;
    }
    /**
     * @return The type of event being listed.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventsItemEvent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String clientDescription;
        private String clientId;
        private String clientMac;
        private String description;
        private String deviceName;
        private String deviceSerial;
        private GetEventsItemEventEventData eventData;
        private String networkId;
        private String occurredAt;
        private Integer ssidNumber;
        private String type;
        public Builder() {}
        public Builder(GetEventsItemEvent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.clientDescription = defaults.clientDescription;
    	      this.clientId = defaults.clientId;
    	      this.clientMac = defaults.clientMac;
    	      this.description = defaults.description;
    	      this.deviceName = defaults.deviceName;
    	      this.deviceSerial = defaults.deviceSerial;
    	      this.eventData = defaults.eventData;
    	      this.networkId = defaults.networkId;
    	      this.occurredAt = defaults.occurredAt;
    	      this.ssidNumber = defaults.ssidNumber;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder clientDescription(String clientDescription) {
            if (clientDescription == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "clientDescription");
            }
            this.clientDescription = clientDescription;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientMac(String clientMac) {
            if (clientMac == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "clientMac");
            }
            this.clientMac = clientMac;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(String deviceName) {
            if (deviceName == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "deviceName");
            }
            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSerial(String deviceSerial) {
            if (deviceSerial == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "deviceSerial");
            }
            this.deviceSerial = deviceSerial;
            return this;
        }
        @CustomType.Setter
        public Builder eventData(GetEventsItemEventEventData eventData) {
            if (eventData == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "eventData");
            }
            this.eventData = eventData;
            return this;
        }
        @CustomType.Setter
        public Builder networkId(String networkId) {
            if (networkId == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "networkId");
            }
            this.networkId = networkId;
            return this;
        }
        @CustomType.Setter
        public Builder occurredAt(String occurredAt) {
            if (occurredAt == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "occurredAt");
            }
            this.occurredAt = occurredAt;
            return this;
        }
        @CustomType.Setter
        public Builder ssidNumber(Integer ssidNumber) {
            if (ssidNumber == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "ssidNumber");
            }
            this.ssidNumber = ssidNumber;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetEventsItemEvent", "type");
            }
            this.type = type;
            return this;
        }
        public GetEventsItemEvent build() {
            final var _resultValue = new GetEventsItemEvent();
            _resultValue.category = category;
            _resultValue.clientDescription = clientDescription;
            _resultValue.clientId = clientId;
            _resultValue.clientMac = clientMac;
            _resultValue.description = description;
            _resultValue.deviceName = deviceName;
            _resultValue.deviceSerial = deviceSerial;
            _resultValue.eventData = eventData;
            _resultValue.networkId = networkId;
            _resultValue.occurredAt = occurredAt;
            _resultValue.ssidNumber = ssidNumber;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
