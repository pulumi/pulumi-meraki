// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSwitchAccessPoliciesItemDot1x {
    /**
     * @return Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
     * 
     */
    private String controlDirection;

    private GetSwitchAccessPoliciesItemDot1x() {}
    /**
     * @return Supports either &#39;both&#39; or &#39;inbound&#39;. Set to &#39;inbound&#39; to allow unauthorized egress on the switchport. Set to &#39;both&#39; to control both traffic directions with authorization. Defaults to &#39;both&#39;
     * 
     */
    public String controlDirection() {
        return this.controlDirection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchAccessPoliciesItemDot1x defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String controlDirection;
        public Builder() {}
        public Builder(GetSwitchAccessPoliciesItemDot1x defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlDirection = defaults.controlDirection;
        }

        @CustomType.Setter
        public Builder controlDirection(String controlDirection) {
            if (controlDirection == null) {
              throw new MissingRequiredPropertyException("GetSwitchAccessPoliciesItemDot1x", "controlDirection");
            }
            this.controlDirection = controlDirection;
            return this;
        }
        public GetSwitchAccessPoliciesItemDot1x build() {
            final var _resultValue = new GetSwitchAccessPoliciesItemDot1x();
            _resultValue.controlDirection = controlDirection;
            return _resultValue;
        }
    }
}
