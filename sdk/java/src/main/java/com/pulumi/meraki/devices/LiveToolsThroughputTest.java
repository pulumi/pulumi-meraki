// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.devices.LiveToolsThroughputTestArgs;
import com.pulumi.meraki.devices.inputs.LiveToolsThroughputTestState;
import com.pulumi.meraki.devices.outputs.LiveToolsThroughputTestCallback;
import com.pulumi.meraki.devices.outputs.LiveToolsThroughputTestRequest;
import com.pulumi.meraki.devices.outputs.LiveToolsThroughputTestResult;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.devices.LiveToolsThroughputTest;
 * import com.pulumi.meraki.devices.LiveToolsThroughputTestArgs;
 * import com.pulumi.meraki.devices.inputs.LiveToolsThroughputTestCallbackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new LiveToolsThroughputTest("example", LiveToolsThroughputTestArgs.builder()
 *             .callback(LiveToolsThroughputTestCallbackArgs.builder()
 *                 .http_server(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .payload_template(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .shared_secret("secret")
 *                 .url("https://webhook.site/28efa24e-f830-4d9f-a12b-fbb9e5035031")
 *                 .build())
 *             .serial("string")
 *             .build());
 * 
 *         ctx.export("merakiDevicesLiveToolsThroughputTestExample", example);
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest example &#34;serial,throughput_test_id&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest")
public class LiveToolsThroughputTest extends com.pulumi.resources.CustomResource {
    /**
     * Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    @Export(name="callback", refs={LiveToolsThroughputTestCallback.class}, tree="[0]")
    private Output<LiveToolsThroughputTestCallback> callback;

    /**
     * @return Details for the callback. Please include either an httpServerId OR url and sharedSecret
     * 
     */
    public Output<LiveToolsThroughputTestCallback> callback() {
        return this.callback;
    }
    /**
     * Description of the error.
     * 
     */
    @Export(name="error", refs={String.class}, tree="[0]")
    private Output<String> error;

    /**
     * @return Description of the error.
     * 
     */
    public Output<String> error() {
        return this.error;
    }
    /**
     * The parameters of the throughput test request
     * 
     */
    @Export(name="request", refs={LiveToolsThroughputTestRequest.class}, tree="[0]")
    private Output<LiveToolsThroughputTestRequest> request;

    /**
     * @return The parameters of the throughput test request
     * 
     */
    public Output<LiveToolsThroughputTestRequest> request() {
        return this.request;
    }
    /**
     * Result of the throughput test request
     * 
     */
    @Export(name="result", refs={LiveToolsThroughputTestResult.class}, tree="[0]")
    private Output<LiveToolsThroughputTestResult> result;

    /**
     * @return Result of the throughput test request
     * 
     */
    public Output<LiveToolsThroughputTestResult> result() {
        return this.result;
    }
    /**
     * serial path parameter.
     * 
     */
    @Export(name="serial", refs={String.class}, tree="[0]")
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }
    /**
     * Status of the throughput test request
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the throughput test request
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * ID of throughput test job
     * 
     */
    @Export(name="throughputTestId", refs={String.class}, tree="[0]")
    private Output<String> throughputTestId;

    /**
     * @return ID of throughput test job
     * 
     */
    public Output<String> throughputTestId() {
        return this.throughputTestId;
    }
    /**
     * GET this url to check the status of your throughput test request
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return GET this url to check the status of your throughput test request
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LiveToolsThroughputTest(String name) {
        this(name, LiveToolsThroughputTestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LiveToolsThroughputTest(String name, LiveToolsThroughputTestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LiveToolsThroughputTest(String name, LiveToolsThroughputTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private LiveToolsThroughputTest(String name, Output<String> id, @Nullable LiveToolsThroughputTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest", name, state, makeResourceOptions(options, id));
    }

    private static LiveToolsThroughputTestArgs makeArgs(LiveToolsThroughputTestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LiveToolsThroughputTestArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LiveToolsThroughputTest get(String name, Output<String> id, @Nullable LiveToolsThroughputTestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LiveToolsThroughputTest(name, id, state, options);
    }
}
