// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.meraki.Utilities;
import com.pulumi.meraki.networks.ApplianceSsidsArgs;
import com.pulumi.meraki.networks.inputs.ApplianceSsidsState;
import com.pulumi.meraki.networks.outputs.ApplianceSsidsDhcpEnforcedDeauthentication;
import com.pulumi.meraki.networks.outputs.ApplianceSsidsDot11w;
import com.pulumi.meraki.networks.outputs.ApplianceSsidsRadiusServer;
import com.pulumi.meraki.networks.outputs.ApplianceSsidsRadiusServersResponse;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.meraki.networks.ApplianceSsids;
 * import com.pulumi.meraki.networks.ApplianceSsidsArgs;
 * import com.pulumi.meraki.networks.inputs.ApplianceSsidsDhcpEnforcedDeauthenticationArgs;
 * import com.pulumi.meraki.networks.inputs.ApplianceSsidsDot11wArgs;
 * import com.pulumi.meraki.networks.inputs.ApplianceSsidsRadiusServerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ApplianceSsids("example", ApplianceSsidsArgs.builder()
 *             .authMode("8021x-radius")
 *             .defaultVlanId(1)
 *             .dhcpEnforcedDeauthentication(ApplianceSsidsDhcpEnforcedDeauthenticationArgs.builder()
 *                 .enabled(true)
 *                 .build())
 *             .dot11w(ApplianceSsidsDot11wArgs.builder()
 *                 .enabled(true)
 *                 .required(true)
 *                 .build())
 *             .enabled(true)
 *             .encryptionMode("wpa")
 *             .name("My SSID")
 *             .networkId("string")
 *             .number("string")
 *             .psk("psk")
 *             .radiusServers(ApplianceSsidsRadiusServerArgs.builder()
 *                 .host("0.0.0.0")
 *                 .port(1000)
 *                 .secret("secret")
 *                 .build())
 *             .visible(true)
 *             .wpaEncryptionMode("WPA2 only")
 *             .build());
 * 
 *         ctx.export("merakiNetworksApplianceSsidsExample", example);
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import meraki:networks/applianceSsids:ApplianceSsids example &#34;network_id,number&#34;
 * ```
 * 
 */
@ResourceType(type="meraki:networks/applianceSsids:ApplianceSsids")
public class ApplianceSsids extends com.pulumi.resources.CustomResource {
    /**
     * The association control method for the SSID.
     * 
     */
    @Export(name="authMode", refs={String.class}, tree="[0]")
    private Output<String> authMode;

    /**
     * @return The association control method for the SSID.
     * 
     */
    public Output<String> authMode() {
        return this.authMode;
    }
    /**
     * The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    @Export(name="defaultVlanId", refs={Integer.class}, tree="[0]")
    private Output<Integer> defaultVlanId;

    /**
     * @return The VLAN ID of the VLAN associated to this SSID.
     * 
     */
    public Output<Integer> defaultVlanId() {
        return this.defaultVlanId;
    }
    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     * 
     */
    @Export(name="dhcpEnforcedDeauthentication", refs={ApplianceSsidsDhcpEnforcedDeauthentication.class}, tree="[0]")
    private Output<ApplianceSsidsDhcpEnforcedDeauthentication> dhcpEnforcedDeauthentication;

    /**
     * @return DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
     * 
     */
    public Output<ApplianceSsidsDhcpEnforcedDeauthentication> dhcpEnforcedDeauthentication() {
        return this.dhcpEnforcedDeauthentication;
    }
    /**
     * The current setting for Protected Management Frames (802.11w).
     * 
     */
    @Export(name="dot11w", refs={ApplianceSsidsDot11w.class}, tree="[0]")
    private Output<ApplianceSsidsDot11w> dot11w;

    /**
     * @return The current setting for Protected Management Frames (802.11w).
     * 
     */
    public Output<ApplianceSsidsDot11w> dot11w() {
        return this.dot11w;
    }
    /**
     * Whether or not the SSID is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether or not the SSID is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The psk encryption mode for the SSID.
     * 
     */
    @Export(name="encryptionMode", refs={String.class}, tree="[0]")
    private Output<String> encryptionMode;

    /**
     * @return The psk encryption mode for the SSID.
     * 
     */
    public Output<String> encryptionMode() {
        return this.encryptionMode;
    }
    /**
     * The name of the SSID.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the SSID.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * networkId path parameter. Network ID
     * 
     */
    @Export(name="networkId", refs={String.class}, tree="[0]")
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }
    /**
     * The number of the SSID.
     * 
     */
    @Export(name="number", refs={Integer.class}, tree="[0]")
    private Output<Integer> number;

    /**
     * @return The number of the SSID.
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }
    /**
     * The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
     * 
     */
    @Export(name="psk", refs={String.class}, tree="[0]")
    private Output<String> psk;

    /**
     * @return The passkey for the SSID. This param is only valid if the authMode is &#39;psk&#39;.
     * 
     */
    public Output<String> psk() {
        return this.psk;
    }
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    @Export(name="radiusServers", refs={List.class,ApplianceSsidsRadiusServer.class}, tree="[0,1]")
    private Output<List<ApplianceSsidsRadiusServer>> radiusServers;

    /**
     * @return The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    public Output<List<ApplianceSsidsRadiusServer>> radiusServers() {
        return this.radiusServers;
    }
    /**
     * The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    @Export(name="radiusServersResponses", refs={List.class,ApplianceSsidsRadiusServersResponse.class}, tree="[0,1]")
    private Output<List<ApplianceSsidsRadiusServersResponse>> radiusServersResponses;

    /**
     * @return The RADIUS 802.1x servers to be used for authentication.
     * 
     */
    public Output<List<ApplianceSsidsRadiusServersResponse>> radiusServersResponses() {
        return this.radiusServersResponses;
    }
    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    @Export(name="visible", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> visible;

    /**
     * @return Boolean indicating whether the MX should advertise or hide this SSID.
     * 
     */
    public Output<Boolean> visible() {
        return this.visible;
    }
    /**
     * WPA encryption mode for the SSID.
     * 
     */
    @Export(name="wpaEncryptionMode", refs={String.class}, tree="[0]")
    private Output<String> wpaEncryptionMode;

    /**
     * @return WPA encryption mode for the SSID.
     * 
     */
    public Output<String> wpaEncryptionMode() {
        return this.wpaEncryptionMode;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApplianceSsids(String name) {
        this(name, ApplianceSsidsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApplianceSsids(String name, ApplianceSsidsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApplianceSsids(String name, ApplianceSsidsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/applianceSsids:ApplianceSsids", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private ApplianceSsids(String name, Output<String> id, @Nullable ApplianceSsidsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("meraki:networks/applianceSsids:ApplianceSsids", name, state, makeResourceOptions(options, id));
    }

    private static ApplianceSsidsArgs makeArgs(ApplianceSsidsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplianceSsidsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApplianceSsids get(String name, Output<String> id, @Nullable ApplianceSsidsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApplianceSsids(name, id, state, options);
    }
}
