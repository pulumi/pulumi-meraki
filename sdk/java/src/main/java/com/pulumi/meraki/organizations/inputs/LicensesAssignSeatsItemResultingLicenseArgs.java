// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensesAssignSeatsItemResultingLicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensesAssignSeatsItemResultingLicenseArgs Empty = new LicensesAssignSeatsItemResultingLicenseArgs();

    /**
     * The date the license started burning
     * 
     */
    @Import(name="activationDate")
    private @Nullable Output<String> activationDate;

    /**
     * @return The date the license started burning
     * 
     */
    public Optional<Output<String>> activationDate() {
        return Optional.ofNullable(this.activationDate);
    }

    /**
     * The date the license was claimed into the organization
     * 
     */
    @Import(name="claimDate")
    private @Nullable Output<String> claimDate;

    /**
     * @return The date the license was claimed into the organization
     * 
     */
    public Optional<Output<String>> claimDate() {
        return Optional.ofNullable(this.claimDate);
    }

    /**
     * Serial number of the device the license is assigned to
     * 
     */
    @Import(name="deviceSerial")
    private @Nullable Output<String> deviceSerial;

    /**
     * @return Serial number of the device the license is assigned to
     * 
     */
    public Optional<Output<String>> deviceSerial() {
        return Optional.ofNullable(this.deviceSerial);
    }

    /**
     * The duration of the individual license
     * 
     */
    @Import(name="durationInDays")
    private @Nullable Output<Integer> durationInDays;

    /**
     * @return The duration of the individual license
     * 
     */
    public Optional<Output<Integer>> durationInDays() {
        return Optional.ofNullable(this.durationInDays);
    }

    /**
     * The date the license will expire
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The date the license will expire
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The id of the head license this license is queued behind. If there is no head license, it returns nil.
     * 
     */
    @Import(name="headLicenseId")
    private @Nullable Output<String> headLicenseId;

    /**
     * @return The id of the head license this license is queued behind. If there is no head license, it returns nil.
     * 
     */
    public Optional<Output<String>> headLicenseId() {
        return Optional.ofNullable(this.headLicenseId);
    }

    /**
     * License ID
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return License ID
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * License key
     * 
     */
    @Import(name="licenseKey")
    private @Nullable Output<String> licenseKey;

    /**
     * @return License key
     * 
     */
    public Optional<Output<String>> licenseKey() {
        return Optional.ofNullable(this.licenseKey);
    }

    /**
     * License type
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    /**
     * @return License type
     * 
     */
    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * ID of the network the license is assigned to
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return ID of the network the license is assigned to
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Order number
     * 
     */
    @Import(name="orderNumber")
    private @Nullable Output<String> orderNumber;

    /**
     * @return Order number
     * 
     */
    public Optional<Output<String>> orderNumber() {
        return Optional.ofNullable(this.orderNumber);
    }

    /**
     * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     * 
     */
    @Import(name="permanentlyQueuedLicenses")
    private @Nullable Output<List<LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs>> permanentlyQueuedLicenses;

    /**
     * @return DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     * 
     */
    public Optional<Output<List<LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs>>> permanentlyQueuedLicenses() {
        return Optional.ofNullable(this.permanentlyQueuedLicenses);
    }

    /**
     * The number of seats of the license. Only applicable to SM licenses.
     * 
     */
    @Import(name="seatCount")
    private @Nullable Output<Integer> seatCount;

    /**
     * @return The number of seats of the license. Only applicable to SM licenses.
     * 
     */
    public Optional<Output<Integer>> seatCount() {
        return Optional.ofNullable(this.seatCount);
    }

    /**
     * The state of the license. All queued licenses have a status of *recentlyQueued*.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the license. All queued licenses have a status of *recentlyQueued*.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The duration of the license plus all permanently queued licenses associated with it
     * 
     */
    @Import(name="totalDurationInDays")
    private @Nullable Output<Integer> totalDurationInDays;

    /**
     * @return The duration of the license plus all permanently queued licenses associated with it
     * 
     */
    public Optional<Output<Integer>> totalDurationInDays() {
        return Optional.ofNullable(this.totalDurationInDays);
    }

    private LicensesAssignSeatsItemResultingLicenseArgs() {}

    private LicensesAssignSeatsItemResultingLicenseArgs(LicensesAssignSeatsItemResultingLicenseArgs $) {
        this.activationDate = $.activationDate;
        this.claimDate = $.claimDate;
        this.deviceSerial = $.deviceSerial;
        this.durationInDays = $.durationInDays;
        this.expirationDate = $.expirationDate;
        this.headLicenseId = $.headLicenseId;
        this.id = $.id;
        this.licenseKey = $.licenseKey;
        this.licenseType = $.licenseType;
        this.networkId = $.networkId;
        this.orderNumber = $.orderNumber;
        this.permanentlyQueuedLicenses = $.permanentlyQueuedLicenses;
        this.seatCount = $.seatCount;
        this.state = $.state;
        this.totalDurationInDays = $.totalDurationInDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensesAssignSeatsItemResultingLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensesAssignSeatsItemResultingLicenseArgs $;

        public Builder() {
            $ = new LicensesAssignSeatsItemResultingLicenseArgs();
        }

        public Builder(LicensesAssignSeatsItemResultingLicenseArgs defaults) {
            $ = new LicensesAssignSeatsItemResultingLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationDate The date the license started burning
         * 
         * @return builder
         * 
         */
        public Builder activationDate(@Nullable Output<String> activationDate) {
            $.activationDate = activationDate;
            return this;
        }

        /**
         * @param activationDate The date the license started burning
         * 
         * @return builder
         * 
         */
        public Builder activationDate(String activationDate) {
            return activationDate(Output.of(activationDate));
        }

        /**
         * @param claimDate The date the license was claimed into the organization
         * 
         * @return builder
         * 
         */
        public Builder claimDate(@Nullable Output<String> claimDate) {
            $.claimDate = claimDate;
            return this;
        }

        /**
         * @param claimDate The date the license was claimed into the organization
         * 
         * @return builder
         * 
         */
        public Builder claimDate(String claimDate) {
            return claimDate(Output.of(claimDate));
        }

        /**
         * @param deviceSerial Serial number of the device the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(@Nullable Output<String> deviceSerial) {
            $.deviceSerial = deviceSerial;
            return this;
        }

        /**
         * @param deviceSerial Serial number of the device the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder deviceSerial(String deviceSerial) {
            return deviceSerial(Output.of(deviceSerial));
        }

        /**
         * @param durationInDays The duration of the individual license
         * 
         * @return builder
         * 
         */
        public Builder durationInDays(@Nullable Output<Integer> durationInDays) {
            $.durationInDays = durationInDays;
            return this;
        }

        /**
         * @param durationInDays The duration of the individual license
         * 
         * @return builder
         * 
         */
        public Builder durationInDays(Integer durationInDays) {
            return durationInDays(Output.of(durationInDays));
        }

        /**
         * @param expirationDate The date the license will expire
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The date the license will expire
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param headLicenseId The id of the head license this license is queued behind. If there is no head license, it returns nil.
         * 
         * @return builder
         * 
         */
        public Builder headLicenseId(@Nullable Output<String> headLicenseId) {
            $.headLicenseId = headLicenseId;
            return this;
        }

        /**
         * @param headLicenseId The id of the head license this license is queued behind. If there is no head license, it returns nil.
         * 
         * @return builder
         * 
         */
        public Builder headLicenseId(String headLicenseId) {
            return headLicenseId(Output.of(headLicenseId));
        }

        /**
         * @param id License ID
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id License ID
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param licenseKey License key
         * 
         * @return builder
         * 
         */
        public Builder licenseKey(@Nullable Output<String> licenseKey) {
            $.licenseKey = licenseKey;
            return this;
        }

        /**
         * @param licenseKey License key
         * 
         * @return builder
         * 
         */
        public Builder licenseKey(String licenseKey) {
            return licenseKey(Output.of(licenseKey));
        }

        /**
         * @param licenseType License type
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType License type
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param networkId ID of the network the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId ID of the network the license is assigned to
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param orderNumber Order number
         * 
         * @return builder
         * 
         */
        public Builder orderNumber(@Nullable Output<String> orderNumber) {
            $.orderNumber = orderNumber;
            return this;
        }

        /**
         * @param orderNumber Order number
         * 
         * @return builder
         * 
         */
        public Builder orderNumber(String orderNumber) {
            return orderNumber(Output.of(orderNumber));
        }

        /**
         * @param permanentlyQueuedLicenses DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyQueuedLicenses(@Nullable Output<List<LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs>> permanentlyQueuedLicenses) {
            $.permanentlyQueuedLicenses = permanentlyQueuedLicenses;
            return this;
        }

        /**
         * @param permanentlyQueuedLicenses DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyQueuedLicenses(List<LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs> permanentlyQueuedLicenses) {
            return permanentlyQueuedLicenses(Output.of(permanentlyQueuedLicenses));
        }

        /**
         * @param permanentlyQueuedLicenses DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
         * 
         * @return builder
         * 
         */
        public Builder permanentlyQueuedLicenses(LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicenseArgs... permanentlyQueuedLicenses) {
            return permanentlyQueuedLicenses(List.of(permanentlyQueuedLicenses));
        }

        /**
         * @param seatCount The number of seats of the license. Only applicable to SM licenses.
         * 
         * @return builder
         * 
         */
        public Builder seatCount(@Nullable Output<Integer> seatCount) {
            $.seatCount = seatCount;
            return this;
        }

        /**
         * @param seatCount The number of seats of the license. Only applicable to SM licenses.
         * 
         * @return builder
         * 
         */
        public Builder seatCount(Integer seatCount) {
            return seatCount(Output.of(seatCount));
        }

        /**
         * @param state The state of the license. All queued licenses have a status of *recentlyQueued*.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the license. All queued licenses have a status of *recentlyQueued*.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param totalDurationInDays The duration of the license plus all permanently queued licenses associated with it
         * 
         * @return builder
         * 
         */
        public Builder totalDurationInDays(@Nullable Output<Integer> totalDurationInDays) {
            $.totalDurationInDays = totalDurationInDays;
            return this;
        }

        /**
         * @param totalDurationInDays The duration of the license plus all permanently queued licenses associated with it
         * 
         * @return builder
         * 
         */
        public Builder totalDurationInDays(Integer totalDurationInDays) {
            return totalDurationInDays(Output.of(totalDurationInDays));
        }

        public LicensesAssignSeatsItemResultingLicenseArgs build() {
            return $;
        }
    }

}
