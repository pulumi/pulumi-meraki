// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVlanProfilesAssignmentsByDevicePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVlanProfilesAssignmentsByDevicePlainArgs Empty = new GetVlanProfilesAssignmentsByDevicePlainArgs();

    /**
     * endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="endingBefore")
    private @Nullable String endingBefore;

    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private String networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public String networkId() {
        return this.networkId;
    }

    /**
     * perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    @Import(name="perPage")
    private @Nullable Integer perPage;

    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * productTypes query parameter. Optional parameter to filter devices by product types.
     * 
     */
    @Import(name="productTypes")
    private @Nullable List<String> productTypes;

    /**
     * @return productTypes query parameter. Optional parameter to filter devices by product types.
     * 
     */
    public Optional<List<String>> productTypes() {
        return Optional.ofNullable(this.productTypes);
    }

    /**
     * serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
     * 
     */
    @Import(name="serials")
    private @Nullable List<String> serials;

    /**
     * @return serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
     * 
     */
    public Optional<List<String>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
     * 
     */
    @Import(name="stackIds")
    private @Nullable List<String> stackIds;

    /**
     * @return stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
     * 
     */
    public Optional<List<String>> stackIds() {
        return Optional.ofNullable(this.stackIds);
    }

    /**
     * startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    @Import(name="startingAfter")
    private @Nullable String startingAfter;

    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }

    private GetVlanProfilesAssignmentsByDevicePlainArgs() {}

    private GetVlanProfilesAssignmentsByDevicePlainArgs(GetVlanProfilesAssignmentsByDevicePlainArgs $) {
        this.endingBefore = $.endingBefore;
        this.networkId = $.networkId;
        this.perPage = $.perPage;
        this.productTypes = $.productTypes;
        this.serials = $.serials;
        this.stackIds = $.stackIds;
        this.startingAfter = $.startingAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVlanProfilesAssignmentsByDevicePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVlanProfilesAssignmentsByDevicePlainArgs $;

        public Builder() {
            $ = new GetVlanProfilesAssignmentsByDevicePlainArgs();
        }

        public Builder(GetVlanProfilesAssignmentsByDevicePlainArgs defaults) {
            $ = new GetVlanProfilesAssignmentsByDevicePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endingBefore endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder endingBefore(@Nullable String endingBefore) {
            $.endingBefore = endingBefore;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param perPage perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Integer perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param productTypes productTypes query parameter. Optional parameter to filter devices by product types.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(@Nullable List<String> productTypes) {
            $.productTypes = productTypes;
            return this;
        }

        /**
         * @param productTypes productTypes query parameter. Optional parameter to filter devices by product types.
         * 
         * @return builder
         * 
         */
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable List<String> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param stackIds stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
         * 
         * @return builder
         * 
         */
        public Builder stackIds(@Nullable List<String> stackIds) {
            $.stackIds = stackIds;
            return this;
        }

        /**
         * @param stackIds stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
         * 
         * @return builder
         * 
         */
        public Builder stackIds(String... stackIds) {
            return stackIds(List.of(stackIds));
        }

        /**
         * @param startingAfter startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
         * 
         * @return builder
         * 
         */
        public Builder startingAfter(@Nullable String startingAfter) {
            $.startingAfter = startingAfter;
            return this;
        }

        public GetVlanProfilesAssignmentsByDevicePlainArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetVlanProfilesAssignmentsByDevicePlainArgs", "networkId");
            }
            return $;
        }
    }

}
