// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackArgs;
import com.pulumi.meraki.networks.inputs.ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs;
import com.pulumi.meraki.networks.inputs.ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceTrafficShapingUplinkSelectionState extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceTrafficShapingUplinkSelectionState Empty = new ApplianceTrafficShapingUplinkSelectionState();

    /**
     * Whether active-active AutoVPN is enabled
     * 
     */
    @Import(name="activeActiveAutoVpnEnabled")
    private @Nullable Output<Boolean> activeActiveAutoVpnEnabled;

    /**
     * @return Whether active-active AutoVPN is enabled
     * 
     */
    public Optional<Output<Boolean>> activeActiveAutoVpnEnabled() {
        return Optional.ofNullable(this.activeActiveAutoVpnEnabled);
    }

    /**
     * The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
     * 
     */
    @Import(name="defaultUplink")
    private @Nullable Output<String> defaultUplink;

    /**
     * @return The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
     * 
     */
    public Optional<Output<String>> defaultUplink() {
        return Optional.ofNullable(this.defaultUplink);
    }

    /**
     * WAN failover and failback
     * 
     */
    @Import(name="failoverAndFailback")
    private @Nullable Output<ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackArgs> failoverAndFailback;

    /**
     * @return WAN failover and failback
     * 
     */
    public Optional<Output<ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackArgs>> failoverAndFailback() {
        return Optional.ofNullable(this.failoverAndFailback);
    }

    /**
     * Whether load balancing is enabled
     * 
     */
    @Import(name="loadBalancingEnabled")
    private @Nullable Output<Boolean> loadBalancingEnabled;

    /**
     * @return Whether load balancing is enabled
     * 
     */
    public Optional<Output<Boolean>> loadBalancingEnabled() {
        return Optional.ofNullable(this.loadBalancingEnabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Uplink preference rules for VPN traffic
     * 
     */
    @Import(name="vpnTrafficUplinkPreferences")
    private @Nullable Output<List<ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs>> vpnTrafficUplinkPreferences;

    /**
     * @return Uplink preference rules for VPN traffic
     * 
     */
    public Optional<Output<List<ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs>>> vpnTrafficUplinkPreferences() {
        return Optional.ofNullable(this.vpnTrafficUplinkPreferences);
    }

    /**
     * Uplink preference rules for WAN traffic
     * 
     */
    @Import(name="wanTrafficUplinkPreferences")
    private @Nullable Output<List<ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs>> wanTrafficUplinkPreferences;

    /**
     * @return Uplink preference rules for WAN traffic
     * 
     */
    public Optional<Output<List<ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs>>> wanTrafficUplinkPreferences() {
        return Optional.ofNullable(this.wanTrafficUplinkPreferences);
    }

    private ApplianceTrafficShapingUplinkSelectionState() {}

    private ApplianceTrafficShapingUplinkSelectionState(ApplianceTrafficShapingUplinkSelectionState $) {
        this.activeActiveAutoVpnEnabled = $.activeActiveAutoVpnEnabled;
        this.defaultUplink = $.defaultUplink;
        this.failoverAndFailback = $.failoverAndFailback;
        this.loadBalancingEnabled = $.loadBalancingEnabled;
        this.networkId = $.networkId;
        this.vpnTrafficUplinkPreferences = $.vpnTrafficUplinkPreferences;
        this.wanTrafficUplinkPreferences = $.wanTrafficUplinkPreferences;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceTrafficShapingUplinkSelectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceTrafficShapingUplinkSelectionState $;

        public Builder() {
            $ = new ApplianceTrafficShapingUplinkSelectionState();
        }

        public Builder(ApplianceTrafficShapingUplinkSelectionState defaults) {
            $ = new ApplianceTrafficShapingUplinkSelectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeActiveAutoVpnEnabled Whether active-active AutoVPN is enabled
         * 
         * @return builder
         * 
         */
        public Builder activeActiveAutoVpnEnabled(@Nullable Output<Boolean> activeActiveAutoVpnEnabled) {
            $.activeActiveAutoVpnEnabled = activeActiveAutoVpnEnabled;
            return this;
        }

        /**
         * @param activeActiveAutoVpnEnabled Whether active-active AutoVPN is enabled
         * 
         * @return builder
         * 
         */
        public Builder activeActiveAutoVpnEnabled(Boolean activeActiveAutoVpnEnabled) {
            return activeActiveAutoVpnEnabled(Output.of(activeActiveAutoVpnEnabled));
        }

        /**
         * @param defaultUplink The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultUplink(@Nullable Output<String> defaultUplink) {
            $.defaultUplink = defaultUplink;
            return this;
        }

        /**
         * @param defaultUplink The default uplink. Must be one of: &#39;wan1&#39; or &#39;wan2&#39;
         * 
         * @return builder
         * 
         */
        public Builder defaultUplink(String defaultUplink) {
            return defaultUplink(Output.of(defaultUplink));
        }

        /**
         * @param failoverAndFailback WAN failover and failback
         * 
         * @return builder
         * 
         */
        public Builder failoverAndFailback(@Nullable Output<ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackArgs> failoverAndFailback) {
            $.failoverAndFailback = failoverAndFailback;
            return this;
        }

        /**
         * @param failoverAndFailback WAN failover and failback
         * 
         * @return builder
         * 
         */
        public Builder failoverAndFailback(ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackArgs failoverAndFailback) {
            return failoverAndFailback(Output.of(failoverAndFailback));
        }

        /**
         * @param loadBalancingEnabled Whether load balancing is enabled
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingEnabled(@Nullable Output<Boolean> loadBalancingEnabled) {
            $.loadBalancingEnabled = loadBalancingEnabled;
            return this;
        }

        /**
         * @param loadBalancingEnabled Whether load balancing is enabled
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingEnabled(Boolean loadBalancingEnabled) {
            return loadBalancingEnabled(Output.of(loadBalancingEnabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param vpnTrafficUplinkPreferences Uplink preference rules for VPN traffic
         * 
         * @return builder
         * 
         */
        public Builder vpnTrafficUplinkPreferences(@Nullable Output<List<ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs>> vpnTrafficUplinkPreferences) {
            $.vpnTrafficUplinkPreferences = vpnTrafficUplinkPreferences;
            return this;
        }

        /**
         * @param vpnTrafficUplinkPreferences Uplink preference rules for VPN traffic
         * 
         * @return builder
         * 
         */
        public Builder vpnTrafficUplinkPreferences(List<ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs> vpnTrafficUplinkPreferences) {
            return vpnTrafficUplinkPreferences(Output.of(vpnTrafficUplinkPreferences));
        }

        /**
         * @param vpnTrafficUplinkPreferences Uplink preference rules for VPN traffic
         * 
         * @return builder
         * 
         */
        public Builder vpnTrafficUplinkPreferences(ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArgs... vpnTrafficUplinkPreferences) {
            return vpnTrafficUplinkPreferences(List.of(vpnTrafficUplinkPreferences));
        }

        /**
         * @param wanTrafficUplinkPreferences Uplink preference rules for WAN traffic
         * 
         * @return builder
         * 
         */
        public Builder wanTrafficUplinkPreferences(@Nullable Output<List<ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs>> wanTrafficUplinkPreferences) {
            $.wanTrafficUplinkPreferences = wanTrafficUplinkPreferences;
            return this;
        }

        /**
         * @param wanTrafficUplinkPreferences Uplink preference rules for WAN traffic
         * 
         * @return builder
         * 
         */
        public Builder wanTrafficUplinkPreferences(List<ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs> wanTrafficUplinkPreferences) {
            return wanTrafficUplinkPreferences(Output.of(wanTrafficUplinkPreferences));
        }

        /**
         * @param wanTrafficUplinkPreferences Uplink preference rules for WAN traffic
         * 
         * @return builder
         * 
         */
        public Builder wanTrafficUplinkPreferences(ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArgs... wanTrafficUplinkPreferences) {
            return wanTrafficUplinkPreferences(List.of(wanTrafficUplinkPreferences));
        }

        public ApplianceTrafficShapingUplinkSelectionState build() {
            return $;
        }
    }

}
