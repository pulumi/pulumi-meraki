// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetLicensesOverviewItemStatesExpiringCritical {
    /**
     * @return The number of licenses that will expire in this window
     * 
     */
    private Integer expiringCount;
    /**
     * @return The number of days from now denoting the critical threshold for an expiring license
     * 
     */
    private Integer thresholdInDays;

    private GetLicensesOverviewItemStatesExpiringCritical() {}
    /**
     * @return The number of licenses that will expire in this window
     * 
     */
    public Integer expiringCount() {
        return this.expiringCount;
    }
    /**
     * @return The number of days from now denoting the critical threshold for an expiring license
     * 
     */
    public Integer thresholdInDays() {
        return this.thresholdInDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensesOverviewItemStatesExpiringCritical defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer expiringCount;
        private Integer thresholdInDays;
        public Builder() {}
        public Builder(GetLicensesOverviewItemStatesExpiringCritical defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expiringCount = defaults.expiringCount;
    	      this.thresholdInDays = defaults.thresholdInDays;
        }

        @CustomType.Setter
        public Builder expiringCount(Integer expiringCount) {
            if (expiringCount == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemStatesExpiringCritical", "expiringCount");
            }
            this.expiringCount = expiringCount;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdInDays(Integer thresholdInDays) {
            if (thresholdInDays == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemStatesExpiringCritical", "thresholdInDays");
            }
            this.thresholdInDays = thresholdInDays;
            return this;
        }
        public GetLicensesOverviewItemStatesExpiringCritical build() {
            final var _resultValue = new GetLicensesOverviewItemStatesExpiringCritical();
            _resultValue.expiringCount = expiringCount;
            _resultValue.thresholdInDays = thresholdInDays;
            return _resultValue;
        }
    }
}
