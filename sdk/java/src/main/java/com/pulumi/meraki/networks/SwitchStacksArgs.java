// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchStacksArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchStacksArgs Empty = new SwitchStacksArgs();

    /**
     * Name of the Switch stack
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Switch stack
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Serials of the switches in the switch stack
     * 
     */
    @Import(name="serials")
    private @Nullable Output<List<String>> serials;

    /**
     * @return Serials of the switches in the switch stack
     * 
     */
    public Optional<Output<List<String>>> serials() {
        return Optional.ofNullable(this.serials);
    }

    /**
     * switchStackId path parameter. Switch stack ID
     * 
     */
    @Import(name="switchStackId")
    private @Nullable Output<String> switchStackId;

    /**
     * @return switchStackId path parameter. Switch stack ID
     * 
     */
    public Optional<Output<String>> switchStackId() {
        return Optional.ofNullable(this.switchStackId);
    }

    private SwitchStacksArgs() {}

    private SwitchStacksArgs(SwitchStacksArgs $) {
        this.name = $.name;
        this.networkId = $.networkId;
        this.serials = $.serials;
        this.switchStackId = $.switchStackId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchStacksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchStacksArgs $;

        public Builder() {
            $ = new SwitchStacksArgs();
        }

        public Builder(SwitchStacksArgs defaults) {
            $ = new SwitchStacksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the Switch stack
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Switch stack
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param serials Serials of the switches in the switch stack
         * 
         * @return builder
         * 
         */
        public Builder serials(@Nullable Output<List<String>> serials) {
            $.serials = serials;
            return this;
        }

        /**
         * @param serials Serials of the switches in the switch stack
         * 
         * @return builder
         * 
         */
        public Builder serials(List<String> serials) {
            return serials(Output.of(serials));
        }

        /**
         * @param serials Serials of the switches in the switch stack
         * 
         * @return builder
         * 
         */
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }

        /**
         * @param switchStackId switchStackId path parameter. Switch stack ID
         * 
         * @return builder
         * 
         */
        public Builder switchStackId(@Nullable Output<String> switchStackId) {
            $.switchStackId = switchStackId;
            return this;
        }

        /**
         * @param switchStackId switchStackId path parameter. Switch stack ID
         * 
         * @return builder
         * 
         */
        public Builder switchStackId(String switchStackId) {
            return switchStackId(Output.of(switchStackId));
        }

        public SwitchStacksArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("SwitchStacksArgs", "networkId");
            }
            return $;
        }
    }

}
