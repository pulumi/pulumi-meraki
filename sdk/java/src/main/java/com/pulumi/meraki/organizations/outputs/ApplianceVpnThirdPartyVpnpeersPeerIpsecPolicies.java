// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies {
    /**
     * @return This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    private @Nullable List<String> childAuthAlgos;
    /**
     * @return This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    private @Nullable List<String> childCipherAlgos;
    /**
     * @return The lifetime of the Phase 2 SA in seconds.
     * 
     */
    private @Nullable Integer childLifetime;
    /**
     * @return This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    private @Nullable List<String> childPfsGroups;
    /**
     * @return This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    private @Nullable List<String> ikeAuthAlgos;
    /**
     * @return This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    private @Nullable List<String> ikeCipherAlgos;
    /**
     * @return This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    private @Nullable List<String> ikeDiffieHellmanGroups;
    /**
     * @return The lifetime of the Phase 1 SA in seconds.
     * 
     */
    private @Nullable Integer ikeLifetime;
    /**
     * @return [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    private @Nullable List<String> ikePrfAlgos;

    private ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies() {}
    /**
     * @return This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public List<String> childAuthAlgos() {
        return this.childAuthAlgos == null ? List.of() : this.childAuthAlgos;
    }
    /**
     * @return This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;, &#39;null&#39;
     * 
     */
    public List<String> childCipherAlgos() {
        return this.childCipherAlgos == null ? List.of() : this.childCipherAlgos;
    }
    /**
     * @return The lifetime of the Phase 2 SA in seconds.
     * 
     */
    public Optional<Integer> childLifetime() {
        return Optional.ofNullable(this.childLifetime);
    }
    /**
     * @return This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: &#39;disabled&#39;,&#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public List<String> childPfsGroups() {
        return this.childPfsGroups == null ? List.of() : this.childPfsGroups;
    }
    /**
     * @return This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;sha256&#39;, &#39;sha1&#39;, &#39;md5&#39;
     * 
     */
    public List<String> ikeAuthAlgos() {
        return this.ikeAuthAlgos == null ? List.of() : this.ikeAuthAlgos;
    }
    /**
     * @return This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;aes256&#39;, &#39;aes192&#39;, &#39;aes128&#39;, &#39;tripledes&#39;, &#39;des&#39;
     * 
     */
    public List<String> ikeCipherAlgos() {
        return this.ikeCipherAlgos == null ? List.of() : this.ikeCipherAlgos;
    }
    /**
     * @return This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: &#39;group14&#39;, &#39;group5&#39;, &#39;group2&#39;, &#39;group1&#39;
     * 
     */
    public List<String> ikeDiffieHellmanGroups() {
        return this.ikeDiffieHellmanGroups == null ? List.of() : this.ikeDiffieHellmanGroups;
    }
    /**
     * @return The lifetime of the Phase 1 SA in seconds.
     * 
     */
    public Optional<Integer> ikeLifetime() {
        return Optional.ofNullable(this.ikeLifetime);
    }
    /**
     * @return [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: &#39;prfsha256&#39;, &#39;prfsha1&#39;, &#39;prfmd5&#39;, &#39;default&#39;. The &#39;default&#39; option can be used to default to the Authentication algorithm.
     * 
     */
    public List<String> ikePrfAlgos() {
        return this.ikePrfAlgos == null ? List.of() : this.ikePrfAlgos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> childAuthAlgos;
        private @Nullable List<String> childCipherAlgos;
        private @Nullable Integer childLifetime;
        private @Nullable List<String> childPfsGroups;
        private @Nullable List<String> ikeAuthAlgos;
        private @Nullable List<String> ikeCipherAlgos;
        private @Nullable List<String> ikeDiffieHellmanGroups;
        private @Nullable Integer ikeLifetime;
        private @Nullable List<String> ikePrfAlgos;
        public Builder() {}
        public Builder(ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childAuthAlgos = defaults.childAuthAlgos;
    	      this.childCipherAlgos = defaults.childCipherAlgos;
    	      this.childLifetime = defaults.childLifetime;
    	      this.childPfsGroups = defaults.childPfsGroups;
    	      this.ikeAuthAlgos = defaults.ikeAuthAlgos;
    	      this.ikeCipherAlgos = defaults.ikeCipherAlgos;
    	      this.ikeDiffieHellmanGroups = defaults.ikeDiffieHellmanGroups;
    	      this.ikeLifetime = defaults.ikeLifetime;
    	      this.ikePrfAlgos = defaults.ikePrfAlgos;
        }

        @CustomType.Setter
        public Builder childAuthAlgos(@Nullable List<String> childAuthAlgos) {

            this.childAuthAlgos = childAuthAlgos;
            return this;
        }
        public Builder childAuthAlgos(String... childAuthAlgos) {
            return childAuthAlgos(List.of(childAuthAlgos));
        }
        @CustomType.Setter
        public Builder childCipherAlgos(@Nullable List<String> childCipherAlgos) {

            this.childCipherAlgos = childCipherAlgos;
            return this;
        }
        public Builder childCipherAlgos(String... childCipherAlgos) {
            return childCipherAlgos(List.of(childCipherAlgos));
        }
        @CustomType.Setter
        public Builder childLifetime(@Nullable Integer childLifetime) {

            this.childLifetime = childLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder childPfsGroups(@Nullable List<String> childPfsGroups) {

            this.childPfsGroups = childPfsGroups;
            return this;
        }
        public Builder childPfsGroups(String... childPfsGroups) {
            return childPfsGroups(List.of(childPfsGroups));
        }
        @CustomType.Setter
        public Builder ikeAuthAlgos(@Nullable List<String> ikeAuthAlgos) {

            this.ikeAuthAlgos = ikeAuthAlgos;
            return this;
        }
        public Builder ikeAuthAlgos(String... ikeAuthAlgos) {
            return ikeAuthAlgos(List.of(ikeAuthAlgos));
        }
        @CustomType.Setter
        public Builder ikeCipherAlgos(@Nullable List<String> ikeCipherAlgos) {

            this.ikeCipherAlgos = ikeCipherAlgos;
            return this;
        }
        public Builder ikeCipherAlgos(String... ikeCipherAlgos) {
            return ikeCipherAlgos(List.of(ikeCipherAlgos));
        }
        @CustomType.Setter
        public Builder ikeDiffieHellmanGroups(@Nullable List<String> ikeDiffieHellmanGroups) {

            this.ikeDiffieHellmanGroups = ikeDiffieHellmanGroups;
            return this;
        }
        public Builder ikeDiffieHellmanGroups(String... ikeDiffieHellmanGroups) {
            return ikeDiffieHellmanGroups(List.of(ikeDiffieHellmanGroups));
        }
        @CustomType.Setter
        public Builder ikeLifetime(@Nullable Integer ikeLifetime) {

            this.ikeLifetime = ikeLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder ikePrfAlgos(@Nullable List<String> ikePrfAlgos) {

            this.ikePrfAlgos = ikePrfAlgos;
            return this;
        }
        public Builder ikePrfAlgos(String... ikePrfAlgos) {
            return ikePrfAlgos(List.of(ikePrfAlgos));
        }
        public ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies build() {
            final var _resultValue = new ApplianceVpnThirdPartyVpnpeersPeerIpsecPolicies();
            _resultValue.childAuthAlgos = childAuthAlgos;
            _resultValue.childCipherAlgos = childCipherAlgos;
            _resultValue.childLifetime = childLifetime;
            _resultValue.childPfsGroups = childPfsGroups;
            _resultValue.ikeAuthAlgos = ikeAuthAlgos;
            _resultValue.ikeCipherAlgos = ikeCipherAlgos;
            _resultValue.ikeDiffieHellmanGroups = ikeDiffieHellmanGroups;
            _resultValue.ikeLifetime = ikeLifetime;
            _resultValue.ikePrfAlgos = ikePrfAlgos;
            return _resultValue;
        }
    }
}
