// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppliancePortsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppliancePortsArgs Empty = new AppliancePortsArgs();

    /**
     * The name of the policy. Only applicable to Access ports.
     * 
     */
    @Import(name="accessPolicy")
    private @Nullable Output<String> accessPolicy;

    /**
     * @return The name of the policy. Only applicable to Access ports.
     * 
     */
    public Optional<Output<String>> accessPolicy() {
        return Optional.ofNullable(this.accessPolicy);
    }

    /**
     * Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
     * 
     */
    @Import(name="allowedVlans")
    private @Nullable Output<String> allowedVlans;

    /**
     * @return Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
     * 
     */
    public Optional<Output<String>> allowedVlans() {
        return Optional.ofNullable(this.allowedVlans);
    }

    /**
     * Whether the trunk port can drop all untagged traffic.
     * 
     */
    @Import(name="dropUntaggedTraffic")
    private @Nullable Output<Boolean> dropUntaggedTraffic;

    /**
     * @return Whether the trunk port can drop all untagged traffic.
     * 
     */
    public Optional<Output<Boolean>> dropUntaggedTraffic() {
        return Optional.ofNullable(this.dropUntaggedTraffic);
    }

    /**
     * The status of the port
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return The status of the port
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * portId path parameter. Port ID
     * 
     */
    @Import(name="portId", required=true)
    private Output<String> portId;

    /**
     * @return portId path parameter. Port ID
     * 
     */
    public Output<String> portId() {
        return this.portId;
    }

    /**
     * The type of the port: &#39;access&#39; or &#39;trunk&#39;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the port: &#39;access&#39; or &#39;trunk&#39;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private AppliancePortsArgs() {}

    private AppliancePortsArgs(AppliancePortsArgs $) {
        this.accessPolicy = $.accessPolicy;
        this.allowedVlans = $.allowedVlans;
        this.dropUntaggedTraffic = $.dropUntaggedTraffic;
        this.enabled = $.enabled;
        this.networkId = $.networkId;
        this.portId = $.portId;
        this.type = $.type;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppliancePortsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppliancePortsArgs $;

        public Builder() {
            $ = new AppliancePortsArgs();
        }

        public Builder(AppliancePortsArgs defaults) {
            $ = new AppliancePortsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPolicy The name of the policy. Only applicable to Access ports.
         * 
         * @return builder
         * 
         */
        public Builder accessPolicy(@Nullable Output<String> accessPolicy) {
            $.accessPolicy = accessPolicy;
            return this;
        }

        /**
         * @param accessPolicy The name of the policy. Only applicable to Access ports.
         * 
         * @return builder
         * 
         */
        public Builder accessPolicy(String accessPolicy) {
            return accessPolicy(Output.of(accessPolicy));
        }

        /**
         * @param allowedVlans Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
         * 
         * @return builder
         * 
         */
        public Builder allowedVlans(@Nullable Output<String> allowedVlans) {
            $.allowedVlans = allowedVlans;
            return this;
        }

        /**
         * @param allowedVlans Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
         * 
         * @return builder
         * 
         */
        public Builder allowedVlans(String allowedVlans) {
            return allowedVlans(Output.of(allowedVlans));
        }

        /**
         * @param dropUntaggedTraffic Whether the trunk port can drop all untagged traffic.
         * 
         * @return builder
         * 
         */
        public Builder dropUntaggedTraffic(@Nullable Output<Boolean> dropUntaggedTraffic) {
            $.dropUntaggedTraffic = dropUntaggedTraffic;
            return this;
        }

        /**
         * @param dropUntaggedTraffic Whether the trunk port can drop all untagged traffic.
         * 
         * @return builder
         * 
         */
        public Builder dropUntaggedTraffic(Boolean dropUntaggedTraffic) {
            return dropUntaggedTraffic(Output.of(dropUntaggedTraffic));
        }

        /**
         * @param enabled The status of the port
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The status of the port
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param portId portId path parameter. Port ID
         * 
         * @return builder
         * 
         */
        public Builder portId(Output<String> portId) {
            $.portId = portId;
            return this;
        }

        /**
         * @param portId portId path parameter. Port ID
         * 
         * @return builder
         * 
         */
        public Builder portId(String portId) {
            return portId(Output.of(portId));
        }

        /**
         * @param type The type of the port: &#39;access&#39; or &#39;trunk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the port: &#39;access&#39; or &#39;trunk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vlan Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        public AppliancePortsArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("AppliancePortsArgs", "networkId");
            }
            if ($.portId == null) {
                throw new MissingRequiredPropertyException("AppliancePortsArgs", "portId");
            }
            return $;
        }
    }

}
