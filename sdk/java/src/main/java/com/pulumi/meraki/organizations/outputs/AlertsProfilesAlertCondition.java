// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertsProfilesAlertCondition {
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     * 
     */
    private @Nullable Integer bitRateBps;
    /**
     * @return The total duration in seconds that the threshold should be crossed before alerting
     * 
     */
    private @Nullable Integer duration;
    /**
     * @return The uplink observed for the alert
     * 
     */
    private @Nullable String interface_;
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     * 
     */
    private @Nullable Integer jitterMs;
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     * 
     */
    private @Nullable Integer latencyMs;
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     * 
     */
    private @Nullable Double lossRatio;
    /**
     * @return The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     * 
     */
    private @Nullable Double mos;
    /**
     * @return The look back period in seconds for sensing the alert
     * 
     */
    private @Nullable Integer window;

    private AlertsProfilesAlertCondition() {}
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     * 
     */
    public Optional<Integer> bitRateBps() {
        return Optional.ofNullable(this.bitRateBps);
    }
    /**
     * @return The total duration in seconds that the threshold should be crossed before alerting
     * 
     */
    public Optional<Integer> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return The uplink observed for the alert
     * 
     */
    public Optional<String> interface_() {
        return Optional.ofNullable(this.interface_);
    }
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     * 
     */
    public Optional<Integer> jitterMs() {
        return Optional.ofNullable(this.jitterMs);
    }
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     * 
     */
    public Optional<Integer> latencyMs() {
        return Optional.ofNullable(this.latencyMs);
    }
    /**
     * @return The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     * 
     */
    public Optional<Double> lossRatio() {
        return Optional.ofNullable(this.lossRatio);
    }
    /**
     * @return The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     * 
     */
    public Optional<Double> mos() {
        return Optional.ofNullable(this.mos);
    }
    /**
     * @return The look back period in seconds for sensing the alert
     * 
     */
    public Optional<Integer> window() {
        return Optional.ofNullable(this.window);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertsProfilesAlertCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer bitRateBps;
        private @Nullable Integer duration;
        private @Nullable String interface_;
        private @Nullable Integer jitterMs;
        private @Nullable Integer latencyMs;
        private @Nullable Double lossRatio;
        private @Nullable Double mos;
        private @Nullable Integer window;
        public Builder() {}
        public Builder(AlertsProfilesAlertCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitRateBps = defaults.bitRateBps;
    	      this.duration = defaults.duration;
    	      this.interface_ = defaults.interface_;
    	      this.jitterMs = defaults.jitterMs;
    	      this.latencyMs = defaults.latencyMs;
    	      this.lossRatio = defaults.lossRatio;
    	      this.mos = defaults.mos;
    	      this.window = defaults.window;
        }

        @CustomType.Setter
        public Builder bitRateBps(@Nullable Integer bitRateBps) {

            this.bitRateBps = bitRateBps;
            return this;
        }
        @CustomType.Setter
        public Builder duration(@Nullable Integer duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(@Nullable String interface_) {

            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder jitterMs(@Nullable Integer jitterMs) {

            this.jitterMs = jitterMs;
            return this;
        }
        @CustomType.Setter
        public Builder latencyMs(@Nullable Integer latencyMs) {

            this.latencyMs = latencyMs;
            return this;
        }
        @CustomType.Setter
        public Builder lossRatio(@Nullable Double lossRatio) {

            this.lossRatio = lossRatio;
            return this;
        }
        @CustomType.Setter
        public Builder mos(@Nullable Double mos) {

            this.mos = mos;
            return this;
        }
        @CustomType.Setter
        public Builder window(@Nullable Integer window) {

            this.window = window;
            return this;
        }
        public AlertsProfilesAlertCondition build() {
            final var _resultValue = new AlertsProfilesAlertCondition();
            _resultValue.bitRateBps = bitRateBps;
            _resultValue.duration = duration;
            _resultValue.interface_ = interface_;
            _resultValue.jitterMs = jitterMs;
            _resultValue.latencyMs = latencyMs;
            _resultValue.lossRatio = lossRatio;
            _resultValue.mos = mos;
            _resultValue.window = window;
            return _resultValue;
        }
    }
}
