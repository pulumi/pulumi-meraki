// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetInventoryDevicesItem;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInventoryDevicesResult {
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String endingBefore;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private GetInventoryDevicesItem item;
    /**
     * @return Array of ResponseOrganizationsGetOrganizationInventoryDevices
     * 
     */
    private List<GetInventoryDevicesItem> items;
    /**
     * @return macs query parameter. Search for devices in inventory based on mac addresses.
     * 
     */
    private @Nullable List<String> macs;
    /**
     * @return models query parameter. Search for devices in inventory based on model.
     * 
     */
    private @Nullable List<String> models;
    /**
     * @return networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
     * 
     */
    private @Nullable List<String> networkIds;
    /**
     * @return orderNumbers query parameter. Search for devices in inventory based on order numbers.
     * 
     */
    private @Nullable List<String> orderNumbers;
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    private @Nullable String organizationId;
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    private @Nullable Integer perPage;
    /**
     * @return productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * 
     */
    private @Nullable List<String> productTypes;
    /**
     * @return search query parameter. Search for devices in inventory based on serial number, mac address, or model.
     * 
     */
    private @Nullable String search;
    /**
     * @return serial path parameter.
     * 
     */
    private @Nullable String serial;
    /**
     * @return serials query parameter. Search for devices in inventory based on serials.
     * 
     */
    private @Nullable List<String> serials;
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    private @Nullable String startingAfter;
    /**
     * @return tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return tagsFilterType query parameter. To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
     * 
     */
    private @Nullable String tagsFilterType;
    /**
     * @return usedState query parameter. Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
     * 
     */
    private @Nullable String usedState;

    private GetInventoryDevicesResult() {}
    /**
     * @return endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> endingBefore() {
        return Optional.ofNullable(this.endingBefore);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public GetInventoryDevicesItem item() {
        return this.item;
    }
    /**
     * @return Array of ResponseOrganizationsGetOrganizationInventoryDevices
     * 
     */
    public List<GetInventoryDevicesItem> items() {
        return this.items;
    }
    /**
     * @return macs query parameter. Search for devices in inventory based on mac addresses.
     * 
     */
    public List<String> macs() {
        return this.macs == null ? List.of() : this.macs;
    }
    /**
     * @return models query parameter. Search for devices in inventory based on model.
     * 
     */
    public List<String> models() {
        return this.models == null ? List.of() : this.models;
    }
    /**
     * @return networkIds query parameter. Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only.
     * 
     */
    public List<String> networkIds() {
        return this.networkIds == null ? List.of() : this.networkIds;
    }
    /**
     * @return orderNumbers query parameter. Search for devices in inventory based on order numbers.
     * 
     */
    public List<String> orderNumbers() {
        return this.orderNumbers == null ? List.of() : this.orderNumbers;
    }
    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }
    /**
     * @return perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
     * 
     */
    public Optional<Integer> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    /**
     * @return productTypes query parameter. Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
     * 
     */
    public List<String> productTypes() {
        return this.productTypes == null ? List.of() : this.productTypes;
    }
    /**
     * @return search query parameter. Search for devices in inventory based on serial number, mac address, or model.
     * 
     */
    public Optional<String> search() {
        return Optional.ofNullable(this.search);
    }
    /**
     * @return serial path parameter.
     * 
     */
    public Optional<String> serial() {
        return Optional.ofNullable(this.serial);
    }
    /**
     * @return serials query parameter. Search for devices in inventory based on serials.
     * 
     */
    public List<String> serials() {
        return this.serials == null ? List.of() : this.serials;
    }
    /**
     * @return startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * 
     */
    public Optional<String> startingAfter() {
        return Optional.ofNullable(this.startingAfter);
    }
    /**
     * @return tags query parameter. Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below).
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return tagsFilterType query parameter. To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;.
     * 
     */
    public Optional<String> tagsFilterType() {
        return Optional.ofNullable(this.tagsFilterType);
    }
    /**
     * @return usedState query parameter. Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;.
     * 
     */
    public Optional<String> usedState() {
        return Optional.ofNullable(this.usedState);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInventoryDevicesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endingBefore;
        private String id;
        private GetInventoryDevicesItem item;
        private List<GetInventoryDevicesItem> items;
        private @Nullable List<String> macs;
        private @Nullable List<String> models;
        private @Nullable List<String> networkIds;
        private @Nullable List<String> orderNumbers;
        private @Nullable String organizationId;
        private @Nullable Integer perPage;
        private @Nullable List<String> productTypes;
        private @Nullable String search;
        private @Nullable String serial;
        private @Nullable List<String> serials;
        private @Nullable String startingAfter;
        private @Nullable List<String> tags;
        private @Nullable String tagsFilterType;
        private @Nullable String usedState;
        public Builder() {}
        public Builder(GetInventoryDevicesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endingBefore = defaults.endingBefore;
    	      this.id = defaults.id;
    	      this.item = defaults.item;
    	      this.items = defaults.items;
    	      this.macs = defaults.macs;
    	      this.models = defaults.models;
    	      this.networkIds = defaults.networkIds;
    	      this.orderNumbers = defaults.orderNumbers;
    	      this.organizationId = defaults.organizationId;
    	      this.perPage = defaults.perPage;
    	      this.productTypes = defaults.productTypes;
    	      this.search = defaults.search;
    	      this.serial = defaults.serial;
    	      this.serials = defaults.serials;
    	      this.startingAfter = defaults.startingAfter;
    	      this.tags = defaults.tags;
    	      this.tagsFilterType = defaults.tagsFilterType;
    	      this.usedState = defaults.usedState;
        }

        @CustomType.Setter
        public Builder endingBefore(@Nullable String endingBefore) {

            this.endingBefore = endingBefore;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInventoryDevicesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder item(GetInventoryDevicesItem item) {
            if (item == null) {
              throw new MissingRequiredPropertyException("GetInventoryDevicesResult", "item");
            }
            this.item = item;
            return this;
        }
        @CustomType.Setter
        public Builder items(List<GetInventoryDevicesItem> items) {
            if (items == null) {
              throw new MissingRequiredPropertyException("GetInventoryDevicesResult", "items");
            }
            this.items = items;
            return this;
        }
        public Builder items(GetInventoryDevicesItem... items) {
            return items(List.of(items));
        }
        @CustomType.Setter
        public Builder macs(@Nullable List<String> macs) {

            this.macs = macs;
            return this;
        }
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }
        @CustomType.Setter
        public Builder models(@Nullable List<String> models) {

            this.models = models;
            return this;
        }
        public Builder models(String... models) {
            return models(List.of(models));
        }
        @CustomType.Setter
        public Builder networkIds(@Nullable List<String> networkIds) {

            this.networkIds = networkIds;
            return this;
        }
        public Builder networkIds(String... networkIds) {
            return networkIds(List.of(networkIds));
        }
        @CustomType.Setter
        public Builder orderNumbers(@Nullable List<String> orderNumbers) {

            this.orderNumbers = orderNumbers;
            return this;
        }
        public Builder orderNumbers(String... orderNumbers) {
            return orderNumbers(List.of(orderNumbers));
        }
        @CustomType.Setter
        public Builder organizationId(@Nullable String organizationId) {

            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Integer perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder productTypes(@Nullable List<String> productTypes) {

            this.productTypes = productTypes;
            return this;
        }
        public Builder productTypes(String... productTypes) {
            return productTypes(List.of(productTypes));
        }
        @CustomType.Setter
        public Builder search(@Nullable String search) {

            this.search = search;
            return this;
        }
        @CustomType.Setter
        public Builder serial(@Nullable String serial) {

            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder serials(@Nullable List<String> serials) {

            this.serials = serials;
            return this;
        }
        public Builder serials(String... serials) {
            return serials(List.of(serials));
        }
        @CustomType.Setter
        public Builder startingAfter(@Nullable String startingAfter) {

            this.startingAfter = startingAfter;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tagsFilterType(@Nullable String tagsFilterType) {

            this.tagsFilterType = tagsFilterType;
            return this;
        }
        @CustomType.Setter
        public Builder usedState(@Nullable String usedState) {

            this.usedState = usedState;
            return this;
        }
        public GetInventoryDevicesResult build() {
            final var _resultValue = new GetInventoryDevicesResult();
            _resultValue.endingBefore = endingBefore;
            _resultValue.id = id;
            _resultValue.item = item;
            _resultValue.items = items;
            _resultValue.macs = macs;
            _resultValue.models = models;
            _resultValue.networkIds = networkIds;
            _resultValue.orderNumbers = orderNumbers;
            _resultValue.organizationId = organizationId;
            _resultValue.perPage = perPage;
            _resultValue.productTypes = productTypes;
            _resultValue.search = search;
            _resultValue.serial = serial;
            _resultValue.serials = serials;
            _resultValue.startingAfter = startingAfter;
            _resultValue.tags = tags;
            _resultValue.tagsFilterType = tagsFilterType;
            _resultValue.usedState = usedState;
            return _resultValue;
        }
    }
}
