// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchQosRulesOrderArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchQosRulesOrderArgs Empty = new SwitchQosRulesOrderArgs();

    /**
     * DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<Integer> dscp;

    /**
     * @return DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
     * 
     */
    public Optional<Output<Integer>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     */
    @Import(name="dstPort")
    private @Nullable Output<Integer> dstPort;

    /**
     * @return The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     */
    public Optional<Output<Integer>> dstPort() {
        return Optional.ofNullable(this.dstPort);
    }

    /**
     * The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     */
    @Import(name="dstPortRange")
    private @Nullable Output<String> dstPortRange;

    /**
     * @return The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     */
    public Optional<Output<String>> dstPortRange() {
        return Optional.ofNullable(this.dstPortRange);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * The protocol of the incoming packet. Can be one of &#34;ANY&#34;, &#34;TCP&#34; or &#34;UDP&#34;. Default value is &#34;ANY&#34;
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol of the incoming packet. Can be one of &#34;ANY&#34;, &#34;TCP&#34; or &#34;UDP&#34;. Default value is &#34;ANY&#34;
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * qosRuleId path parameter. Qos rule ID
     * 
     */
    @Import(name="qosRuleId")
    private @Nullable Output<String> qosRuleId;

    /**
     * @return qosRuleId path parameter. Qos rule ID
     * 
     */
    public Optional<Output<String>> qosRuleId() {
        return Optional.ofNullable(this.qosRuleId);
    }

    /**
     * The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     */
    @Import(name="srcPort")
    private @Nullable Output<Integer> srcPort;

    /**
     * @return The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     */
    public Optional<Output<Integer>> srcPort() {
        return Optional.ofNullable(this.srcPort);
    }

    /**
     * The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     */
    @Import(name="srcPortRange")
    private @Nullable Output<String> srcPortRange;

    /**
     * @return The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     */
    public Optional<Output<String>> srcPortRange() {
        return Optional.ofNullable(this.srcPortRange);
    }

    /**
     * The VLAN of the incoming packet. A null value will match any VLAN.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return The VLAN of the incoming packet. A null value will match any VLAN.
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private SwitchQosRulesOrderArgs() {}

    private SwitchQosRulesOrderArgs(SwitchQosRulesOrderArgs $) {
        this.dscp = $.dscp;
        this.dstPort = $.dstPort;
        this.dstPortRange = $.dstPortRange;
        this.networkId = $.networkId;
        this.protocol = $.protocol;
        this.qosRuleId = $.qosRuleId;
        this.srcPort = $.srcPort;
        this.srcPortRange = $.srcPortRange;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchQosRulesOrderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchQosRulesOrderArgs $;

        public Builder() {
            $ = new SwitchQosRulesOrderArgs();
        }

        public Builder(SwitchQosRulesOrderArgs defaults) {
            $ = new SwitchQosRulesOrderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dscp DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<Integer> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
         * 
         * @return builder
         * 
         */
        public Builder dscp(Integer dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param dstPort The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder dstPort(@Nullable Output<Integer> dstPort) {
            $.dstPort = dstPort;
            return this;
        }

        /**
         * @param dstPort The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder dstPort(Integer dstPort) {
            return dstPort(Output.of(dstPort));
        }

        /**
         * @param dstPortRange The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
         * 
         * @return builder
         * 
         */
        public Builder dstPortRange(@Nullable Output<String> dstPortRange) {
            $.dstPortRange = dstPortRange;
            return this;
        }

        /**
         * @param dstPortRange The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
         * 
         * @return builder
         * 
         */
        public Builder dstPortRange(String dstPortRange) {
            return dstPortRange(Output.of(dstPortRange));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param protocol The protocol of the incoming packet. Can be one of &#34;ANY&#34;, &#34;TCP&#34; or &#34;UDP&#34;. Default value is &#34;ANY&#34;
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol of the incoming packet. Can be one of &#34;ANY&#34;, &#34;TCP&#34; or &#34;UDP&#34;. Default value is &#34;ANY&#34;
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param qosRuleId qosRuleId path parameter. Qos rule ID
         * 
         * @return builder
         * 
         */
        public Builder qosRuleId(@Nullable Output<String> qosRuleId) {
            $.qosRuleId = qosRuleId;
            return this;
        }

        /**
         * @param qosRuleId qosRuleId path parameter. Qos rule ID
         * 
         * @return builder
         * 
         */
        public Builder qosRuleId(String qosRuleId) {
            return qosRuleId(Output.of(qosRuleId));
        }

        /**
         * @param srcPort The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder srcPort(@Nullable Output<Integer> srcPort) {
            $.srcPort = srcPort;
            return this;
        }

        /**
         * @param srcPort The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
         * 
         * @return builder
         * 
         */
        public Builder srcPort(Integer srcPort) {
            return srcPort(Output.of(srcPort));
        }

        /**
         * @param srcPortRange The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
         * 
         * @return builder
         * 
         */
        public Builder srcPortRange(@Nullable Output<String> srcPortRange) {
            $.srcPortRange = srcPortRange;
            return this;
        }

        /**
         * @param srcPortRange The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
         * 
         * @return builder
         * 
         */
        public Builder srcPortRange(String srcPortRange) {
            return srcPortRange(Output.of(srcPortRange));
        }

        /**
         * @param vlan The VLAN of the incoming packet. A null value will match any VLAN.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan The VLAN of the incoming packet. A null value will match any VLAN.
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        public SwitchQosRulesOrderArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("SwitchQosRulesOrderArgs", "networkId");
            }
            return $;
        }
    }

}
