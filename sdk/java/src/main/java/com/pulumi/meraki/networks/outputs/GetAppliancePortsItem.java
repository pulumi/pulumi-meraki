// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAppliancePortsItem {
    /**
     * @return The name of the policy. Only applicable to Access ports.
     * 
     */
    private String accessPolicy;
    /**
     * @return Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
     * 
     */
    private String allowedVlans;
    /**
     * @return Whether the trunk port can drop all untagged traffic.
     * 
     */
    private Boolean dropUntaggedTraffic;
    /**
     * @return The status of the port
     * 
     */
    private Boolean enabled;
    /**
     * @return Number of the port
     * 
     */
    private Integer number;
    /**
     * @return The type of the port: &#39;access&#39; or &#39;trunk&#39;.
     * 
     */
    private String type;
    /**
     * @return Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     * 
     */
    private Integer vlan;

    private GetAppliancePortsItem() {}
    /**
     * @return The name of the policy. Only applicable to Access ports.
     * 
     */
    public String accessPolicy() {
        return this.accessPolicy;
    }
    /**
     * @return Comma-delimited list of the VLAN ID&#39;s allowed on the port, or &#39;all&#39; to permit all VLAN&#39;s on the port.
     * 
     */
    public String allowedVlans() {
        return this.allowedVlans;
    }
    /**
     * @return Whether the trunk port can drop all untagged traffic.
     * 
     */
    public Boolean dropUntaggedTraffic() {
        return this.dropUntaggedTraffic;
    }
    /**
     * @return The status of the port
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Number of the port
     * 
     */
    public Integer number() {
        return this.number;
    }
    /**
     * @return The type of the port: &#39;access&#39; or &#39;trunk&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
     * 
     */
    public Integer vlan() {
        return this.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppliancePortsItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessPolicy;
        private String allowedVlans;
        private Boolean dropUntaggedTraffic;
        private Boolean enabled;
        private Integer number;
        private String type;
        private Integer vlan;
        public Builder() {}
        public Builder(GetAppliancePortsItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessPolicy = defaults.accessPolicy;
    	      this.allowedVlans = defaults.allowedVlans;
    	      this.dropUntaggedTraffic = defaults.dropUntaggedTraffic;
    	      this.enabled = defaults.enabled;
    	      this.number = defaults.number;
    	      this.type = defaults.type;
    	      this.vlan = defaults.vlan;
        }

        @CustomType.Setter
        public Builder accessPolicy(String accessPolicy) {
            if (accessPolicy == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "accessPolicy");
            }
            this.accessPolicy = accessPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder allowedVlans(String allowedVlans) {
            if (allowedVlans == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "allowedVlans");
            }
            this.allowedVlans = allowedVlans;
            return this;
        }
        @CustomType.Setter
        public Builder dropUntaggedTraffic(Boolean dropUntaggedTraffic) {
            if (dropUntaggedTraffic == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "dropUntaggedTraffic");
            }
            this.dropUntaggedTraffic = dropUntaggedTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(Integer vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetAppliancePortsItem", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        public GetAppliancePortsItem build() {
            final var _resultValue = new GetAppliancePortsItem();
            _resultValue.accessPolicy = accessPolicy;
            _resultValue.allowedVlans = allowedVlans;
            _resultValue.dropUntaggedTraffic = dropUntaggedTraffic;
            _resultValue.enabled = enabled;
            _resultValue.number = number;
            _resultValue.type = type;
            _resultValue.vlan = vlan;
            return _resultValue;
        }
    }
}
