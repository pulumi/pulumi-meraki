// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplianceFirewallFirewalledServicesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplianceFirewallFirewalledServicesArgs Empty = new ApplianceFirewallFirewalledServicesArgs();

    /**
     * A string indicating the rule for which IPs are allowed to use the specified service
     * 
     */
    @Import(name="access")
    private @Nullable Output<String> access;

    /**
     * @return A string indicating the rule for which IPs are allowed to use the specified service
     * 
     */
    public Optional<Output<String>> access() {
        return Optional.ofNullable(this.access);
    }

    /**
     * An array of allowed IPs that can access the service
     * 
     */
    @Import(name="allowedIps")
    private @Nullable Output<List<String>> allowedIps;

    /**
     * @return An array of allowed IPs that can access the service
     * 
     */
    public Optional<Output<List<String>>> allowedIps() {
        return Optional.ofNullable(this.allowedIps);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Appliance service name
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Appliance service name
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private ApplianceFirewallFirewalledServicesArgs() {}

    private ApplianceFirewallFirewalledServicesArgs(ApplianceFirewallFirewalledServicesArgs $) {
        this.access = $.access;
        this.allowedIps = $.allowedIps;
        this.networkId = $.networkId;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplianceFirewallFirewalledServicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplianceFirewallFirewalledServicesArgs $;

        public Builder() {
            $ = new ApplianceFirewallFirewalledServicesArgs();
        }

        public Builder(ApplianceFirewallFirewalledServicesArgs defaults) {
            $ = new ApplianceFirewallFirewalledServicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param access A string indicating the rule for which IPs are allowed to use the specified service
         * 
         * @return builder
         * 
         */
        public Builder access(@Nullable Output<String> access) {
            $.access = access;
            return this;
        }

        /**
         * @param access A string indicating the rule for which IPs are allowed to use the specified service
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            return access(Output.of(access));
        }

        /**
         * @param allowedIps An array of allowed IPs that can access the service
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(@Nullable Output<List<String>> allowedIps) {
            $.allowedIps = allowedIps;
            return this;
        }

        /**
         * @param allowedIps An array of allowed IPs that can access the service
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(List<String> allowedIps) {
            return allowedIps(Output.of(allowedIps));
        }

        /**
         * @param allowedIps An array of allowed IPs that can access the service
         * 
         * @return builder
         * 
         */
        public Builder allowedIps(String... allowedIps) {
            return allowedIps(List.of(allowedIps));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param service Appliance service name
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Appliance service name
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ApplianceFirewallFirewalledServicesArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("ApplianceFirewallFirewalledServicesArgs", "networkId");
            }
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ApplianceFirewallFirewalledServicesArgs", "service");
            }
            return $;
        }
    }

}
