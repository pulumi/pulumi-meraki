// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSwitchPortsStatusesItemCdp {
    /**
     * @return Contains network addresses of both receiving and sending devices.
     * 
     */
    private String address;
    /**
     * @return Identifies the device type, which indicates the functional capabilities of the device.
     * 
     */
    private String capabilities;
    /**
     * @return Identifies the device name.
     * 
     */
    private String deviceId;
    /**
     * @return The device&#39;s management IP.
     * 
     */
    private String managementAddress;
    /**
     * @return Indicates, per interface, the assumed VLAN for untagged packets on the interface.
     * 
     */
    private Integer nativeVlan;
    /**
     * @return Identifies the hardware platform of the device.
     * 
     */
    private String platform;
    /**
     * @return Identifies the port from which the CDP packet was sent.
     * 
     */
    private String portId;
    /**
     * @return The system name.
     * 
     */
    private String systemName;
    /**
     * @return Contains the device software release information.
     * 
     */
    private String version;
    /**
     * @return Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
     * 
     */
    private String vtpManagementDomain;

    private GetSwitchPortsStatusesItemCdp() {}
    /**
     * @return Contains network addresses of both receiving and sending devices.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Identifies the device type, which indicates the functional capabilities of the device.
     * 
     */
    public String capabilities() {
        return this.capabilities;
    }
    /**
     * @return Identifies the device name.
     * 
     */
    public String deviceId() {
        return this.deviceId;
    }
    /**
     * @return The device&#39;s management IP.
     * 
     */
    public String managementAddress() {
        return this.managementAddress;
    }
    /**
     * @return Indicates, per interface, the assumed VLAN for untagged packets on the interface.
     * 
     */
    public Integer nativeVlan() {
        return this.nativeVlan;
    }
    /**
     * @return Identifies the hardware platform of the device.
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return Identifies the port from which the CDP packet was sent.
     * 
     */
    public String portId() {
        return this.portId;
    }
    /**
     * @return The system name.
     * 
     */
    public String systemName() {
        return this.systemName;
    }
    /**
     * @return Contains the device software release information.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
     * 
     */
    public String vtpManagementDomain() {
        return this.vtpManagementDomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchPortsStatusesItemCdp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String capabilities;
        private String deviceId;
        private String managementAddress;
        private Integer nativeVlan;
        private String platform;
        private String portId;
        private String systemName;
        private String version;
        private String vtpManagementDomain;
        public Builder() {}
        public Builder(GetSwitchPortsStatusesItemCdp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.capabilities = defaults.capabilities;
    	      this.deviceId = defaults.deviceId;
    	      this.managementAddress = defaults.managementAddress;
    	      this.nativeVlan = defaults.nativeVlan;
    	      this.platform = defaults.platform;
    	      this.portId = defaults.portId;
    	      this.systemName = defaults.systemName;
    	      this.version = defaults.version;
    	      this.vtpManagementDomain = defaults.vtpManagementDomain;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder capabilities(String capabilities) {
            if (capabilities == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "capabilities");
            }
            this.capabilities = capabilities;
            return this;
        }
        @CustomType.Setter
        public Builder deviceId(String deviceId) {
            if (deviceId == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "deviceId");
            }
            this.deviceId = deviceId;
            return this;
        }
        @CustomType.Setter
        public Builder managementAddress(String managementAddress) {
            if (managementAddress == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "managementAddress");
            }
            this.managementAddress = managementAddress;
            return this;
        }
        @CustomType.Setter
        public Builder nativeVlan(Integer nativeVlan) {
            if (nativeVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "nativeVlan");
            }
            this.nativeVlan = nativeVlan;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder systemName(String systemName) {
            if (systemName == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "systemName");
            }
            this.systemName = systemName;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vtpManagementDomain(String vtpManagementDomain) {
            if (vtpManagementDomain == null) {
              throw new MissingRequiredPropertyException("GetSwitchPortsStatusesItemCdp", "vtpManagementDomain");
            }
            this.vtpManagementDomain = vtpManagementDomain;
            return this;
        }
        public GetSwitchPortsStatusesItemCdp build() {
            final var _resultValue = new GetSwitchPortsStatusesItemCdp();
            _resultValue.address = address;
            _resultValue.capabilities = capabilities;
            _resultValue.deviceId = deviceId;
            _resultValue.managementAddress = managementAddress;
            _resultValue.nativeVlan = nativeVlan;
            _resultValue.platform = platform;
            _resultValue.portId = portId;
            _resultValue.systemName = systemName;
            _resultValue.version = version;
            _resultValue.vtpManagementDomain = vtpManagementDomain;
            return _resultValue;
        }
    }
}
