// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBrandingPoliciesItemAdminSettings {
    /**
     * @return Which kinds of admins this policy applies to. Can be one of &#39;All organization admins&#39;, &#39;All enterprise admins&#39;, &#39;All network admins&#39;, &#39;All admins of networks...&#39;, &#39;All admins of networks tagged...&#39;, &#39;Specific admins...&#39;, &#39;All admins&#39; or &#39;All SAML admins&#39;.
     * 
     */
    private String appliesTo;
    /**
     * @return If &#39;appliesTo&#39; is set to one of &#39;Specific admins...&#39;, &#39;All admins of networks...&#39; or &#39;All admins of networks tagged...&#39;, then you must specify this &#39;values&#39; property to provide the set of
     *   entities to apply the branding policy to. For &#39;Specific admins...&#39;, specify an array of admin IDs. For &#39;All admins of
     *   networks...&#39;, specify an array of network IDs and/or configuration template IDs. For &#39;All admins of networks tagged...&#39;,
     *   specify an array of tag names.
     * 
     */
    private List<String> values;

    private GetBrandingPoliciesItemAdminSettings() {}
    /**
     * @return Which kinds of admins this policy applies to. Can be one of &#39;All organization admins&#39;, &#39;All enterprise admins&#39;, &#39;All network admins&#39;, &#39;All admins of networks...&#39;, &#39;All admins of networks tagged...&#39;, &#39;Specific admins...&#39;, &#39;All admins&#39; or &#39;All SAML admins&#39;.
     * 
     */
    public String appliesTo() {
        return this.appliesTo;
    }
    /**
     * @return If &#39;appliesTo&#39; is set to one of &#39;Specific admins...&#39;, &#39;All admins of networks...&#39; or &#39;All admins of networks tagged...&#39;, then you must specify this &#39;values&#39; property to provide the set of
     *   entities to apply the branding policy to. For &#39;Specific admins...&#39;, specify an array of admin IDs. For &#39;All admins of
     *   networks...&#39;, specify an array of network IDs and/or configuration template IDs. For &#39;All admins of networks tagged...&#39;,
     *   specify an array of tag names.
     * 
     */
    public List<String> values() {
        return this.values;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBrandingPoliciesItemAdminSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appliesTo;
        private List<String> values;
        public Builder() {}
        public Builder(GetBrandingPoliciesItemAdminSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliesTo = defaults.appliesTo;
    	      this.values = defaults.values;
        }

        @CustomType.Setter
        public Builder appliesTo(String appliesTo) {
            if (appliesTo == null) {
              throw new MissingRequiredPropertyException("GetBrandingPoliciesItemAdminSettings", "appliesTo");
            }
            this.appliesTo = appliesTo;
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            if (values == null) {
              throw new MissingRequiredPropertyException("GetBrandingPoliciesItemAdminSettings", "values");
            }
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        public GetBrandingPoliciesItemAdminSettings build() {
            final var _resultValue = new GetBrandingPoliciesItemAdminSettings();
            _resultValue.appliesTo = appliesTo;
            _resultValue.values = values;
            return _resultValue;
        }
    }
}
