// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.outputs.GetLicensesOverviewItemStatesExpiringCritical;
import com.pulumi.meraki.organizations.outputs.GetLicensesOverviewItemStatesExpiringWarning;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetLicensesOverviewItemStatesExpiring {
    /**
     * @return The number of expiring licenses
     * 
     */
    private Integer count;
    /**
     * @return Data for the critical threshold
     * 
     */
    private GetLicensesOverviewItemStatesExpiringCritical critical;
    /**
     * @return Data for the warning threshold
     * 
     */
    private GetLicensesOverviewItemStatesExpiringWarning warning;

    private GetLicensesOverviewItemStatesExpiring() {}
    /**
     * @return The number of expiring licenses
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return Data for the critical threshold
     * 
     */
    public GetLicensesOverviewItemStatesExpiringCritical critical() {
        return this.critical;
    }
    /**
     * @return Data for the warning threshold
     * 
     */
    public GetLicensesOverviewItemStatesExpiringWarning warning() {
        return this.warning;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLicensesOverviewItemStatesExpiring defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private GetLicensesOverviewItemStatesExpiringCritical critical;
        private GetLicensesOverviewItemStatesExpiringWarning warning;
        public Builder() {}
        public Builder(GetLicensesOverviewItemStatesExpiring defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.critical = defaults.critical;
    	      this.warning = defaults.warning;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemStatesExpiring", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder critical(GetLicensesOverviewItemStatesExpiringCritical critical) {
            if (critical == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemStatesExpiring", "critical");
            }
            this.critical = critical;
            return this;
        }
        @CustomType.Setter
        public Builder warning(GetLicensesOverviewItemStatesExpiringWarning warning) {
            if (warning == null) {
              throw new MissingRequiredPropertyException("GetLicensesOverviewItemStatesExpiring", "warning");
            }
            this.warning = warning;
            return this;
        }
        public GetLicensesOverviewItemStatesExpiring build() {
            final var _resultValue = new GetLicensesOverviewItemStatesExpiring();
            _resultValue.count = count;
            _resultValue.critical = critical;
            _resultValue.warning = warning;
            return _resultValue;
        }
    }
}
