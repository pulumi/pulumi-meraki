// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.WirelessAlternateManagementInterfaceAccessPointArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessAlternateManagementInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessAlternateManagementInterfaceArgs Empty = new WirelessAlternateManagementInterfaceArgs();

    /**
     * Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put &#39;accessPoints&#39; in the body when updating template networks. Also, an empty &#39;accessPoints&#39; array will remove all previous static IP assignments
     * 
     */
    @Import(name="accessPoints")
    private @Nullable Output<List<WirelessAlternateManagementInterfaceAccessPointArgs>> accessPoints;

    /**
     * @return Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put &#39;accessPoints&#39; in the body when updating template networks. Also, an empty &#39;accessPoints&#39; array will remove all previous static IP assignments
     * 
     */
    public Optional<Output<List<WirelessAlternateManagementInterfaceAccessPointArgs>>> accessPoints() {
        return Optional.ofNullable(this.accessPoints);
    }

    /**
     * Boolean value to enable or disable alternate management interface
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Boolean value to enable or disable alternate management interface
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Can be one or more of the following values: &#39;radius&#39;, &#39;snmp&#39;, &#39;syslog&#39; or &#39;ldap&#39;
     * 
     */
    @Import(name="protocols")
    private @Nullable Output<List<String>> protocols;

    /**
     * @return Can be one or more of the following values: &#39;radius&#39;, &#39;snmp&#39;, &#39;syslog&#39; or &#39;ldap&#39;
     * 
     */
    public Optional<Output<List<String>>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    /**
     * Alternate management interface VLAN, must be between 1 and 4094
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return Alternate management interface VLAN, must be between 1 and 4094
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    private WirelessAlternateManagementInterfaceArgs() {}

    private WirelessAlternateManagementInterfaceArgs(WirelessAlternateManagementInterfaceArgs $) {
        this.accessPoints = $.accessPoints;
        this.enabled = $.enabled;
        this.networkId = $.networkId;
        this.protocols = $.protocols;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessAlternateManagementInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessAlternateManagementInterfaceArgs $;

        public Builder() {
            $ = new WirelessAlternateManagementInterfaceArgs();
        }

        public Builder(WirelessAlternateManagementInterfaceArgs defaults) {
            $ = new WirelessAlternateManagementInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessPoints Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put &#39;accessPoints&#39; in the body when updating template networks. Also, an empty &#39;accessPoints&#39; array will remove all previous static IP assignments
         * 
         * @return builder
         * 
         */
        public Builder accessPoints(@Nullable Output<List<WirelessAlternateManagementInterfaceAccessPointArgs>> accessPoints) {
            $.accessPoints = accessPoints;
            return this;
        }

        /**
         * @param accessPoints Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put &#39;accessPoints&#39; in the body when updating template networks. Also, an empty &#39;accessPoints&#39; array will remove all previous static IP assignments
         * 
         * @return builder
         * 
         */
        public Builder accessPoints(List<WirelessAlternateManagementInterfaceAccessPointArgs> accessPoints) {
            return accessPoints(Output.of(accessPoints));
        }

        /**
         * @param accessPoints Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put &#39;accessPoints&#39; in the body when updating template networks. Also, an empty &#39;accessPoints&#39; array will remove all previous static IP assignments
         * 
         * @return builder
         * 
         */
        public Builder accessPoints(WirelessAlternateManagementInterfaceAccessPointArgs... accessPoints) {
            return accessPoints(List.of(accessPoints));
        }

        /**
         * @param enabled Boolean value to enable or disable alternate management interface
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Boolean value to enable or disable alternate management interface
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param protocols Can be one or more of the following values: &#39;radius&#39;, &#39;snmp&#39;, &#39;syslog&#39; or &#39;ldap&#39;
         * 
         * @return builder
         * 
         */
        public Builder protocols(@Nullable Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        /**
         * @param protocols Can be one or more of the following values: &#39;radius&#39;, &#39;snmp&#39;, &#39;syslog&#39; or &#39;ldap&#39;
         * 
         * @return builder
         * 
         */
        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        /**
         * @param protocols Can be one or more of the following values: &#39;radius&#39;, &#39;snmp&#39;, &#39;syslog&#39; or &#39;ldap&#39;
         * 
         * @return builder
         * 
         */
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param vlanId Alternate management interface VLAN, must be between 1 and 4094
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId Alternate management interface VLAN, must be between 1 and 4094
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public WirelessAlternateManagementInterfaceArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("WirelessAlternateManagementInterfaceArgs", "networkId");
            }
            return $;
        }
    }

}
