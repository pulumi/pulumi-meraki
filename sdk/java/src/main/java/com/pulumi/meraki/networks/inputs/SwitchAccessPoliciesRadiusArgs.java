// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SwitchAccessPoliciesRadiusCriticalAuthArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchAccessPoliciesRadiusArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchAccessPoliciesRadiusArgs Empty = new SwitchAccessPoliciesRadiusArgs();

    /**
     * Critical auth settings for when authentication is rejected by the RADIUS server
     * 
     */
    @Import(name="criticalAuth")
    private @Nullable Output<SwitchAccessPoliciesRadiusCriticalAuthArgs> criticalAuth;

    /**
     * @return Critical auth settings for when authentication is rejected by the RADIUS server
     * 
     */
    public Optional<Output<SwitchAccessPoliciesRadiusCriticalAuthArgs>> criticalAuth() {
        return Optional.ofNullable(this.criticalAuth);
    }

    /**
     * VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    @Import(name="failedAuthVlanId")
    private @Nullable Output<Integer> failedAuthVlanId;

    /**
     * @return VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
     * 
     */
    public Optional<Output<Integer>> failedAuthVlanId() {
        return Optional.ofNullable(this.failedAuthVlanId);
    }

    /**
     * Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
     * 
     */
    @Import(name="reAuthenticationInterval")
    private @Nullable Output<Integer> reAuthenticationInterval;

    /**
     * @return Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
     * 
     */
    public Optional<Output<Integer>> reAuthenticationInterval() {
        return Optional.ofNullable(this.reAuthenticationInterval);
    }

    private SwitchAccessPoliciesRadiusArgs() {}

    private SwitchAccessPoliciesRadiusArgs(SwitchAccessPoliciesRadiusArgs $) {
        this.criticalAuth = $.criticalAuth;
        this.failedAuthVlanId = $.failedAuthVlanId;
        this.reAuthenticationInterval = $.reAuthenticationInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchAccessPoliciesRadiusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchAccessPoliciesRadiusArgs $;

        public Builder() {
            $ = new SwitchAccessPoliciesRadiusArgs();
        }

        public Builder(SwitchAccessPoliciesRadiusArgs defaults) {
            $ = new SwitchAccessPoliciesRadiusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param criticalAuth Critical auth settings for when authentication is rejected by the RADIUS server
         * 
         * @return builder
         * 
         */
        public Builder criticalAuth(@Nullable Output<SwitchAccessPoliciesRadiusCriticalAuthArgs> criticalAuth) {
            $.criticalAuth = criticalAuth;
            return this;
        }

        /**
         * @param criticalAuth Critical auth settings for when authentication is rejected by the RADIUS server
         * 
         * @return builder
         * 
         */
        public Builder criticalAuth(SwitchAccessPoliciesRadiusCriticalAuthArgs criticalAuth) {
            return criticalAuth(Output.of(criticalAuth));
        }

        /**
         * @param failedAuthVlanId VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder failedAuthVlanId(@Nullable Output<Integer> failedAuthVlanId) {
            $.failedAuthVlanId = failedAuthVlanId;
            return this;
        }

        /**
         * @param failedAuthVlanId VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder failedAuthVlanId(Integer failedAuthVlanId) {
            return failedAuthVlanId(Output.of(failedAuthVlanId));
        }

        /**
         * @param reAuthenticationInterval Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder reAuthenticationInterval(@Nullable Output<Integer> reAuthenticationInterval) {
            $.reAuthenticationInterval = reAuthenticationInterval;
            return this;
        }

        /**
         * @param reAuthenticationInterval Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
         * 
         * @return builder
         * 
         */
        public Builder reAuthenticationInterval(Integer reAuthenticationInterval) {
            return reAuthenticationInterval(Output.of(reAuthenticationInterval));
        }

        public SwitchAccessPoliciesRadiusArgs build() {
            return $;
        }
    }

}
