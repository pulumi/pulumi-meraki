// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetSmDevicesPerformanceHistoryItemDiskUsage;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSmDevicesPerformanceHistoryItem {
    /**
     * @return The percentage of CPU used as a decimal format.
     * 
     */
    private Double cpuPercentUsed;
    /**
     * @return An object containing disk usage details.
     * 
     */
    private GetSmDevicesPerformanceHistoryItemDiskUsage diskUsage;
    /**
     * @return The active RAM on the device.
     * 
     */
    private Integer memActive;
    /**
     * @return Memory that is not yet in use by the system.
     * 
     */
    private Integer memFree;
    /**
     * @return The inactive RAM on the device.
     * 
     */
    private Integer memInactive;
    /**
     * @return Memory used for core OS functions on the device.
     * 
     */
    private Integer memWired;
    /**
     * @return Network bandwith received.
     * 
     */
    private Integer networkReceived;
    /**
     * @return Network bandwith transmitted.
     * 
     */
    private Integer networkSent;
    /**
     * @return The amount of space being used on the startup disk to swap unused files to and from RAM.
     * 
     */
    private Integer swapUsed;
    /**
     * @return The time at which the performance was measured.
     * 
     */
    private String ts;

    private GetSmDevicesPerformanceHistoryItem() {}
    /**
     * @return The percentage of CPU used as a decimal format.
     * 
     */
    public Double cpuPercentUsed() {
        return this.cpuPercentUsed;
    }
    /**
     * @return An object containing disk usage details.
     * 
     */
    public GetSmDevicesPerformanceHistoryItemDiskUsage diskUsage() {
        return this.diskUsage;
    }
    /**
     * @return The active RAM on the device.
     * 
     */
    public Integer memActive() {
        return this.memActive;
    }
    /**
     * @return Memory that is not yet in use by the system.
     * 
     */
    public Integer memFree() {
        return this.memFree;
    }
    /**
     * @return The inactive RAM on the device.
     * 
     */
    public Integer memInactive() {
        return this.memInactive;
    }
    /**
     * @return Memory used for core OS functions on the device.
     * 
     */
    public Integer memWired() {
        return this.memWired;
    }
    /**
     * @return Network bandwith received.
     * 
     */
    public Integer networkReceived() {
        return this.networkReceived;
    }
    /**
     * @return Network bandwith transmitted.
     * 
     */
    public Integer networkSent() {
        return this.networkSent;
    }
    /**
     * @return The amount of space being used on the startup disk to swap unused files to and from RAM.
     * 
     */
    public Integer swapUsed() {
        return this.swapUsed;
    }
    /**
     * @return The time at which the performance was measured.
     * 
     */
    public String ts() {
        return this.ts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSmDevicesPerformanceHistoryItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double cpuPercentUsed;
        private GetSmDevicesPerformanceHistoryItemDiskUsage diskUsage;
        private Integer memActive;
        private Integer memFree;
        private Integer memInactive;
        private Integer memWired;
        private Integer networkReceived;
        private Integer networkSent;
        private Integer swapUsed;
        private String ts;
        public Builder() {}
        public Builder(GetSmDevicesPerformanceHistoryItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuPercentUsed = defaults.cpuPercentUsed;
    	      this.diskUsage = defaults.diskUsage;
    	      this.memActive = defaults.memActive;
    	      this.memFree = defaults.memFree;
    	      this.memInactive = defaults.memInactive;
    	      this.memWired = defaults.memWired;
    	      this.networkReceived = defaults.networkReceived;
    	      this.networkSent = defaults.networkSent;
    	      this.swapUsed = defaults.swapUsed;
    	      this.ts = defaults.ts;
        }

        @CustomType.Setter
        public Builder cpuPercentUsed(Double cpuPercentUsed) {
            if (cpuPercentUsed == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "cpuPercentUsed");
            }
            this.cpuPercentUsed = cpuPercentUsed;
            return this;
        }
        @CustomType.Setter
        public Builder diskUsage(GetSmDevicesPerformanceHistoryItemDiskUsage diskUsage) {
            if (diskUsage == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "diskUsage");
            }
            this.diskUsage = diskUsage;
            return this;
        }
        @CustomType.Setter
        public Builder memActive(Integer memActive) {
            if (memActive == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "memActive");
            }
            this.memActive = memActive;
            return this;
        }
        @CustomType.Setter
        public Builder memFree(Integer memFree) {
            if (memFree == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "memFree");
            }
            this.memFree = memFree;
            return this;
        }
        @CustomType.Setter
        public Builder memInactive(Integer memInactive) {
            if (memInactive == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "memInactive");
            }
            this.memInactive = memInactive;
            return this;
        }
        @CustomType.Setter
        public Builder memWired(Integer memWired) {
            if (memWired == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "memWired");
            }
            this.memWired = memWired;
            return this;
        }
        @CustomType.Setter
        public Builder networkReceived(Integer networkReceived) {
            if (networkReceived == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "networkReceived");
            }
            this.networkReceived = networkReceived;
            return this;
        }
        @CustomType.Setter
        public Builder networkSent(Integer networkSent) {
            if (networkSent == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "networkSent");
            }
            this.networkSent = networkSent;
            return this;
        }
        @CustomType.Setter
        public Builder swapUsed(Integer swapUsed) {
            if (swapUsed == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "swapUsed");
            }
            this.swapUsed = swapUsed;
            return this;
        }
        @CustomType.Setter
        public Builder ts(String ts) {
            if (ts == null) {
              throw new MissingRequiredPropertyException("GetSmDevicesPerformanceHistoryItem", "ts");
            }
            this.ts = ts;
            return this;
        }
        public GetSmDevicesPerformanceHistoryItem build() {
            final var _resultValue = new GetSmDevicesPerformanceHistoryItem();
            _resultValue.cpuPercentUsed = cpuPercentUsed;
            _resultValue.diskUsage = diskUsage;
            _resultValue.memActive = memActive;
            _resultValue.memFree = memFree;
            _resultValue.memInactive = memInactive;
            _resultValue.memWired = memWired;
            _resultValue.networkReceived = networkReceived;
            _resultValue.networkSent = networkSent;
            _resultValue.swapUsed = swapUsed;
            _resultValue.ts = ts;
            return _resultValue;
        }
    }
}
