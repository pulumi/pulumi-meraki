// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination {
    /**
     * @return CIDR format address (e.g.&#34;192.168.10.1&#34;, which is the same as &#34;192.168.10.1/32&#34;), or &#34;any&#34;. Cannot be used in combination with the &#34;vlan&#34; or &#34;fqdn&#34; property
     * 
     */
    private @Nullable String cidr;
    /**
     * @return FQDN format address. Cannot be used in combination with the &#34;cidr&#34; or &#34;fqdn&#34; property and is currently only available in the &#34;destination&#34; object of the &#34;vpnTrafficUplinkPreference&#34; object. E.g.: &#34;www.google.com&#34;
     * 
     */
    private @Nullable String fqdn;
    /**
     * @return Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the &#34;vlan&#34; property and is currently only available under a template network.
     * 
     */
    private @Nullable Integer host;
    /**
     * @return Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: &#34;L_12345678&#34;.
     * 
     */
    private @Nullable String network;
    /**
     * @return E.g.: &#34;any&#34;, &#34;0&#34; (also means &#34;any&#34;), &#34;8080&#34;, &#34;1-1024&#34;
     * 
     */
    private @Nullable String port;
    /**
     * @return VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the &#34;cidr&#34; or &#34;fqdn&#34; property and is currently only available under a template network.
     * 
     */
    private @Nullable Integer vlan;

    private ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination() {}
    /**
     * @return CIDR format address (e.g.&#34;192.168.10.1&#34;, which is the same as &#34;192.168.10.1/32&#34;), or &#34;any&#34;. Cannot be used in combination with the &#34;vlan&#34; or &#34;fqdn&#34; property
     * 
     */
    public Optional<String> cidr() {
        return Optional.ofNullable(this.cidr);
    }
    /**
     * @return FQDN format address. Cannot be used in combination with the &#34;cidr&#34; or &#34;fqdn&#34; property and is currently only available in the &#34;destination&#34; object of the &#34;vpnTrafficUplinkPreference&#34; object. E.g.: &#34;www.google.com&#34;
     * 
     */
    public Optional<String> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }
    /**
     * @return Host ID in the VLAN. Should not exceed the VLAN subnet capacity. Must be used along with the &#34;vlan&#34; property and is currently only available under a template network.
     * 
     */
    public Optional<Integer> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return Meraki network ID. Currently only available under a template network, and the value should be ID of either same template network, or another template network currently. E.g.: &#34;L_12345678&#34;.
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return E.g.: &#34;any&#34;, &#34;0&#34; (also means &#34;any&#34;), &#34;8080&#34;, &#34;1-1024&#34;
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return VLAN ID of the configured VLAN in the Meraki network. Cannot be used in combination with the &#34;cidr&#34; or &#34;fqdn&#34; property and is currently only available under a template network.
     * 
     */
    public Optional<Integer> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cidr;
        private @Nullable String fqdn;
        private @Nullable Integer host;
        private @Nullable String network;
        private @Nullable String port;
        private @Nullable Integer vlan;
        public Builder() {}
        public Builder(ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.fqdn = defaults.fqdn;
    	      this.host = defaults.host;
    	      this.network = defaults.network;
    	      this.port = defaults.port;
    	      this.vlan = defaults.vlan;
        }

        @CustomType.Setter
        public Builder cidr(@Nullable String cidr) {

            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder fqdn(@Nullable String fqdn) {

            this.fqdn = fqdn;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable Integer host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(@Nullable Integer vlan) {

            this.vlan = vlan;
            return this;
        }
        public ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination build() {
            final var _resultValue = new ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceTrafficFilterValueDestination();
            _resultValue.cidr = cidr;
            _resultValue.fqdn = fqdn;
            _resultValue.host = host;
            _resultValue.network = network;
            _resultValue.port = port;
            _resultValue.vlan = vlan;
            return _resultValue;
        }
    }
}
