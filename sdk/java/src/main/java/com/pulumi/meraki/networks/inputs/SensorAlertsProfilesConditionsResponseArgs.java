// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SensorAlertsProfilesConditionsResponseThresholdArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorAlertsProfilesConditionsResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorAlertsProfilesConditionsResponseArgs Empty = new SensorAlertsProfilesConditionsResponseArgs();

    /**
     * If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<SensorAlertsProfilesConditionsResponseThresholdArgs> threshold;

    /**
     * @return Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
     * 
     */
    public Optional<Output<SensorAlertsProfilesConditionsResponseThresholdArgs>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private SensorAlertsProfilesConditionsResponseArgs() {}

    private SensorAlertsProfilesConditionsResponseArgs(SensorAlertsProfilesConditionsResponseArgs $) {
        this.direction = $.direction;
        this.duration = $.duration;
        this.metric = $.metric;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorAlertsProfilesConditionsResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorAlertsProfilesConditionsResponseArgs $;

        public Builder() {
            $ = new SensorAlertsProfilesConditionsResponseArgs();
        }

        public Builder(SensorAlertsProfilesConditionsResponseArgs defaults) {
            $ = new SensorAlertsProfilesConditionsResponseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction If &#39;above&#39;, an alert will be sent when a sensor reads above the threshold. If &#39;below&#39;, an alert will be sent when a sensor reads below the threshold. Only applicable for temperature, humidity, realPower, apparentPower, powerFactor, voltage, current, and frequency thresholds.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param duration Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, and 8 hours. Default is 0.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param metric The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The type of sensor metric that will be monitored for changes. Available metrics are apparentPower, co2, current, door, frequency, humidity, indoorAirQuality, noise, pm25, powerFactor, realPower, temperature, tvoc, upstreamPower, voltage, and water.
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<SensorAlertsProfilesConditionsResponseThresholdArgs> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition&#39;s &#39;metric&#39; value.
         * 
         * @return builder
         * 
         */
        public Builder threshold(SensorAlertsProfilesConditionsResponseThresholdArgs threshold) {
            return threshold(Output.of(threshold));
        }

        public SensorAlertsProfilesConditionsResponseArgs build() {
            return $;
        }
    }

}
