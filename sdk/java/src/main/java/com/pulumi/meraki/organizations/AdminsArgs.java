// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.organizations.inputs.AdminsNetworkArgs;
import com.pulumi.meraki.organizations.inputs.AdminsTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdminsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdminsArgs Empty = new AdminsArgs();

    /**
     * adminId path parameter. Admin ID
     * 
     */
    @Import(name="adminId")
    private @Nullable Output<String> adminId;

    /**
     * @return adminId path parameter. Admin ID
     * 
     */
    public Optional<Output<String>> adminId() {
        return Optional.ofNullable(this.adminId);
    }

    /**
     * Admin&#39;s authentication method
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable Output<String> authenticationMethod;

    /**
     * @return Admin&#39;s authentication method
     * 
     */
    public Optional<Output<String>> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Admin&#39;s email address
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Admin&#39;s email address
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Admin&#39;s username
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Admin&#39;s username
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Admin network access information
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<AdminsNetworkArgs>> networks;

    /**
     * @return Admin network access information
     * 
     */
    public Optional<Output<List<AdminsNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Admin&#39;s level of access to the organization
     * 
     */
    @Import(name="orgAccess")
    private @Nullable Output<String> orgAccess;

    /**
     * @return Admin&#39;s level of access to the organization
     * 
     */
    public Optional<Output<String>> orgAccess() {
        return Optional.ofNullable(this.orgAccess);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Admin tag information
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AdminsTagArgs>> tags;

    /**
     * @return Admin tag information
     * 
     */
    public Optional<Output<List<AdminsTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AdminsArgs() {}

    private AdminsArgs(AdminsArgs $) {
        this.adminId = $.adminId;
        this.authenticationMethod = $.authenticationMethod;
        this.email = $.email;
        this.name = $.name;
        this.networks = $.networks;
        this.orgAccess = $.orgAccess;
        this.organizationId = $.organizationId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdminsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdminsArgs $;

        public Builder() {
            $ = new AdminsArgs();
        }

        public Builder(AdminsArgs defaults) {
            $ = new AdminsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminId adminId path parameter. Admin ID
         * 
         * @return builder
         * 
         */
        public Builder adminId(@Nullable Output<String> adminId) {
            $.adminId = adminId;
            return this;
        }

        /**
         * @param adminId adminId path parameter. Admin ID
         * 
         * @return builder
         * 
         */
        public Builder adminId(String adminId) {
            return adminId(Output.of(adminId));
        }

        /**
         * @param authenticationMethod Admin&#39;s authentication method
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(@Nullable Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod Admin&#39;s authentication method
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param email Admin&#39;s email address
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Admin&#39;s email address
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param name Admin&#39;s username
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Admin&#39;s username
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<AdminsNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(List<AdminsNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Admin network access information
         * 
         * @return builder
         * 
         */
        public Builder networks(AdminsNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param orgAccess Admin&#39;s level of access to the organization
         * 
         * @return builder
         * 
         */
        public Builder orgAccess(@Nullable Output<String> orgAccess) {
            $.orgAccess = orgAccess;
            return this;
        }

        /**
         * @param orgAccess Admin&#39;s level of access to the organization
         * 
         * @return builder
         * 
         */
        public Builder orgAccess(String orgAccess) {
            return orgAccess(Output.of(orgAccess));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AdminsTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AdminsTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Admin tag information
         * 
         * @return builder
         * 
         */
        public Builder tags(AdminsTagArgs... tags) {
            return tags(List.of(tags));
        }

        public AdminsArgs build() {
            if ($.organizationId == null) {
                throw new MissingRequiredPropertyException("AdminsArgs", "organizationId");
            }
            return $;
        }
    }

}
