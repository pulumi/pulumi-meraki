// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.meraki.organizations.outputs.LicensingCotermLicensesMoveParametersLicenseCount;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LicensingCotermLicensesMoveParametersLicense {
    /**
     * @return The counts to move from the license by model type
     * 
     */
    private @Nullable List<LicensingCotermLicensesMoveParametersLicenseCount> counts;
    /**
     * @return The license key to move counts from
     * 
     */
    private @Nullable String key;

    private LicensingCotermLicensesMoveParametersLicense() {}
    /**
     * @return The counts to move from the license by model type
     * 
     */
    public List<LicensingCotermLicensesMoveParametersLicenseCount> counts() {
        return this.counts == null ? List.of() : this.counts;
    }
    /**
     * @return The license key to move counts from
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LicensingCotermLicensesMoveParametersLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LicensingCotermLicensesMoveParametersLicenseCount> counts;
        private @Nullable String key;
        public Builder() {}
        public Builder(LicensingCotermLicensesMoveParametersLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counts = defaults.counts;
    	      this.key = defaults.key;
        }

        @CustomType.Setter
        public Builder counts(@Nullable List<LicensingCotermLicensesMoveParametersLicenseCount> counts) {

            this.counts = counts;
            return this;
        }
        public Builder counts(LicensingCotermLicensesMoveParametersLicenseCount... counts) {
            return counts(List.of(counts));
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        public LicensingCotermLicensesMoveParametersLicense build() {
            final var _resultValue = new LicensingCotermLicensesMoveParametersLicense();
            _resultValue.counts = counts;
            _resultValue.key = key;
            return _resultValue;
        }
    }
}
