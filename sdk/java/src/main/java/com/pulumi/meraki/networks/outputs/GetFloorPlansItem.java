// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemBottomLeftCorner;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemBottomRightCorner;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemCenter;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemDevice;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemTopLeftCorner;
import com.pulumi.meraki.networks.outputs.GetFloorPlansItemTopRightCorner;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFloorPlansItem {
    /**
     * @return The longitude and latitude of the bottom left corner of your floor plan.
     * 
     */
    private GetFloorPlansItemBottomLeftCorner bottomLeftCorner;
    /**
     * @return The longitude and latitude of the bottom right corner of your floor plan.
     * 
     */
    private GetFloorPlansItemBottomRightCorner bottomRightCorner;
    /**
     * @return The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
     * 
     */
    private GetFloorPlansItemCenter center;
    /**
     * @return List of devices for the floorplan
     * 
     */
    private List<GetFloorPlansItemDevice> devices;
    /**
     * @return Floor plan ID
     * 
     */
    private String floorPlanId;
    /**
     * @return The height of your floor plan.
     * 
     */
    private Double height;
    /**
     * @return The format type of the image.
     * 
     */
    private String imageExtension;
    /**
     * @return The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields (&#39;center, &#39;topLeftCorner&#39;, etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
     * 
     */
    private String imageMd5;
    /**
     * @return The url link for the floor plan image.
     * 
     */
    private String imageUrl;
    /**
     * @return The time the image url link will expire.
     * 
     */
    private String imageUrlExpiresAt;
    /**
     * @return The name of your floor plan.
     * 
     */
    private String name;
    /**
     * @return The longitude and latitude of the top left corner of your floor plan.
     * 
     */
    private GetFloorPlansItemTopLeftCorner topLeftCorner;
    /**
     * @return The longitude and latitude of the top right corner of your floor plan.
     * 
     */
    private GetFloorPlansItemTopRightCorner topRightCorner;
    /**
     * @return The width of your floor plan.
     * 
     */
    private Double width;

    private GetFloorPlansItem() {}
    /**
     * @return The longitude and latitude of the bottom left corner of your floor plan.
     * 
     */
    public GetFloorPlansItemBottomLeftCorner bottomLeftCorner() {
        return this.bottomLeftCorner;
    }
    /**
     * @return The longitude and latitude of the bottom right corner of your floor plan.
     * 
     */
    public GetFloorPlansItemBottomRightCorner bottomRightCorner() {
        return this.bottomRightCorner;
    }
    /**
     * @return The longitude and latitude of the center of your floor plan. The &#39;center&#39; or two adjacent corners (e.g. &#39;topLeftCorner&#39; and &#39;bottomLeftCorner&#39;) must be specified. If &#39;center&#39; is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan&#39;s image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan&#39;s aspect ratio.). No two points can have the same latitude, longitude pair.
     * 
     */
    public GetFloorPlansItemCenter center() {
        return this.center;
    }
    /**
     * @return List of devices for the floorplan
     * 
     */
    public List<GetFloorPlansItemDevice> devices() {
        return this.devices;
    }
    /**
     * @return Floor plan ID
     * 
     */
    public String floorPlanId() {
        return this.floorPlanId;
    }
    /**
     * @return The height of your floor plan.
     * 
     */
    public Double height() {
        return this.height;
    }
    /**
     * @return The format type of the image.
     * 
     */
    public String imageExtension() {
        return this.imageExtension;
    }
    /**
     * @return The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields (&#39;center, &#39;topLeftCorner&#39;, etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
     * 
     */
    public String imageMd5() {
        return this.imageMd5;
    }
    /**
     * @return The url link for the floor plan image.
     * 
     */
    public String imageUrl() {
        return this.imageUrl;
    }
    /**
     * @return The time the image url link will expire.
     * 
     */
    public String imageUrlExpiresAt() {
        return this.imageUrlExpiresAt;
    }
    /**
     * @return The name of your floor plan.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The longitude and latitude of the top left corner of your floor plan.
     * 
     */
    public GetFloorPlansItemTopLeftCorner topLeftCorner() {
        return this.topLeftCorner;
    }
    /**
     * @return The longitude and latitude of the top right corner of your floor plan.
     * 
     */
    public GetFloorPlansItemTopRightCorner topRightCorner() {
        return this.topRightCorner;
    }
    /**
     * @return The width of your floor plan.
     * 
     */
    public Double width() {
        return this.width;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFloorPlansItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetFloorPlansItemBottomLeftCorner bottomLeftCorner;
        private GetFloorPlansItemBottomRightCorner bottomRightCorner;
        private GetFloorPlansItemCenter center;
        private List<GetFloorPlansItemDevice> devices;
        private String floorPlanId;
        private Double height;
        private String imageExtension;
        private String imageMd5;
        private String imageUrl;
        private String imageUrlExpiresAt;
        private String name;
        private GetFloorPlansItemTopLeftCorner topLeftCorner;
        private GetFloorPlansItemTopRightCorner topRightCorner;
        private Double width;
        public Builder() {}
        public Builder(GetFloorPlansItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bottomLeftCorner = defaults.bottomLeftCorner;
    	      this.bottomRightCorner = defaults.bottomRightCorner;
    	      this.center = defaults.center;
    	      this.devices = defaults.devices;
    	      this.floorPlanId = defaults.floorPlanId;
    	      this.height = defaults.height;
    	      this.imageExtension = defaults.imageExtension;
    	      this.imageMd5 = defaults.imageMd5;
    	      this.imageUrl = defaults.imageUrl;
    	      this.imageUrlExpiresAt = defaults.imageUrlExpiresAt;
    	      this.name = defaults.name;
    	      this.topLeftCorner = defaults.topLeftCorner;
    	      this.topRightCorner = defaults.topRightCorner;
    	      this.width = defaults.width;
        }

        @CustomType.Setter
        public Builder bottomLeftCorner(GetFloorPlansItemBottomLeftCorner bottomLeftCorner) {
            if (bottomLeftCorner == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "bottomLeftCorner");
            }
            this.bottomLeftCorner = bottomLeftCorner;
            return this;
        }
        @CustomType.Setter
        public Builder bottomRightCorner(GetFloorPlansItemBottomRightCorner bottomRightCorner) {
            if (bottomRightCorner == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "bottomRightCorner");
            }
            this.bottomRightCorner = bottomRightCorner;
            return this;
        }
        @CustomType.Setter
        public Builder center(GetFloorPlansItemCenter center) {
            if (center == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "center");
            }
            this.center = center;
            return this;
        }
        @CustomType.Setter
        public Builder devices(List<GetFloorPlansItemDevice> devices) {
            if (devices == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "devices");
            }
            this.devices = devices;
            return this;
        }
        public Builder devices(GetFloorPlansItemDevice... devices) {
            return devices(List.of(devices));
        }
        @CustomType.Setter
        public Builder floorPlanId(String floorPlanId) {
            if (floorPlanId == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "floorPlanId");
            }
            this.floorPlanId = floorPlanId;
            return this;
        }
        @CustomType.Setter
        public Builder height(Double height) {
            if (height == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "height");
            }
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder imageExtension(String imageExtension) {
            if (imageExtension == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "imageExtension");
            }
            this.imageExtension = imageExtension;
            return this;
        }
        @CustomType.Setter
        public Builder imageMd5(String imageMd5) {
            if (imageMd5 == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "imageMd5");
            }
            this.imageMd5 = imageMd5;
            return this;
        }
        @CustomType.Setter
        public Builder imageUrl(String imageUrl) {
            if (imageUrl == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "imageUrl");
            }
            this.imageUrl = imageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder imageUrlExpiresAt(String imageUrlExpiresAt) {
            if (imageUrlExpiresAt == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "imageUrlExpiresAt");
            }
            this.imageUrlExpiresAt = imageUrlExpiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder topLeftCorner(GetFloorPlansItemTopLeftCorner topLeftCorner) {
            if (topLeftCorner == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "topLeftCorner");
            }
            this.topLeftCorner = topLeftCorner;
            return this;
        }
        @CustomType.Setter
        public Builder topRightCorner(GetFloorPlansItemTopRightCorner topRightCorner) {
            if (topRightCorner == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "topRightCorner");
            }
            this.topRightCorner = topRightCorner;
            return this;
        }
        @CustomType.Setter
        public Builder width(Double width) {
            if (width == null) {
              throw new MissingRequiredPropertyException("GetFloorPlansItem", "width");
            }
            this.width = width;
            return this;
        }
        public GetFloorPlansItem build() {
            final var _resultValue = new GetFloorPlansItem();
            _resultValue.bottomLeftCorner = bottomLeftCorner;
            _resultValue.bottomRightCorner = bottomRightCorner;
            _resultValue.center = center;
            _resultValue.devices = devices;
            _resultValue.floorPlanId = floorPlanId;
            _resultValue.height = height;
            _resultValue.imageExtension = imageExtension;
            _resultValue.imageMd5 = imageMd5;
            _resultValue.imageUrl = imageUrl;
            _resultValue.imageUrlExpiresAt = imageUrlExpiresAt;
            _resultValue.name = name;
            _resultValue.topLeftCorner = topLeftCorner;
            _resultValue.topRightCorner = topRightCorner;
            _resultValue.width = width;
            return _resultValue;
        }
    }
}
