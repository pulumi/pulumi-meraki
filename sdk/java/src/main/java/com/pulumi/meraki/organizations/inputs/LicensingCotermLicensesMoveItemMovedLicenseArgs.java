// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveItemMovedLicenseCountArgs;
import com.pulumi.meraki.organizations.inputs.LicensingCotermLicensesMoveItemMovedLicenseEditionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicensingCotermLicensesMoveItemMovedLicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicensingCotermLicensesMoveItemMovedLicenseArgs Empty = new LicensingCotermLicensesMoveItemMovedLicenseArgs();

    /**
     * When the license was claimed into the organization
     * 
     */
    @Import(name="claimedAt")
    private @Nullable Output<String> claimedAt;

    /**
     * @return When the license was claimed into the organization
     * 
     */
    public Optional<Output<String>> claimedAt() {
        return Optional.ofNullable(this.claimedAt);
    }

    /**
     * The counts of the license by model type
     * 
     */
    @Import(name="counts")
    private @Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseCountArgs>> counts;

    /**
     * @return The counts of the license by model type
     * 
     */
    public Optional<Output<List<LicensingCotermLicensesMoveItemMovedLicenseCountArgs>>> counts() {
        return Optional.ofNullable(this.counts);
    }

    /**
     * The duration (term length) of the license, measured in days
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return The duration (term length) of the license, measured in days
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The editions of the license for each relevant product type
     * 
     */
    @Import(name="editions")
    private @Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseEditionArgs>> editions;

    /**
     * @return The editions of the license for each relevant product type
     * 
     */
    public Optional<Output<List<LicensingCotermLicensesMoveItemMovedLicenseEditionArgs>>> editions() {
        return Optional.ofNullable(this.editions);
    }

    /**
     * Flag to indicate if the license is expired
     * 
     */
    @Import(name="expired")
    private @Nullable Output<Boolean> expired;

    /**
     * @return Flag to indicate if the license is expired
     * 
     */
    public Optional<Output<Boolean>> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * Flag to indicated that the license is invalidated
     * 
     */
    @Import(name="invalidated")
    private @Nullable Output<Boolean> invalidated;

    /**
     * @return Flag to indicated that the license is invalidated
     * 
     */
    public Optional<Output<Boolean>> invalidated() {
        return Optional.ofNullable(this.invalidated);
    }

    /**
     * When the license was invalidated. Will be null for active licenses
     * 
     */
    @Import(name="invalidatedAt")
    private @Nullable Output<String> invalidatedAt;

    /**
     * @return When the license was invalidated. Will be null for active licenses
     * 
     */
    public Optional<Output<String>> invalidatedAt() {
        return Optional.ofNullable(this.invalidatedAt);
    }

    /**
     * The key of the license
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The key of the license
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The operation mode of the license when it was claimed
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The operation mode of the license when it was claimed
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The ID of the organization that the license is claimed in
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return The ID of the organization that the license is claimed in
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    @Import(name="startedAt")
    private @Nullable Output<String> startedAt;

    /**
     * @return When the license&#39;s term began (approximately the date when the license was created)
     * 
     */
    public Optional<Output<String>> startedAt() {
        return Optional.ofNullable(this.startedAt);
    }

    private LicensingCotermLicensesMoveItemMovedLicenseArgs() {}

    private LicensingCotermLicensesMoveItemMovedLicenseArgs(LicensingCotermLicensesMoveItemMovedLicenseArgs $) {
        this.claimedAt = $.claimedAt;
        this.counts = $.counts;
        this.duration = $.duration;
        this.editions = $.editions;
        this.expired = $.expired;
        this.invalidated = $.invalidated;
        this.invalidatedAt = $.invalidatedAt;
        this.key = $.key;
        this.mode = $.mode;
        this.organizationId = $.organizationId;
        this.startedAt = $.startedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicensingCotermLicensesMoveItemMovedLicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicensingCotermLicensesMoveItemMovedLicenseArgs $;

        public Builder() {
            $ = new LicensingCotermLicensesMoveItemMovedLicenseArgs();
        }

        public Builder(LicensingCotermLicensesMoveItemMovedLicenseArgs defaults) {
            $ = new LicensingCotermLicensesMoveItemMovedLicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param claimedAt When the license was claimed into the organization
         * 
         * @return builder
         * 
         */
        public Builder claimedAt(@Nullable Output<String> claimedAt) {
            $.claimedAt = claimedAt;
            return this;
        }

        /**
         * @param claimedAt When the license was claimed into the organization
         * 
         * @return builder
         * 
         */
        public Builder claimedAt(String claimedAt) {
            return claimedAt(Output.of(claimedAt));
        }

        /**
         * @param counts The counts of the license by model type
         * 
         * @return builder
         * 
         */
        public Builder counts(@Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseCountArgs>> counts) {
            $.counts = counts;
            return this;
        }

        /**
         * @param counts The counts of the license by model type
         * 
         * @return builder
         * 
         */
        public Builder counts(List<LicensingCotermLicensesMoveItemMovedLicenseCountArgs> counts) {
            return counts(Output.of(counts));
        }

        /**
         * @param counts The counts of the license by model type
         * 
         * @return builder
         * 
         */
        public Builder counts(LicensingCotermLicensesMoveItemMovedLicenseCountArgs... counts) {
            return counts(List.of(counts));
        }

        /**
         * @param duration The duration (term length) of the license, measured in days
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration (term length) of the license, measured in days
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param editions The editions of the license for each relevant product type
         * 
         * @return builder
         * 
         */
        public Builder editions(@Nullable Output<List<LicensingCotermLicensesMoveItemMovedLicenseEditionArgs>> editions) {
            $.editions = editions;
            return this;
        }

        /**
         * @param editions The editions of the license for each relevant product type
         * 
         * @return builder
         * 
         */
        public Builder editions(List<LicensingCotermLicensesMoveItemMovedLicenseEditionArgs> editions) {
            return editions(Output.of(editions));
        }

        /**
         * @param editions The editions of the license for each relevant product type
         * 
         * @return builder
         * 
         */
        public Builder editions(LicensingCotermLicensesMoveItemMovedLicenseEditionArgs... editions) {
            return editions(List.of(editions));
        }

        /**
         * @param expired Flag to indicate if the license is expired
         * 
         * @return builder
         * 
         */
        public Builder expired(@Nullable Output<Boolean> expired) {
            $.expired = expired;
            return this;
        }

        /**
         * @param expired Flag to indicate if the license is expired
         * 
         * @return builder
         * 
         */
        public Builder expired(Boolean expired) {
            return expired(Output.of(expired));
        }

        /**
         * @param invalidated Flag to indicated that the license is invalidated
         * 
         * @return builder
         * 
         */
        public Builder invalidated(@Nullable Output<Boolean> invalidated) {
            $.invalidated = invalidated;
            return this;
        }

        /**
         * @param invalidated Flag to indicated that the license is invalidated
         * 
         * @return builder
         * 
         */
        public Builder invalidated(Boolean invalidated) {
            return invalidated(Output.of(invalidated));
        }

        /**
         * @param invalidatedAt When the license was invalidated. Will be null for active licenses
         * 
         * @return builder
         * 
         */
        public Builder invalidatedAt(@Nullable Output<String> invalidatedAt) {
            $.invalidatedAt = invalidatedAt;
            return this;
        }

        /**
         * @param invalidatedAt When the license was invalidated. Will be null for active licenses
         * 
         * @return builder
         * 
         */
        public Builder invalidatedAt(String invalidatedAt) {
            return invalidatedAt(Output.of(invalidatedAt));
        }

        /**
         * @param key The key of the license
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The key of the license
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param mode The operation mode of the license when it was claimed
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The operation mode of the license when it was claimed
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param organizationId The ID of the organization that the license is claimed in
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId The ID of the organization that the license is claimed in
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param startedAt When the license&#39;s term began (approximately the date when the license was created)
         * 
         * @return builder
         * 
         */
        public Builder startedAt(@Nullable Output<String> startedAt) {
            $.startedAt = startedAt;
            return this;
        }

        /**
         * @param startedAt When the license&#39;s term began (approximately the date when the license was created)
         * 
         * @return builder
         * 
         */
        public Builder startedAt(String startedAt) {
            return startedAt(Output.of(startedAt));
        }

        public LicensingCotermLicensesMoveItemMovedLicenseArgs build() {
            return $;
        }
    }

}
