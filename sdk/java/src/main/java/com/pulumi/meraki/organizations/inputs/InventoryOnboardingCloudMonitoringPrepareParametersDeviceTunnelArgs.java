// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs Empty = new InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs();

    /**
     * Name of the configured TLS certificate
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return Name of the configured TLS certificate
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * Number of the vlan expected to be used to connect to the cloud
     * 
     */
    @Import(name="localInterface")
    private @Nullable Output<Integer> localInterface;

    /**
     * @return Number of the vlan expected to be used to connect to the cloud
     * 
     */
    public Optional<Output<Integer>> localInterface() {
        return Optional.ofNullable(this.localInterface);
    }

    /**
     * Number of the configured Loopback Interface used for TLS overlay
     * 
     */
    @Import(name="loopbackNumber")
    private @Nullable Output<Integer> loopbackNumber;

    /**
     * @return Number of the configured Loopback Interface used for TLS overlay
     * 
     */
    public Optional<Output<Integer>> loopbackNumber() {
        return Optional.ofNullable(this.loopbackNumber);
    }

    /**
     * Name of the configured TLS tunnel
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the configured TLS tunnel
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs() {}

    private InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs(InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs $) {
        this.certificateName = $.certificateName;
        this.localInterface = $.localInterface;
        this.loopbackNumber = $.loopbackNumber;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs $;

        public Builder() {
            $ = new InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs();
        }

        public Builder(InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs defaults) {
            $ = new InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateName Name of the configured TLS certificate
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName Name of the configured TLS certificate
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param localInterface Number of the vlan expected to be used to connect to the cloud
         * 
         * @return builder
         * 
         */
        public Builder localInterface(@Nullable Output<Integer> localInterface) {
            $.localInterface = localInterface;
            return this;
        }

        /**
         * @param localInterface Number of the vlan expected to be used to connect to the cloud
         * 
         * @return builder
         * 
         */
        public Builder localInterface(Integer localInterface) {
            return localInterface(Output.of(localInterface));
        }

        /**
         * @param loopbackNumber Number of the configured Loopback Interface used for TLS overlay
         * 
         * @return builder
         * 
         */
        public Builder loopbackNumber(@Nullable Output<Integer> loopbackNumber) {
            $.loopbackNumber = loopbackNumber;
            return this;
        }

        /**
         * @param loopbackNumber Number of the configured Loopback Interface used for TLS overlay
         * 
         * @return builder
         * 
         */
        public Builder loopbackNumber(Integer loopbackNumber) {
            return loopbackNumber(Output.of(loopbackNumber));
        }

        /**
         * @param name Name of the configured TLS tunnel
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the configured TLS tunnel
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public InventoryOnboardingCloudMonitoringPrepareParametersDeviceTunnelArgs build() {
            return $;
        }
    }

}
