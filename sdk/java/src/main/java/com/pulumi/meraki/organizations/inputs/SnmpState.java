// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnmpState extends com.pulumi.resources.ResourceArgs {

    public static final SnmpState Empty = new SnmpState();

    /**
     * The hostname of the SNMP server.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname of the SNMP server.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The list of IPv4 addresses that are allowed to access the SNMP server.
     * 
     */
    @Import(name="peerIps")
    private @Nullable Output<List<String>> peerIps;

    /**
     * @return The list of IPv4 addresses that are allowed to access the SNMP server.
     * 
     */
    public Optional<Output<List<String>>> peerIps() {
        return Optional.ofNullable(this.peerIps);
    }

    /**
     * The port of the SNMP server.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port of the SNMP server.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The community string for SNMP version 2c, if enabled.
     * 
     */
    @Import(name="v2CommunityString")
    private @Nullable Output<String> v2CommunityString;

    /**
     * @return The community string for SNMP version 2c, if enabled.
     * 
     */
    public Optional<Output<String>> v2CommunityString() {
        return Optional.ofNullable(this.v2CommunityString);
    }

    /**
     * Boolean indicating whether SNMP version 2c is enabled for the organization.
     * 
     */
    @Import(name="v2cEnabled")
    private @Nullable Output<Boolean> v2cEnabled;

    /**
     * @return Boolean indicating whether SNMP version 2c is enabled for the organization.
     * 
     */
    public Optional<Output<Boolean>> v2cEnabled() {
        return Optional.ofNullable(this.v2cEnabled);
    }

    /**
     * The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
     * 
     */
    @Import(name="v3AuthMode")
    private @Nullable Output<String> v3AuthMode;

    /**
     * @return The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
     * 
     */
    public Optional<Output<String>> v3AuthMode() {
        return Optional.ofNullable(this.v3AuthMode);
    }

    /**
     * The SNMP version 3 authentication password. Must be at least 8 characters if specified.
     * 
     */
    @Import(name="v3AuthPass")
    private @Nullable Output<String> v3AuthPass;

    /**
     * @return The SNMP version 3 authentication password. Must be at least 8 characters if specified.
     * 
     */
    public Optional<Output<String>> v3AuthPass() {
        return Optional.ofNullable(this.v3AuthPass);
    }

    /**
     * Boolean indicating whether SNMP version 3 is enabled for the organization.
     * 
     */
    @Import(name="v3Enabled")
    private @Nullable Output<Boolean> v3Enabled;

    /**
     * @return Boolean indicating whether SNMP version 3 is enabled for the organization.
     * 
     */
    public Optional<Output<Boolean>> v3Enabled() {
        return Optional.ofNullable(this.v3Enabled);
    }

    /**
     * The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
     * 
     */
    @Import(name="v3PrivMode")
    private @Nullable Output<String> v3PrivMode;

    /**
     * @return The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
     * 
     */
    public Optional<Output<String>> v3PrivMode() {
        return Optional.ofNullable(this.v3PrivMode);
    }

    /**
     * The SNMP version 3 privacy password. Must be at least 8 characters if specified.
     * 
     */
    @Import(name="v3PrivPass")
    private @Nullable Output<String> v3PrivPass;

    /**
     * @return The SNMP version 3 privacy password. Must be at least 8 characters if specified.
     * 
     */
    public Optional<Output<String>> v3PrivPass() {
        return Optional.ofNullable(this.v3PrivPass);
    }

    /**
     * The user for SNMP version 3, if enabled.
     * 
     */
    @Import(name="v3User")
    private @Nullable Output<String> v3User;

    /**
     * @return The user for SNMP version 3, if enabled.
     * 
     */
    public Optional<Output<String>> v3User() {
        return Optional.ofNullable(this.v3User);
    }

    private SnmpState() {}

    private SnmpState(SnmpState $) {
        this.hostname = $.hostname;
        this.organizationId = $.organizationId;
        this.peerIps = $.peerIps;
        this.port = $.port;
        this.v2CommunityString = $.v2CommunityString;
        this.v2cEnabled = $.v2cEnabled;
        this.v3AuthMode = $.v3AuthMode;
        this.v3AuthPass = $.v3AuthPass;
        this.v3Enabled = $.v3Enabled;
        this.v3PrivMode = $.v3PrivMode;
        this.v3PrivPass = $.v3PrivPass;
        this.v3User = $.v3User;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnmpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnmpState $;

        public Builder() {
            $ = new SnmpState();
        }

        public Builder(SnmpState defaults) {
            $ = new SnmpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname The hostname of the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname of the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param peerIps The list of IPv4 addresses that are allowed to access the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder peerIps(@Nullable Output<List<String>> peerIps) {
            $.peerIps = peerIps;
            return this;
        }

        /**
         * @param peerIps The list of IPv4 addresses that are allowed to access the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder peerIps(List<String> peerIps) {
            return peerIps(Output.of(peerIps));
        }

        /**
         * @param peerIps The list of IPv4 addresses that are allowed to access the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder peerIps(String... peerIps) {
            return peerIps(List.of(peerIps));
        }

        /**
         * @param port The port of the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port of the SNMP server.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param v2CommunityString The community string for SNMP version 2c, if enabled.
         * 
         * @return builder
         * 
         */
        public Builder v2CommunityString(@Nullable Output<String> v2CommunityString) {
            $.v2CommunityString = v2CommunityString;
            return this;
        }

        /**
         * @param v2CommunityString The community string for SNMP version 2c, if enabled.
         * 
         * @return builder
         * 
         */
        public Builder v2CommunityString(String v2CommunityString) {
            return v2CommunityString(Output.of(v2CommunityString));
        }

        /**
         * @param v2cEnabled Boolean indicating whether SNMP version 2c is enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder v2cEnabled(@Nullable Output<Boolean> v2cEnabled) {
            $.v2cEnabled = v2cEnabled;
            return this;
        }

        /**
         * @param v2cEnabled Boolean indicating whether SNMP version 2c is enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder v2cEnabled(Boolean v2cEnabled) {
            return v2cEnabled(Output.of(v2cEnabled));
        }

        /**
         * @param v3AuthMode The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
         * 
         * @return builder
         * 
         */
        public Builder v3AuthMode(@Nullable Output<String> v3AuthMode) {
            $.v3AuthMode = v3AuthMode;
            return this;
        }

        /**
         * @param v3AuthMode The SNMP version 3 authentication mode. Can be either &#39;MD5&#39; or &#39;SHA&#39;.
         * 
         * @return builder
         * 
         */
        public Builder v3AuthMode(String v3AuthMode) {
            return v3AuthMode(Output.of(v3AuthMode));
        }

        /**
         * @param v3AuthPass The SNMP version 3 authentication password. Must be at least 8 characters if specified.
         * 
         * @return builder
         * 
         */
        public Builder v3AuthPass(@Nullable Output<String> v3AuthPass) {
            $.v3AuthPass = v3AuthPass;
            return this;
        }

        /**
         * @param v3AuthPass The SNMP version 3 authentication password. Must be at least 8 characters if specified.
         * 
         * @return builder
         * 
         */
        public Builder v3AuthPass(String v3AuthPass) {
            return v3AuthPass(Output.of(v3AuthPass));
        }

        /**
         * @param v3Enabled Boolean indicating whether SNMP version 3 is enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder v3Enabled(@Nullable Output<Boolean> v3Enabled) {
            $.v3Enabled = v3Enabled;
            return this;
        }

        /**
         * @param v3Enabled Boolean indicating whether SNMP version 3 is enabled for the organization.
         * 
         * @return builder
         * 
         */
        public Builder v3Enabled(Boolean v3Enabled) {
            return v3Enabled(Output.of(v3Enabled));
        }

        /**
         * @param v3PrivMode The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
         * 
         * @return builder
         * 
         */
        public Builder v3PrivMode(@Nullable Output<String> v3PrivMode) {
            $.v3PrivMode = v3PrivMode;
            return this;
        }

        /**
         * @param v3PrivMode The SNMP version 3 privacy mode. Can be either &#39;DES&#39; or &#39;AES128&#39;.
         * 
         * @return builder
         * 
         */
        public Builder v3PrivMode(String v3PrivMode) {
            return v3PrivMode(Output.of(v3PrivMode));
        }

        /**
         * @param v3PrivPass The SNMP version 3 privacy password. Must be at least 8 characters if specified.
         * 
         * @return builder
         * 
         */
        public Builder v3PrivPass(@Nullable Output<String> v3PrivPass) {
            $.v3PrivPass = v3PrivPass;
            return this;
        }

        /**
         * @param v3PrivPass The SNMP version 3 privacy password. Must be at least 8 characters if specified.
         * 
         * @return builder
         * 
         */
        public Builder v3PrivPass(String v3PrivPass) {
            return v3PrivPass(Output.of(v3PrivPass));
        }

        /**
         * @param v3User The user for SNMP version 3, if enabled.
         * 
         * @return builder
         * 
         */
        public Builder v3User(@Nullable Output<String> v3User) {
            $.v3User = v3User;
            return this;
        }

        /**
         * @param v3User The user for SNMP version 3, if enabled.
         * 
         * @return builder
         * 
         */
        public Builder v3User(String v3User) {
            return v3User(Output.of(v3User));
        }

        public SnmpState build() {
            return $;
        }
    }

}
