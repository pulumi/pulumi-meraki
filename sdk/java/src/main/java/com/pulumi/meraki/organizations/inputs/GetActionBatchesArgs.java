// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.organizations.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetActionBatchesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetActionBatchesArgs Empty = new GetActionBatchesArgs();

    /**
     * actionBatchId path parameter. Action batch ID
     * 
     */
    @Import(name="actionBatchId")
    private @Nullable Output<String> actionBatchId;

    /**
     * @return actionBatchId path parameter. Action batch ID
     * 
     */
    public Optional<Output<String>> actionBatchId() {
        return Optional.ofNullable(this.actionBatchId);
    }

    /**
     * organizationId path parameter. Organization ID
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return organizationId path parameter. Organization ID
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetActionBatchesArgs() {}

    private GetActionBatchesArgs(GetActionBatchesArgs $) {
        this.actionBatchId = $.actionBatchId;
        this.organizationId = $.organizationId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetActionBatchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetActionBatchesArgs $;

        public Builder() {
            $ = new GetActionBatchesArgs();
        }

        public Builder(GetActionBatchesArgs defaults) {
            $ = new GetActionBatchesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionBatchId actionBatchId path parameter. Action batch ID
         * 
         * @return builder
         * 
         */
        public Builder actionBatchId(@Nullable Output<String> actionBatchId) {
            $.actionBatchId = actionBatchId;
            return this;
        }

        /**
         * @param actionBatchId actionBatchId path parameter. Action batch ID
         * 
         * @return builder
         * 
         */
        public Builder actionBatchId(String actionBatchId) {
            return actionBatchId(Output.of(actionBatchId));
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId organizationId path parameter. Organization ID
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param status status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetActionBatchesArgs build() {
            return $;
        }
    }

}
