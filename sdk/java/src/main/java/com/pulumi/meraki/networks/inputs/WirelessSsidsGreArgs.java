// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.WirelessSsidsGreConcentratorArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessSsidsGreArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessSsidsGreArgs Empty = new WirelessSsidsGreArgs();

    /**
     * The EoGRE concentrator&#39;s settings
     * 
     */
    @Import(name="concentrator")
    private @Nullable Output<WirelessSsidsGreConcentratorArgs> concentrator;

    /**
     * @return The EoGRE concentrator&#39;s settings
     * 
     */
    public Optional<Output<WirelessSsidsGreConcentratorArgs>> concentrator() {
        return Optional.ofNullable(this.concentrator);
    }

    /**
     * Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.
     * 
     */
    @Import(name="key")
    private @Nullable Output<Integer> key;

    /**
     * @return Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.
     * 
     */
    public Optional<Output<Integer>> key() {
        return Optional.ofNullable(this.key);
    }

    private WirelessSsidsGreArgs() {}

    private WirelessSsidsGreArgs(WirelessSsidsGreArgs $) {
        this.concentrator = $.concentrator;
        this.key = $.key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessSsidsGreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessSsidsGreArgs $;

        public Builder() {
            $ = new WirelessSsidsGreArgs();
        }

        public Builder(WirelessSsidsGreArgs defaults) {
            $ = new WirelessSsidsGreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param concentrator The EoGRE concentrator&#39;s settings
         * 
         * @return builder
         * 
         */
        public Builder concentrator(@Nullable Output<WirelessSsidsGreConcentratorArgs> concentrator) {
            $.concentrator = concentrator;
            return this;
        }

        /**
         * @param concentrator The EoGRE concentrator&#39;s settings
         * 
         * @return builder
         * 
         */
        public Builder concentrator(WirelessSsidsGreConcentratorArgs concentrator) {
            return concentrator(Output.of(concentrator));
        }

        /**
         * @param key Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<Integer> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Optional numerical identifier that will add the GRE key field to the GRE header. Used to identify an individual traffic flow within a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder key(Integer key) {
            return key(Output.of(key));
        }

        public WirelessSsidsGreArgs build() {
            return $;
        }
    }

}
