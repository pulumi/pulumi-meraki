// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.meraki.networks.inputs.SwitchDhcpServerPolicyArpInspectionTrustedServersIpv4Args;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchDhcpServerPolicyArpInspectionTrustedServersArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchDhcpServerPolicyArpInspectionTrustedServersArgs Empty = new SwitchDhcpServerPolicyArpInspectionTrustedServersArgs();

    /**
     * IPv4 attributes of the trusted server.
     * 
     */
    @Import(name="ipv4")
    private @Nullable Output<SwitchDhcpServerPolicyArpInspectionTrustedServersIpv4Args> ipv4;

    /**
     * @return IPv4 attributes of the trusted server.
     * 
     */
    public Optional<Output<SwitchDhcpServerPolicyArpInspectionTrustedServersIpv4Args>> ipv4() {
        return Optional.ofNullable(this.ipv4);
    }

    /**
     * Mac address of the trusted server.
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return Mac address of the trusted server.
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * ID of the trusted server.
     * 
     */
    @Import(name="trustedServerId")
    private @Nullable Output<String> trustedServerId;

    /**
     * @return ID of the trusted server.
     * 
     */
    public Optional<Output<String>> trustedServerId() {
        return Optional.ofNullable(this.trustedServerId);
    }

    /**
     * Vlan ID of the trusted server.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return Vlan ID of the trusted server.
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private SwitchDhcpServerPolicyArpInspectionTrustedServersArgs() {}

    private SwitchDhcpServerPolicyArpInspectionTrustedServersArgs(SwitchDhcpServerPolicyArpInspectionTrustedServersArgs $) {
        this.ipv4 = $.ipv4;
        this.mac = $.mac;
        this.networkId = $.networkId;
        this.trustedServerId = $.trustedServerId;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchDhcpServerPolicyArpInspectionTrustedServersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchDhcpServerPolicyArpInspectionTrustedServersArgs $;

        public Builder() {
            $ = new SwitchDhcpServerPolicyArpInspectionTrustedServersArgs();
        }

        public Builder(SwitchDhcpServerPolicyArpInspectionTrustedServersArgs defaults) {
            $ = new SwitchDhcpServerPolicyArpInspectionTrustedServersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4 IPv4 attributes of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(@Nullable Output<SwitchDhcpServerPolicyArpInspectionTrustedServersIpv4Args> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 IPv4 attributes of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(SwitchDhcpServerPolicyArpInspectionTrustedServersIpv4Args ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param mac Mac address of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac Mac address of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param trustedServerId ID of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder trustedServerId(@Nullable Output<String> trustedServerId) {
            $.trustedServerId = trustedServerId;
            return this;
        }

        /**
         * @param trustedServerId ID of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder trustedServerId(String trustedServerId) {
            return trustedServerId(Output.of(trustedServerId));
        }

        /**
         * @param vlan Vlan ID of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan Vlan ID of the trusted server.
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        public SwitchDhcpServerPolicyArpInspectionTrustedServersArgs build() {
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("SwitchDhcpServerPolicyArpInspectionTrustedServersArgs", "networkId");
            }
            return $;
        }
    }

}
