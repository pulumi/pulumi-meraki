// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.meraki.networks.inputs.SwitchSettingsMacBlocklistArgs;
import com.pulumi.meraki.networks.inputs.SwitchSettingsPowerExceptionArgs;
import com.pulumi.meraki.networks.inputs.SwitchSettingsUplinkClientSamplingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final SwitchSettingsState Empty = new SwitchSettingsState();

    /**
     * MAC blocklist
     * 
     */
    @Import(name="macBlocklist")
    private @Nullable Output<SwitchSettingsMacBlocklistArgs> macBlocklist;

    /**
     * @return MAC blocklist
     * 
     */
    public Optional<Output<SwitchSettingsMacBlocklistArgs>> macBlocklist() {
        return Optional.ofNullable(this.macBlocklist);
    }

    /**
     * networkId path parameter. Network ID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return networkId path parameter. Network ID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Exceptions on a per switch basis to &#34;useCombinedPower&#34;
     * 
     */
    @Import(name="powerExceptions")
    private @Nullable Output<List<SwitchSettingsPowerExceptionArgs>> powerExceptions;

    /**
     * @return Exceptions on a per switch basis to &#34;useCombinedPower&#34;
     * 
     */
    public Optional<Output<List<SwitchSettingsPowerExceptionArgs>>> powerExceptions() {
        return Optional.ofNullable(this.powerExceptions);
    }

    /**
     * Uplink client sampling
     * 
     */
    @Import(name="uplinkClientSampling")
    private @Nullable Output<SwitchSettingsUplinkClientSamplingArgs> uplinkClientSampling;

    /**
     * @return Uplink client sampling
     * 
     */
    public Optional<Output<SwitchSettingsUplinkClientSamplingArgs>> uplinkClientSampling() {
        return Optional.ofNullable(this.uplinkClientSampling);
    }

    /**
     * The use Combined Power as the default behavior of secondary power supplies on supported devices.
     * 
     */
    @Import(name="useCombinedPower")
    private @Nullable Output<Boolean> useCombinedPower;

    /**
     * @return The use Combined Power as the default behavior of secondary power supplies on supported devices.
     * 
     */
    public Optional<Output<Boolean>> useCombinedPower() {
        return Optional.ofNullable(this.useCombinedPower);
    }

    /**
     * Management VLAN
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return Management VLAN
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    private SwitchSettingsState() {}

    private SwitchSettingsState(SwitchSettingsState $) {
        this.macBlocklist = $.macBlocklist;
        this.networkId = $.networkId;
        this.powerExceptions = $.powerExceptions;
        this.uplinkClientSampling = $.uplinkClientSampling;
        this.useCombinedPower = $.useCombinedPower;
        this.vlan = $.vlan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchSettingsState $;

        public Builder() {
            $ = new SwitchSettingsState();
        }

        public Builder(SwitchSettingsState defaults) {
            $ = new SwitchSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param macBlocklist MAC blocklist
         * 
         * @return builder
         * 
         */
        public Builder macBlocklist(@Nullable Output<SwitchSettingsMacBlocklistArgs> macBlocklist) {
            $.macBlocklist = macBlocklist;
            return this;
        }

        /**
         * @param macBlocklist MAC blocklist
         * 
         * @return builder
         * 
         */
        public Builder macBlocklist(SwitchSettingsMacBlocklistArgs macBlocklist) {
            return macBlocklist(Output.of(macBlocklist));
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId networkId path parameter. Network ID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param powerExceptions Exceptions on a per switch basis to &#34;useCombinedPower&#34;
         * 
         * @return builder
         * 
         */
        public Builder powerExceptions(@Nullable Output<List<SwitchSettingsPowerExceptionArgs>> powerExceptions) {
            $.powerExceptions = powerExceptions;
            return this;
        }

        /**
         * @param powerExceptions Exceptions on a per switch basis to &#34;useCombinedPower&#34;
         * 
         * @return builder
         * 
         */
        public Builder powerExceptions(List<SwitchSettingsPowerExceptionArgs> powerExceptions) {
            return powerExceptions(Output.of(powerExceptions));
        }

        /**
         * @param powerExceptions Exceptions on a per switch basis to &#34;useCombinedPower&#34;
         * 
         * @return builder
         * 
         */
        public Builder powerExceptions(SwitchSettingsPowerExceptionArgs... powerExceptions) {
            return powerExceptions(List.of(powerExceptions));
        }

        /**
         * @param uplinkClientSampling Uplink client sampling
         * 
         * @return builder
         * 
         */
        public Builder uplinkClientSampling(@Nullable Output<SwitchSettingsUplinkClientSamplingArgs> uplinkClientSampling) {
            $.uplinkClientSampling = uplinkClientSampling;
            return this;
        }

        /**
         * @param uplinkClientSampling Uplink client sampling
         * 
         * @return builder
         * 
         */
        public Builder uplinkClientSampling(SwitchSettingsUplinkClientSamplingArgs uplinkClientSampling) {
            return uplinkClientSampling(Output.of(uplinkClientSampling));
        }

        /**
         * @param useCombinedPower The use Combined Power as the default behavior of secondary power supplies on supported devices.
         * 
         * @return builder
         * 
         */
        public Builder useCombinedPower(@Nullable Output<Boolean> useCombinedPower) {
            $.useCombinedPower = useCombinedPower;
            return this;
        }

        /**
         * @param useCombinedPower The use Combined Power as the default behavior of secondary power supplies on supported devices.
         * 
         * @return builder
         * 
         */
        public Builder useCombinedPower(Boolean useCombinedPower) {
            return useCombinedPower(Output.of(useCombinedPower));
        }

        /**
         * @param vlan Management VLAN
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan Management VLAN
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        public SwitchSettingsState build() {
            return $;
        }
    }

}
