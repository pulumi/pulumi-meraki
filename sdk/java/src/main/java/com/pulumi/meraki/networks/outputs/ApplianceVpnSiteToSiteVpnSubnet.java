// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.networks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplianceVpnSiteToSiteVpnSubnet {
    /**
     * @return The CIDR notation subnet used within the VPN
     * 
     */
    private @Nullable String localSubnet;
    /**
     * @return Indicates the presence of the subnet in the VPN
     * 
     */
    private @Nullable Boolean useVpn;

    private ApplianceVpnSiteToSiteVpnSubnet() {}
    /**
     * @return The CIDR notation subnet used within the VPN
     * 
     */
    public Optional<String> localSubnet() {
        return Optional.ofNullable(this.localSubnet);
    }
    /**
     * @return Indicates the presence of the subnet in the VPN
     * 
     */
    public Optional<Boolean> useVpn() {
        return Optional.ofNullable(this.useVpn);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplianceVpnSiteToSiteVpnSubnet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String localSubnet;
        private @Nullable Boolean useVpn;
        public Builder() {}
        public Builder(ApplianceVpnSiteToSiteVpnSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localSubnet = defaults.localSubnet;
    	      this.useVpn = defaults.useVpn;
        }

        @CustomType.Setter
        public Builder localSubnet(@Nullable String localSubnet) {

            this.localSubnet = localSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder useVpn(@Nullable Boolean useVpn) {

            this.useVpn = useVpn;
            return this;
        }
        public ApplianceVpnSiteToSiteVpnSubnet build() {
            final var _resultValue = new ApplianceVpnSiteToSiteVpnSubnet();
            _resultValue.localSubnet = localSubnet;
            _resultValue.useVpn = useVpn;
            return _resultValue;
        }
    }
}
