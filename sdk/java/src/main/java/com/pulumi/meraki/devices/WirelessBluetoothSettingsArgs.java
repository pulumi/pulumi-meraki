// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.meraki.devices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WirelessBluetoothSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WirelessBluetoothSettingsArgs Empty = new WirelessBluetoothSettingsArgs();

    /**
     * Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    @Import(name="major")
    private @Nullable Output<Integer> major;

    /**
     * @return Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    public Optional<Output<Integer>> major() {
        return Optional.ofNullable(this.major);
    }

    /**
     * Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    @Import(name="minor")
    private @Nullable Output<Integer> minor;

    /**
     * @return Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    public Optional<Output<Integer>> minor() {
        return Optional.ofNullable(this.minor);
    }

    /**
     * serial path parameter.
     * 
     */
    @Import(name="serial", required=true)
    private Output<String> serial;

    /**
     * @return serial path parameter.
     * 
     */
    public Output<String> serial() {
        return this.serial;
    }

    /**
     * Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private WirelessBluetoothSettingsArgs() {}

    private WirelessBluetoothSettingsArgs(WirelessBluetoothSettingsArgs $) {
        this.major = $.major;
        this.minor = $.minor;
        this.serial = $.serial;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WirelessBluetoothSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WirelessBluetoothSettingsArgs $;

        public Builder() {
            $ = new WirelessBluetoothSettingsArgs();
        }

        public Builder(WirelessBluetoothSettingsArgs defaults) {
            $ = new WirelessBluetoothSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param major Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder major(@Nullable Output<Integer> major) {
            $.major = major;
            return this;
        }

        /**
         * @param major Desired major value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder major(Integer major) {
            return major(Output.of(major));
        }

        /**
         * @param minor Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder minor(@Nullable Output<Integer> minor) {
            $.minor = minor;
            return this;
        }

        /**
         * @param minor Desired minor value of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder minor(Integer minor) {
            return minor(Output.of(minor));
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial serial path parameter.
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param uuid Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Desired UUID of the beacon. If the value is set to null it will reset to Dashboard&#39;s automatically generated value.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public WirelessBluetoothSettingsArgs build() {
            if ($.serial == null) {
                throw new MissingRequiredPropertyException("WirelessBluetoothSettingsArgs", "serial");
            }
            return $;
        }
    }

}
