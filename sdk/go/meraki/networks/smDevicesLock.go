// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type SmDevicesLock struct {
	pulumi.CustomResourceState

	Item SmDevicesLockItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput           `pulumi:"networkId"`
	Parameters SmDevicesLockParametersOutput `pulumi:"parameters"`
}

// NewSmDevicesLock registers a new resource with the given unique name, arguments, and options.
func NewSmDevicesLock(ctx *pulumi.Context,
	name string, args *SmDevicesLockArgs, opts ...pulumi.ResourceOption) (*SmDevicesLock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmDevicesLock
	err := ctx.RegisterResource("meraki:networks/smDevicesLock:SmDevicesLock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmDevicesLock gets an existing SmDevicesLock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmDevicesLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmDevicesLockState, opts ...pulumi.ResourceOption) (*SmDevicesLock, error) {
	var resource SmDevicesLock
	err := ctx.ReadResource("meraki:networks/smDevicesLock:SmDevicesLock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmDevicesLock resources.
type smDevicesLockState struct {
	Item *SmDevicesLockItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                  `pulumi:"networkId"`
	Parameters *SmDevicesLockParameters `pulumi:"parameters"`
}

type SmDevicesLockState struct {
	Item SmDevicesLockItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SmDevicesLockParametersPtrInput
}

func (SmDevicesLockState) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesLockState)(nil)).Elem()
}

type smDevicesLockArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                  `pulumi:"networkId"`
	Parameters SmDevicesLockParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a SmDevicesLock resource.
type SmDevicesLockArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SmDevicesLockParametersInput
}

func (SmDevicesLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesLockArgs)(nil)).Elem()
}

type SmDevicesLockInput interface {
	pulumi.Input

	ToSmDevicesLockOutput() SmDevicesLockOutput
	ToSmDevicesLockOutputWithContext(ctx context.Context) SmDevicesLockOutput
}

func (*SmDevicesLock) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesLock)(nil)).Elem()
}

func (i *SmDevicesLock) ToSmDevicesLockOutput() SmDevicesLockOutput {
	return i.ToSmDevicesLockOutputWithContext(context.Background())
}

func (i *SmDevicesLock) ToSmDevicesLockOutputWithContext(ctx context.Context) SmDevicesLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesLockOutput)
}

// SmDevicesLockArrayInput is an input type that accepts SmDevicesLockArray and SmDevicesLockArrayOutput values.
// You can construct a concrete instance of `SmDevicesLockArrayInput` via:
//
//	SmDevicesLockArray{ SmDevicesLockArgs{...} }
type SmDevicesLockArrayInput interface {
	pulumi.Input

	ToSmDevicesLockArrayOutput() SmDevicesLockArrayOutput
	ToSmDevicesLockArrayOutputWithContext(context.Context) SmDevicesLockArrayOutput
}

type SmDevicesLockArray []SmDevicesLockInput

func (SmDevicesLockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesLock)(nil)).Elem()
}

func (i SmDevicesLockArray) ToSmDevicesLockArrayOutput() SmDevicesLockArrayOutput {
	return i.ToSmDevicesLockArrayOutputWithContext(context.Background())
}

func (i SmDevicesLockArray) ToSmDevicesLockArrayOutputWithContext(ctx context.Context) SmDevicesLockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesLockArrayOutput)
}

// SmDevicesLockMapInput is an input type that accepts SmDevicesLockMap and SmDevicesLockMapOutput values.
// You can construct a concrete instance of `SmDevicesLockMapInput` via:
//
//	SmDevicesLockMap{ "key": SmDevicesLockArgs{...} }
type SmDevicesLockMapInput interface {
	pulumi.Input

	ToSmDevicesLockMapOutput() SmDevicesLockMapOutput
	ToSmDevicesLockMapOutputWithContext(context.Context) SmDevicesLockMapOutput
}

type SmDevicesLockMap map[string]SmDevicesLockInput

func (SmDevicesLockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesLock)(nil)).Elem()
}

func (i SmDevicesLockMap) ToSmDevicesLockMapOutput() SmDevicesLockMapOutput {
	return i.ToSmDevicesLockMapOutputWithContext(context.Background())
}

func (i SmDevicesLockMap) ToSmDevicesLockMapOutputWithContext(ctx context.Context) SmDevicesLockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesLockMapOutput)
}

type SmDevicesLockOutput struct{ *pulumi.OutputState }

func (SmDevicesLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesLock)(nil)).Elem()
}

func (o SmDevicesLockOutput) ToSmDevicesLockOutput() SmDevicesLockOutput {
	return o
}

func (o SmDevicesLockOutput) ToSmDevicesLockOutputWithContext(ctx context.Context) SmDevicesLockOutput {
	return o
}

func (o SmDevicesLockOutput) Item() SmDevicesLockItemOutput {
	return o.ApplyT(func(v *SmDevicesLock) SmDevicesLockItemOutput { return v.Item }).(SmDevicesLockItemOutput)
}

// networkId path parameter. Network ID
func (o SmDevicesLockOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesLock) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmDevicesLockOutput) Parameters() SmDevicesLockParametersOutput {
	return o.ApplyT(func(v *SmDevicesLock) SmDevicesLockParametersOutput { return v.Parameters }).(SmDevicesLockParametersOutput)
}

type SmDevicesLockArrayOutput struct{ *pulumi.OutputState }

func (SmDevicesLockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesLock)(nil)).Elem()
}

func (o SmDevicesLockArrayOutput) ToSmDevicesLockArrayOutput() SmDevicesLockArrayOutput {
	return o
}

func (o SmDevicesLockArrayOutput) ToSmDevicesLockArrayOutputWithContext(ctx context.Context) SmDevicesLockArrayOutput {
	return o
}

func (o SmDevicesLockArrayOutput) Index(i pulumi.IntInput) SmDevicesLockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmDevicesLock {
		return vs[0].([]*SmDevicesLock)[vs[1].(int)]
	}).(SmDevicesLockOutput)
}

type SmDevicesLockMapOutput struct{ *pulumi.OutputState }

func (SmDevicesLockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesLock)(nil)).Elem()
}

func (o SmDevicesLockMapOutput) ToSmDevicesLockMapOutput() SmDevicesLockMapOutput {
	return o
}

func (o SmDevicesLockMapOutput) ToSmDevicesLockMapOutputWithContext(ctx context.Context) SmDevicesLockMapOutput {
	return o
}

func (o SmDevicesLockMapOutput) MapIndex(k pulumi.StringInput) SmDevicesLockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmDevicesLock {
		return vs[0].(map[string]*SmDevicesLock)[vs[1].(string)]
	}).(SmDevicesLockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesLockInput)(nil)).Elem(), &SmDevicesLock{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesLockArrayInput)(nil)).Elem(), SmDevicesLockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesLockMapInput)(nil)).Elem(), SmDevicesLockMap{})
	pulumi.RegisterOutputType(SmDevicesLockOutput{})
	pulumi.RegisterOutputType(SmDevicesLockArrayOutput{})
	pulumi.RegisterOutputType(SmDevicesLockMapOutput{})
}
