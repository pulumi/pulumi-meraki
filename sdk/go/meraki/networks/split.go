// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSplit(ctx, "example", &networks.SplitArgs{
//				NetworkId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSplitExample", example)
//			return nil
//		})
//	}
//
// ```
type Split struct {
	pulumi.CustomResourceState

	Item SplitItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewSplit registers a new resource with the given unique name, arguments, and options.
func NewSplit(ctx *pulumi.Context,
	name string, args *SplitArgs, opts ...pulumi.ResourceOption) (*Split, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Split
	err := ctx.RegisterResource("meraki:networks/split:Split", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSplit gets an existing Split resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSplit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SplitState, opts ...pulumi.ResourceOption) (*Split, error) {
	var resource Split
	err := ctx.ReadResource("meraki:networks/split:Split", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Split resources.
type splitState struct {
	Item *SplitItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type SplitState struct {
	Item SplitItemPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (SplitState) ElementType() reflect.Type {
	return reflect.TypeOf((*splitState)(nil)).Elem()
}

type splitArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a Split resource.
type SplitArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (SplitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*splitArgs)(nil)).Elem()
}

type SplitInput interface {
	pulumi.Input

	ToSplitOutput() SplitOutput
	ToSplitOutputWithContext(ctx context.Context) SplitOutput
}

func (*Split) ElementType() reflect.Type {
	return reflect.TypeOf((**Split)(nil)).Elem()
}

func (i *Split) ToSplitOutput() SplitOutput {
	return i.ToSplitOutputWithContext(context.Background())
}

func (i *Split) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitOutput)
}

// SplitArrayInput is an input type that accepts SplitArray and SplitArrayOutput values.
// You can construct a concrete instance of `SplitArrayInput` via:
//
//	SplitArray{ SplitArgs{...} }
type SplitArrayInput interface {
	pulumi.Input

	ToSplitArrayOutput() SplitArrayOutput
	ToSplitArrayOutputWithContext(context.Context) SplitArrayOutput
}

type SplitArray []SplitInput

func (SplitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Split)(nil)).Elem()
}

func (i SplitArray) ToSplitArrayOutput() SplitArrayOutput {
	return i.ToSplitArrayOutputWithContext(context.Background())
}

func (i SplitArray) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitArrayOutput)
}

// SplitMapInput is an input type that accepts SplitMap and SplitMapOutput values.
// You can construct a concrete instance of `SplitMapInput` via:
//
//	SplitMap{ "key": SplitArgs{...} }
type SplitMapInput interface {
	pulumi.Input

	ToSplitMapOutput() SplitMapOutput
	ToSplitMapOutputWithContext(context.Context) SplitMapOutput
}

type SplitMap map[string]SplitInput

func (SplitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Split)(nil)).Elem()
}

func (i SplitMap) ToSplitMapOutput() SplitMapOutput {
	return i.ToSplitMapOutputWithContext(context.Background())
}

func (i SplitMap) ToSplitMapOutputWithContext(ctx context.Context) SplitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SplitMapOutput)
}

type SplitOutput struct{ *pulumi.OutputState }

func (SplitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Split)(nil)).Elem()
}

func (o SplitOutput) ToSplitOutput() SplitOutput {
	return o
}

func (o SplitOutput) ToSplitOutputWithContext(ctx context.Context) SplitOutput {
	return o
}

func (o SplitOutput) Item() SplitItemOutput {
	return o.ApplyT(func(v *Split) SplitItemOutput { return v.Item }).(SplitItemOutput)
}

// networkId path parameter. Network ID
func (o SplitOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Split) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type SplitArrayOutput struct{ *pulumi.OutputState }

func (SplitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Split)(nil)).Elem()
}

func (o SplitArrayOutput) ToSplitArrayOutput() SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) ToSplitArrayOutputWithContext(ctx context.Context) SplitArrayOutput {
	return o
}

func (o SplitArrayOutput) Index(i pulumi.IntInput) SplitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Split {
		return vs[0].([]*Split)[vs[1].(int)]
	}).(SplitOutput)
}

type SplitMapOutput struct{ *pulumi.OutputState }

func (SplitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Split)(nil)).Elem()
}

func (o SplitMapOutput) ToSplitMapOutput() SplitMapOutput {
	return o
}

func (o SplitMapOutput) ToSplitMapOutputWithContext(ctx context.Context) SplitMapOutput {
	return o
}

func (o SplitMapOutput) MapIndex(k pulumi.StringInput) SplitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Split {
		return vs[0].(map[string]*Split)[vs[1].(string)]
	}).(SplitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SplitInput)(nil)).Elem(), &Split{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitArrayInput)(nil)).Elem(), SplitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SplitMapInput)(nil)).Elem(), SplitMap{})
	pulumi.RegisterOutputType(SplitOutput{})
	pulumi.RegisterOutputType(SplitArrayOutput{})
	pulumi.RegisterOutputType(SplitMapOutput{})
}
