// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchRoutingMulticast:SwitchRoutingMulticast example "network_id"
// ```
type SwitchRoutingMulticast struct {
	pulumi.CustomResourceState

	// Default multicast setting for entire network. IGMP snooping and Flood unknown
	//   multicast traffic settings are enabled by default.
	DefaultSettings SwitchRoutingMulticastDefaultSettingsOutput `pulumi:"defaultSettings"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Array of paired switches/stacks/profiles and corresponding multicast settings.
	//   An empty array will clear the multicast settings.
	Overrides SwitchRoutingMulticastOverrideArrayOutput `pulumi:"overrides"`
}

// NewSwitchRoutingMulticast registers a new resource with the given unique name, arguments, and options.
func NewSwitchRoutingMulticast(ctx *pulumi.Context,
	name string, args *SwitchRoutingMulticastArgs, opts ...pulumi.ResourceOption) (*SwitchRoutingMulticast, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchRoutingMulticast
	err := ctx.RegisterResource("meraki:networks/switchRoutingMulticast:SwitchRoutingMulticast", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchRoutingMulticast gets an existing SwitchRoutingMulticast resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchRoutingMulticast(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchRoutingMulticastState, opts ...pulumi.ResourceOption) (*SwitchRoutingMulticast, error) {
	var resource SwitchRoutingMulticast
	err := ctx.ReadResource("meraki:networks/switchRoutingMulticast:SwitchRoutingMulticast", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchRoutingMulticast resources.
type switchRoutingMulticastState struct {
	// Default multicast setting for entire network. IGMP snooping and Flood unknown
	//   multicast traffic settings are enabled by default.
	DefaultSettings *SwitchRoutingMulticastDefaultSettings `pulumi:"defaultSettings"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Array of paired switches/stacks/profiles and corresponding multicast settings.
	//   An empty array will clear the multicast settings.
	Overrides []SwitchRoutingMulticastOverride `pulumi:"overrides"`
}

type SwitchRoutingMulticastState struct {
	// Default multicast setting for entire network. IGMP snooping and Flood unknown
	//   multicast traffic settings are enabled by default.
	DefaultSettings SwitchRoutingMulticastDefaultSettingsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Array of paired switches/stacks/profiles and corresponding multicast settings.
	//   An empty array will clear the multicast settings.
	Overrides SwitchRoutingMulticastOverrideArrayInput
}

func (SwitchRoutingMulticastState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchRoutingMulticastState)(nil)).Elem()
}

type switchRoutingMulticastArgs struct {
	// Default multicast setting for entire network. IGMP snooping and Flood unknown
	//   multicast traffic settings are enabled by default.
	DefaultSettings *SwitchRoutingMulticastDefaultSettings `pulumi:"defaultSettings"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Array of paired switches/stacks/profiles and corresponding multicast settings.
	//   An empty array will clear the multicast settings.
	Overrides []SwitchRoutingMulticastOverride `pulumi:"overrides"`
}

// The set of arguments for constructing a SwitchRoutingMulticast resource.
type SwitchRoutingMulticastArgs struct {
	// Default multicast setting for entire network. IGMP snooping and Flood unknown
	//   multicast traffic settings are enabled by default.
	DefaultSettings SwitchRoutingMulticastDefaultSettingsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Array of paired switches/stacks/profiles and corresponding multicast settings.
	//   An empty array will clear the multicast settings.
	Overrides SwitchRoutingMulticastOverrideArrayInput
}

func (SwitchRoutingMulticastArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchRoutingMulticastArgs)(nil)).Elem()
}

type SwitchRoutingMulticastInput interface {
	pulumi.Input

	ToSwitchRoutingMulticastOutput() SwitchRoutingMulticastOutput
	ToSwitchRoutingMulticastOutputWithContext(ctx context.Context) SwitchRoutingMulticastOutput
}

func (*SwitchRoutingMulticast) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchRoutingMulticast)(nil)).Elem()
}

func (i *SwitchRoutingMulticast) ToSwitchRoutingMulticastOutput() SwitchRoutingMulticastOutput {
	return i.ToSwitchRoutingMulticastOutputWithContext(context.Background())
}

func (i *SwitchRoutingMulticast) ToSwitchRoutingMulticastOutputWithContext(ctx context.Context) SwitchRoutingMulticastOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingMulticastOutput)
}

// SwitchRoutingMulticastArrayInput is an input type that accepts SwitchRoutingMulticastArray and SwitchRoutingMulticastArrayOutput values.
// You can construct a concrete instance of `SwitchRoutingMulticastArrayInput` via:
//
//	SwitchRoutingMulticastArray{ SwitchRoutingMulticastArgs{...} }
type SwitchRoutingMulticastArrayInput interface {
	pulumi.Input

	ToSwitchRoutingMulticastArrayOutput() SwitchRoutingMulticastArrayOutput
	ToSwitchRoutingMulticastArrayOutputWithContext(context.Context) SwitchRoutingMulticastArrayOutput
}

type SwitchRoutingMulticastArray []SwitchRoutingMulticastInput

func (SwitchRoutingMulticastArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchRoutingMulticast)(nil)).Elem()
}

func (i SwitchRoutingMulticastArray) ToSwitchRoutingMulticastArrayOutput() SwitchRoutingMulticastArrayOutput {
	return i.ToSwitchRoutingMulticastArrayOutputWithContext(context.Background())
}

func (i SwitchRoutingMulticastArray) ToSwitchRoutingMulticastArrayOutputWithContext(ctx context.Context) SwitchRoutingMulticastArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingMulticastArrayOutput)
}

// SwitchRoutingMulticastMapInput is an input type that accepts SwitchRoutingMulticastMap and SwitchRoutingMulticastMapOutput values.
// You can construct a concrete instance of `SwitchRoutingMulticastMapInput` via:
//
//	SwitchRoutingMulticastMap{ "key": SwitchRoutingMulticastArgs{...} }
type SwitchRoutingMulticastMapInput interface {
	pulumi.Input

	ToSwitchRoutingMulticastMapOutput() SwitchRoutingMulticastMapOutput
	ToSwitchRoutingMulticastMapOutputWithContext(context.Context) SwitchRoutingMulticastMapOutput
}

type SwitchRoutingMulticastMap map[string]SwitchRoutingMulticastInput

func (SwitchRoutingMulticastMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchRoutingMulticast)(nil)).Elem()
}

func (i SwitchRoutingMulticastMap) ToSwitchRoutingMulticastMapOutput() SwitchRoutingMulticastMapOutput {
	return i.ToSwitchRoutingMulticastMapOutputWithContext(context.Background())
}

func (i SwitchRoutingMulticastMap) ToSwitchRoutingMulticastMapOutputWithContext(ctx context.Context) SwitchRoutingMulticastMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingMulticastMapOutput)
}

type SwitchRoutingMulticastOutput struct{ *pulumi.OutputState }

func (SwitchRoutingMulticastOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchRoutingMulticast)(nil)).Elem()
}

func (o SwitchRoutingMulticastOutput) ToSwitchRoutingMulticastOutput() SwitchRoutingMulticastOutput {
	return o
}

func (o SwitchRoutingMulticastOutput) ToSwitchRoutingMulticastOutputWithContext(ctx context.Context) SwitchRoutingMulticastOutput {
	return o
}

// Default multicast setting for entire network. IGMP snooping and Flood unknown
//
//	multicast traffic settings are enabled by default.
func (o SwitchRoutingMulticastOutput) DefaultSettings() SwitchRoutingMulticastDefaultSettingsOutput {
	return o.ApplyT(func(v *SwitchRoutingMulticast) SwitchRoutingMulticastDefaultSettingsOutput { return v.DefaultSettings }).(SwitchRoutingMulticastDefaultSettingsOutput)
}

// networkId path parameter. Network ID
func (o SwitchRoutingMulticastOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingMulticast) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Array of paired switches/stacks/profiles and corresponding multicast settings.
//
//	An empty array will clear the multicast settings.
func (o SwitchRoutingMulticastOutput) Overrides() SwitchRoutingMulticastOverrideArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingMulticast) SwitchRoutingMulticastOverrideArrayOutput { return v.Overrides }).(SwitchRoutingMulticastOverrideArrayOutput)
}

type SwitchRoutingMulticastArrayOutput struct{ *pulumi.OutputState }

func (SwitchRoutingMulticastArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchRoutingMulticast)(nil)).Elem()
}

func (o SwitchRoutingMulticastArrayOutput) ToSwitchRoutingMulticastArrayOutput() SwitchRoutingMulticastArrayOutput {
	return o
}

func (o SwitchRoutingMulticastArrayOutput) ToSwitchRoutingMulticastArrayOutputWithContext(ctx context.Context) SwitchRoutingMulticastArrayOutput {
	return o
}

func (o SwitchRoutingMulticastArrayOutput) Index(i pulumi.IntInput) SwitchRoutingMulticastOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchRoutingMulticast {
		return vs[0].([]*SwitchRoutingMulticast)[vs[1].(int)]
	}).(SwitchRoutingMulticastOutput)
}

type SwitchRoutingMulticastMapOutput struct{ *pulumi.OutputState }

func (SwitchRoutingMulticastMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchRoutingMulticast)(nil)).Elem()
}

func (o SwitchRoutingMulticastMapOutput) ToSwitchRoutingMulticastMapOutput() SwitchRoutingMulticastMapOutput {
	return o
}

func (o SwitchRoutingMulticastMapOutput) ToSwitchRoutingMulticastMapOutputWithContext(ctx context.Context) SwitchRoutingMulticastMapOutput {
	return o
}

func (o SwitchRoutingMulticastMapOutput) MapIndex(k pulumi.StringInput) SwitchRoutingMulticastOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchRoutingMulticast {
		return vs[0].(map[string]*SwitchRoutingMulticast)[vs[1].(string)]
	}).(SwitchRoutingMulticastOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingMulticastInput)(nil)).Elem(), &SwitchRoutingMulticast{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingMulticastArrayInput)(nil)).Elem(), SwitchRoutingMulticastArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingMulticastMapInput)(nil)).Elem(), SwitchRoutingMulticastMap{})
	pulumi.RegisterOutputType(SwitchRoutingMulticastOutput{})
	pulumi.RegisterOutputType(SwitchRoutingMulticastArrayOutput{})
	pulumi.RegisterOutputType(SwitchRoutingMulticastMapOutput{})
}
