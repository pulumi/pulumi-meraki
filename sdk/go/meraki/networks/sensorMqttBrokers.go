// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSensorMqttBrokers(ctx, "example", &networks.SensorMqttBrokersArgs{
//				Enabled:      pulumi.Bool(true),
//				MqttBrokerId: pulumi.String("string"),
//				NetworkId:    pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSensorMqttBrokersExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/sensorMqttBrokers:SensorMqttBrokers example "mqtt_broker_id,network_id"
// ```
type SensorMqttBrokers struct {
	pulumi.CustomResourceState

	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// ID of the MQTT Broker.
	MqttBrokerId pulumi.StringOutput `pulumi:"mqttBrokerId"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewSensorMqttBrokers registers a new resource with the given unique name, arguments, and options.
func NewSensorMqttBrokers(ctx *pulumi.Context,
	name string, args *SensorMqttBrokersArgs, opts ...pulumi.ResourceOption) (*SensorMqttBrokers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MqttBrokerId == nil {
		return nil, errors.New("invalid value for required argument 'MqttBrokerId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensorMqttBrokers
	err := ctx.RegisterResource("meraki:networks/sensorMqttBrokers:SensorMqttBrokers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorMqttBrokers gets an existing SensorMqttBrokers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorMqttBrokers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorMqttBrokersState, opts ...pulumi.ResourceOption) (*SensorMqttBrokers, error) {
	var resource SensorMqttBrokers
	err := ctx.ReadResource("meraki:networks/sensorMqttBrokers:SensorMqttBrokers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorMqttBrokers resources.
type sensorMqttBrokersState struct {
	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled *bool `pulumi:"enabled"`
	// ID of the MQTT Broker.
	MqttBrokerId *string `pulumi:"mqttBrokerId"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type SensorMqttBrokersState struct {
	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled pulumi.BoolPtrInput
	// ID of the MQTT Broker.
	MqttBrokerId pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (SensorMqttBrokersState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorMqttBrokersState)(nil)).Elem()
}

type sensorMqttBrokersArgs struct {
	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled *bool `pulumi:"enabled"`
	// ID of the MQTT Broker.
	MqttBrokerId string `pulumi:"mqttBrokerId"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a SensorMqttBrokers resource.
type SensorMqttBrokersArgs struct {
	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled pulumi.BoolPtrInput
	// ID of the MQTT Broker.
	MqttBrokerId pulumi.StringInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (SensorMqttBrokersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorMqttBrokersArgs)(nil)).Elem()
}

type SensorMqttBrokersInput interface {
	pulumi.Input

	ToSensorMqttBrokersOutput() SensorMqttBrokersOutput
	ToSensorMqttBrokersOutputWithContext(ctx context.Context) SensorMqttBrokersOutput
}

func (*SensorMqttBrokers) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorMqttBrokers)(nil)).Elem()
}

func (i *SensorMqttBrokers) ToSensorMqttBrokersOutput() SensorMqttBrokersOutput {
	return i.ToSensorMqttBrokersOutputWithContext(context.Background())
}

func (i *SensorMqttBrokers) ToSensorMqttBrokersOutputWithContext(ctx context.Context) SensorMqttBrokersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMqttBrokersOutput)
}

// SensorMqttBrokersArrayInput is an input type that accepts SensorMqttBrokersArray and SensorMqttBrokersArrayOutput values.
// You can construct a concrete instance of `SensorMqttBrokersArrayInput` via:
//
//	SensorMqttBrokersArray{ SensorMqttBrokersArgs{...} }
type SensorMqttBrokersArrayInput interface {
	pulumi.Input

	ToSensorMqttBrokersArrayOutput() SensorMqttBrokersArrayOutput
	ToSensorMqttBrokersArrayOutputWithContext(context.Context) SensorMqttBrokersArrayOutput
}

type SensorMqttBrokersArray []SensorMqttBrokersInput

func (SensorMqttBrokersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorMqttBrokers)(nil)).Elem()
}

func (i SensorMqttBrokersArray) ToSensorMqttBrokersArrayOutput() SensorMqttBrokersArrayOutput {
	return i.ToSensorMqttBrokersArrayOutputWithContext(context.Background())
}

func (i SensorMqttBrokersArray) ToSensorMqttBrokersArrayOutputWithContext(ctx context.Context) SensorMqttBrokersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMqttBrokersArrayOutput)
}

// SensorMqttBrokersMapInput is an input type that accepts SensorMqttBrokersMap and SensorMqttBrokersMapOutput values.
// You can construct a concrete instance of `SensorMqttBrokersMapInput` via:
//
//	SensorMqttBrokersMap{ "key": SensorMqttBrokersArgs{...} }
type SensorMqttBrokersMapInput interface {
	pulumi.Input

	ToSensorMqttBrokersMapOutput() SensorMqttBrokersMapOutput
	ToSensorMqttBrokersMapOutputWithContext(context.Context) SensorMqttBrokersMapOutput
}

type SensorMqttBrokersMap map[string]SensorMqttBrokersInput

func (SensorMqttBrokersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorMqttBrokers)(nil)).Elem()
}

func (i SensorMqttBrokersMap) ToSensorMqttBrokersMapOutput() SensorMqttBrokersMapOutput {
	return i.ToSensorMqttBrokersMapOutputWithContext(context.Background())
}

func (i SensorMqttBrokersMap) ToSensorMqttBrokersMapOutputWithContext(ctx context.Context) SensorMqttBrokersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMqttBrokersMapOutput)
}

type SensorMqttBrokersOutput struct{ *pulumi.OutputState }

func (SensorMqttBrokersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorMqttBrokers)(nil)).Elem()
}

func (o SensorMqttBrokersOutput) ToSensorMqttBrokersOutput() SensorMqttBrokersOutput {
	return o
}

func (o SensorMqttBrokersOutput) ToSensorMqttBrokersOutputWithContext(ctx context.Context) SensorMqttBrokersOutput {
	return o
}

// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
func (o SensorMqttBrokersOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SensorMqttBrokers) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// ID of the MQTT Broker.
func (o SensorMqttBrokersOutput) MqttBrokerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorMqttBrokers) pulumi.StringOutput { return v.MqttBrokerId }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SensorMqttBrokersOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorMqttBrokers) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type SensorMqttBrokersArrayOutput struct{ *pulumi.OutputState }

func (SensorMqttBrokersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorMqttBrokers)(nil)).Elem()
}

func (o SensorMqttBrokersArrayOutput) ToSensorMqttBrokersArrayOutput() SensorMqttBrokersArrayOutput {
	return o
}

func (o SensorMqttBrokersArrayOutput) ToSensorMqttBrokersArrayOutputWithContext(ctx context.Context) SensorMqttBrokersArrayOutput {
	return o
}

func (o SensorMqttBrokersArrayOutput) Index(i pulumi.IntInput) SensorMqttBrokersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorMqttBrokers {
		return vs[0].([]*SensorMqttBrokers)[vs[1].(int)]
	}).(SensorMqttBrokersOutput)
}

type SensorMqttBrokersMapOutput struct{ *pulumi.OutputState }

func (SensorMqttBrokersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorMqttBrokers)(nil)).Elem()
}

func (o SensorMqttBrokersMapOutput) ToSensorMqttBrokersMapOutput() SensorMqttBrokersMapOutput {
	return o
}

func (o SensorMqttBrokersMapOutput) ToSensorMqttBrokersMapOutputWithContext(ctx context.Context) SensorMqttBrokersMapOutput {
	return o
}

func (o SensorMqttBrokersMapOutput) MapIndex(k pulumi.StringInput) SensorMqttBrokersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorMqttBrokers {
		return vs[0].(map[string]*SensorMqttBrokers)[vs[1].(string)]
	}).(SensorMqttBrokersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMqttBrokersInput)(nil)).Elem(), &SensorMqttBrokers{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMqttBrokersArrayInput)(nil)).Elem(), SensorMqttBrokersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMqttBrokersMapInput)(nil)).Elem(), SensorMqttBrokersMap{})
	pulumi.RegisterOutputType(SensorMqttBrokersOutput{})
	pulumi.RegisterOutputType(SensorMqttBrokersArrayOutput{})
	pulumi.RegisterOutputType(SensorMqttBrokersMapOutput{})
}
