// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceVpnSiteToSiteVpn(ctx, "example", &networks.ApplianceVpnSiteToSiteVpnArgs{
//				Hubs: networks.ApplianceVpnSiteToSiteVpnHubArray{
//					&networks.ApplianceVpnSiteToSiteVpnHubArgs{
//						Hub_id:            "N_4901849",
//						Use_default_route: true,
//					},
//				},
//				Mode:      pulumi.String("spoke"),
//				NetworkId: pulumi.String("string"),
//				Subnets: networks.ApplianceVpnSiteToSiteVpnSubnetArray{
//					&networks.ApplianceVpnSiteToSiteVpnSubnetArgs{
//						Local_subnet: "192.168.1.0/24",
//						Use_vpn:      true,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceVpnSiteToSiteVpnExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn example "network_id"
// ```
type ApplianceVpnSiteToSiteVpn struct {
	pulumi.CustomResourceState

	// The list of VPN hubs, in order of preference.
	Hubs ApplianceVpnSiteToSiteVpnHubArrayOutput `pulumi:"hubs"`
	// The site-to-site VPN mode.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The list of subnets and their VPN presence.
	Subnets ApplianceVpnSiteToSiteVpnSubnetArrayOutput `pulumi:"subnets"`
}

// NewApplianceVpnSiteToSiteVpn registers a new resource with the given unique name, arguments, and options.
func NewApplianceVpnSiteToSiteVpn(ctx *pulumi.Context,
	name string, args *ApplianceVpnSiteToSiteVpnArgs, opts ...pulumi.ResourceOption) (*ApplianceVpnSiteToSiteVpn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceVpnSiteToSiteVpn
	err := ctx.RegisterResource("meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceVpnSiteToSiteVpn gets an existing ApplianceVpnSiteToSiteVpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceVpnSiteToSiteVpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceVpnSiteToSiteVpnState, opts ...pulumi.ResourceOption) (*ApplianceVpnSiteToSiteVpn, error) {
	var resource ApplianceVpnSiteToSiteVpn
	err := ctx.ReadResource("meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceVpnSiteToSiteVpn resources.
type applianceVpnSiteToSiteVpnState struct {
	// The list of VPN hubs, in order of preference.
	Hubs []ApplianceVpnSiteToSiteVpnHub `pulumi:"hubs"`
	// The site-to-site VPN mode.
	Mode *string `pulumi:"mode"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The list of subnets and their VPN presence.
	Subnets []ApplianceVpnSiteToSiteVpnSubnet `pulumi:"subnets"`
}

type ApplianceVpnSiteToSiteVpnState struct {
	// The list of VPN hubs, in order of preference.
	Hubs ApplianceVpnSiteToSiteVpnHubArrayInput
	// The site-to-site VPN mode.
	Mode pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The list of subnets and their VPN presence.
	Subnets ApplianceVpnSiteToSiteVpnSubnetArrayInput
}

func (ApplianceVpnSiteToSiteVpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVpnSiteToSiteVpnState)(nil)).Elem()
}

type applianceVpnSiteToSiteVpnArgs struct {
	// The list of VPN hubs, in order of preference.
	Hubs []ApplianceVpnSiteToSiteVpnHub `pulumi:"hubs"`
	// The site-to-site VPN mode.
	Mode *string `pulumi:"mode"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The list of subnets and their VPN presence.
	Subnets []ApplianceVpnSiteToSiteVpnSubnet `pulumi:"subnets"`
}

// The set of arguments for constructing a ApplianceVpnSiteToSiteVpn resource.
type ApplianceVpnSiteToSiteVpnArgs struct {
	// The list of VPN hubs, in order of preference.
	Hubs ApplianceVpnSiteToSiteVpnHubArrayInput
	// The site-to-site VPN mode.
	Mode pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The list of subnets and their VPN presence.
	Subnets ApplianceVpnSiteToSiteVpnSubnetArrayInput
}

func (ApplianceVpnSiteToSiteVpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVpnSiteToSiteVpnArgs)(nil)).Elem()
}

type ApplianceVpnSiteToSiteVpnInput interface {
	pulumi.Input

	ToApplianceVpnSiteToSiteVpnOutput() ApplianceVpnSiteToSiteVpnOutput
	ToApplianceVpnSiteToSiteVpnOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnOutput
}

func (*ApplianceVpnSiteToSiteVpn) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (i *ApplianceVpnSiteToSiteVpn) ToApplianceVpnSiteToSiteVpnOutput() ApplianceVpnSiteToSiteVpnOutput {
	return i.ToApplianceVpnSiteToSiteVpnOutputWithContext(context.Background())
}

func (i *ApplianceVpnSiteToSiteVpn) ToApplianceVpnSiteToSiteVpnOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnSiteToSiteVpnOutput)
}

// ApplianceVpnSiteToSiteVpnArrayInput is an input type that accepts ApplianceVpnSiteToSiteVpnArray and ApplianceVpnSiteToSiteVpnArrayOutput values.
// You can construct a concrete instance of `ApplianceVpnSiteToSiteVpnArrayInput` via:
//
//	ApplianceVpnSiteToSiteVpnArray{ ApplianceVpnSiteToSiteVpnArgs{...} }
type ApplianceVpnSiteToSiteVpnArrayInput interface {
	pulumi.Input

	ToApplianceVpnSiteToSiteVpnArrayOutput() ApplianceVpnSiteToSiteVpnArrayOutput
	ToApplianceVpnSiteToSiteVpnArrayOutputWithContext(context.Context) ApplianceVpnSiteToSiteVpnArrayOutput
}

type ApplianceVpnSiteToSiteVpnArray []ApplianceVpnSiteToSiteVpnInput

func (ApplianceVpnSiteToSiteVpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (i ApplianceVpnSiteToSiteVpnArray) ToApplianceVpnSiteToSiteVpnArrayOutput() ApplianceVpnSiteToSiteVpnArrayOutput {
	return i.ToApplianceVpnSiteToSiteVpnArrayOutputWithContext(context.Background())
}

func (i ApplianceVpnSiteToSiteVpnArray) ToApplianceVpnSiteToSiteVpnArrayOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnSiteToSiteVpnArrayOutput)
}

// ApplianceVpnSiteToSiteVpnMapInput is an input type that accepts ApplianceVpnSiteToSiteVpnMap and ApplianceVpnSiteToSiteVpnMapOutput values.
// You can construct a concrete instance of `ApplianceVpnSiteToSiteVpnMapInput` via:
//
//	ApplianceVpnSiteToSiteVpnMap{ "key": ApplianceVpnSiteToSiteVpnArgs{...} }
type ApplianceVpnSiteToSiteVpnMapInput interface {
	pulumi.Input

	ToApplianceVpnSiteToSiteVpnMapOutput() ApplianceVpnSiteToSiteVpnMapOutput
	ToApplianceVpnSiteToSiteVpnMapOutputWithContext(context.Context) ApplianceVpnSiteToSiteVpnMapOutput
}

type ApplianceVpnSiteToSiteVpnMap map[string]ApplianceVpnSiteToSiteVpnInput

func (ApplianceVpnSiteToSiteVpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (i ApplianceVpnSiteToSiteVpnMap) ToApplianceVpnSiteToSiteVpnMapOutput() ApplianceVpnSiteToSiteVpnMapOutput {
	return i.ToApplianceVpnSiteToSiteVpnMapOutputWithContext(context.Background())
}

func (i ApplianceVpnSiteToSiteVpnMap) ToApplianceVpnSiteToSiteVpnMapOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnSiteToSiteVpnMapOutput)
}

type ApplianceVpnSiteToSiteVpnOutput struct{ *pulumi.OutputState }

func (ApplianceVpnSiteToSiteVpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (o ApplianceVpnSiteToSiteVpnOutput) ToApplianceVpnSiteToSiteVpnOutput() ApplianceVpnSiteToSiteVpnOutput {
	return o
}

func (o ApplianceVpnSiteToSiteVpnOutput) ToApplianceVpnSiteToSiteVpnOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnOutput {
	return o
}

// The list of VPN hubs, in order of preference.
func (o ApplianceVpnSiteToSiteVpnOutput) Hubs() ApplianceVpnSiteToSiteVpnHubArrayOutput {
	return o.ApplyT(func(v *ApplianceVpnSiteToSiteVpn) ApplianceVpnSiteToSiteVpnHubArrayOutput { return v.Hubs }).(ApplianceVpnSiteToSiteVpnHubArrayOutput)
}

// The site-to-site VPN mode.
func (o ApplianceVpnSiteToSiteVpnOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceVpnSiteToSiteVpn) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o ApplianceVpnSiteToSiteVpnOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceVpnSiteToSiteVpn) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The list of subnets and their VPN presence.
func (o ApplianceVpnSiteToSiteVpnOutput) Subnets() ApplianceVpnSiteToSiteVpnSubnetArrayOutput {
	return o.ApplyT(func(v *ApplianceVpnSiteToSiteVpn) ApplianceVpnSiteToSiteVpnSubnetArrayOutput { return v.Subnets }).(ApplianceVpnSiteToSiteVpnSubnetArrayOutput)
}

type ApplianceVpnSiteToSiteVpnArrayOutput struct{ *pulumi.OutputState }

func (ApplianceVpnSiteToSiteVpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (o ApplianceVpnSiteToSiteVpnArrayOutput) ToApplianceVpnSiteToSiteVpnArrayOutput() ApplianceVpnSiteToSiteVpnArrayOutput {
	return o
}

func (o ApplianceVpnSiteToSiteVpnArrayOutput) ToApplianceVpnSiteToSiteVpnArrayOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnArrayOutput {
	return o
}

func (o ApplianceVpnSiteToSiteVpnArrayOutput) Index(i pulumi.IntInput) ApplianceVpnSiteToSiteVpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceVpnSiteToSiteVpn {
		return vs[0].([]*ApplianceVpnSiteToSiteVpn)[vs[1].(int)]
	}).(ApplianceVpnSiteToSiteVpnOutput)
}

type ApplianceVpnSiteToSiteVpnMapOutput struct{ *pulumi.OutputState }

func (ApplianceVpnSiteToSiteVpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVpnSiteToSiteVpn)(nil)).Elem()
}

func (o ApplianceVpnSiteToSiteVpnMapOutput) ToApplianceVpnSiteToSiteVpnMapOutput() ApplianceVpnSiteToSiteVpnMapOutput {
	return o
}

func (o ApplianceVpnSiteToSiteVpnMapOutput) ToApplianceVpnSiteToSiteVpnMapOutputWithContext(ctx context.Context) ApplianceVpnSiteToSiteVpnMapOutput {
	return o
}

func (o ApplianceVpnSiteToSiteVpnMapOutput) MapIndex(k pulumi.StringInput) ApplianceVpnSiteToSiteVpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceVpnSiteToSiteVpn {
		return vs[0].(map[string]*ApplianceVpnSiteToSiteVpn)[vs[1].(string)]
	}).(ApplianceVpnSiteToSiteVpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnSiteToSiteVpnInput)(nil)).Elem(), &ApplianceVpnSiteToSiteVpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnSiteToSiteVpnArrayInput)(nil)).Elem(), ApplianceVpnSiteToSiteVpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnSiteToSiteVpnMapInput)(nil)).Elem(), ApplianceVpnSiteToSiteVpnMap{})
	pulumi.RegisterOutputType(ApplianceVpnSiteToSiteVpnOutput{})
	pulumi.RegisterOutputType(ApplianceVpnSiteToSiteVpnArrayOutput{})
	pulumi.RegisterOutputType(ApplianceVpnSiteToSiteVpnMapOutput{})
}
