// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchDhcpServerPolicy(ctx, "example", &networks.SwitchDhcpServerPolicyArgs{
//				Alerts: &networks.SwitchDhcpServerPolicyAlertsArgs{
//					Email: &networks.SwitchDhcpServerPolicyAlertsEmailArgs{
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				AllowedServers: pulumi.StringArray{
//					pulumi.String("00:50:56:00:00:01"),
//					pulumi.String("00:50:56:00:00:02"),
//				},
//				ArpInspection: &networks.SwitchDhcpServerPolicyArpInspectionArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				BlockedServers: pulumi.StringArray{
//					pulumi.String("00:50:56:00:00:03"),
//					pulumi.String("00:50:56:00:00:04"),
//				},
//				DefaultPolicy: pulumi.String("block"),
//				NetworkId:     pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchDhcpServerPolicyExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy example "network_id"
// ```
type SwitchDhcpServerPolicy struct {
	pulumi.CustomResourceState

	// Email alert settings for DHCP servers
	Alerts SwitchDhcpServerPolicyAlertsOutput `pulumi:"alerts"`
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
	//   to block.An empty array will clear the entries.
	AllowedServers pulumi.StringArrayOutput `pulumi:"allowedServers"`
	// Dynamic ARP Inspection settings
	ArpInspection SwitchDhcpServerPolicyArpInspectionOutput `pulumi:"arpInspection"`
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
	//   to allow.An empty array will clear the entries.
	BlockedServers pulumi.StringArrayOutput `pulumi:"blockedServers"`
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy pulumi.StringOutput `pulumi:"defaultPolicy"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewSwitchDhcpServerPolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchDhcpServerPolicy(ctx *pulumi.Context,
	name string, args *SwitchDhcpServerPolicyArgs, opts ...pulumi.ResourceOption) (*SwitchDhcpServerPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchDhcpServerPolicy
	err := ctx.RegisterResource("meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchDhcpServerPolicy gets an existing SwitchDhcpServerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchDhcpServerPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchDhcpServerPolicyState, opts ...pulumi.ResourceOption) (*SwitchDhcpServerPolicy, error) {
	var resource SwitchDhcpServerPolicy
	err := ctx.ReadResource("meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchDhcpServerPolicy resources.
type switchDhcpServerPolicyState struct {
	// Email alert settings for DHCP servers
	Alerts *SwitchDhcpServerPolicyAlerts `pulumi:"alerts"`
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
	//   to block.An empty array will clear the entries.
	AllowedServers []string `pulumi:"allowedServers"`
	// Dynamic ARP Inspection settings
	ArpInspection *SwitchDhcpServerPolicyArpInspection `pulumi:"arpInspection"`
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
	//   to allow.An empty array will clear the entries.
	BlockedServers []string `pulumi:"blockedServers"`
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy *string `pulumi:"defaultPolicy"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type SwitchDhcpServerPolicyState struct {
	// Email alert settings for DHCP servers
	Alerts SwitchDhcpServerPolicyAlertsPtrInput
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
	//   to block.An empty array will clear the entries.
	AllowedServers pulumi.StringArrayInput
	// Dynamic ARP Inspection settings
	ArpInspection SwitchDhcpServerPolicyArpInspectionPtrInput
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
	//   to allow.An empty array will clear the entries.
	BlockedServers pulumi.StringArrayInput
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (SwitchDhcpServerPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchDhcpServerPolicyState)(nil)).Elem()
}

type switchDhcpServerPolicyArgs struct {
	// Email alert settings for DHCP servers
	Alerts *SwitchDhcpServerPolicyAlerts `pulumi:"alerts"`
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
	//   to block.An empty array will clear the entries.
	AllowedServers []string `pulumi:"allowedServers"`
	// Dynamic ARP Inspection settings
	ArpInspection *SwitchDhcpServerPolicyArpInspection `pulumi:"arpInspection"`
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
	//   to allow.An empty array will clear the entries.
	BlockedServers []string `pulumi:"blockedServers"`
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy *string `pulumi:"defaultPolicy"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a SwitchDhcpServerPolicy resource.
type SwitchDhcpServerPolicyArgs struct {
	// Email alert settings for DHCP servers
	Alerts SwitchDhcpServerPolicyAlertsPtrInput
	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
	//   to block.An empty array will clear the entries.
	AllowedServers pulumi.StringArrayInput
	// Dynamic ARP Inspection settings
	ArpInspection SwitchDhcpServerPolicyArpInspectionPtrInput
	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
	//   to allow.An empty array will clear the entries.
	BlockedServers pulumi.StringArrayInput
	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	DefaultPolicy pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (SwitchDhcpServerPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchDhcpServerPolicyArgs)(nil)).Elem()
}

type SwitchDhcpServerPolicyInput interface {
	pulumi.Input

	ToSwitchDhcpServerPolicyOutput() SwitchDhcpServerPolicyOutput
	ToSwitchDhcpServerPolicyOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyOutput
}

func (*SwitchDhcpServerPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchDhcpServerPolicy)(nil)).Elem()
}

func (i *SwitchDhcpServerPolicy) ToSwitchDhcpServerPolicyOutput() SwitchDhcpServerPolicyOutput {
	return i.ToSwitchDhcpServerPolicyOutputWithContext(context.Background())
}

func (i *SwitchDhcpServerPolicy) ToSwitchDhcpServerPolicyOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchDhcpServerPolicyOutput)
}

// SwitchDhcpServerPolicyArrayInput is an input type that accepts SwitchDhcpServerPolicyArray and SwitchDhcpServerPolicyArrayOutput values.
// You can construct a concrete instance of `SwitchDhcpServerPolicyArrayInput` via:
//
//	SwitchDhcpServerPolicyArray{ SwitchDhcpServerPolicyArgs{...} }
type SwitchDhcpServerPolicyArrayInput interface {
	pulumi.Input

	ToSwitchDhcpServerPolicyArrayOutput() SwitchDhcpServerPolicyArrayOutput
	ToSwitchDhcpServerPolicyArrayOutputWithContext(context.Context) SwitchDhcpServerPolicyArrayOutput
}

type SwitchDhcpServerPolicyArray []SwitchDhcpServerPolicyInput

func (SwitchDhcpServerPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchDhcpServerPolicy)(nil)).Elem()
}

func (i SwitchDhcpServerPolicyArray) ToSwitchDhcpServerPolicyArrayOutput() SwitchDhcpServerPolicyArrayOutput {
	return i.ToSwitchDhcpServerPolicyArrayOutputWithContext(context.Background())
}

func (i SwitchDhcpServerPolicyArray) ToSwitchDhcpServerPolicyArrayOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchDhcpServerPolicyArrayOutput)
}

// SwitchDhcpServerPolicyMapInput is an input type that accepts SwitchDhcpServerPolicyMap and SwitchDhcpServerPolicyMapOutput values.
// You can construct a concrete instance of `SwitchDhcpServerPolicyMapInput` via:
//
//	SwitchDhcpServerPolicyMap{ "key": SwitchDhcpServerPolicyArgs{...} }
type SwitchDhcpServerPolicyMapInput interface {
	pulumi.Input

	ToSwitchDhcpServerPolicyMapOutput() SwitchDhcpServerPolicyMapOutput
	ToSwitchDhcpServerPolicyMapOutputWithContext(context.Context) SwitchDhcpServerPolicyMapOutput
}

type SwitchDhcpServerPolicyMap map[string]SwitchDhcpServerPolicyInput

func (SwitchDhcpServerPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchDhcpServerPolicy)(nil)).Elem()
}

func (i SwitchDhcpServerPolicyMap) ToSwitchDhcpServerPolicyMapOutput() SwitchDhcpServerPolicyMapOutput {
	return i.ToSwitchDhcpServerPolicyMapOutputWithContext(context.Background())
}

func (i SwitchDhcpServerPolicyMap) ToSwitchDhcpServerPolicyMapOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchDhcpServerPolicyMapOutput)
}

type SwitchDhcpServerPolicyOutput struct{ *pulumi.OutputState }

func (SwitchDhcpServerPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchDhcpServerPolicy)(nil)).Elem()
}

func (o SwitchDhcpServerPolicyOutput) ToSwitchDhcpServerPolicyOutput() SwitchDhcpServerPolicyOutput {
	return o
}

func (o SwitchDhcpServerPolicyOutput) ToSwitchDhcpServerPolicyOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyOutput {
	return o
}

// Email alert settings for DHCP servers
func (o SwitchDhcpServerPolicyOutput) Alerts() SwitchDhcpServerPolicyAlertsOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) SwitchDhcpServerPolicyAlertsOutput { return v.Alerts }).(SwitchDhcpServerPolicyAlertsOutput)
}

// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
//
//	to block.An empty array will clear the entries.
func (o SwitchDhcpServerPolicyOutput) AllowedServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) pulumi.StringArrayOutput { return v.AllowedServers }).(pulumi.StringArrayOutput)
}

// Dynamic ARP Inspection settings
func (o SwitchDhcpServerPolicyOutput) ArpInspection() SwitchDhcpServerPolicyArpInspectionOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) SwitchDhcpServerPolicyArpInspectionOutput { return v.ArpInspection }).(SwitchDhcpServerPolicyArpInspectionOutput)
}

// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
//
//	to allow.An empty array will clear the entries.
func (o SwitchDhcpServerPolicyOutput) BlockedServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) pulumi.StringArrayOutput { return v.BlockedServers }).(pulumi.StringArrayOutput)
}

// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
func (o SwitchDhcpServerPolicyOutput) DefaultPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) pulumi.StringOutput { return v.DefaultPolicy }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchDhcpServerPolicyOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchDhcpServerPolicy) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type SwitchDhcpServerPolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchDhcpServerPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchDhcpServerPolicy)(nil)).Elem()
}

func (o SwitchDhcpServerPolicyArrayOutput) ToSwitchDhcpServerPolicyArrayOutput() SwitchDhcpServerPolicyArrayOutput {
	return o
}

func (o SwitchDhcpServerPolicyArrayOutput) ToSwitchDhcpServerPolicyArrayOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyArrayOutput {
	return o
}

func (o SwitchDhcpServerPolicyArrayOutput) Index(i pulumi.IntInput) SwitchDhcpServerPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchDhcpServerPolicy {
		return vs[0].([]*SwitchDhcpServerPolicy)[vs[1].(int)]
	}).(SwitchDhcpServerPolicyOutput)
}

type SwitchDhcpServerPolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchDhcpServerPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchDhcpServerPolicy)(nil)).Elem()
}

func (o SwitchDhcpServerPolicyMapOutput) ToSwitchDhcpServerPolicyMapOutput() SwitchDhcpServerPolicyMapOutput {
	return o
}

func (o SwitchDhcpServerPolicyMapOutput) ToSwitchDhcpServerPolicyMapOutputWithContext(ctx context.Context) SwitchDhcpServerPolicyMapOutput {
	return o
}

func (o SwitchDhcpServerPolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchDhcpServerPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchDhcpServerPolicy {
		return vs[0].(map[string]*SwitchDhcpServerPolicy)[vs[1].(string)]
	}).(SwitchDhcpServerPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchDhcpServerPolicyInput)(nil)).Elem(), &SwitchDhcpServerPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchDhcpServerPolicyArrayInput)(nil)).Elem(), SwitchDhcpServerPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchDhcpServerPolicyMapInput)(nil)).Elem(), SwitchDhcpServerPolicyMap{})
	pulumi.RegisterOutputType(SwitchDhcpServerPolicyOutput{})
	pulumi.RegisterOutputType(SwitchDhcpServerPolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchDhcpServerPolicyMapOutput{})
}
