// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchQosRulesOrder(ctx, "example", &networks.SwitchQosRulesOrderArgs{
//				Dscp:         pulumi.Int(1),
//				DstPort:      pulumi.Int(3000),
//				DstPortRange: pulumi.String("3000-3100"),
//				NetworkId:    pulumi.String("string"),
//				Protocol:     pulumi.String("TCP"),
//				SrcPort:      pulumi.Int(2000),
//				SrcPortRange: pulumi.String("70-80"),
//				Vlan:         pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchQosRulesOrderExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchQosRulesOrder:SwitchQosRulesOrder example "network_id,qos_rule_id"
// ```
type SwitchQosRulesOrder struct {
	pulumi.CustomResourceState

	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp pulumi.IntOutput `pulumi:"dscp"`
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort pulumi.IntOutput `pulumi:"dstPort"`
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange pulumi.StringOutput `pulumi:"dstPortRange"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// qosRuleId path parameter. Qos rule ID
	QosRuleId pulumi.StringOutput `pulumi:"qosRuleId"`
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort pulumi.IntOutput `pulumi:"srcPort"`
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange pulumi.StringOutput `pulumi:"srcPortRange"`
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan pulumi.IntOutput `pulumi:"vlan"`
}

// NewSwitchQosRulesOrder registers a new resource with the given unique name, arguments, and options.
func NewSwitchQosRulesOrder(ctx *pulumi.Context,
	name string, args *SwitchQosRulesOrderArgs, opts ...pulumi.ResourceOption) (*SwitchQosRulesOrder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchQosRulesOrder
	err := ctx.RegisterResource("meraki:networks/switchQosRulesOrder:SwitchQosRulesOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchQosRulesOrder gets an existing SwitchQosRulesOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchQosRulesOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchQosRulesOrderState, opts ...pulumi.ResourceOption) (*SwitchQosRulesOrder, error) {
	var resource SwitchQosRulesOrder
	err := ctx.ReadResource("meraki:networks/switchQosRulesOrder:SwitchQosRulesOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchQosRulesOrder resources.
type switchQosRulesOrderState struct {
	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp *int `pulumi:"dscp"`
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort *int `pulumi:"dstPort"`
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange *string `pulumi:"dstPortRange"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol *string `pulumi:"protocol"`
	// qosRuleId path parameter. Qos rule ID
	QosRuleId *string `pulumi:"qosRuleId"`
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort *int `pulumi:"srcPort"`
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange *string `pulumi:"srcPortRange"`
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan *int `pulumi:"vlan"`
}

type SwitchQosRulesOrderState struct {
	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp pulumi.IntPtrInput
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort pulumi.IntPtrInput
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol pulumi.StringPtrInput
	// qosRuleId path parameter. Qos rule ID
	QosRuleId pulumi.StringPtrInput
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort pulumi.IntPtrInput
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange pulumi.StringPtrInput
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan pulumi.IntPtrInput
}

func (SwitchQosRulesOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchQosRulesOrderState)(nil)).Elem()
}

type switchQosRulesOrderArgs struct {
	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp *int `pulumi:"dscp"`
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort *int `pulumi:"dstPort"`
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange *string `pulumi:"dstPortRange"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol *string `pulumi:"protocol"`
	// qosRuleId path parameter. Qos rule ID
	QosRuleId *string `pulumi:"qosRuleId"`
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort *int `pulumi:"srcPort"`
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange *string `pulumi:"srcPortRange"`
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a SwitchQosRulesOrder resource.
type SwitchQosRulesOrderArgs struct {
	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp pulumi.IntPtrInput
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort pulumi.IntPtrInput
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol pulumi.StringPtrInput
	// qosRuleId path parameter. Qos rule ID
	QosRuleId pulumi.StringPtrInput
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort pulumi.IntPtrInput
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange pulumi.StringPtrInput
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan pulumi.IntPtrInput
}

func (SwitchQosRulesOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchQosRulesOrderArgs)(nil)).Elem()
}

type SwitchQosRulesOrderInput interface {
	pulumi.Input

	ToSwitchQosRulesOrderOutput() SwitchQosRulesOrderOutput
	ToSwitchQosRulesOrderOutputWithContext(ctx context.Context) SwitchQosRulesOrderOutput
}

func (*SwitchQosRulesOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchQosRulesOrder)(nil)).Elem()
}

func (i *SwitchQosRulesOrder) ToSwitchQosRulesOrderOutput() SwitchQosRulesOrderOutput {
	return i.ToSwitchQosRulesOrderOutputWithContext(context.Background())
}

func (i *SwitchQosRulesOrder) ToSwitchQosRulesOrderOutputWithContext(ctx context.Context) SwitchQosRulesOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchQosRulesOrderOutput)
}

// SwitchQosRulesOrderArrayInput is an input type that accepts SwitchQosRulesOrderArray and SwitchQosRulesOrderArrayOutput values.
// You can construct a concrete instance of `SwitchQosRulesOrderArrayInput` via:
//
//	SwitchQosRulesOrderArray{ SwitchQosRulesOrderArgs{...} }
type SwitchQosRulesOrderArrayInput interface {
	pulumi.Input

	ToSwitchQosRulesOrderArrayOutput() SwitchQosRulesOrderArrayOutput
	ToSwitchQosRulesOrderArrayOutputWithContext(context.Context) SwitchQosRulesOrderArrayOutput
}

type SwitchQosRulesOrderArray []SwitchQosRulesOrderInput

func (SwitchQosRulesOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchQosRulesOrder)(nil)).Elem()
}

func (i SwitchQosRulesOrderArray) ToSwitchQosRulesOrderArrayOutput() SwitchQosRulesOrderArrayOutput {
	return i.ToSwitchQosRulesOrderArrayOutputWithContext(context.Background())
}

func (i SwitchQosRulesOrderArray) ToSwitchQosRulesOrderArrayOutputWithContext(ctx context.Context) SwitchQosRulesOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchQosRulesOrderArrayOutput)
}

// SwitchQosRulesOrderMapInput is an input type that accepts SwitchQosRulesOrderMap and SwitchQosRulesOrderMapOutput values.
// You can construct a concrete instance of `SwitchQosRulesOrderMapInput` via:
//
//	SwitchQosRulesOrderMap{ "key": SwitchQosRulesOrderArgs{...} }
type SwitchQosRulesOrderMapInput interface {
	pulumi.Input

	ToSwitchQosRulesOrderMapOutput() SwitchQosRulesOrderMapOutput
	ToSwitchQosRulesOrderMapOutputWithContext(context.Context) SwitchQosRulesOrderMapOutput
}

type SwitchQosRulesOrderMap map[string]SwitchQosRulesOrderInput

func (SwitchQosRulesOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchQosRulesOrder)(nil)).Elem()
}

func (i SwitchQosRulesOrderMap) ToSwitchQosRulesOrderMapOutput() SwitchQosRulesOrderMapOutput {
	return i.ToSwitchQosRulesOrderMapOutputWithContext(context.Background())
}

func (i SwitchQosRulesOrderMap) ToSwitchQosRulesOrderMapOutputWithContext(ctx context.Context) SwitchQosRulesOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchQosRulesOrderMapOutput)
}

type SwitchQosRulesOrderOutput struct{ *pulumi.OutputState }

func (SwitchQosRulesOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchQosRulesOrder)(nil)).Elem()
}

func (o SwitchQosRulesOrderOutput) ToSwitchQosRulesOrderOutput() SwitchQosRulesOrderOutput {
	return o
}

func (o SwitchQosRulesOrderOutput) ToSwitchQosRulesOrderOutputWithContext(ctx context.Context) SwitchQosRulesOrderOutput {
	return o
}

// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
func (o SwitchQosRulesOrderOutput) Dscp() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.IntOutput { return v.Dscp }).(pulumi.IntOutput)
}

// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
func (o SwitchQosRulesOrderOutput) DstPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.IntOutput { return v.DstPort }).(pulumi.IntOutput)
}

// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
func (o SwitchQosRulesOrderOutput) DstPortRange() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.StringOutput { return v.DstPortRange }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchQosRulesOrderOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
func (o SwitchQosRulesOrderOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// qosRuleId path parameter. Qos rule ID
func (o SwitchQosRulesOrderOutput) QosRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.StringOutput { return v.QosRuleId }).(pulumi.StringOutput)
}

// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
func (o SwitchQosRulesOrderOutput) SrcPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.IntOutput { return v.SrcPort }).(pulumi.IntOutput)
}

// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
func (o SwitchQosRulesOrderOutput) SrcPortRange() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.StringOutput { return v.SrcPortRange }).(pulumi.StringOutput)
}

// The VLAN of the incoming packet. A null value will match any VLAN.
func (o SwitchQosRulesOrderOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchQosRulesOrder) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

type SwitchQosRulesOrderArrayOutput struct{ *pulumi.OutputState }

func (SwitchQosRulesOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchQosRulesOrder)(nil)).Elem()
}

func (o SwitchQosRulesOrderArrayOutput) ToSwitchQosRulesOrderArrayOutput() SwitchQosRulesOrderArrayOutput {
	return o
}

func (o SwitchQosRulesOrderArrayOutput) ToSwitchQosRulesOrderArrayOutputWithContext(ctx context.Context) SwitchQosRulesOrderArrayOutput {
	return o
}

func (o SwitchQosRulesOrderArrayOutput) Index(i pulumi.IntInput) SwitchQosRulesOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchQosRulesOrder {
		return vs[0].([]*SwitchQosRulesOrder)[vs[1].(int)]
	}).(SwitchQosRulesOrderOutput)
}

type SwitchQosRulesOrderMapOutput struct{ *pulumi.OutputState }

func (SwitchQosRulesOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchQosRulesOrder)(nil)).Elem()
}

func (o SwitchQosRulesOrderMapOutput) ToSwitchQosRulesOrderMapOutput() SwitchQosRulesOrderMapOutput {
	return o
}

func (o SwitchQosRulesOrderMapOutput) ToSwitchQosRulesOrderMapOutputWithContext(ctx context.Context) SwitchQosRulesOrderMapOutput {
	return o
}

func (o SwitchQosRulesOrderMapOutput) MapIndex(k pulumi.StringInput) SwitchQosRulesOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchQosRulesOrder {
		return vs[0].(map[string]*SwitchQosRulesOrder)[vs[1].(string)]
	}).(SwitchQosRulesOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchQosRulesOrderInput)(nil)).Elem(), &SwitchQosRulesOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchQosRulesOrderArrayInput)(nil)).Elem(), SwitchQosRulesOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchQosRulesOrderMapInput)(nil)).Elem(), SwitchQosRulesOrderMap{})
	pulumi.RegisterOutputType(SwitchQosRulesOrderOutput{})
	pulumi.RegisterOutputType(SwitchQosRulesOrderArrayOutput{})
	pulumi.RegisterOutputType(SwitchQosRulesOrderMapOutput{})
}
