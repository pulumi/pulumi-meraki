// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceSsids(ctx, "example", &networks.ApplianceSsidsArgs{
//				AuthMode:      pulumi.String("8021x-radius"),
//				DefaultVlanId: pulumi.Int(1),
//				DhcpEnforcedDeauthentication: &networks.ApplianceSsidsDhcpEnforcedDeauthenticationArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				Dot11w: &networks.ApplianceSsidsDot11wArgs{
//					Enabled:  pulumi.Bool(true),
//					Required: pulumi.Bool(true),
//				},
//				Enabled:        pulumi.Bool(true),
//				EncryptionMode: pulumi.String("wpa"),
//				Name:           pulumi.String("My SSID"),
//				NetworkId:      pulumi.String("string"),
//				Number:         pulumi.Int("string"),
//				Psk:            pulumi.String("psk"),
//				RadiusServers: networks.ApplianceSsidsRadiusServerArray{
//					&networks.ApplianceSsidsRadiusServerArgs{
//						Host:   pulumi.String("0.0.0.0"),
//						Port:   pulumi.Int(1000),
//						Secret: pulumi.String("secret"),
//					},
//				},
//				Visible:           pulumi.Bool(true),
//				WpaEncryptionMode: pulumi.String("WPA2 only"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceSsidsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceSsids:ApplianceSsids example "network_id,number"
// ```
type ApplianceSsids struct {
	pulumi.CustomResourceState

	// The association control method for the SSID.
	AuthMode pulumi.StringOutput `pulumi:"authMode"`
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanId pulumi.IntOutput `pulumi:"defaultVlanId"`
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication ApplianceSsidsDhcpEnforcedDeauthenticationOutput `pulumi:"dhcpEnforcedDeauthentication"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w ApplianceSsidsDot11wOutput `pulumi:"dot11w"`
	// Whether or not the SSID is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The psk encryption mode for the SSID.
	EncryptionMode pulumi.StringOutput `pulumi:"encryptionMode"`
	// The name of the SSID.
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The number of the SSID.
	Number pulumi.IntOutput `pulumi:"number"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk pulumi.StringOutput `pulumi:"psk"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers ApplianceSsidsRadiusServerArrayOutput `pulumi:"radiusServers"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServersResponses ApplianceSsidsRadiusServersResponseArrayOutput `pulumi:"radiusServersResponses"`
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible pulumi.BoolOutput `pulumi:"visible"`
	// WPA encryption mode for the SSID.
	WpaEncryptionMode pulumi.StringOutput `pulumi:"wpaEncryptionMode"`
}

// NewApplianceSsids registers a new resource with the given unique name, arguments, and options.
func NewApplianceSsids(ctx *pulumi.Context,
	name string, args *ApplianceSsidsArgs, opts ...pulumi.ResourceOption) (*ApplianceSsids, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceSsids
	err := ctx.RegisterResource("meraki:networks/applianceSsids:ApplianceSsids", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceSsids gets an existing ApplianceSsids resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceSsids(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceSsidsState, opts ...pulumi.ResourceOption) (*ApplianceSsids, error) {
	var resource ApplianceSsids
	err := ctx.ReadResource("meraki:networks/applianceSsids:ApplianceSsids", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceSsids resources.
type applianceSsidsState struct {
	// The association control method for the SSID.
	AuthMode *string `pulumi:"authMode"`
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanId *int `pulumi:"defaultVlanId"`
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication *ApplianceSsidsDhcpEnforcedDeauthentication `pulumi:"dhcpEnforcedDeauthentication"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w *ApplianceSsidsDot11w `pulumi:"dot11w"`
	// Whether or not the SSID is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The psk encryption mode for the SSID.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// The name of the SSID.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The number of the SSID.
	Number *int `pulumi:"number"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk *string `pulumi:"psk"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers []ApplianceSsidsRadiusServer `pulumi:"radiusServers"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServersResponses []ApplianceSsidsRadiusServersResponse `pulumi:"radiusServersResponses"`
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible *bool `pulumi:"visible"`
	// WPA encryption mode for the SSID.
	WpaEncryptionMode *string `pulumi:"wpaEncryptionMode"`
}

type ApplianceSsidsState struct {
	// The association control method for the SSID.
	AuthMode pulumi.StringPtrInput
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanId pulumi.IntPtrInput
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication ApplianceSsidsDhcpEnforcedDeauthenticationPtrInput
	// The current setting for Protected Management Frames (802.11w).
	Dot11w ApplianceSsidsDot11wPtrInput
	// Whether or not the SSID is enabled.
	Enabled pulumi.BoolPtrInput
	// The psk encryption mode for the SSID.
	EncryptionMode pulumi.StringPtrInput
	// The name of the SSID.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The number of the SSID.
	Number pulumi.IntPtrInput
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk pulumi.StringPtrInput
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers ApplianceSsidsRadiusServerArrayInput
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServersResponses ApplianceSsidsRadiusServersResponseArrayInput
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible pulumi.BoolPtrInput
	// WPA encryption mode for the SSID.
	WpaEncryptionMode pulumi.StringPtrInput
}

func (ApplianceSsidsState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceSsidsState)(nil)).Elem()
}

type applianceSsidsArgs struct {
	// The association control method for the SSID.
	AuthMode *string `pulumi:"authMode"`
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanId *int `pulumi:"defaultVlanId"`
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication *ApplianceSsidsDhcpEnforcedDeauthentication `pulumi:"dhcpEnforcedDeauthentication"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w *ApplianceSsidsDot11w `pulumi:"dot11w"`
	// Whether or not the SSID is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The psk encryption mode for the SSID.
	EncryptionMode *string `pulumi:"encryptionMode"`
	// The name of the SSID.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The number of the SSID.
	Number int `pulumi:"number"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk *string `pulumi:"psk"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers []ApplianceSsidsRadiusServer `pulumi:"radiusServers"`
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible *bool `pulumi:"visible"`
	// WPA encryption mode for the SSID.
	WpaEncryptionMode *string `pulumi:"wpaEncryptionMode"`
}

// The set of arguments for constructing a ApplianceSsids resource.
type ApplianceSsidsArgs struct {
	// The association control method for the SSID.
	AuthMode pulumi.StringPtrInput
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanId pulumi.IntPtrInput
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication ApplianceSsidsDhcpEnforcedDeauthenticationPtrInput
	// The current setting for Protected Management Frames (802.11w).
	Dot11w ApplianceSsidsDot11wPtrInput
	// Whether or not the SSID is enabled.
	Enabled pulumi.BoolPtrInput
	// The psk encryption mode for the SSID.
	EncryptionMode pulumi.StringPtrInput
	// The name of the SSID.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The number of the SSID.
	Number pulumi.IntInput
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk pulumi.StringPtrInput
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers ApplianceSsidsRadiusServerArrayInput
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible pulumi.BoolPtrInput
	// WPA encryption mode for the SSID.
	WpaEncryptionMode pulumi.StringPtrInput
}

func (ApplianceSsidsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceSsidsArgs)(nil)).Elem()
}

type ApplianceSsidsInput interface {
	pulumi.Input

	ToApplianceSsidsOutput() ApplianceSsidsOutput
	ToApplianceSsidsOutputWithContext(ctx context.Context) ApplianceSsidsOutput
}

func (*ApplianceSsids) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceSsids)(nil)).Elem()
}

func (i *ApplianceSsids) ToApplianceSsidsOutput() ApplianceSsidsOutput {
	return i.ToApplianceSsidsOutputWithContext(context.Background())
}

func (i *ApplianceSsids) ToApplianceSsidsOutputWithContext(ctx context.Context) ApplianceSsidsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSsidsOutput)
}

// ApplianceSsidsArrayInput is an input type that accepts ApplianceSsidsArray and ApplianceSsidsArrayOutput values.
// You can construct a concrete instance of `ApplianceSsidsArrayInput` via:
//
//	ApplianceSsidsArray{ ApplianceSsidsArgs{...} }
type ApplianceSsidsArrayInput interface {
	pulumi.Input

	ToApplianceSsidsArrayOutput() ApplianceSsidsArrayOutput
	ToApplianceSsidsArrayOutputWithContext(context.Context) ApplianceSsidsArrayOutput
}

type ApplianceSsidsArray []ApplianceSsidsInput

func (ApplianceSsidsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceSsids)(nil)).Elem()
}

func (i ApplianceSsidsArray) ToApplianceSsidsArrayOutput() ApplianceSsidsArrayOutput {
	return i.ToApplianceSsidsArrayOutputWithContext(context.Background())
}

func (i ApplianceSsidsArray) ToApplianceSsidsArrayOutputWithContext(ctx context.Context) ApplianceSsidsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSsidsArrayOutput)
}

// ApplianceSsidsMapInput is an input type that accepts ApplianceSsidsMap and ApplianceSsidsMapOutput values.
// You can construct a concrete instance of `ApplianceSsidsMapInput` via:
//
//	ApplianceSsidsMap{ "key": ApplianceSsidsArgs{...} }
type ApplianceSsidsMapInput interface {
	pulumi.Input

	ToApplianceSsidsMapOutput() ApplianceSsidsMapOutput
	ToApplianceSsidsMapOutputWithContext(context.Context) ApplianceSsidsMapOutput
}

type ApplianceSsidsMap map[string]ApplianceSsidsInput

func (ApplianceSsidsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceSsids)(nil)).Elem()
}

func (i ApplianceSsidsMap) ToApplianceSsidsMapOutput() ApplianceSsidsMapOutput {
	return i.ToApplianceSsidsMapOutputWithContext(context.Background())
}

func (i ApplianceSsidsMap) ToApplianceSsidsMapOutputWithContext(ctx context.Context) ApplianceSsidsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSsidsMapOutput)
}

type ApplianceSsidsOutput struct{ *pulumi.OutputState }

func (ApplianceSsidsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceSsids)(nil)).Elem()
}

func (o ApplianceSsidsOutput) ToApplianceSsidsOutput() ApplianceSsidsOutput {
	return o
}

func (o ApplianceSsidsOutput) ToApplianceSsidsOutputWithContext(ctx context.Context) ApplianceSsidsOutput {
	return o
}

// The association control method for the SSID.
func (o ApplianceSsidsOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.AuthMode }).(pulumi.StringOutput)
}

// The VLAN ID of the VLAN associated to this SSID.
func (o ApplianceSsidsOutput) DefaultVlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.IntOutput { return v.DefaultVlanId }).(pulumi.IntOutput)
}

// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
func (o ApplianceSsidsOutput) DhcpEnforcedDeauthentication() ApplianceSsidsDhcpEnforcedDeauthenticationOutput {
	return o.ApplyT(func(v *ApplianceSsids) ApplianceSsidsDhcpEnforcedDeauthenticationOutput {
		return v.DhcpEnforcedDeauthentication
	}).(ApplianceSsidsDhcpEnforcedDeauthenticationOutput)
}

// The current setting for Protected Management Frames (802.11w).
func (o ApplianceSsidsOutput) Dot11w() ApplianceSsidsDot11wOutput {
	return o.ApplyT(func(v *ApplianceSsids) ApplianceSsidsDot11wOutput { return v.Dot11w }).(ApplianceSsidsDot11wOutput)
}

// Whether or not the SSID is enabled.
func (o ApplianceSsidsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The psk encryption mode for the SSID.
func (o ApplianceSsidsOutput) EncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.EncryptionMode }).(pulumi.StringOutput)
}

// The name of the SSID.
func (o ApplianceSsidsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o ApplianceSsidsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The number of the SSID.
func (o ApplianceSsidsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
func (o ApplianceSsidsOutput) Psk() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.Psk }).(pulumi.StringOutput)
}

// The RADIUS 802.1x servers to be used for authentication.
func (o ApplianceSsidsOutput) RadiusServers() ApplianceSsidsRadiusServerArrayOutput {
	return o.ApplyT(func(v *ApplianceSsids) ApplianceSsidsRadiusServerArrayOutput { return v.RadiusServers }).(ApplianceSsidsRadiusServerArrayOutput)
}

// The RADIUS 802.1x servers to be used for authentication.
func (o ApplianceSsidsOutput) RadiusServersResponses() ApplianceSsidsRadiusServersResponseArrayOutput {
	return o.ApplyT(func(v *ApplianceSsids) ApplianceSsidsRadiusServersResponseArrayOutput {
		return v.RadiusServersResponses
	}).(ApplianceSsidsRadiusServersResponseArrayOutput)
}

// Boolean indicating whether the MX should advertise or hide this SSID.
func (o ApplianceSsidsOutput) Visible() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.BoolOutput { return v.Visible }).(pulumi.BoolOutput)
}

// WPA encryption mode for the SSID.
func (o ApplianceSsidsOutput) WpaEncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSsids) pulumi.StringOutput { return v.WpaEncryptionMode }).(pulumi.StringOutput)
}

type ApplianceSsidsArrayOutput struct{ *pulumi.OutputState }

func (ApplianceSsidsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceSsids)(nil)).Elem()
}

func (o ApplianceSsidsArrayOutput) ToApplianceSsidsArrayOutput() ApplianceSsidsArrayOutput {
	return o
}

func (o ApplianceSsidsArrayOutput) ToApplianceSsidsArrayOutputWithContext(ctx context.Context) ApplianceSsidsArrayOutput {
	return o
}

func (o ApplianceSsidsArrayOutput) Index(i pulumi.IntInput) ApplianceSsidsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceSsids {
		return vs[0].([]*ApplianceSsids)[vs[1].(int)]
	}).(ApplianceSsidsOutput)
}

type ApplianceSsidsMapOutput struct{ *pulumi.OutputState }

func (ApplianceSsidsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceSsids)(nil)).Elem()
}

func (o ApplianceSsidsMapOutput) ToApplianceSsidsMapOutput() ApplianceSsidsMapOutput {
	return o
}

func (o ApplianceSsidsMapOutput) ToApplianceSsidsMapOutputWithContext(ctx context.Context) ApplianceSsidsMapOutput {
	return o
}

func (o ApplianceSsidsMapOutput) MapIndex(k pulumi.StringInput) ApplianceSsidsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceSsids {
		return vs[0].(map[string]*ApplianceSsids)[vs[1].(string)]
	}).(ApplianceSsidsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSsidsInput)(nil)).Elem(), &ApplianceSsids{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSsidsArrayInput)(nil)).Elem(), ApplianceSsidsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSsidsMapInput)(nil)).Elem(), ApplianceSsidsMap{})
	pulumi.RegisterOutputType(ApplianceSsidsOutput{})
	pulumi.RegisterOutputType(ApplianceSsidsArrayOutput{})
	pulumi.RegisterOutputType(ApplianceSsidsMapOutput{})
}
