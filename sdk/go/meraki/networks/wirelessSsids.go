// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsids:WirelessSsids example "network_id,number"
// ```
type WirelessSsids struct {
	pulumi.CustomResourceState

	// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
	ActiveDirectory WirelessSsidsActiveDirectoryPtrOutput `pulumi:"activeDirectory"`
	AdminSplashUrl  pulumi.StringOutput                   `pulumi:"adminSplashUrl"`
	// Boolean indicating whether or not adult content will be blocked
	AdultContentFilteringEnabled pulumi.BoolPtrOutput `pulumi:"adultContentFilteringEnabled"`
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds WirelessSsidsApTagsAndVlanIdArrayOutput `pulumi:"apTagsAndVlanIds"`
	// The association control method for the SSID
	AuthMode pulumi.StringOutput `pulumi:"authMode"`
	// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
	AvailabilityTags pulumi.StringArrayOutput `pulumi:"availabilityTags"`
	// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
	AvailableOnAllAps pulumi.BoolOutput `pulumi:"availableOnAllAps"`
	// The client-serving radio frequencies of this SSID in the default indoor RF profile
	BandSelection pulumi.StringOutput `pulumi:"bandSelection"`
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkId pulumi.StringPtrOutput `pulumi:"concentratorNetworkId"`
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanId pulumi.IntPtrOutput `pulumi:"defaultVlanId"`
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover pulumi.BoolPtrOutput `pulumi:"disassociateClientsOnVpnFailover"`
	// DNS servers rewrite settings
	DnsRewrite WirelessSsidsDnsRewritePtrOutput `pulumi:"dnsRewrite"`
	// The current setting for 802.11r
	Dot11r WirelessSsidsDot11rPtrOutput `pulumi:"dot11r"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w WirelessSsidsDot11wPtrOutput `pulumi:"dot11w"`
	// Whether or not the SSID is enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The psk encryption mode for the SSID
	EncryptionMode pulumi.StringOutput `pulumi:"encryptionMode"`
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess pulumi.StringPtrOutput `pulumi:"enterpriseAdminAccess"`
	// Ethernet over GRE settings
	Gre WirelessSsidsGrePtrOutput `pulumi:"gre"`
	// The client IP assignment mode
	IpAssignmentMode pulumi.StringOutput `pulumi:"ipAssignmentMode"`
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled pulumi.BoolPtrOutput `pulumi:"lanIsolationEnabled"`
	// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
	Ldap WirelessSsidsLdapPtrOutput `pulumi:"ldap"`
	// Extended local auth flag for Enterprise NAC
	LocalAuth pulumi.BoolOutput `pulumi:"localAuth"`
	// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
	LocalRadius WirelessSsidsLocalRadiusPtrOutput `pulumi:"localRadius"`
	// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
	MandatoryDhcpEnabled pulumi.BoolOutput `pulumi:"mandatoryDhcpEnabled"`
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
	MinBitrate pulumi.IntOutput `pulumi:"minBitrate"`
	// The name of the SSID
	Name pulumi.StringOutput `pulumi:"name"`
	// Named VLAN settings.
	NamedVlans WirelessSsidsNamedVlansPtrOutput `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Unique identifier of the SSID
	Number pulumi.IntOutput `pulumi:"number"`
	// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
	Oauth WirelessSsidsOauthPtrOutput `pulumi:"oauth"`
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown pulumi.IntOutput `pulumi:"perClientBandwidthLimitDown"`
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp pulumi.IntOutput `pulumi:"perClientBandwidthLimitUp"`
	// The total download bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitDown pulumi.IntOutput `pulumi:"perSsidBandwidthLimitDown"`
	// The total upload bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitUp pulumi.IntOutput `pulumi:"perSsidBandwidthLimitUp"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk pulumi.StringPtrOutput `pulumi:"psk"`
	// Whether or not RADIUS accounting is enabled
	RadiusAccountingEnabled pulumi.BoolPtrOutput `pulumi:"radiusAccountingEnabled"`
	// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
	RadiusAccountingInterimInterval pulumi.IntPtrOutput `pulumi:"radiusAccountingInterimInterval"`
	// List of RADIUS accounting 802.1X servers to be used for authentication
	RadiusAccountingServers WirelessSsidsRadiusAccountingServerArrayOutput `pulumi:"radiusAccountingServers"`
	// RADIUS attribute used to look up group policies
	RadiusAttributeForGroupPolicies pulumi.StringOutput `pulumi:"radiusAttributeForGroupPolicies"`
	// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusAuthenticationNasId pulumi.StringPtrOutput `pulumi:"radiusAuthenticationNasId"`
	// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusCalledStationId pulumi.StringPtrOutput `pulumi:"radiusCalledStationId"`
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled pulumi.BoolPtrOutput `pulumi:"radiusCoaEnabled"`
	// Whether RADIUS authentication is enabled
	RadiusEnabled pulumi.BoolOutput `pulumi:"radiusEnabled"`
	// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
	RadiusFailoverPolicy pulumi.StringOutput `pulumi:"radiusFailoverPolicy"`
	// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
	RadiusFallbackEnabled pulumi.BoolPtrOutput `pulumi:"radiusFallbackEnabled"`
	// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanEnabled pulumi.BoolPtrOutput `pulumi:"radiusGuestVlanEnabled"`
	// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanId pulumi.IntPtrOutput `pulumi:"radiusGuestVlanId"`
	// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
	RadiusLoadBalancingPolicy pulumi.StringOutput `pulumi:"radiusLoadBalancingPolicy"`
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride pulumi.BoolPtrOutput `pulumi:"radiusOverride"`
	// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
	RadiusProxyEnabled pulumi.BoolPtrOutput `pulumi:"radiusProxyEnabled"`
	// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
	RadiusServerAttemptsLimit pulumi.IntPtrOutput `pulumi:"radiusServerAttemptsLimit"`
	// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
	RadiusServerTimeout pulumi.IntPtrOutput `pulumi:"radiusServerTimeout"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers WirelessSsidsRadiusServerArrayOutput `pulumi:"radiusServers"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServersResponses WirelessSsidsRadiusServersResponseArrayOutput `pulumi:"radiusServersResponses"`
	// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
	RadiusTestingEnabled pulumi.BoolPtrOutput `pulumi:"radiusTestingEnabled"`
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkId pulumi.StringPtrOutput `pulumi:"secondaryConcentratorNetworkId"`
	// The SpeedBurst setting for this SSID'
	SpeedBurst WirelessSsidsSpeedBurstPtrOutput `pulumi:"speedBurst"`
	// Array of valid sponsor email domains for sponsored guest splash type.
	SplashGuestSponsorDomains pulumi.StringArrayOutput `pulumi:"splashGuestSponsorDomains"`
	// The type of splash page for the SSID
	SplashPage pulumi.StringOutput `pulumi:"splashPage"`
	// Splash page timeout
	SplashTimeout pulumi.StringOutput `pulumi:"splashTimeout"`
	// SSID Administrator access status
	SsidAdminAccessible pulumi.BoolOutput `pulumi:"ssidAdminAccessible"`
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging pulumi.BoolPtrOutput `pulumi:"useVlanTagging"`
	// Whether the SSID is advertised or hidden by the AP
	Visible pulumi.BoolOutput `pulumi:"visible"`
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanId pulumi.IntPtrOutput `pulumi:"vlanId"`
	// Allow users to access a configurable list of IP ranges prior to sign-on
	WalledGardenEnabled pulumi.BoolPtrOutput `pulumi:"walledGardenEnabled"`
	// Domain names and IP address ranges available in Walled Garden mode
	WalledGardenRanges pulumi.StringArrayOutput `pulumi:"walledGardenRanges"`
	// The types of WPA encryption
	WpaEncryptionMode pulumi.StringOutput `pulumi:"wpaEncryptionMode"`
}

// NewWirelessSsids registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsids(ctx *pulumi.Context,
	name string, args *WirelessSsidsArgs, opts ...pulumi.ResourceOption) (*WirelessSsids, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsids
	err := ctx.RegisterResource("meraki:networks/wirelessSsids:WirelessSsids", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsids gets an existing WirelessSsids resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsids(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsState, opts ...pulumi.ResourceOption) (*WirelessSsids, error) {
	var resource WirelessSsids
	err := ctx.ReadResource("meraki:networks/wirelessSsids:WirelessSsids", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsids resources.
type wirelessSsidsState struct {
	// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
	ActiveDirectory *WirelessSsidsActiveDirectory `pulumi:"activeDirectory"`
	AdminSplashUrl  *string                       `pulumi:"adminSplashUrl"`
	// Boolean indicating whether or not adult content will be blocked
	AdultContentFilteringEnabled *bool `pulumi:"adultContentFilteringEnabled"`
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds []WirelessSsidsApTagsAndVlanId `pulumi:"apTagsAndVlanIds"`
	// The association control method for the SSID
	AuthMode *string `pulumi:"authMode"`
	// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
	AvailabilityTags []string `pulumi:"availabilityTags"`
	// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
	AvailableOnAllAps *bool `pulumi:"availableOnAllAps"`
	// The client-serving radio frequencies of this SSID in the default indoor RF profile
	BandSelection *string `pulumi:"bandSelection"`
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkId *string `pulumi:"concentratorNetworkId"`
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanId *int `pulumi:"defaultVlanId"`
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover *bool `pulumi:"disassociateClientsOnVpnFailover"`
	// DNS servers rewrite settings
	DnsRewrite *WirelessSsidsDnsRewrite `pulumi:"dnsRewrite"`
	// The current setting for 802.11r
	Dot11r *WirelessSsidsDot11r `pulumi:"dot11r"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w *WirelessSsidsDot11w `pulumi:"dot11w"`
	// Whether or not the SSID is enabled
	Enabled *bool `pulumi:"enabled"`
	// The psk encryption mode for the SSID
	EncryptionMode *string `pulumi:"encryptionMode"`
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess *string `pulumi:"enterpriseAdminAccess"`
	// Ethernet over GRE settings
	Gre *WirelessSsidsGre `pulumi:"gre"`
	// The client IP assignment mode
	IpAssignmentMode *string `pulumi:"ipAssignmentMode"`
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled *bool `pulumi:"lanIsolationEnabled"`
	// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
	Ldap *WirelessSsidsLdap `pulumi:"ldap"`
	// Extended local auth flag for Enterprise NAC
	LocalAuth *bool `pulumi:"localAuth"`
	// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
	LocalRadius *WirelessSsidsLocalRadius `pulumi:"localRadius"`
	// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
	MandatoryDhcpEnabled *bool `pulumi:"mandatoryDhcpEnabled"`
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
	MinBitrate *int `pulumi:"minBitrate"`
	// The name of the SSID
	Name *string `pulumi:"name"`
	// Named VLAN settings.
	NamedVlans *WirelessSsidsNamedVlans `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Unique identifier of the SSID
	Number *int `pulumi:"number"`
	// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
	Oauth *WirelessSsidsOauth `pulumi:"oauth"`
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown *int `pulumi:"perClientBandwidthLimitDown"`
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp *int `pulumi:"perClientBandwidthLimitUp"`
	// The total download bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitDown *int `pulumi:"perSsidBandwidthLimitDown"`
	// The total upload bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitUp *int `pulumi:"perSsidBandwidthLimitUp"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk *string `pulumi:"psk"`
	// Whether or not RADIUS accounting is enabled
	RadiusAccountingEnabled *bool `pulumi:"radiusAccountingEnabled"`
	// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
	RadiusAccountingInterimInterval *int `pulumi:"radiusAccountingInterimInterval"`
	// List of RADIUS accounting 802.1X servers to be used for authentication
	RadiusAccountingServers []WirelessSsidsRadiusAccountingServer `pulumi:"radiusAccountingServers"`
	// RADIUS attribute used to look up group policies
	RadiusAttributeForGroupPolicies *string `pulumi:"radiusAttributeForGroupPolicies"`
	// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusAuthenticationNasId *string `pulumi:"radiusAuthenticationNasId"`
	// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusCalledStationId *string `pulumi:"radiusCalledStationId"`
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled *bool `pulumi:"radiusCoaEnabled"`
	// Whether RADIUS authentication is enabled
	RadiusEnabled *bool `pulumi:"radiusEnabled"`
	// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
	RadiusFailoverPolicy *string `pulumi:"radiusFailoverPolicy"`
	// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
	RadiusFallbackEnabled *bool `pulumi:"radiusFallbackEnabled"`
	// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanEnabled *bool `pulumi:"radiusGuestVlanEnabled"`
	// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanId *int `pulumi:"radiusGuestVlanId"`
	// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
	RadiusLoadBalancingPolicy *string `pulumi:"radiusLoadBalancingPolicy"`
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride *bool `pulumi:"radiusOverride"`
	// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
	RadiusProxyEnabled *bool `pulumi:"radiusProxyEnabled"`
	// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
	RadiusServerAttemptsLimit *int `pulumi:"radiusServerAttemptsLimit"`
	// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
	RadiusServerTimeout *int `pulumi:"radiusServerTimeout"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers []WirelessSsidsRadiusServer `pulumi:"radiusServers"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServersResponses []WirelessSsidsRadiusServersResponse `pulumi:"radiusServersResponses"`
	// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
	RadiusTestingEnabled *bool `pulumi:"radiusTestingEnabled"`
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkId *string `pulumi:"secondaryConcentratorNetworkId"`
	// The SpeedBurst setting for this SSID'
	SpeedBurst *WirelessSsidsSpeedBurst `pulumi:"speedBurst"`
	// Array of valid sponsor email domains for sponsored guest splash type.
	SplashGuestSponsorDomains []string `pulumi:"splashGuestSponsorDomains"`
	// The type of splash page for the SSID
	SplashPage *string `pulumi:"splashPage"`
	// Splash page timeout
	SplashTimeout *string `pulumi:"splashTimeout"`
	// SSID Administrator access status
	SsidAdminAccessible *bool `pulumi:"ssidAdminAccessible"`
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging *bool `pulumi:"useVlanTagging"`
	// Whether the SSID is advertised or hidden by the AP
	Visible *bool `pulumi:"visible"`
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanId *int `pulumi:"vlanId"`
	// Allow users to access a configurable list of IP ranges prior to sign-on
	WalledGardenEnabled *bool `pulumi:"walledGardenEnabled"`
	// Domain names and IP address ranges available in Walled Garden mode
	WalledGardenRanges []string `pulumi:"walledGardenRanges"`
	// The types of WPA encryption
	WpaEncryptionMode *string `pulumi:"wpaEncryptionMode"`
}

type WirelessSsidsState struct {
	// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
	ActiveDirectory WirelessSsidsActiveDirectoryPtrInput
	AdminSplashUrl  pulumi.StringPtrInput
	// Boolean indicating whether or not adult content will be blocked
	AdultContentFilteringEnabled pulumi.BoolPtrInput
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds WirelessSsidsApTagsAndVlanIdArrayInput
	// The association control method for the SSID
	AuthMode pulumi.StringPtrInput
	// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
	AvailabilityTags pulumi.StringArrayInput
	// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
	AvailableOnAllAps pulumi.BoolPtrInput
	// The client-serving radio frequencies of this SSID in the default indoor RF profile
	BandSelection pulumi.StringPtrInput
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkId pulumi.StringPtrInput
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanId pulumi.IntPtrInput
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover pulumi.BoolPtrInput
	// DNS servers rewrite settings
	DnsRewrite WirelessSsidsDnsRewritePtrInput
	// The current setting for 802.11r
	Dot11r WirelessSsidsDot11rPtrInput
	// The current setting for Protected Management Frames (802.11w).
	Dot11w WirelessSsidsDot11wPtrInput
	// Whether or not the SSID is enabled
	Enabled pulumi.BoolPtrInput
	// The psk encryption mode for the SSID
	EncryptionMode pulumi.StringPtrInput
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess pulumi.StringPtrInput
	// Ethernet over GRE settings
	Gre WirelessSsidsGrePtrInput
	// The client IP assignment mode
	IpAssignmentMode pulumi.StringPtrInput
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled pulumi.BoolPtrInput
	// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
	Ldap WirelessSsidsLdapPtrInput
	// Extended local auth flag for Enterprise NAC
	LocalAuth pulumi.BoolPtrInput
	// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
	LocalRadius WirelessSsidsLocalRadiusPtrInput
	// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
	MandatoryDhcpEnabled pulumi.BoolPtrInput
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
	MinBitrate pulumi.IntPtrInput
	// The name of the SSID
	Name pulumi.StringPtrInput
	// Named VLAN settings.
	NamedVlans WirelessSsidsNamedVlansPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Unique identifier of the SSID
	Number pulumi.IntPtrInput
	// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
	Oauth WirelessSsidsOauthPtrInput
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown pulumi.IntPtrInput
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp pulumi.IntPtrInput
	// The total download bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitDown pulumi.IntPtrInput
	// The total upload bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitUp pulumi.IntPtrInput
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk pulumi.StringPtrInput
	// Whether or not RADIUS accounting is enabled
	RadiusAccountingEnabled pulumi.BoolPtrInput
	// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
	RadiusAccountingInterimInterval pulumi.IntPtrInput
	// List of RADIUS accounting 802.1X servers to be used for authentication
	RadiusAccountingServers WirelessSsidsRadiusAccountingServerArrayInput
	// RADIUS attribute used to look up group policies
	RadiusAttributeForGroupPolicies pulumi.StringPtrInput
	// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusAuthenticationNasId pulumi.StringPtrInput
	// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusCalledStationId pulumi.StringPtrInput
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled pulumi.BoolPtrInput
	// Whether RADIUS authentication is enabled
	RadiusEnabled pulumi.BoolPtrInput
	// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
	RadiusFailoverPolicy pulumi.StringPtrInput
	// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
	RadiusFallbackEnabled pulumi.BoolPtrInput
	// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanEnabled pulumi.BoolPtrInput
	// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanId pulumi.IntPtrInput
	// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
	RadiusLoadBalancingPolicy pulumi.StringPtrInput
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride pulumi.BoolPtrInput
	// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
	RadiusProxyEnabled pulumi.BoolPtrInput
	// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
	RadiusServerAttemptsLimit pulumi.IntPtrInput
	// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
	RadiusServerTimeout pulumi.IntPtrInput
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers WirelessSsidsRadiusServerArrayInput
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServersResponses WirelessSsidsRadiusServersResponseArrayInput
	// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
	RadiusTestingEnabled pulumi.BoolPtrInput
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkId pulumi.StringPtrInput
	// The SpeedBurst setting for this SSID'
	SpeedBurst WirelessSsidsSpeedBurstPtrInput
	// Array of valid sponsor email domains for sponsored guest splash type.
	SplashGuestSponsorDomains pulumi.StringArrayInput
	// The type of splash page for the SSID
	SplashPage pulumi.StringPtrInput
	// Splash page timeout
	SplashTimeout pulumi.StringPtrInput
	// SSID Administrator access status
	SsidAdminAccessible pulumi.BoolPtrInput
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging pulumi.BoolPtrInput
	// Whether the SSID is advertised or hidden by the AP
	Visible pulumi.BoolPtrInput
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanId pulumi.IntPtrInput
	// Allow users to access a configurable list of IP ranges prior to sign-on
	WalledGardenEnabled pulumi.BoolPtrInput
	// Domain names and IP address ranges available in Walled Garden mode
	WalledGardenRanges pulumi.StringArrayInput
	// The types of WPA encryption
	WpaEncryptionMode pulumi.StringPtrInput
}

func (WirelessSsidsState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsState)(nil)).Elem()
}

type wirelessSsidsArgs struct {
	// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
	ActiveDirectory *WirelessSsidsActiveDirectory `pulumi:"activeDirectory"`
	// Boolean indicating whether or not adult content will be blocked
	AdultContentFilteringEnabled *bool `pulumi:"adultContentFilteringEnabled"`
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds []WirelessSsidsApTagsAndVlanId `pulumi:"apTagsAndVlanIds"`
	// The association control method for the SSID
	AuthMode *string `pulumi:"authMode"`
	// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
	AvailabilityTags []string `pulumi:"availabilityTags"`
	// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
	AvailableOnAllAps *bool `pulumi:"availableOnAllAps"`
	// The client-serving radio frequencies of this SSID in the default indoor RF profile
	BandSelection *string `pulumi:"bandSelection"`
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkId *string `pulumi:"concentratorNetworkId"`
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanId *int `pulumi:"defaultVlanId"`
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover *bool `pulumi:"disassociateClientsOnVpnFailover"`
	// DNS servers rewrite settings
	DnsRewrite *WirelessSsidsDnsRewrite `pulumi:"dnsRewrite"`
	// The current setting for 802.11r
	Dot11r *WirelessSsidsDot11r `pulumi:"dot11r"`
	// The current setting for Protected Management Frames (802.11w).
	Dot11w *WirelessSsidsDot11w `pulumi:"dot11w"`
	// Whether or not the SSID is enabled
	Enabled *bool `pulumi:"enabled"`
	// The psk encryption mode for the SSID
	EncryptionMode *string `pulumi:"encryptionMode"`
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess *string `pulumi:"enterpriseAdminAccess"`
	// Ethernet over GRE settings
	Gre *WirelessSsidsGre `pulumi:"gre"`
	// The client IP assignment mode
	IpAssignmentMode *string `pulumi:"ipAssignmentMode"`
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled *bool `pulumi:"lanIsolationEnabled"`
	// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
	Ldap *WirelessSsidsLdap `pulumi:"ldap"`
	// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
	LocalRadius *WirelessSsidsLocalRadius `pulumi:"localRadius"`
	// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
	MandatoryDhcpEnabled *bool `pulumi:"mandatoryDhcpEnabled"`
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
	MinBitrate *int `pulumi:"minBitrate"`
	// The name of the SSID
	Name *string `pulumi:"name"`
	// Named VLAN settings.
	NamedVlans *WirelessSsidsNamedVlans `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Unique identifier of the SSID
	Number int `pulumi:"number"`
	// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
	Oauth *WirelessSsidsOauth `pulumi:"oauth"`
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown *int `pulumi:"perClientBandwidthLimitDown"`
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp *int `pulumi:"perClientBandwidthLimitUp"`
	// The total download bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitDown *int `pulumi:"perSsidBandwidthLimitDown"`
	// The total upload bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitUp *int `pulumi:"perSsidBandwidthLimitUp"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk *string `pulumi:"psk"`
	// Whether or not RADIUS accounting is enabled
	RadiusAccountingEnabled *bool `pulumi:"radiusAccountingEnabled"`
	// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
	RadiusAccountingInterimInterval *int `pulumi:"radiusAccountingInterimInterval"`
	// List of RADIUS accounting 802.1X servers to be used for authentication
	RadiusAccountingServers []WirelessSsidsRadiusAccountingServer `pulumi:"radiusAccountingServers"`
	// RADIUS attribute used to look up group policies
	RadiusAttributeForGroupPolicies *string `pulumi:"radiusAttributeForGroupPolicies"`
	// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusAuthenticationNasId *string `pulumi:"radiusAuthenticationNasId"`
	// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusCalledStationId *string `pulumi:"radiusCalledStationId"`
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled *bool `pulumi:"radiusCoaEnabled"`
	// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
	RadiusFailoverPolicy *string `pulumi:"radiusFailoverPolicy"`
	// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
	RadiusFallbackEnabled *bool `pulumi:"radiusFallbackEnabled"`
	// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanEnabled *bool `pulumi:"radiusGuestVlanEnabled"`
	// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanId *int `pulumi:"radiusGuestVlanId"`
	// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
	RadiusLoadBalancingPolicy *string `pulumi:"radiusLoadBalancingPolicy"`
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride *bool `pulumi:"radiusOverride"`
	// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
	RadiusProxyEnabled *bool `pulumi:"radiusProxyEnabled"`
	// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
	RadiusServerAttemptsLimit *int `pulumi:"radiusServerAttemptsLimit"`
	// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
	RadiusServerTimeout *int `pulumi:"radiusServerTimeout"`
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers []WirelessSsidsRadiusServer `pulumi:"radiusServers"`
	// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
	RadiusTestingEnabled *bool `pulumi:"radiusTestingEnabled"`
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkId *string `pulumi:"secondaryConcentratorNetworkId"`
	// The SpeedBurst setting for this SSID'
	SpeedBurst *WirelessSsidsSpeedBurst `pulumi:"speedBurst"`
	// Array of valid sponsor email domains for sponsored guest splash type.
	SplashGuestSponsorDomains []string `pulumi:"splashGuestSponsorDomains"`
	// The type of splash page for the SSID
	SplashPage *string `pulumi:"splashPage"`
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging *bool `pulumi:"useVlanTagging"`
	// Whether the SSID is advertised or hidden by the AP
	Visible *bool `pulumi:"visible"`
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanId *int `pulumi:"vlanId"`
	// Allow users to access a configurable list of IP ranges prior to sign-on
	WalledGardenEnabled *bool `pulumi:"walledGardenEnabled"`
	// Domain names and IP address ranges available in Walled Garden mode
	WalledGardenRanges []string `pulumi:"walledGardenRanges"`
	// The types of WPA encryption
	WpaEncryptionMode *string `pulumi:"wpaEncryptionMode"`
}

// The set of arguments for constructing a WirelessSsids resource.
type WirelessSsidsArgs struct {
	// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
	ActiveDirectory WirelessSsidsActiveDirectoryPtrInput
	// Boolean indicating whether or not adult content will be blocked
	AdultContentFilteringEnabled pulumi.BoolPtrInput
	// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	ApTagsAndVlanIds WirelessSsidsApTagsAndVlanIdArrayInput
	// The association control method for the SSID
	AuthMode pulumi.StringPtrInput
	// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
	AvailabilityTags pulumi.StringArrayInput
	// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
	AvailableOnAllAps pulumi.BoolPtrInput
	// The client-serving radio frequencies of this SSID in the default indoor RF profile
	BandSelection pulumi.StringPtrInput
	// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
	ConcentratorNetworkId pulumi.StringPtrInput
	// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	DefaultVlanId pulumi.IntPtrInput
	// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
	DisassociateClientsOnVpnFailover pulumi.BoolPtrInput
	// DNS servers rewrite settings
	DnsRewrite WirelessSsidsDnsRewritePtrInput
	// The current setting for 802.11r
	Dot11r WirelessSsidsDot11rPtrInput
	// The current setting for Protected Management Frames (802.11w).
	Dot11w WirelessSsidsDot11wPtrInput
	// Whether or not the SSID is enabled
	Enabled pulumi.BoolPtrInput
	// The psk encryption mode for the SSID
	EncryptionMode pulumi.StringPtrInput
	// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
	EnterpriseAdminAccess pulumi.StringPtrInput
	// Ethernet over GRE settings
	Gre WirelessSsidsGrePtrInput
	// The client IP assignment mode
	IpAssignmentMode pulumi.StringPtrInput
	// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
	LanIsolationEnabled pulumi.BoolPtrInput
	// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
	Ldap WirelessSsidsLdapPtrInput
	// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
	LocalRadius WirelessSsidsLocalRadiusPtrInput
	// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
	MandatoryDhcpEnabled pulumi.BoolPtrInput
	// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
	MinBitrate pulumi.IntPtrInput
	// The name of the SSID
	Name pulumi.StringPtrInput
	// Named VLAN settings.
	NamedVlans WirelessSsidsNamedVlansPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Unique identifier of the SSID
	Number pulumi.IntInput
	// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
	Oauth WirelessSsidsOauthPtrInput
	// The download bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitDown pulumi.IntPtrInput
	// The upload bandwidth limit in Kbps. (0 represents no limit.)
	PerClientBandwidthLimitUp pulumi.IntPtrInput
	// The total download bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitDown pulumi.IntPtrInput
	// The total upload bandwidth limit in Kbps (0 represents no limit)
	PerSsidBandwidthLimitUp pulumi.IntPtrInput
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'
	Psk pulumi.StringPtrInput
	// Whether or not RADIUS accounting is enabled
	RadiusAccountingEnabled pulumi.BoolPtrInput
	// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
	RadiusAccountingInterimInterval pulumi.IntPtrInput
	// List of RADIUS accounting 802.1X servers to be used for authentication
	RadiusAccountingServers WirelessSsidsRadiusAccountingServerArrayInput
	// RADIUS attribute used to look up group policies
	RadiusAttributeForGroupPolicies pulumi.StringPtrInput
	// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusAuthenticationNasId pulumi.StringPtrInput
	// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
	RadiusCalledStationId pulumi.StringPtrInput
	// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
	RadiusCoaEnabled pulumi.BoolPtrInput
	// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
	RadiusFailoverPolicy pulumi.StringPtrInput
	// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
	RadiusFallbackEnabled pulumi.BoolPtrInput
	// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanEnabled pulumi.BoolPtrInput
	// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
	RadiusGuestVlanId pulumi.IntPtrInput
	// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
	RadiusLoadBalancingPolicy pulumi.StringPtrInput
	// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
	RadiusOverride pulumi.BoolPtrInput
	// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
	RadiusProxyEnabled pulumi.BoolPtrInput
	// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
	RadiusServerAttemptsLimit pulumi.IntPtrInput
	// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
	RadiusServerTimeout pulumi.IntPtrInput
	// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
	RadiusServers WirelessSsidsRadiusServerArrayInput
	// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
	RadiusTestingEnabled pulumi.BoolPtrInput
	// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
	SecondaryConcentratorNetworkId pulumi.StringPtrInput
	// The SpeedBurst setting for this SSID'
	SpeedBurst WirelessSsidsSpeedBurstPtrInput
	// Array of valid sponsor email domains for sponsored guest splash type.
	SplashGuestSponsorDomains pulumi.StringArrayInput
	// The type of splash page for the SSID
	SplashPage pulumi.StringPtrInput
	// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
	UseVlanTagging pulumi.BoolPtrInput
	// Whether the SSID is advertised or hidden by the AP
	Visible pulumi.BoolPtrInput
	// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
	VlanId pulumi.IntPtrInput
	// Allow users to access a configurable list of IP ranges prior to sign-on
	WalledGardenEnabled pulumi.BoolPtrInput
	// Domain names and IP address ranges available in Walled Garden mode
	WalledGardenRanges pulumi.StringArrayInput
	// The types of WPA encryption
	WpaEncryptionMode pulumi.StringPtrInput
}

func (WirelessSsidsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsArgs)(nil)).Elem()
}

type WirelessSsidsInput interface {
	pulumi.Input

	ToWirelessSsidsOutput() WirelessSsidsOutput
	ToWirelessSsidsOutputWithContext(ctx context.Context) WirelessSsidsOutput
}

func (*WirelessSsids) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsids)(nil)).Elem()
}

func (i *WirelessSsids) ToWirelessSsidsOutput() WirelessSsidsOutput {
	return i.ToWirelessSsidsOutputWithContext(context.Background())
}

func (i *WirelessSsids) ToWirelessSsidsOutputWithContext(ctx context.Context) WirelessSsidsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsOutput)
}

// WirelessSsidsArrayInput is an input type that accepts WirelessSsidsArray and WirelessSsidsArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsArrayInput` via:
//
//	WirelessSsidsArray{ WirelessSsidsArgs{...} }
type WirelessSsidsArrayInput interface {
	pulumi.Input

	ToWirelessSsidsArrayOutput() WirelessSsidsArrayOutput
	ToWirelessSsidsArrayOutputWithContext(context.Context) WirelessSsidsArrayOutput
}

type WirelessSsidsArray []WirelessSsidsInput

func (WirelessSsidsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsids)(nil)).Elem()
}

func (i WirelessSsidsArray) ToWirelessSsidsArrayOutput() WirelessSsidsArrayOutput {
	return i.ToWirelessSsidsArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsArray) ToWirelessSsidsArrayOutputWithContext(ctx context.Context) WirelessSsidsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsArrayOutput)
}

// WirelessSsidsMapInput is an input type that accepts WirelessSsidsMap and WirelessSsidsMapOutput values.
// You can construct a concrete instance of `WirelessSsidsMapInput` via:
//
//	WirelessSsidsMap{ "key": WirelessSsidsArgs{...} }
type WirelessSsidsMapInput interface {
	pulumi.Input

	ToWirelessSsidsMapOutput() WirelessSsidsMapOutput
	ToWirelessSsidsMapOutputWithContext(context.Context) WirelessSsidsMapOutput
}

type WirelessSsidsMap map[string]WirelessSsidsInput

func (WirelessSsidsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsids)(nil)).Elem()
}

func (i WirelessSsidsMap) ToWirelessSsidsMapOutput() WirelessSsidsMapOutput {
	return i.ToWirelessSsidsMapOutputWithContext(context.Background())
}

func (i WirelessSsidsMap) ToWirelessSsidsMapOutputWithContext(ctx context.Context) WirelessSsidsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsMapOutput)
}

type WirelessSsidsOutput struct{ *pulumi.OutputState }

func (WirelessSsidsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsids)(nil)).Elem()
}

func (o WirelessSsidsOutput) ToWirelessSsidsOutput() WirelessSsidsOutput {
	return o
}

func (o WirelessSsidsOutput) ToWirelessSsidsOutputWithContext(ctx context.Context) WirelessSsidsOutput {
	return o
}

// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
func (o WirelessSsidsOutput) ActiveDirectory() WirelessSsidsActiveDirectoryPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsActiveDirectoryPtrOutput { return v.ActiveDirectory }).(WirelessSsidsActiveDirectoryPtrOutput)
}

func (o WirelessSsidsOutput) AdminSplashUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.AdminSplashUrl }).(pulumi.StringOutput)
}

// Boolean indicating whether or not adult content will be blocked
func (o WirelessSsidsOutput) AdultContentFilteringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.AdultContentFilteringEnabled }).(pulumi.BoolPtrOutput)
}

// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
func (o WirelessSsidsOutput) ApTagsAndVlanIds() WirelessSsidsApTagsAndVlanIdArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsApTagsAndVlanIdArrayOutput { return v.ApTagsAndVlanIds }).(WirelessSsidsApTagsAndVlanIdArrayOutput)
}

// The association control method for the SSID
func (o WirelessSsidsOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.AuthMode }).(pulumi.StringOutput)
}

// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
func (o WirelessSsidsOutput) AvailabilityTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringArrayOutput { return v.AvailabilityTags }).(pulumi.StringArrayOutput)
}

// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
func (o WirelessSsidsOutput) AvailableOnAllAps() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.AvailableOnAllAps }).(pulumi.BoolOutput)
}

// The client-serving radio frequencies of this SSID in the default indoor RF profile
func (o WirelessSsidsOutput) BandSelection() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.BandSelection }).(pulumi.StringOutput)
}

// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
func (o WirelessSsidsOutput) ConcentratorNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.ConcentratorNetworkId }).(pulumi.StringPtrOutput)
}

// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
func (o WirelessSsidsOutput) DefaultVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.DefaultVlanId }).(pulumi.IntPtrOutput)
}

// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
func (o WirelessSsidsOutput) DisassociateClientsOnVpnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.DisassociateClientsOnVpnFailover }).(pulumi.BoolPtrOutput)
}

// DNS servers rewrite settings
func (o WirelessSsidsOutput) DnsRewrite() WirelessSsidsDnsRewritePtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsDnsRewritePtrOutput { return v.DnsRewrite }).(WirelessSsidsDnsRewritePtrOutput)
}

// The current setting for 802.11r
func (o WirelessSsidsOutput) Dot11r() WirelessSsidsDot11rPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsDot11rPtrOutput { return v.Dot11r }).(WirelessSsidsDot11rPtrOutput)
}

// The current setting for Protected Management Frames (802.11w).
func (o WirelessSsidsOutput) Dot11w() WirelessSsidsDot11wPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsDot11wPtrOutput { return v.Dot11w }).(WirelessSsidsDot11wPtrOutput)
}

// Whether or not the SSID is enabled
func (o WirelessSsidsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The psk encryption mode for the SSID
func (o WirelessSsidsOutput) EncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.EncryptionMode }).(pulumi.StringOutput)
}

// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
func (o WirelessSsidsOutput) EnterpriseAdminAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.EnterpriseAdminAccess }).(pulumi.StringPtrOutput)
}

// Ethernet over GRE settings
func (o WirelessSsidsOutput) Gre() WirelessSsidsGrePtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsGrePtrOutput { return v.Gre }).(WirelessSsidsGrePtrOutput)
}

// The client IP assignment mode
func (o WirelessSsidsOutput) IpAssignmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.IpAssignmentMode }).(pulumi.StringOutput)
}

// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
func (o WirelessSsidsOutput) LanIsolationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.LanIsolationEnabled }).(pulumi.BoolPtrOutput)
}

// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
func (o WirelessSsidsOutput) Ldap() WirelessSsidsLdapPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsLdapPtrOutput { return v.Ldap }).(WirelessSsidsLdapPtrOutput)
}

// Extended local auth flag for Enterprise NAC
func (o WirelessSsidsOutput) LocalAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.LocalAuth }).(pulumi.BoolOutput)
}

// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
func (o WirelessSsidsOutput) LocalRadius() WirelessSsidsLocalRadiusPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsLocalRadiusPtrOutput { return v.LocalRadius }).(WirelessSsidsLocalRadiusPtrOutput)
}

// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
func (o WirelessSsidsOutput) MandatoryDhcpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.MandatoryDhcpEnabled }).(pulumi.BoolOutput)
}

// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
func (o WirelessSsidsOutput) MinBitrate() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.MinBitrate }).(pulumi.IntOutput)
}

// The name of the SSID
func (o WirelessSsidsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Named VLAN settings.
func (o WirelessSsidsOutput) NamedVlans() WirelessSsidsNamedVlansPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsNamedVlansPtrOutput { return v.NamedVlans }).(WirelessSsidsNamedVlansPtrOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Unique identifier of the SSID
func (o WirelessSsidsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
func (o WirelessSsidsOutput) Oauth() WirelessSsidsOauthPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsOauthPtrOutput { return v.Oauth }).(WirelessSsidsOauthPtrOutput)
}

// The download bandwidth limit in Kbps. (0 represents no limit.)
func (o WirelessSsidsOutput) PerClientBandwidthLimitDown() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.PerClientBandwidthLimitDown }).(pulumi.IntOutput)
}

// The upload bandwidth limit in Kbps. (0 represents no limit.)
func (o WirelessSsidsOutput) PerClientBandwidthLimitUp() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.PerClientBandwidthLimitUp }).(pulumi.IntOutput)
}

// The total download bandwidth limit in Kbps (0 represents no limit)
func (o WirelessSsidsOutput) PerSsidBandwidthLimitDown() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.PerSsidBandwidthLimitDown }).(pulumi.IntOutput)
}

// The total upload bandwidth limit in Kbps (0 represents no limit)
func (o WirelessSsidsOutput) PerSsidBandwidthLimitUp() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntOutput { return v.PerSsidBandwidthLimitUp }).(pulumi.IntOutput)
}

// The passkey for the SSID. This param is only valid if the authMode is 'psk'
func (o WirelessSsidsOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.Psk }).(pulumi.StringPtrOutput)
}

// Whether or not RADIUS accounting is enabled
func (o WirelessSsidsOutput) RadiusAccountingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusAccountingEnabled }).(pulumi.BoolPtrOutput)
}

// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
func (o WirelessSsidsOutput) RadiusAccountingInterimInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.RadiusAccountingInterimInterval }).(pulumi.IntPtrOutput)
}

// List of RADIUS accounting 802.1X servers to be used for authentication
func (o WirelessSsidsOutput) RadiusAccountingServers() WirelessSsidsRadiusAccountingServerArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsRadiusAccountingServerArrayOutput {
		return v.RadiusAccountingServers
	}).(WirelessSsidsRadiusAccountingServerArrayOutput)
}

// RADIUS attribute used to look up group policies
func (o WirelessSsidsOutput) RadiusAttributeForGroupPolicies() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.RadiusAttributeForGroupPolicies }).(pulumi.StringOutput)
}

// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
func (o WirelessSsidsOutput) RadiusAuthenticationNasId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.RadiusAuthenticationNasId }).(pulumi.StringPtrOutput)
}

// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
func (o WirelessSsidsOutput) RadiusCalledStationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.RadiusCalledStationId }).(pulumi.StringPtrOutput)
}

// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
func (o WirelessSsidsOutput) RadiusCoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusCoaEnabled }).(pulumi.BoolPtrOutput)
}

// Whether RADIUS authentication is enabled
func (o WirelessSsidsOutput) RadiusEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.RadiusEnabled }).(pulumi.BoolOutput)
}

// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
func (o WirelessSsidsOutput) RadiusFailoverPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.RadiusFailoverPolicy }).(pulumi.StringOutput)
}

// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
func (o WirelessSsidsOutput) RadiusFallbackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusFallbackEnabled }).(pulumi.BoolPtrOutput)
}

// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
func (o WirelessSsidsOutput) RadiusGuestVlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusGuestVlanEnabled }).(pulumi.BoolPtrOutput)
}

// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
func (o WirelessSsidsOutput) RadiusGuestVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.RadiusGuestVlanId }).(pulumi.IntPtrOutput)
}

// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
func (o WirelessSsidsOutput) RadiusLoadBalancingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.RadiusLoadBalancingPolicy }).(pulumi.StringOutput)
}

// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
func (o WirelessSsidsOutput) RadiusOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusOverride }).(pulumi.BoolPtrOutput)
}

// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
func (o WirelessSsidsOutput) RadiusProxyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusProxyEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
func (o WirelessSsidsOutput) RadiusServerAttemptsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.RadiusServerAttemptsLimit }).(pulumi.IntPtrOutput)
}

// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
func (o WirelessSsidsOutput) RadiusServerTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.RadiusServerTimeout }).(pulumi.IntPtrOutput)
}

// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
func (o WirelessSsidsOutput) RadiusServers() WirelessSsidsRadiusServerArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsRadiusServerArrayOutput { return v.RadiusServers }).(WirelessSsidsRadiusServerArrayOutput)
}

// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
func (o WirelessSsidsOutput) RadiusServersResponses() WirelessSsidsRadiusServersResponseArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsRadiusServersResponseArrayOutput { return v.RadiusServersResponses }).(WirelessSsidsRadiusServersResponseArrayOutput)
}

// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
func (o WirelessSsidsOutput) RadiusTestingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.RadiusTestingEnabled }).(pulumi.BoolPtrOutput)
}

// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
func (o WirelessSsidsOutput) SecondaryConcentratorNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringPtrOutput { return v.SecondaryConcentratorNetworkId }).(pulumi.StringPtrOutput)
}

// The SpeedBurst setting for this SSID'
func (o WirelessSsidsOutput) SpeedBurst() WirelessSsidsSpeedBurstPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) WirelessSsidsSpeedBurstPtrOutput { return v.SpeedBurst }).(WirelessSsidsSpeedBurstPtrOutput)
}

// Array of valid sponsor email domains for sponsored guest splash type.
func (o WirelessSsidsOutput) SplashGuestSponsorDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringArrayOutput { return v.SplashGuestSponsorDomains }).(pulumi.StringArrayOutput)
}

// The type of splash page for the SSID
func (o WirelessSsidsOutput) SplashPage() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.SplashPage }).(pulumi.StringOutput)
}

// Splash page timeout
func (o WirelessSsidsOutput) SplashTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.SplashTimeout }).(pulumi.StringOutput)
}

// SSID Administrator access status
func (o WirelessSsidsOutput) SsidAdminAccessible() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.SsidAdminAccessible }).(pulumi.BoolOutput)
}

// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
func (o WirelessSsidsOutput) UseVlanTagging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.UseVlanTagging }).(pulumi.BoolPtrOutput)
}

// Whether the SSID is advertised or hidden by the AP
func (o WirelessSsidsOutput) Visible() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolOutput { return v.Visible }).(pulumi.BoolOutput)
}

// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
func (o WirelessSsidsOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.IntPtrOutput { return v.VlanId }).(pulumi.IntPtrOutput)
}

// Allow users to access a configurable list of IP ranges prior to sign-on
func (o WirelessSsidsOutput) WalledGardenEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.BoolPtrOutput { return v.WalledGardenEnabled }).(pulumi.BoolPtrOutput)
}

// Domain names and IP address ranges available in Walled Garden mode
func (o WirelessSsidsOutput) WalledGardenRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringArrayOutput { return v.WalledGardenRanges }).(pulumi.StringArrayOutput)
}

// The types of WPA encryption
func (o WirelessSsidsOutput) WpaEncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsids) pulumi.StringOutput { return v.WpaEncryptionMode }).(pulumi.StringOutput)
}

type WirelessSsidsArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsids)(nil)).Elem()
}

func (o WirelessSsidsArrayOutput) ToWirelessSsidsArrayOutput() WirelessSsidsArrayOutput {
	return o
}

func (o WirelessSsidsArrayOutput) ToWirelessSsidsArrayOutputWithContext(ctx context.Context) WirelessSsidsArrayOutput {
	return o
}

func (o WirelessSsidsArrayOutput) Index(i pulumi.IntInput) WirelessSsidsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsids {
		return vs[0].([]*WirelessSsids)[vs[1].(int)]
	}).(WirelessSsidsOutput)
}

type WirelessSsidsMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsids)(nil)).Elem()
}

func (o WirelessSsidsMapOutput) ToWirelessSsidsMapOutput() WirelessSsidsMapOutput {
	return o
}

func (o WirelessSsidsMapOutput) ToWirelessSsidsMapOutputWithContext(ctx context.Context) WirelessSsidsMapOutput {
	return o
}

func (o WirelessSsidsMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsids {
		return vs[0].(map[string]*WirelessSsids)[vs[1].(string)]
	}).(WirelessSsidsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsInput)(nil)).Elem(), &WirelessSsids{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsArrayInput)(nil)).Elem(), WirelessSsidsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsMapInput)(nil)).Elem(), WirelessSsidsMap{})
	pulumi.RegisterOutputType(WirelessSsidsOutput{})
	pulumi.RegisterOutputType(WirelessSsidsArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsMapOutput{})
}
