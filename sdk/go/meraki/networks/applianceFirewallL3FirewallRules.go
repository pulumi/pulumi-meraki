// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceFirewallL3FirewallRules(ctx, "example", &networks.ApplianceFirewallL3FirewallRulesArgs{
//				NetworkId: pulumi.String("string"),
//				Rules: networks.ApplianceFirewallL3FirewallRulesRuleArray{
//					&networks.ApplianceFirewallL3FirewallRulesRuleArgs{
//						Comment:        pulumi.String("Allow TCP traffic to subnet with HTTP servers."),
//						Dest_cidr:      "192.168.1.0/24",
//						Dest_port:      "443",
//						Policy:         pulumi.String("allow"),
//						Protocol:       pulumi.String("tcp"),
//						Src_cidr:       "Any",
//						Src_port:       "Any",
//						Syslog_enabled: false,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceFirewallL3FirewallRulesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules example "network_id"
// ```
type ApplianceFirewallL3FirewallRules struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// An ordered array of the firewall rules (not including the default rule)
	Rules ApplianceFirewallL3FirewallRulesRuleArrayOutput `pulumi:"rules"`
	// An ordered array of the firewall rules (not including the default rule)
	RulesResponses ApplianceFirewallL3FirewallRulesRulesResponseArrayOutput `pulumi:"rulesResponses"`
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule pulumi.BoolOutput `pulumi:"syslogDefaultRule"`
}

// NewApplianceFirewallL3FirewallRules registers a new resource with the given unique name, arguments, and options.
func NewApplianceFirewallL3FirewallRules(ctx *pulumi.Context,
	name string, args *ApplianceFirewallL3FirewallRulesArgs, opts ...pulumi.ResourceOption) (*ApplianceFirewallL3FirewallRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceFirewallL3FirewallRules
	err := ctx.RegisterResource("meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceFirewallL3FirewallRules gets an existing ApplianceFirewallL3FirewallRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceFirewallL3FirewallRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceFirewallL3FirewallRulesState, opts ...pulumi.ResourceOption) (*ApplianceFirewallL3FirewallRules, error) {
	var resource ApplianceFirewallL3FirewallRules
	err := ctx.ReadResource("meraki:networks/applianceFirewallL3FirewallRules:ApplianceFirewallL3FirewallRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceFirewallL3FirewallRules resources.
type applianceFirewallL3FirewallRulesState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// An ordered array of the firewall rules (not including the default rule)
	Rules []ApplianceFirewallL3FirewallRulesRule `pulumi:"rules"`
	// An ordered array of the firewall rules (not including the default rule)
	RulesResponses []ApplianceFirewallL3FirewallRulesRulesResponse `pulumi:"rulesResponses"`
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule *bool `pulumi:"syslogDefaultRule"`
}

type ApplianceFirewallL3FirewallRulesState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// An ordered array of the firewall rules (not including the default rule)
	Rules ApplianceFirewallL3FirewallRulesRuleArrayInput
	// An ordered array of the firewall rules (not including the default rule)
	RulesResponses ApplianceFirewallL3FirewallRulesRulesResponseArrayInput
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule pulumi.BoolPtrInput
}

func (ApplianceFirewallL3FirewallRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallL3FirewallRulesState)(nil)).Elem()
}

type applianceFirewallL3FirewallRulesArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// An ordered array of the firewall rules (not including the default rule)
	Rules []ApplianceFirewallL3FirewallRulesRule `pulumi:"rules"`
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule *bool `pulumi:"syslogDefaultRule"`
}

// The set of arguments for constructing a ApplianceFirewallL3FirewallRules resource.
type ApplianceFirewallL3FirewallRulesArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// An ordered array of the firewall rules (not including the default rule)
	Rules ApplianceFirewallL3FirewallRulesRuleArrayInput
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule pulumi.BoolPtrInput
}

func (ApplianceFirewallL3FirewallRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallL3FirewallRulesArgs)(nil)).Elem()
}

type ApplianceFirewallL3FirewallRulesInput interface {
	pulumi.Input

	ToApplianceFirewallL3FirewallRulesOutput() ApplianceFirewallL3FirewallRulesOutput
	ToApplianceFirewallL3FirewallRulesOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesOutput
}

func (*ApplianceFirewallL3FirewallRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (i *ApplianceFirewallL3FirewallRules) ToApplianceFirewallL3FirewallRulesOutput() ApplianceFirewallL3FirewallRulesOutput {
	return i.ToApplianceFirewallL3FirewallRulesOutputWithContext(context.Background())
}

func (i *ApplianceFirewallL3FirewallRules) ToApplianceFirewallL3FirewallRulesOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallL3FirewallRulesOutput)
}

// ApplianceFirewallL3FirewallRulesArrayInput is an input type that accepts ApplianceFirewallL3FirewallRulesArray and ApplianceFirewallL3FirewallRulesArrayOutput values.
// You can construct a concrete instance of `ApplianceFirewallL3FirewallRulesArrayInput` via:
//
//	ApplianceFirewallL3FirewallRulesArray{ ApplianceFirewallL3FirewallRulesArgs{...} }
type ApplianceFirewallL3FirewallRulesArrayInput interface {
	pulumi.Input

	ToApplianceFirewallL3FirewallRulesArrayOutput() ApplianceFirewallL3FirewallRulesArrayOutput
	ToApplianceFirewallL3FirewallRulesArrayOutputWithContext(context.Context) ApplianceFirewallL3FirewallRulesArrayOutput
}

type ApplianceFirewallL3FirewallRulesArray []ApplianceFirewallL3FirewallRulesInput

func (ApplianceFirewallL3FirewallRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (i ApplianceFirewallL3FirewallRulesArray) ToApplianceFirewallL3FirewallRulesArrayOutput() ApplianceFirewallL3FirewallRulesArrayOutput {
	return i.ToApplianceFirewallL3FirewallRulesArrayOutputWithContext(context.Background())
}

func (i ApplianceFirewallL3FirewallRulesArray) ToApplianceFirewallL3FirewallRulesArrayOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallL3FirewallRulesArrayOutput)
}

// ApplianceFirewallL3FirewallRulesMapInput is an input type that accepts ApplianceFirewallL3FirewallRulesMap and ApplianceFirewallL3FirewallRulesMapOutput values.
// You can construct a concrete instance of `ApplianceFirewallL3FirewallRulesMapInput` via:
//
//	ApplianceFirewallL3FirewallRulesMap{ "key": ApplianceFirewallL3FirewallRulesArgs{...} }
type ApplianceFirewallL3FirewallRulesMapInput interface {
	pulumi.Input

	ToApplianceFirewallL3FirewallRulesMapOutput() ApplianceFirewallL3FirewallRulesMapOutput
	ToApplianceFirewallL3FirewallRulesMapOutputWithContext(context.Context) ApplianceFirewallL3FirewallRulesMapOutput
}

type ApplianceFirewallL3FirewallRulesMap map[string]ApplianceFirewallL3FirewallRulesInput

func (ApplianceFirewallL3FirewallRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (i ApplianceFirewallL3FirewallRulesMap) ToApplianceFirewallL3FirewallRulesMapOutput() ApplianceFirewallL3FirewallRulesMapOutput {
	return i.ToApplianceFirewallL3FirewallRulesMapOutputWithContext(context.Background())
}

func (i ApplianceFirewallL3FirewallRulesMap) ToApplianceFirewallL3FirewallRulesMapOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallL3FirewallRulesMapOutput)
}

type ApplianceFirewallL3FirewallRulesOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallL3FirewallRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (o ApplianceFirewallL3FirewallRulesOutput) ToApplianceFirewallL3FirewallRulesOutput() ApplianceFirewallL3FirewallRulesOutput {
	return o
}

func (o ApplianceFirewallL3FirewallRulesOutput) ToApplianceFirewallL3FirewallRulesOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesOutput {
	return o
}

// networkId path parameter. Network ID
func (o ApplianceFirewallL3FirewallRulesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceFirewallL3FirewallRules) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// An ordered array of the firewall rules (not including the default rule)
func (o ApplianceFirewallL3FirewallRulesOutput) Rules() ApplianceFirewallL3FirewallRulesRuleArrayOutput {
	return o.ApplyT(func(v *ApplianceFirewallL3FirewallRules) ApplianceFirewallL3FirewallRulesRuleArrayOutput {
		return v.Rules
	}).(ApplianceFirewallL3FirewallRulesRuleArrayOutput)
}

// An ordered array of the firewall rules (not including the default rule)
func (o ApplianceFirewallL3FirewallRulesOutput) RulesResponses() ApplianceFirewallL3FirewallRulesRulesResponseArrayOutput {
	return o.ApplyT(func(v *ApplianceFirewallL3FirewallRules) ApplianceFirewallL3FirewallRulesRulesResponseArrayOutput {
		return v.RulesResponses
	}).(ApplianceFirewallL3FirewallRulesRulesResponseArrayOutput)
}

// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
func (o ApplianceFirewallL3FirewallRulesOutput) SyslogDefaultRule() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceFirewallL3FirewallRules) pulumi.BoolOutput { return v.SyslogDefaultRule }).(pulumi.BoolOutput)
}

type ApplianceFirewallL3FirewallRulesArrayOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallL3FirewallRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (o ApplianceFirewallL3FirewallRulesArrayOutput) ToApplianceFirewallL3FirewallRulesArrayOutput() ApplianceFirewallL3FirewallRulesArrayOutput {
	return o
}

func (o ApplianceFirewallL3FirewallRulesArrayOutput) ToApplianceFirewallL3FirewallRulesArrayOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesArrayOutput {
	return o
}

func (o ApplianceFirewallL3FirewallRulesArrayOutput) Index(i pulumi.IntInput) ApplianceFirewallL3FirewallRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceFirewallL3FirewallRules {
		return vs[0].([]*ApplianceFirewallL3FirewallRules)[vs[1].(int)]
	}).(ApplianceFirewallL3FirewallRulesOutput)
}

type ApplianceFirewallL3FirewallRulesMapOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallL3FirewallRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallL3FirewallRules)(nil)).Elem()
}

func (o ApplianceFirewallL3FirewallRulesMapOutput) ToApplianceFirewallL3FirewallRulesMapOutput() ApplianceFirewallL3FirewallRulesMapOutput {
	return o
}

func (o ApplianceFirewallL3FirewallRulesMapOutput) ToApplianceFirewallL3FirewallRulesMapOutputWithContext(ctx context.Context) ApplianceFirewallL3FirewallRulesMapOutput {
	return o
}

func (o ApplianceFirewallL3FirewallRulesMapOutput) MapIndex(k pulumi.StringInput) ApplianceFirewallL3FirewallRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceFirewallL3FirewallRules {
		return vs[0].(map[string]*ApplianceFirewallL3FirewallRules)[vs[1].(string)]
	}).(ApplianceFirewallL3FirewallRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallL3FirewallRulesInput)(nil)).Elem(), &ApplianceFirewallL3FirewallRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallL3FirewallRulesArrayInput)(nil)).Elem(), ApplianceFirewallL3FirewallRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallL3FirewallRulesMapInput)(nil)).Elem(), ApplianceFirewallL3FirewallRulesMap{})
	pulumi.RegisterOutputType(ApplianceFirewallL3FirewallRulesOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallL3FirewallRulesArrayOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallL3FirewallRulesMapOutput{})
}
