// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewCellularGatewaySubnetPool(ctx, "example", &networks.CellularGatewaySubnetPoolArgs{
//				Cidr:      pulumi.String("192.168.0.0/16"),
//				Mask:      pulumi.Int(24),
//				NetworkId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksCellularGatewaySubnetPoolExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/cellularGatewaySubnetPool:CellularGatewaySubnetPool example "network_id"
// ```
type CellularGatewaySubnetPool struct {
	pulumi.CustomResourceState

	// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
	Cidr           pulumi.StringOutput `pulumi:"cidr"`
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`
	// Mask used for the subnet of all MGs in  this network.
	Mask pulumi.IntOutput `pulumi:"mask"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput                        `pulumi:"networkId"`
	Subnets   CellularGatewaySubnetPoolSubnetArrayOutput `pulumi:"subnets"`
}

// NewCellularGatewaySubnetPool registers a new resource with the given unique name, arguments, and options.
func NewCellularGatewaySubnetPool(ctx *pulumi.Context,
	name string, args *CellularGatewaySubnetPoolArgs, opts ...pulumi.ResourceOption) (*CellularGatewaySubnetPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CellularGatewaySubnetPool
	err := ctx.RegisterResource("meraki:networks/cellularGatewaySubnetPool:CellularGatewaySubnetPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCellularGatewaySubnetPool gets an existing CellularGatewaySubnetPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCellularGatewaySubnetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellularGatewaySubnetPoolState, opts ...pulumi.ResourceOption) (*CellularGatewaySubnetPool, error) {
	var resource CellularGatewaySubnetPool
	err := ctx.ReadResource("meraki:networks/cellularGatewaySubnetPool:CellularGatewaySubnetPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CellularGatewaySubnetPool resources.
type cellularGatewaySubnetPoolState struct {
	// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
	Cidr           *string `pulumi:"cidr"`
	DeploymentMode *string `pulumi:"deploymentMode"`
	// Mask used for the subnet of all MGs in  this network.
	Mask *int `pulumi:"mask"`
	// networkId path parameter. Network ID
	NetworkId *string                           `pulumi:"networkId"`
	Subnets   []CellularGatewaySubnetPoolSubnet `pulumi:"subnets"`
}

type CellularGatewaySubnetPoolState struct {
	// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
	Cidr           pulumi.StringPtrInput
	DeploymentMode pulumi.StringPtrInput
	// Mask used for the subnet of all MGs in  this network.
	Mask pulumi.IntPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	Subnets   CellularGatewaySubnetPoolSubnetArrayInput
}

func (CellularGatewaySubnetPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularGatewaySubnetPoolState)(nil)).Elem()
}

type cellularGatewaySubnetPoolArgs struct {
	// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
	Cidr *string `pulumi:"cidr"`
	// Mask used for the subnet of all MGs in  this network.
	Mask *int `pulumi:"mask"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a CellularGatewaySubnetPool resource.
type CellularGatewaySubnetPoolArgs struct {
	// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
	Cidr pulumi.StringPtrInput
	// Mask used for the subnet of all MGs in  this network.
	Mask pulumi.IntPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (CellularGatewaySubnetPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularGatewaySubnetPoolArgs)(nil)).Elem()
}

type CellularGatewaySubnetPoolInput interface {
	pulumi.Input

	ToCellularGatewaySubnetPoolOutput() CellularGatewaySubnetPoolOutput
	ToCellularGatewaySubnetPoolOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolOutput
}

func (*CellularGatewaySubnetPool) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularGatewaySubnetPool)(nil)).Elem()
}

func (i *CellularGatewaySubnetPool) ToCellularGatewaySubnetPoolOutput() CellularGatewaySubnetPoolOutput {
	return i.ToCellularGatewaySubnetPoolOutputWithContext(context.Background())
}

func (i *CellularGatewaySubnetPool) ToCellularGatewaySubnetPoolOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewaySubnetPoolOutput)
}

// CellularGatewaySubnetPoolArrayInput is an input type that accepts CellularGatewaySubnetPoolArray and CellularGatewaySubnetPoolArrayOutput values.
// You can construct a concrete instance of `CellularGatewaySubnetPoolArrayInput` via:
//
//	CellularGatewaySubnetPoolArray{ CellularGatewaySubnetPoolArgs{...} }
type CellularGatewaySubnetPoolArrayInput interface {
	pulumi.Input

	ToCellularGatewaySubnetPoolArrayOutput() CellularGatewaySubnetPoolArrayOutput
	ToCellularGatewaySubnetPoolArrayOutputWithContext(context.Context) CellularGatewaySubnetPoolArrayOutput
}

type CellularGatewaySubnetPoolArray []CellularGatewaySubnetPoolInput

func (CellularGatewaySubnetPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularGatewaySubnetPool)(nil)).Elem()
}

func (i CellularGatewaySubnetPoolArray) ToCellularGatewaySubnetPoolArrayOutput() CellularGatewaySubnetPoolArrayOutput {
	return i.ToCellularGatewaySubnetPoolArrayOutputWithContext(context.Background())
}

func (i CellularGatewaySubnetPoolArray) ToCellularGatewaySubnetPoolArrayOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewaySubnetPoolArrayOutput)
}

// CellularGatewaySubnetPoolMapInput is an input type that accepts CellularGatewaySubnetPoolMap and CellularGatewaySubnetPoolMapOutput values.
// You can construct a concrete instance of `CellularGatewaySubnetPoolMapInput` via:
//
//	CellularGatewaySubnetPoolMap{ "key": CellularGatewaySubnetPoolArgs{...} }
type CellularGatewaySubnetPoolMapInput interface {
	pulumi.Input

	ToCellularGatewaySubnetPoolMapOutput() CellularGatewaySubnetPoolMapOutput
	ToCellularGatewaySubnetPoolMapOutputWithContext(context.Context) CellularGatewaySubnetPoolMapOutput
}

type CellularGatewaySubnetPoolMap map[string]CellularGatewaySubnetPoolInput

func (CellularGatewaySubnetPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularGatewaySubnetPool)(nil)).Elem()
}

func (i CellularGatewaySubnetPoolMap) ToCellularGatewaySubnetPoolMapOutput() CellularGatewaySubnetPoolMapOutput {
	return i.ToCellularGatewaySubnetPoolMapOutputWithContext(context.Background())
}

func (i CellularGatewaySubnetPoolMap) ToCellularGatewaySubnetPoolMapOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewaySubnetPoolMapOutput)
}

type CellularGatewaySubnetPoolOutput struct{ *pulumi.OutputState }

func (CellularGatewaySubnetPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularGatewaySubnetPool)(nil)).Elem()
}

func (o CellularGatewaySubnetPoolOutput) ToCellularGatewaySubnetPoolOutput() CellularGatewaySubnetPoolOutput {
	return o
}

func (o CellularGatewaySubnetPoolOutput) ToCellularGatewaySubnetPoolOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolOutput {
	return o
}

// CIDR of the pool of subnets. Each MG in this network will automatically pick a subnet from this pool.
func (o CellularGatewaySubnetPoolOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularGatewaySubnetPool) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

func (o CellularGatewaySubnetPoolOutput) DeploymentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularGatewaySubnetPool) pulumi.StringOutput { return v.DeploymentMode }).(pulumi.StringOutput)
}

// Mask used for the subnet of all MGs in  this network.
func (o CellularGatewaySubnetPoolOutput) Mask() pulumi.IntOutput {
	return o.ApplyT(func(v *CellularGatewaySubnetPool) pulumi.IntOutput { return v.Mask }).(pulumi.IntOutput)
}

// networkId path parameter. Network ID
func (o CellularGatewaySubnetPoolOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularGatewaySubnetPool) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o CellularGatewaySubnetPoolOutput) Subnets() CellularGatewaySubnetPoolSubnetArrayOutput {
	return o.ApplyT(func(v *CellularGatewaySubnetPool) CellularGatewaySubnetPoolSubnetArrayOutput { return v.Subnets }).(CellularGatewaySubnetPoolSubnetArrayOutput)
}

type CellularGatewaySubnetPoolArrayOutput struct{ *pulumi.OutputState }

func (CellularGatewaySubnetPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularGatewaySubnetPool)(nil)).Elem()
}

func (o CellularGatewaySubnetPoolArrayOutput) ToCellularGatewaySubnetPoolArrayOutput() CellularGatewaySubnetPoolArrayOutput {
	return o
}

func (o CellularGatewaySubnetPoolArrayOutput) ToCellularGatewaySubnetPoolArrayOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolArrayOutput {
	return o
}

func (o CellularGatewaySubnetPoolArrayOutput) Index(i pulumi.IntInput) CellularGatewaySubnetPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CellularGatewaySubnetPool {
		return vs[0].([]*CellularGatewaySubnetPool)[vs[1].(int)]
	}).(CellularGatewaySubnetPoolOutput)
}

type CellularGatewaySubnetPoolMapOutput struct{ *pulumi.OutputState }

func (CellularGatewaySubnetPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularGatewaySubnetPool)(nil)).Elem()
}

func (o CellularGatewaySubnetPoolMapOutput) ToCellularGatewaySubnetPoolMapOutput() CellularGatewaySubnetPoolMapOutput {
	return o
}

func (o CellularGatewaySubnetPoolMapOutput) ToCellularGatewaySubnetPoolMapOutputWithContext(ctx context.Context) CellularGatewaySubnetPoolMapOutput {
	return o
}

func (o CellularGatewaySubnetPoolMapOutput) MapIndex(k pulumi.StringInput) CellularGatewaySubnetPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CellularGatewaySubnetPool {
		return vs[0].(map[string]*CellularGatewaySubnetPool)[vs[1].(string)]
	}).(CellularGatewaySubnetPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewaySubnetPoolInput)(nil)).Elem(), &CellularGatewaySubnetPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewaySubnetPoolArrayInput)(nil)).Elem(), CellularGatewaySubnetPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewaySubnetPoolMapInput)(nil)).Elem(), CellularGatewaySubnetPoolMap{})
	pulumi.RegisterOutputType(CellularGatewaySubnetPoolOutput{})
	pulumi.RegisterOutputType(CellularGatewaySubnetPoolArrayOutput{})
	pulumi.RegisterOutputType(CellularGatewaySubnetPoolMapOutput{})
}
