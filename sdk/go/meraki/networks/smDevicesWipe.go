// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type SmDevicesWipe struct {
	pulumi.CustomResourceState

	Item SmDevicesWipeItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput           `pulumi:"networkId"`
	Parameters SmDevicesWipeParametersOutput `pulumi:"parameters"`
}

// NewSmDevicesWipe registers a new resource with the given unique name, arguments, and options.
func NewSmDevicesWipe(ctx *pulumi.Context,
	name string, args *SmDevicesWipeArgs, opts ...pulumi.ResourceOption) (*SmDevicesWipe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmDevicesWipe
	err := ctx.RegisterResource("meraki:networks/smDevicesWipe:SmDevicesWipe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmDevicesWipe gets an existing SmDevicesWipe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmDevicesWipe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmDevicesWipeState, opts ...pulumi.ResourceOption) (*SmDevicesWipe, error) {
	var resource SmDevicesWipe
	err := ctx.ReadResource("meraki:networks/smDevicesWipe:SmDevicesWipe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmDevicesWipe resources.
type smDevicesWipeState struct {
	Item *SmDevicesWipeItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                  `pulumi:"networkId"`
	Parameters *SmDevicesWipeParameters `pulumi:"parameters"`
}

type SmDevicesWipeState struct {
	Item SmDevicesWipeItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SmDevicesWipeParametersPtrInput
}

func (SmDevicesWipeState) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesWipeState)(nil)).Elem()
}

type smDevicesWipeArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                  `pulumi:"networkId"`
	Parameters SmDevicesWipeParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a SmDevicesWipe resource.
type SmDevicesWipeArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SmDevicesWipeParametersInput
}

func (SmDevicesWipeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesWipeArgs)(nil)).Elem()
}

type SmDevicesWipeInput interface {
	pulumi.Input

	ToSmDevicesWipeOutput() SmDevicesWipeOutput
	ToSmDevicesWipeOutputWithContext(ctx context.Context) SmDevicesWipeOutput
}

func (*SmDevicesWipe) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesWipe)(nil)).Elem()
}

func (i *SmDevicesWipe) ToSmDevicesWipeOutput() SmDevicesWipeOutput {
	return i.ToSmDevicesWipeOutputWithContext(context.Background())
}

func (i *SmDevicesWipe) ToSmDevicesWipeOutputWithContext(ctx context.Context) SmDevicesWipeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesWipeOutput)
}

// SmDevicesWipeArrayInput is an input type that accepts SmDevicesWipeArray and SmDevicesWipeArrayOutput values.
// You can construct a concrete instance of `SmDevicesWipeArrayInput` via:
//
//	SmDevicesWipeArray{ SmDevicesWipeArgs{...} }
type SmDevicesWipeArrayInput interface {
	pulumi.Input

	ToSmDevicesWipeArrayOutput() SmDevicesWipeArrayOutput
	ToSmDevicesWipeArrayOutputWithContext(context.Context) SmDevicesWipeArrayOutput
}

type SmDevicesWipeArray []SmDevicesWipeInput

func (SmDevicesWipeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesWipe)(nil)).Elem()
}

func (i SmDevicesWipeArray) ToSmDevicesWipeArrayOutput() SmDevicesWipeArrayOutput {
	return i.ToSmDevicesWipeArrayOutputWithContext(context.Background())
}

func (i SmDevicesWipeArray) ToSmDevicesWipeArrayOutputWithContext(ctx context.Context) SmDevicesWipeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesWipeArrayOutput)
}

// SmDevicesWipeMapInput is an input type that accepts SmDevicesWipeMap and SmDevicesWipeMapOutput values.
// You can construct a concrete instance of `SmDevicesWipeMapInput` via:
//
//	SmDevicesWipeMap{ "key": SmDevicesWipeArgs{...} }
type SmDevicesWipeMapInput interface {
	pulumi.Input

	ToSmDevicesWipeMapOutput() SmDevicesWipeMapOutput
	ToSmDevicesWipeMapOutputWithContext(context.Context) SmDevicesWipeMapOutput
}

type SmDevicesWipeMap map[string]SmDevicesWipeInput

func (SmDevicesWipeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesWipe)(nil)).Elem()
}

func (i SmDevicesWipeMap) ToSmDevicesWipeMapOutput() SmDevicesWipeMapOutput {
	return i.ToSmDevicesWipeMapOutputWithContext(context.Background())
}

func (i SmDevicesWipeMap) ToSmDevicesWipeMapOutputWithContext(ctx context.Context) SmDevicesWipeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesWipeMapOutput)
}

type SmDevicesWipeOutput struct{ *pulumi.OutputState }

func (SmDevicesWipeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesWipe)(nil)).Elem()
}

func (o SmDevicesWipeOutput) ToSmDevicesWipeOutput() SmDevicesWipeOutput {
	return o
}

func (o SmDevicesWipeOutput) ToSmDevicesWipeOutputWithContext(ctx context.Context) SmDevicesWipeOutput {
	return o
}

func (o SmDevicesWipeOutput) Item() SmDevicesWipeItemOutput {
	return o.ApplyT(func(v *SmDevicesWipe) SmDevicesWipeItemOutput { return v.Item }).(SmDevicesWipeItemOutput)
}

// networkId path parameter. Network ID
func (o SmDevicesWipeOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesWipe) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmDevicesWipeOutput) Parameters() SmDevicesWipeParametersOutput {
	return o.ApplyT(func(v *SmDevicesWipe) SmDevicesWipeParametersOutput { return v.Parameters }).(SmDevicesWipeParametersOutput)
}

type SmDevicesWipeArrayOutput struct{ *pulumi.OutputState }

func (SmDevicesWipeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesWipe)(nil)).Elem()
}

func (o SmDevicesWipeArrayOutput) ToSmDevicesWipeArrayOutput() SmDevicesWipeArrayOutput {
	return o
}

func (o SmDevicesWipeArrayOutput) ToSmDevicesWipeArrayOutputWithContext(ctx context.Context) SmDevicesWipeArrayOutput {
	return o
}

func (o SmDevicesWipeArrayOutput) Index(i pulumi.IntInput) SmDevicesWipeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmDevicesWipe {
		return vs[0].([]*SmDevicesWipe)[vs[1].(int)]
	}).(SmDevicesWipeOutput)
}

type SmDevicesWipeMapOutput struct{ *pulumi.OutputState }

func (SmDevicesWipeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesWipe)(nil)).Elem()
}

func (o SmDevicesWipeMapOutput) ToSmDevicesWipeMapOutput() SmDevicesWipeMapOutput {
	return o
}

func (o SmDevicesWipeMapOutput) ToSmDevicesWipeMapOutputWithContext(ctx context.Context) SmDevicesWipeMapOutput {
	return o
}

func (o SmDevicesWipeMapOutput) MapIndex(k pulumi.StringInput) SmDevicesWipeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmDevicesWipe {
		return vs[0].(map[string]*SmDevicesWipe)[vs[1].(string)]
	}).(SmDevicesWipeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesWipeInput)(nil)).Elem(), &SmDevicesWipe{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesWipeArrayInput)(nil)).Elem(), SmDevicesWipeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesWipeMapInput)(nil)).Elem(), SmDevicesWipeMap{})
	pulumi.RegisterOutputType(SmDevicesWipeOutput{})
	pulumi.RegisterOutputType(SmDevicesWipeArrayOutput{})
	pulumi.RegisterOutputType(SmDevicesWipeMapOutput{})
}
