// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceRfProfiles:ApplianceRfProfiles example "network_id,rf_profile_id"
// ```
type ApplianceRfProfiles struct {
	pulumi.CustomResourceState

	// Settings related to 5Ghz band.
	FiveGhzSettings ApplianceRfProfilesFiveGhzSettingsOutput `pulumi:"fiveGhzSettings"`
	// The name of the profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of network this RF Profile belongs in.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings ApplianceRfProfilesPerSsidSettingsOutput `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringPtrOutput `pulumi:"rfProfileId"`
	// Settings related to 2.4Ghz band.
	TwoFourGhzSettings ApplianceRfProfilesTwoFourGhzSettingsOutput `pulumi:"twoFourGhzSettings"`
}

// NewApplianceRfProfiles registers a new resource with the given unique name, arguments, and options.
func NewApplianceRfProfiles(ctx *pulumi.Context,
	name string, args *ApplianceRfProfilesArgs, opts ...pulumi.ResourceOption) (*ApplianceRfProfiles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceRfProfiles
	err := ctx.RegisterResource("meraki:networks/applianceRfProfiles:ApplianceRfProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceRfProfiles gets an existing ApplianceRfProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceRfProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceRfProfilesState, opts ...pulumi.ResourceOption) (*ApplianceRfProfiles, error) {
	var resource ApplianceRfProfiles
	err := ctx.ReadResource("meraki:networks/applianceRfProfiles:ApplianceRfProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceRfProfiles resources.
type applianceRfProfilesState struct {
	// Settings related to 5Ghz band.
	FiveGhzSettings *ApplianceRfProfilesFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// The name of the profile.
	Name *string `pulumi:"name"`
	// ID of network this RF Profile belongs in.
	NetworkId *string `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings *ApplianceRfProfilesPerSsidSettings `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId *string `pulumi:"rfProfileId"`
	// Settings related to 2.4Ghz band.
	TwoFourGhzSettings *ApplianceRfProfilesTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

type ApplianceRfProfilesState struct {
	// Settings related to 5Ghz band.
	FiveGhzSettings ApplianceRfProfilesFiveGhzSettingsPtrInput
	// The name of the profile.
	Name pulumi.StringPtrInput
	// ID of network this RF Profile belongs in.
	NetworkId pulumi.StringPtrInput
	// Per-SSID radio settings by number.
	PerSsidSettings ApplianceRfProfilesPerSsidSettingsPtrInput
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringPtrInput
	// Settings related to 2.4Ghz band.
	TwoFourGhzSettings ApplianceRfProfilesTwoFourGhzSettingsPtrInput
}

func (ApplianceRfProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceRfProfilesState)(nil)).Elem()
}

type applianceRfProfilesArgs struct {
	// Settings related to 5Ghz band.
	FiveGhzSettings *ApplianceRfProfilesFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// The name of the profile.
	Name *string `pulumi:"name"`
	// ID of network this RF Profile belongs in.
	NetworkId string `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings *ApplianceRfProfilesPerSsidSettings `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId *string `pulumi:"rfProfileId"`
	// Settings related to 2.4Ghz band.
	TwoFourGhzSettings *ApplianceRfProfilesTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

// The set of arguments for constructing a ApplianceRfProfiles resource.
type ApplianceRfProfilesArgs struct {
	// Settings related to 5Ghz band.
	FiveGhzSettings ApplianceRfProfilesFiveGhzSettingsPtrInput
	// The name of the profile.
	Name pulumi.StringPtrInput
	// ID of network this RF Profile belongs in.
	NetworkId pulumi.StringInput
	// Per-SSID radio settings by number.
	PerSsidSettings ApplianceRfProfilesPerSsidSettingsPtrInput
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringPtrInput
	// Settings related to 2.4Ghz band.
	TwoFourGhzSettings ApplianceRfProfilesTwoFourGhzSettingsPtrInput
}

func (ApplianceRfProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceRfProfilesArgs)(nil)).Elem()
}

type ApplianceRfProfilesInput interface {
	pulumi.Input

	ToApplianceRfProfilesOutput() ApplianceRfProfilesOutput
	ToApplianceRfProfilesOutputWithContext(ctx context.Context) ApplianceRfProfilesOutput
}

func (*ApplianceRfProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceRfProfiles)(nil)).Elem()
}

func (i *ApplianceRfProfiles) ToApplianceRfProfilesOutput() ApplianceRfProfilesOutput {
	return i.ToApplianceRfProfilesOutputWithContext(context.Background())
}

func (i *ApplianceRfProfiles) ToApplianceRfProfilesOutputWithContext(ctx context.Context) ApplianceRfProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceRfProfilesOutput)
}

// ApplianceRfProfilesArrayInput is an input type that accepts ApplianceRfProfilesArray and ApplianceRfProfilesArrayOutput values.
// You can construct a concrete instance of `ApplianceRfProfilesArrayInput` via:
//
//	ApplianceRfProfilesArray{ ApplianceRfProfilesArgs{...} }
type ApplianceRfProfilesArrayInput interface {
	pulumi.Input

	ToApplianceRfProfilesArrayOutput() ApplianceRfProfilesArrayOutput
	ToApplianceRfProfilesArrayOutputWithContext(context.Context) ApplianceRfProfilesArrayOutput
}

type ApplianceRfProfilesArray []ApplianceRfProfilesInput

func (ApplianceRfProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceRfProfiles)(nil)).Elem()
}

func (i ApplianceRfProfilesArray) ToApplianceRfProfilesArrayOutput() ApplianceRfProfilesArrayOutput {
	return i.ToApplianceRfProfilesArrayOutputWithContext(context.Background())
}

func (i ApplianceRfProfilesArray) ToApplianceRfProfilesArrayOutputWithContext(ctx context.Context) ApplianceRfProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceRfProfilesArrayOutput)
}

// ApplianceRfProfilesMapInput is an input type that accepts ApplianceRfProfilesMap and ApplianceRfProfilesMapOutput values.
// You can construct a concrete instance of `ApplianceRfProfilesMapInput` via:
//
//	ApplianceRfProfilesMap{ "key": ApplianceRfProfilesArgs{...} }
type ApplianceRfProfilesMapInput interface {
	pulumi.Input

	ToApplianceRfProfilesMapOutput() ApplianceRfProfilesMapOutput
	ToApplianceRfProfilesMapOutputWithContext(context.Context) ApplianceRfProfilesMapOutput
}

type ApplianceRfProfilesMap map[string]ApplianceRfProfilesInput

func (ApplianceRfProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceRfProfiles)(nil)).Elem()
}

func (i ApplianceRfProfilesMap) ToApplianceRfProfilesMapOutput() ApplianceRfProfilesMapOutput {
	return i.ToApplianceRfProfilesMapOutputWithContext(context.Background())
}

func (i ApplianceRfProfilesMap) ToApplianceRfProfilesMapOutputWithContext(ctx context.Context) ApplianceRfProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceRfProfilesMapOutput)
}

type ApplianceRfProfilesOutput struct{ *pulumi.OutputState }

func (ApplianceRfProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceRfProfiles)(nil)).Elem()
}

func (o ApplianceRfProfilesOutput) ToApplianceRfProfilesOutput() ApplianceRfProfilesOutput {
	return o
}

func (o ApplianceRfProfilesOutput) ToApplianceRfProfilesOutputWithContext(ctx context.Context) ApplianceRfProfilesOutput {
	return o
}

// Settings related to 5Ghz band.
func (o ApplianceRfProfilesOutput) FiveGhzSettings() ApplianceRfProfilesFiveGhzSettingsOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) ApplianceRfProfilesFiveGhzSettingsOutput { return v.FiveGhzSettings }).(ApplianceRfProfilesFiveGhzSettingsOutput)
}

// The name of the profile.
func (o ApplianceRfProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of network this RF Profile belongs in.
func (o ApplianceRfProfilesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Per-SSID radio settings by number.
func (o ApplianceRfProfilesOutput) PerSsidSettings() ApplianceRfProfilesPerSsidSettingsOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) ApplianceRfProfilesPerSsidSettingsOutput { return v.PerSsidSettings }).(ApplianceRfProfilesPerSsidSettingsOutput)
}

// rfProfileId path parameter. Rf profile ID
func (o ApplianceRfProfilesOutput) RfProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) pulumi.StringPtrOutput { return v.RfProfileId }).(pulumi.StringPtrOutput)
}

// Settings related to 2.4Ghz band.
func (o ApplianceRfProfilesOutput) TwoFourGhzSettings() ApplianceRfProfilesTwoFourGhzSettingsOutput {
	return o.ApplyT(func(v *ApplianceRfProfiles) ApplianceRfProfilesTwoFourGhzSettingsOutput { return v.TwoFourGhzSettings }).(ApplianceRfProfilesTwoFourGhzSettingsOutput)
}

type ApplianceRfProfilesArrayOutput struct{ *pulumi.OutputState }

func (ApplianceRfProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceRfProfiles)(nil)).Elem()
}

func (o ApplianceRfProfilesArrayOutput) ToApplianceRfProfilesArrayOutput() ApplianceRfProfilesArrayOutput {
	return o
}

func (o ApplianceRfProfilesArrayOutput) ToApplianceRfProfilesArrayOutputWithContext(ctx context.Context) ApplianceRfProfilesArrayOutput {
	return o
}

func (o ApplianceRfProfilesArrayOutput) Index(i pulumi.IntInput) ApplianceRfProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceRfProfiles {
		return vs[0].([]*ApplianceRfProfiles)[vs[1].(int)]
	}).(ApplianceRfProfilesOutput)
}

type ApplianceRfProfilesMapOutput struct{ *pulumi.OutputState }

func (ApplianceRfProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceRfProfiles)(nil)).Elem()
}

func (o ApplianceRfProfilesMapOutput) ToApplianceRfProfilesMapOutput() ApplianceRfProfilesMapOutput {
	return o
}

func (o ApplianceRfProfilesMapOutput) ToApplianceRfProfilesMapOutputWithContext(ctx context.Context) ApplianceRfProfilesMapOutput {
	return o
}

func (o ApplianceRfProfilesMapOutput) MapIndex(k pulumi.StringInput) ApplianceRfProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceRfProfiles {
		return vs[0].(map[string]*ApplianceRfProfiles)[vs[1].(string)]
	}).(ApplianceRfProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceRfProfilesInput)(nil)).Elem(), &ApplianceRfProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceRfProfilesArrayInput)(nil)).Elem(), ApplianceRfProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceRfProfilesMapInput)(nil)).Elem(), ApplianceRfProfilesMap{})
	pulumi.RegisterOutputType(ApplianceRfProfilesOutput{})
	pulumi.RegisterOutputType(ApplianceRfProfilesArrayOutput{})
	pulumi.RegisterOutputType(ApplianceRfProfilesMapOutput{})
}
