// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewAppliancePorts(ctx, "example", &networks.AppliancePortsArgs{
//				AccessPolicy:        pulumi.String("open"),
//				AllowedVlans:        pulumi.String("all"),
//				DropUntaggedTraffic: pulumi.Bool(false),
//				Enabled:             pulumi.Bool(true),
//				NetworkId:           pulumi.String("string"),
//				PortId:              pulumi.String("string"),
//				Type:                pulumi.String("access"),
//				Vlan:                pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksAppliancePortsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/appliancePorts:AppliancePorts example "network_id,port_id"
// ```
type AppliancePorts struct {
	pulumi.CustomResourceState

	// The name of the policy. Only applicable to Access ports.
	AccessPolicy pulumi.StringOutput `pulumi:"accessPolicy"`
	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans pulumi.StringOutput `pulumi:"allowedVlans"`
	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic pulumi.BoolOutput `pulumi:"dropUntaggedTraffic"`
	// The status of the port
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Number of the port
	Number pulumi.IntOutput `pulumi:"number"`
	// portId path parameter. Port ID
	PortId pulumi.StringOutput `pulumi:"portId"`
	// The type of the port: 'access' or 'trunk'.
	Type pulumi.StringOutput `pulumi:"type"`
	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan pulumi.IntOutput `pulumi:"vlan"`
}

// NewAppliancePorts registers a new resource with the given unique name, arguments, and options.
func NewAppliancePorts(ctx *pulumi.Context,
	name string, args *AppliancePortsArgs, opts ...pulumi.ResourceOption) (*AppliancePorts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppliancePorts
	err := ctx.RegisterResource("meraki:networks/appliancePorts:AppliancePorts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppliancePorts gets an existing AppliancePorts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppliancePorts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppliancePortsState, opts ...pulumi.ResourceOption) (*AppliancePorts, error) {
	var resource AppliancePorts
	err := ctx.ReadResource("meraki:networks/appliancePorts:AppliancePorts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppliancePorts resources.
type appliancePortsState struct {
	// The name of the policy. Only applicable to Access ports.
	AccessPolicy *string `pulumi:"accessPolicy"`
	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans *string `pulumi:"allowedVlans"`
	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic *bool `pulumi:"dropUntaggedTraffic"`
	// The status of the port
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Number of the port
	Number *int `pulumi:"number"`
	// portId path parameter. Port ID
	PortId *string `pulumi:"portId"`
	// The type of the port: 'access' or 'trunk'.
	Type *string `pulumi:"type"`
	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan *int `pulumi:"vlan"`
}

type AppliancePortsState struct {
	// The name of the policy. Only applicable to Access ports.
	AccessPolicy pulumi.StringPtrInput
	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans pulumi.StringPtrInput
	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic pulumi.BoolPtrInput
	// The status of the port
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Number of the port
	Number pulumi.IntPtrInput
	// portId path parameter. Port ID
	PortId pulumi.StringPtrInput
	// The type of the port: 'access' or 'trunk'.
	Type pulumi.StringPtrInput
	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan pulumi.IntPtrInput
}

func (AppliancePortsState) ElementType() reflect.Type {
	return reflect.TypeOf((*appliancePortsState)(nil)).Elem()
}

type appliancePortsArgs struct {
	// The name of the policy. Only applicable to Access ports.
	AccessPolicy *string `pulumi:"accessPolicy"`
	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans *string `pulumi:"allowedVlans"`
	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic *bool `pulumi:"dropUntaggedTraffic"`
	// The status of the port
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// portId path parameter. Port ID
	PortId string `pulumi:"portId"`
	// The type of the port: 'access' or 'trunk'.
	Type *string `pulumi:"type"`
	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a AppliancePorts resource.
type AppliancePortsArgs struct {
	// The name of the policy. Only applicable to Access ports.
	AccessPolicy pulumi.StringPtrInput
	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans pulumi.StringPtrInput
	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic pulumi.BoolPtrInput
	// The status of the port
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// portId path parameter. Port ID
	PortId pulumi.StringInput
	// The type of the port: 'access' or 'trunk'.
	Type pulumi.StringPtrInput
	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan pulumi.IntPtrInput
}

func (AppliancePortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appliancePortsArgs)(nil)).Elem()
}

type AppliancePortsInput interface {
	pulumi.Input

	ToAppliancePortsOutput() AppliancePortsOutput
	ToAppliancePortsOutputWithContext(ctx context.Context) AppliancePortsOutput
}

func (*AppliancePorts) ElementType() reflect.Type {
	return reflect.TypeOf((**AppliancePorts)(nil)).Elem()
}

func (i *AppliancePorts) ToAppliancePortsOutput() AppliancePortsOutput {
	return i.ToAppliancePortsOutputWithContext(context.Background())
}

func (i *AppliancePorts) ToAppliancePortsOutputWithContext(ctx context.Context) AppliancePortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppliancePortsOutput)
}

// AppliancePortsArrayInput is an input type that accepts AppliancePortsArray and AppliancePortsArrayOutput values.
// You can construct a concrete instance of `AppliancePortsArrayInput` via:
//
//	AppliancePortsArray{ AppliancePortsArgs{...} }
type AppliancePortsArrayInput interface {
	pulumi.Input

	ToAppliancePortsArrayOutput() AppliancePortsArrayOutput
	ToAppliancePortsArrayOutputWithContext(context.Context) AppliancePortsArrayOutput
}

type AppliancePortsArray []AppliancePortsInput

func (AppliancePortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppliancePorts)(nil)).Elem()
}

func (i AppliancePortsArray) ToAppliancePortsArrayOutput() AppliancePortsArrayOutput {
	return i.ToAppliancePortsArrayOutputWithContext(context.Background())
}

func (i AppliancePortsArray) ToAppliancePortsArrayOutputWithContext(ctx context.Context) AppliancePortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppliancePortsArrayOutput)
}

// AppliancePortsMapInput is an input type that accepts AppliancePortsMap and AppliancePortsMapOutput values.
// You can construct a concrete instance of `AppliancePortsMapInput` via:
//
//	AppliancePortsMap{ "key": AppliancePortsArgs{...} }
type AppliancePortsMapInput interface {
	pulumi.Input

	ToAppliancePortsMapOutput() AppliancePortsMapOutput
	ToAppliancePortsMapOutputWithContext(context.Context) AppliancePortsMapOutput
}

type AppliancePortsMap map[string]AppliancePortsInput

func (AppliancePortsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppliancePorts)(nil)).Elem()
}

func (i AppliancePortsMap) ToAppliancePortsMapOutput() AppliancePortsMapOutput {
	return i.ToAppliancePortsMapOutputWithContext(context.Background())
}

func (i AppliancePortsMap) ToAppliancePortsMapOutputWithContext(ctx context.Context) AppliancePortsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppliancePortsMapOutput)
}

type AppliancePortsOutput struct{ *pulumi.OutputState }

func (AppliancePortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppliancePorts)(nil)).Elem()
}

func (o AppliancePortsOutput) ToAppliancePortsOutput() AppliancePortsOutput {
	return o
}

func (o AppliancePortsOutput) ToAppliancePortsOutputWithContext(ctx context.Context) AppliancePortsOutput {
	return o
}

// The name of the policy. Only applicable to Access ports.
func (o AppliancePortsOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.StringOutput { return v.AccessPolicy }).(pulumi.StringOutput)
}

// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
func (o AppliancePortsOutput) AllowedVlans() pulumi.StringOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.StringOutput { return v.AllowedVlans }).(pulumi.StringOutput)
}

// Whether the trunk port can drop all untagged traffic.
func (o AppliancePortsOutput) DropUntaggedTraffic() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.BoolOutput { return v.DropUntaggedTraffic }).(pulumi.BoolOutput)
}

// The status of the port
func (o AppliancePortsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o AppliancePortsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Number of the port
func (o AppliancePortsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

// portId path parameter. Port ID
func (o AppliancePortsOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// The type of the port: 'access' or 'trunk'.
func (o AppliancePortsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
func (o AppliancePortsOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *AppliancePorts) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

type AppliancePortsArrayOutput struct{ *pulumi.OutputState }

func (AppliancePortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppliancePorts)(nil)).Elem()
}

func (o AppliancePortsArrayOutput) ToAppliancePortsArrayOutput() AppliancePortsArrayOutput {
	return o
}

func (o AppliancePortsArrayOutput) ToAppliancePortsArrayOutputWithContext(ctx context.Context) AppliancePortsArrayOutput {
	return o
}

func (o AppliancePortsArrayOutput) Index(i pulumi.IntInput) AppliancePortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppliancePorts {
		return vs[0].([]*AppliancePorts)[vs[1].(int)]
	}).(AppliancePortsOutput)
}

type AppliancePortsMapOutput struct{ *pulumi.OutputState }

func (AppliancePortsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppliancePorts)(nil)).Elem()
}

func (o AppliancePortsMapOutput) ToAppliancePortsMapOutput() AppliancePortsMapOutput {
	return o
}

func (o AppliancePortsMapOutput) ToAppliancePortsMapOutputWithContext(ctx context.Context) AppliancePortsMapOutput {
	return o
}

func (o AppliancePortsMapOutput) MapIndex(k pulumi.StringInput) AppliancePortsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppliancePorts {
		return vs[0].(map[string]*AppliancePorts)[vs[1].(string)]
	}).(AppliancePortsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppliancePortsInput)(nil)).Elem(), &AppliancePorts{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppliancePortsArrayInput)(nil)).Elem(), AppliancePortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppliancePortsMapInput)(nil)).Elem(), AppliancePortsMap{})
	pulumi.RegisterOutputType(AppliancePortsOutput{})
	pulumi.RegisterOutputType(AppliancePortsArrayOutput{})
	pulumi.RegisterOutputType(AppliancePortsMapOutput{})
}
