// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewWirelessSsidsIdentityPsks(ctx, "example", &networks.WirelessSsidsIdentityPsksArgs{
//				ExpiresAt:     pulumi.String("2018-02-11T00:00:00.090210Z"),
//				GroupPolicyId: pulumi.String("101"),
//				Name:          pulumi.String("Sample Identity PSK"),
//				NetworkId:     pulumi.String("string"),
//				Number:        pulumi.String("string"),
//				Passphrase:    pulumi.String("secret"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksWirelessSsidsIdentityPsksExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsidsIdentityPsks:WirelessSsidsIdentityPsks example "identity_psk_id,network_id,number"
// ```
type WirelessSsidsIdentityPsks struct {
	pulumi.CustomResourceState

	// The email associated with the System's Manager User
	Email pulumi.StringOutput `pulumi:"email"`
	// Timestamp for when the Identity PSK expires, or 'null' to never expire
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The group policy to be applied to clients
	GroupPolicyId pulumi.StringOutput `pulumi:"groupPolicyId"`
	// identityPskId path parameter. Identity psk ID
	IdentityPskId pulumi.StringOutput `pulumi:"identityPskId"`
	// The name of the Identity PSK
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// number path parameter.
	Number pulumi.StringOutput `pulumi:"number"`
	// The passphrase for client authentication
	Passphrase pulumi.StringOutput `pulumi:"passphrase"`
	// The WiFi Personal Network unique identifier
	WifiPersonalNetworkId pulumi.StringOutput `pulumi:"wifiPersonalNetworkId"`
}

// NewWirelessSsidsIdentityPsks registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsidsIdentityPsks(ctx *pulumi.Context,
	name string, args *WirelessSsidsIdentityPsksArgs, opts ...pulumi.ResourceOption) (*WirelessSsidsIdentityPsks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsidsIdentityPsks
	err := ctx.RegisterResource("meraki:networks/wirelessSsidsIdentityPsks:WirelessSsidsIdentityPsks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsidsIdentityPsks gets an existing WirelessSsidsIdentityPsks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsidsIdentityPsks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsIdentityPsksState, opts ...pulumi.ResourceOption) (*WirelessSsidsIdentityPsks, error) {
	var resource WirelessSsidsIdentityPsks
	err := ctx.ReadResource("meraki:networks/wirelessSsidsIdentityPsks:WirelessSsidsIdentityPsks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsidsIdentityPsks resources.
type wirelessSsidsIdentityPsksState struct {
	// The email associated with the System's Manager User
	Email *string `pulumi:"email"`
	// Timestamp for when the Identity PSK expires, or 'null' to never expire
	ExpiresAt *string `pulumi:"expiresAt"`
	// The group policy to be applied to clients
	GroupPolicyId *string `pulumi:"groupPolicyId"`
	// identityPskId path parameter. Identity psk ID
	IdentityPskId *string `pulumi:"identityPskId"`
	// The name of the Identity PSK
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// number path parameter.
	Number *string `pulumi:"number"`
	// The passphrase for client authentication
	Passphrase *string `pulumi:"passphrase"`
	// The WiFi Personal Network unique identifier
	WifiPersonalNetworkId *string `pulumi:"wifiPersonalNetworkId"`
}

type WirelessSsidsIdentityPsksState struct {
	// The email associated with the System's Manager User
	Email pulumi.StringPtrInput
	// Timestamp for when the Identity PSK expires, or 'null' to never expire
	ExpiresAt pulumi.StringPtrInput
	// The group policy to be applied to clients
	GroupPolicyId pulumi.StringPtrInput
	// identityPskId path parameter. Identity psk ID
	IdentityPskId pulumi.StringPtrInput
	// The name of the Identity PSK
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// number path parameter.
	Number pulumi.StringPtrInput
	// The passphrase for client authentication
	Passphrase pulumi.StringPtrInput
	// The WiFi Personal Network unique identifier
	WifiPersonalNetworkId pulumi.StringPtrInput
}

func (WirelessSsidsIdentityPsksState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsIdentityPsksState)(nil)).Elem()
}

type wirelessSsidsIdentityPsksArgs struct {
	// Timestamp for when the Identity PSK expires, or 'null' to never expire
	ExpiresAt *string `pulumi:"expiresAt"`
	// The group policy to be applied to clients
	GroupPolicyId *string `pulumi:"groupPolicyId"`
	// identityPskId path parameter. Identity psk ID
	IdentityPskId *string `pulumi:"identityPskId"`
	// The name of the Identity PSK
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// number path parameter.
	Number string `pulumi:"number"`
	// The passphrase for client authentication
	Passphrase *string `pulumi:"passphrase"`
}

// The set of arguments for constructing a WirelessSsidsIdentityPsks resource.
type WirelessSsidsIdentityPsksArgs struct {
	// Timestamp for when the Identity PSK expires, or 'null' to never expire
	ExpiresAt pulumi.StringPtrInput
	// The group policy to be applied to clients
	GroupPolicyId pulumi.StringPtrInput
	// identityPskId path parameter. Identity psk ID
	IdentityPskId pulumi.StringPtrInput
	// The name of the Identity PSK
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// number path parameter.
	Number pulumi.StringInput
	// The passphrase for client authentication
	Passphrase pulumi.StringPtrInput
}

func (WirelessSsidsIdentityPsksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsIdentityPsksArgs)(nil)).Elem()
}

type WirelessSsidsIdentityPsksInput interface {
	pulumi.Input

	ToWirelessSsidsIdentityPsksOutput() WirelessSsidsIdentityPsksOutput
	ToWirelessSsidsIdentityPsksOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksOutput
}

func (*WirelessSsidsIdentityPsks) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (i *WirelessSsidsIdentityPsks) ToWirelessSsidsIdentityPsksOutput() WirelessSsidsIdentityPsksOutput {
	return i.ToWirelessSsidsIdentityPsksOutputWithContext(context.Background())
}

func (i *WirelessSsidsIdentityPsks) ToWirelessSsidsIdentityPsksOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsIdentityPsksOutput)
}

// WirelessSsidsIdentityPsksArrayInput is an input type that accepts WirelessSsidsIdentityPsksArray and WirelessSsidsIdentityPsksArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsIdentityPsksArrayInput` via:
//
//	WirelessSsidsIdentityPsksArray{ WirelessSsidsIdentityPsksArgs{...} }
type WirelessSsidsIdentityPsksArrayInput interface {
	pulumi.Input

	ToWirelessSsidsIdentityPsksArrayOutput() WirelessSsidsIdentityPsksArrayOutput
	ToWirelessSsidsIdentityPsksArrayOutputWithContext(context.Context) WirelessSsidsIdentityPsksArrayOutput
}

type WirelessSsidsIdentityPsksArray []WirelessSsidsIdentityPsksInput

func (WirelessSsidsIdentityPsksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (i WirelessSsidsIdentityPsksArray) ToWirelessSsidsIdentityPsksArrayOutput() WirelessSsidsIdentityPsksArrayOutput {
	return i.ToWirelessSsidsIdentityPsksArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsIdentityPsksArray) ToWirelessSsidsIdentityPsksArrayOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsIdentityPsksArrayOutput)
}

// WirelessSsidsIdentityPsksMapInput is an input type that accepts WirelessSsidsIdentityPsksMap and WirelessSsidsIdentityPsksMapOutput values.
// You can construct a concrete instance of `WirelessSsidsIdentityPsksMapInput` via:
//
//	WirelessSsidsIdentityPsksMap{ "key": WirelessSsidsIdentityPsksArgs{...} }
type WirelessSsidsIdentityPsksMapInput interface {
	pulumi.Input

	ToWirelessSsidsIdentityPsksMapOutput() WirelessSsidsIdentityPsksMapOutput
	ToWirelessSsidsIdentityPsksMapOutputWithContext(context.Context) WirelessSsidsIdentityPsksMapOutput
}

type WirelessSsidsIdentityPsksMap map[string]WirelessSsidsIdentityPsksInput

func (WirelessSsidsIdentityPsksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (i WirelessSsidsIdentityPsksMap) ToWirelessSsidsIdentityPsksMapOutput() WirelessSsidsIdentityPsksMapOutput {
	return i.ToWirelessSsidsIdentityPsksMapOutputWithContext(context.Background())
}

func (i WirelessSsidsIdentityPsksMap) ToWirelessSsidsIdentityPsksMapOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsIdentityPsksMapOutput)
}

type WirelessSsidsIdentityPsksOutput struct{ *pulumi.OutputState }

func (WirelessSsidsIdentityPsksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (o WirelessSsidsIdentityPsksOutput) ToWirelessSsidsIdentityPsksOutput() WirelessSsidsIdentityPsksOutput {
	return o
}

func (o WirelessSsidsIdentityPsksOutput) ToWirelessSsidsIdentityPsksOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksOutput {
	return o
}

// The email associated with the System's Manager User
func (o WirelessSsidsIdentityPsksOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Timestamp for when the Identity PSK expires, or 'null' to never expire
func (o WirelessSsidsIdentityPsksOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The group policy to be applied to clients
func (o WirelessSsidsIdentityPsksOutput) GroupPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.GroupPolicyId }).(pulumi.StringOutput)
}

// identityPskId path parameter. Identity psk ID
func (o WirelessSsidsIdentityPsksOutput) IdentityPskId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.IdentityPskId }).(pulumi.StringOutput)
}

// The name of the Identity PSK
func (o WirelessSsidsIdentityPsksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsIdentityPsksOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// number path parameter.
func (o WirelessSsidsIdentityPsksOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.Number }).(pulumi.StringOutput)
}

// The passphrase for client authentication
func (o WirelessSsidsIdentityPsksOutput) Passphrase() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.Passphrase }).(pulumi.StringOutput)
}

// The WiFi Personal Network unique identifier
func (o WirelessSsidsIdentityPsksOutput) WifiPersonalNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsIdentityPsks) pulumi.StringOutput { return v.WifiPersonalNetworkId }).(pulumi.StringOutput)
}

type WirelessSsidsIdentityPsksArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsIdentityPsksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (o WirelessSsidsIdentityPsksArrayOutput) ToWirelessSsidsIdentityPsksArrayOutput() WirelessSsidsIdentityPsksArrayOutput {
	return o
}

func (o WirelessSsidsIdentityPsksArrayOutput) ToWirelessSsidsIdentityPsksArrayOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksArrayOutput {
	return o
}

func (o WirelessSsidsIdentityPsksArrayOutput) Index(i pulumi.IntInput) WirelessSsidsIdentityPsksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsidsIdentityPsks {
		return vs[0].([]*WirelessSsidsIdentityPsks)[vs[1].(int)]
	}).(WirelessSsidsIdentityPsksOutput)
}

type WirelessSsidsIdentityPsksMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsIdentityPsksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsIdentityPsks)(nil)).Elem()
}

func (o WirelessSsidsIdentityPsksMapOutput) ToWirelessSsidsIdentityPsksMapOutput() WirelessSsidsIdentityPsksMapOutput {
	return o
}

func (o WirelessSsidsIdentityPsksMapOutput) ToWirelessSsidsIdentityPsksMapOutputWithContext(ctx context.Context) WirelessSsidsIdentityPsksMapOutput {
	return o
}

func (o WirelessSsidsIdentityPsksMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsIdentityPsksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsidsIdentityPsks {
		return vs[0].(map[string]*WirelessSsidsIdentityPsks)[vs[1].(string)]
	}).(WirelessSsidsIdentityPsksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsIdentityPsksInput)(nil)).Elem(), &WirelessSsidsIdentityPsks{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsIdentityPsksArrayInput)(nil)).Elem(), WirelessSsidsIdentityPsksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsIdentityPsksMapInput)(nil)).Elem(), WirelessSsidsIdentityPsksMap{})
	pulumi.RegisterOutputType(WirelessSsidsIdentityPsksOutput{})
	pulumi.RegisterOutputType(WirelessSsidsIdentityPsksArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsIdentityPsksMapOutput{})
}
