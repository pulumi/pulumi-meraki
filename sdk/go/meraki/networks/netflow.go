// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewNetflow(ctx, "example", &networks.NetflowArgs{
//				CollectorIp:      pulumi.String("1.2.3.4"),
//				CollectorPort:    pulumi.Int(443),
//				EtaDstPort:       pulumi.Int(443),
//				EtaEnabled:       pulumi.Bool(true),
//				NetworkId:        pulumi.String("string"),
//				ReportingEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksNetflowExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/netflow:Netflow example "network_id"
// ```
type Netflow struct {
	pulumi.CustomResourceState

	// The IPv4 address of the NetFlow collector.
	CollectorIp pulumi.StringOutput `pulumi:"collectorIp"`
	// The port that the NetFlow collector will be listening on.
	CollectorPort pulumi.IntOutput `pulumi:"collectorPort"`
	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort pulumi.IntOutput `pulumi:"etaDstPort"`
	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled pulumi.BoolOutput `pulumi:"etaEnabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled pulumi.BoolOutput `pulumi:"reportingEnabled"`
}

// NewNetflow registers a new resource with the given unique name, arguments, and options.
func NewNetflow(ctx *pulumi.Context,
	name string, args *NetflowArgs, opts ...pulumi.ResourceOption) (*Netflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Netflow
	err := ctx.RegisterResource("meraki:networks/netflow:Netflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetflow gets an existing Netflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetflowState, opts ...pulumi.ResourceOption) (*Netflow, error) {
	var resource Netflow
	err := ctx.ReadResource("meraki:networks/netflow:Netflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Netflow resources.
type netflowState struct {
	// The IPv4 address of the NetFlow collector.
	CollectorIp *string `pulumi:"collectorIp"`
	// The port that the NetFlow collector will be listening on.
	CollectorPort *int `pulumi:"collectorPort"`
	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort *int `pulumi:"etaDstPort"`
	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled *bool `pulumi:"etaEnabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled *bool `pulumi:"reportingEnabled"`
}

type NetflowState struct {
	// The IPv4 address of the NetFlow collector.
	CollectorIp pulumi.StringPtrInput
	// The port that the NetFlow collector will be listening on.
	CollectorPort pulumi.IntPtrInput
	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort pulumi.IntPtrInput
	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled pulumi.BoolPtrInput
}

func (NetflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*netflowState)(nil)).Elem()
}

type netflowArgs struct {
	// The IPv4 address of the NetFlow collector.
	CollectorIp *string `pulumi:"collectorIp"`
	// The port that the NetFlow collector will be listening on.
	CollectorPort *int `pulumi:"collectorPort"`
	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort *int `pulumi:"etaDstPort"`
	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled *bool `pulumi:"etaEnabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled *bool `pulumi:"reportingEnabled"`
}

// The set of arguments for constructing a Netflow resource.
type NetflowArgs struct {
	// The IPv4 address of the NetFlow collector.
	CollectorIp pulumi.StringPtrInput
	// The port that the NetFlow collector will be listening on.
	CollectorPort pulumi.IntPtrInput
	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort pulumi.IntPtrInput
	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled pulumi.BoolPtrInput
}

func (NetflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netflowArgs)(nil)).Elem()
}

type NetflowInput interface {
	pulumi.Input

	ToNetflowOutput() NetflowOutput
	ToNetflowOutputWithContext(ctx context.Context) NetflowOutput
}

func (*Netflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Netflow)(nil)).Elem()
}

func (i *Netflow) ToNetflowOutput() NetflowOutput {
	return i.ToNetflowOutputWithContext(context.Background())
}

func (i *Netflow) ToNetflowOutputWithContext(ctx context.Context) NetflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowOutput)
}

// NetflowArrayInput is an input type that accepts NetflowArray and NetflowArrayOutput values.
// You can construct a concrete instance of `NetflowArrayInput` via:
//
//	NetflowArray{ NetflowArgs{...} }
type NetflowArrayInput interface {
	pulumi.Input

	ToNetflowArrayOutput() NetflowArrayOutput
	ToNetflowArrayOutputWithContext(context.Context) NetflowArrayOutput
}

type NetflowArray []NetflowInput

func (NetflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Netflow)(nil)).Elem()
}

func (i NetflowArray) ToNetflowArrayOutput() NetflowArrayOutput {
	return i.ToNetflowArrayOutputWithContext(context.Background())
}

func (i NetflowArray) ToNetflowArrayOutputWithContext(ctx context.Context) NetflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowArrayOutput)
}

// NetflowMapInput is an input type that accepts NetflowMap and NetflowMapOutput values.
// You can construct a concrete instance of `NetflowMapInput` via:
//
//	NetflowMap{ "key": NetflowArgs{...} }
type NetflowMapInput interface {
	pulumi.Input

	ToNetflowMapOutput() NetflowMapOutput
	ToNetflowMapOutputWithContext(context.Context) NetflowMapOutput
}

type NetflowMap map[string]NetflowInput

func (NetflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Netflow)(nil)).Elem()
}

func (i NetflowMap) ToNetflowMapOutput() NetflowMapOutput {
	return i.ToNetflowMapOutputWithContext(context.Background())
}

func (i NetflowMap) ToNetflowMapOutputWithContext(ctx context.Context) NetflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetflowMapOutput)
}

type NetflowOutput struct{ *pulumi.OutputState }

func (NetflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Netflow)(nil)).Elem()
}

func (o NetflowOutput) ToNetflowOutput() NetflowOutput {
	return o
}

func (o NetflowOutput) ToNetflowOutputWithContext(ctx context.Context) NetflowOutput {
	return o
}

// The IPv4 address of the NetFlow collector.
func (o NetflowOutput) CollectorIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.CollectorIp }).(pulumi.StringOutput)
}

// The port that the NetFlow collector will be listening on.
func (o NetflowOutput) CollectorPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.CollectorPort }).(pulumi.IntOutput)
}

// The port that the Encrypted Traffic Analytics collector will be listening on.
func (o NetflowOutput) EtaDstPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Netflow) pulumi.IntOutput { return v.EtaDstPort }).(pulumi.IntOutput)
}

// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
func (o NetflowOutput) EtaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Netflow) pulumi.BoolOutput { return v.EtaEnabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o NetflowOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Netflow) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
func (o NetflowOutput) ReportingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Netflow) pulumi.BoolOutput { return v.ReportingEnabled }).(pulumi.BoolOutput)
}

type NetflowArrayOutput struct{ *pulumi.OutputState }

func (NetflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Netflow)(nil)).Elem()
}

func (o NetflowArrayOutput) ToNetflowArrayOutput() NetflowArrayOutput {
	return o
}

func (o NetflowArrayOutput) ToNetflowArrayOutputWithContext(ctx context.Context) NetflowArrayOutput {
	return o
}

func (o NetflowArrayOutput) Index(i pulumi.IntInput) NetflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Netflow {
		return vs[0].([]*Netflow)[vs[1].(int)]
	}).(NetflowOutput)
}

type NetflowMapOutput struct{ *pulumi.OutputState }

func (NetflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Netflow)(nil)).Elem()
}

func (o NetflowMapOutput) ToNetflowMapOutput() NetflowMapOutput {
	return o
}

func (o NetflowMapOutput) ToNetflowMapOutputWithContext(ctx context.Context) NetflowMapOutput {
	return o
}

func (o NetflowMapOutput) MapIndex(k pulumi.StringInput) NetflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Netflow {
		return vs[0].(map[string]*Netflow)[vs[1].(string)]
	}).(NetflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowInput)(nil)).Elem(), &Netflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowArrayInput)(nil)).Elem(), NetflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetflowMapInput)(nil)).Elem(), NetflowMap{})
	pulumi.RegisterOutputType(NetflowOutput{})
	pulumi.RegisterOutputType(NetflowArrayOutput{})
	pulumi.RegisterOutputType(NetflowMapOutput{})
}
