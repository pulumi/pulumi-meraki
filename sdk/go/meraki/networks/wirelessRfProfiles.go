// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessRfProfiles:WirelessRfProfiles example "network_id,rf_profile_id"
// ```
type WirelessRfProfiles struct {
	pulumi.CustomResourceState

	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings WirelessRfProfilesApBandSettingsOutput `pulumi:"apBandSettings"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType pulumi.StringOutput `pulumi:"bandSelectionType"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled pulumi.BoolOutput `pulumi:"clientBalancingEnabled"`
	// Settings related to 5Ghz band
	FiveGhzSettings WirelessRfProfilesFiveGhzSettingsOutput `pulumi:"fiveGhzSettings"`
	// Flex radio settings.
	FlexRadios WirelessRfProfilesFlexRadiosPtrOutput `pulumi:"flexRadios"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType pulumi.StringOutput `pulumi:"minBitrateType"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network ID of the RF Profile
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings WirelessRfProfilesPerSsidSettingsOutput `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringOutput `pulumi:"rfProfileId"`
	// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
	SixGhzSettings WirelessRfProfilesSixGhzSettingsOutput `pulumi:"sixGhzSettings"`
	// Settings related to radio transmission.
	Transmission WirelessRfProfilesTransmissionOutput `pulumi:"transmission"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings WirelessRfProfilesTwoFourGhzSettingsOutput `pulumi:"twoFourGhzSettings"`
}

// NewWirelessRfProfiles registers a new resource with the given unique name, arguments, and options.
func NewWirelessRfProfiles(ctx *pulumi.Context,
	name string, args *WirelessRfProfilesArgs, opts ...pulumi.ResourceOption) (*WirelessRfProfiles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessRfProfiles
	err := ctx.RegisterResource("meraki:networks/wirelessRfProfiles:WirelessRfProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessRfProfiles gets an existing WirelessRfProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessRfProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessRfProfilesState, opts ...pulumi.ResourceOption) (*WirelessRfProfiles, error) {
	var resource WirelessRfProfiles
	err := ctx.ReadResource("meraki:networks/wirelessRfProfiles:WirelessRfProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessRfProfiles resources.
type wirelessRfProfilesState struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *WirelessRfProfilesApBandSettings `pulumi:"apBandSettings"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType *string `pulumi:"bandSelectionType"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled *bool `pulumi:"clientBalancingEnabled"`
	// Settings related to 5Ghz band
	FiveGhzSettings *WirelessRfProfilesFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// Flex radio settings.
	FlexRadios *WirelessRfProfilesFlexRadios `pulumi:"flexRadios"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType *string `pulumi:"minBitrateType"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name *string `pulumi:"name"`
	// The network ID of the RF Profile
	NetworkId *string `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings *WirelessRfProfilesPerSsidSettings `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId *string `pulumi:"rfProfileId"`
	// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
	SixGhzSettings *WirelessRfProfilesSixGhzSettings `pulumi:"sixGhzSettings"`
	// Settings related to radio transmission.
	Transmission *WirelessRfProfilesTransmission `pulumi:"transmission"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *WirelessRfProfilesTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

type WirelessRfProfilesState struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings WirelessRfProfilesApBandSettingsPtrInput
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType pulumi.StringPtrInput
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled pulumi.BoolPtrInput
	// Settings related to 5Ghz band
	FiveGhzSettings WirelessRfProfilesFiveGhzSettingsPtrInput
	// Flex radio settings.
	FlexRadios WirelessRfProfilesFlexRadiosPtrInput
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType pulumi.StringPtrInput
	// The name of the new profile. Must be unique. This param is required on creation.
	Name pulumi.StringPtrInput
	// The network ID of the RF Profile
	NetworkId pulumi.StringPtrInput
	// Per-SSID radio settings by number.
	PerSsidSettings WirelessRfProfilesPerSsidSettingsPtrInput
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringPtrInput
	// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
	SixGhzSettings WirelessRfProfilesSixGhzSettingsPtrInput
	// Settings related to radio transmission.
	Transmission WirelessRfProfilesTransmissionPtrInput
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings WirelessRfProfilesTwoFourGhzSettingsPtrInput
}

func (WirelessRfProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRfProfilesState)(nil)).Elem()
}

type wirelessRfProfilesArgs struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *WirelessRfProfilesApBandSettings `pulumi:"apBandSettings"`
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType *string `pulumi:"bandSelectionType"`
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled *bool `pulumi:"clientBalancingEnabled"`
	// Settings related to 5Ghz band
	FiveGhzSettings *WirelessRfProfilesFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// Flex radio settings.
	FlexRadios *WirelessRfProfilesFlexRadios `pulumi:"flexRadios"`
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType *string `pulumi:"minBitrateType"`
	// The name of the new profile. Must be unique. This param is required on creation.
	Name *string `pulumi:"name"`
	// The network ID of the RF Profile
	NetworkId string `pulumi:"networkId"`
	// Per-SSID radio settings by number.
	PerSsidSettings *WirelessRfProfilesPerSsidSettings `pulumi:"perSsidSettings"`
	// rfProfileId path parameter. Rf profile ID
	RfProfileId *string `pulumi:"rfProfileId"`
	// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
	SixGhzSettings *WirelessRfProfilesSixGhzSettings `pulumi:"sixGhzSettings"`
	// Settings related to radio transmission.
	Transmission *WirelessRfProfilesTransmission `pulumi:"transmission"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *WirelessRfProfilesTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

// The set of arguments for constructing a WirelessRfProfiles resource.
type WirelessRfProfilesArgs struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings WirelessRfProfilesApBandSettingsPtrInput
	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType pulumi.StringPtrInput
	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled pulumi.BoolPtrInput
	// Settings related to 5Ghz band
	FiveGhzSettings WirelessRfProfilesFiveGhzSettingsPtrInput
	// Flex radio settings.
	FlexRadios WirelessRfProfilesFlexRadiosPtrInput
	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType pulumi.StringPtrInput
	// The name of the new profile. Must be unique. This param is required on creation.
	Name pulumi.StringPtrInput
	// The network ID of the RF Profile
	NetworkId pulumi.StringInput
	// Per-SSID radio settings by number.
	PerSsidSettings WirelessRfProfilesPerSsidSettingsPtrInput
	// rfProfileId path parameter. Rf profile ID
	RfProfileId pulumi.StringPtrInput
	// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
	SixGhzSettings WirelessRfProfilesSixGhzSettingsPtrInput
	// Settings related to radio transmission.
	Transmission WirelessRfProfilesTransmissionPtrInput
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings WirelessRfProfilesTwoFourGhzSettingsPtrInput
}

func (WirelessRfProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRfProfilesArgs)(nil)).Elem()
}

type WirelessRfProfilesInput interface {
	pulumi.Input

	ToWirelessRfProfilesOutput() WirelessRfProfilesOutput
	ToWirelessRfProfilesOutputWithContext(ctx context.Context) WirelessRfProfilesOutput
}

func (*WirelessRfProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRfProfiles)(nil)).Elem()
}

func (i *WirelessRfProfiles) ToWirelessRfProfilesOutput() WirelessRfProfilesOutput {
	return i.ToWirelessRfProfilesOutputWithContext(context.Background())
}

func (i *WirelessRfProfiles) ToWirelessRfProfilesOutputWithContext(ctx context.Context) WirelessRfProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRfProfilesOutput)
}

// WirelessRfProfilesArrayInput is an input type that accepts WirelessRfProfilesArray and WirelessRfProfilesArrayOutput values.
// You can construct a concrete instance of `WirelessRfProfilesArrayInput` via:
//
//	WirelessRfProfilesArray{ WirelessRfProfilesArgs{...} }
type WirelessRfProfilesArrayInput interface {
	pulumi.Input

	ToWirelessRfProfilesArrayOutput() WirelessRfProfilesArrayOutput
	ToWirelessRfProfilesArrayOutputWithContext(context.Context) WirelessRfProfilesArrayOutput
}

type WirelessRfProfilesArray []WirelessRfProfilesInput

func (WirelessRfProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRfProfiles)(nil)).Elem()
}

func (i WirelessRfProfilesArray) ToWirelessRfProfilesArrayOutput() WirelessRfProfilesArrayOutput {
	return i.ToWirelessRfProfilesArrayOutputWithContext(context.Background())
}

func (i WirelessRfProfilesArray) ToWirelessRfProfilesArrayOutputWithContext(ctx context.Context) WirelessRfProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRfProfilesArrayOutput)
}

// WirelessRfProfilesMapInput is an input type that accepts WirelessRfProfilesMap and WirelessRfProfilesMapOutput values.
// You can construct a concrete instance of `WirelessRfProfilesMapInput` via:
//
//	WirelessRfProfilesMap{ "key": WirelessRfProfilesArgs{...} }
type WirelessRfProfilesMapInput interface {
	pulumi.Input

	ToWirelessRfProfilesMapOutput() WirelessRfProfilesMapOutput
	ToWirelessRfProfilesMapOutputWithContext(context.Context) WirelessRfProfilesMapOutput
}

type WirelessRfProfilesMap map[string]WirelessRfProfilesInput

func (WirelessRfProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRfProfiles)(nil)).Elem()
}

func (i WirelessRfProfilesMap) ToWirelessRfProfilesMapOutput() WirelessRfProfilesMapOutput {
	return i.ToWirelessRfProfilesMapOutputWithContext(context.Background())
}

func (i WirelessRfProfilesMap) ToWirelessRfProfilesMapOutputWithContext(ctx context.Context) WirelessRfProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRfProfilesMapOutput)
}

type WirelessRfProfilesOutput struct{ *pulumi.OutputState }

func (WirelessRfProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRfProfiles)(nil)).Elem()
}

func (o WirelessRfProfilesOutput) ToWirelessRfProfilesOutput() WirelessRfProfilesOutput {
	return o
}

func (o WirelessRfProfilesOutput) ToWirelessRfProfilesOutputWithContext(ctx context.Context) WirelessRfProfilesOutput {
	return o
}

// Settings that will be enabled if selectionType is set to 'ap'.
func (o WirelessRfProfilesOutput) ApBandSettings() WirelessRfProfilesApBandSettingsOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesApBandSettingsOutput { return v.ApBandSettings }).(WirelessRfProfilesApBandSettingsOutput)
}

// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
func (o WirelessRfProfilesOutput) BandSelectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.StringOutput { return v.BandSelectionType }).(pulumi.StringOutput)
}

// Steers client to best available access point. Can be either true or false. Defaults to true.
func (o WirelessRfProfilesOutput) ClientBalancingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.BoolOutput { return v.ClientBalancingEnabled }).(pulumi.BoolOutput)
}

// Settings related to 5Ghz band
func (o WirelessRfProfilesOutput) FiveGhzSettings() WirelessRfProfilesFiveGhzSettingsOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesFiveGhzSettingsOutput { return v.FiveGhzSettings }).(WirelessRfProfilesFiveGhzSettingsOutput)
}

// Flex radio settings.
func (o WirelessRfProfilesOutput) FlexRadios() WirelessRfProfilesFlexRadiosPtrOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesFlexRadiosPtrOutput { return v.FlexRadios }).(WirelessRfProfilesFlexRadiosPtrOutput)
}

// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
func (o WirelessRfProfilesOutput) MinBitrateType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.StringOutput { return v.MinBitrateType }).(pulumi.StringOutput)
}

// The name of the new profile. Must be unique. This param is required on creation.
func (o WirelessRfProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network ID of the RF Profile
func (o WirelessRfProfilesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Per-SSID radio settings by number.
func (o WirelessRfProfilesOutput) PerSsidSettings() WirelessRfProfilesPerSsidSettingsOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesPerSsidSettingsOutput { return v.PerSsidSettings }).(WirelessRfProfilesPerSsidSettingsOutput)
}

// rfProfileId path parameter. Rf profile ID
func (o WirelessRfProfilesOutput) RfProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) pulumi.StringOutput { return v.RfProfileId }).(pulumi.StringOutput)
}

// Settings related to 6Ghz band. Only applicable to networks with 6Ghz capable APs
func (o WirelessRfProfilesOutput) SixGhzSettings() WirelessRfProfilesSixGhzSettingsOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesSixGhzSettingsOutput { return v.SixGhzSettings }).(WirelessRfProfilesSixGhzSettingsOutput)
}

// Settings related to radio transmission.
func (o WirelessRfProfilesOutput) Transmission() WirelessRfProfilesTransmissionOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesTransmissionOutput { return v.Transmission }).(WirelessRfProfilesTransmissionOutput)
}

// Settings related to 2.4Ghz band
func (o WirelessRfProfilesOutput) TwoFourGhzSettings() WirelessRfProfilesTwoFourGhzSettingsOutput {
	return o.ApplyT(func(v *WirelessRfProfiles) WirelessRfProfilesTwoFourGhzSettingsOutput { return v.TwoFourGhzSettings }).(WirelessRfProfilesTwoFourGhzSettingsOutput)
}

type WirelessRfProfilesArrayOutput struct{ *pulumi.OutputState }

func (WirelessRfProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRfProfiles)(nil)).Elem()
}

func (o WirelessRfProfilesArrayOutput) ToWirelessRfProfilesArrayOutput() WirelessRfProfilesArrayOutput {
	return o
}

func (o WirelessRfProfilesArrayOutput) ToWirelessRfProfilesArrayOutputWithContext(ctx context.Context) WirelessRfProfilesArrayOutput {
	return o
}

func (o WirelessRfProfilesArrayOutput) Index(i pulumi.IntInput) WirelessRfProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessRfProfiles {
		return vs[0].([]*WirelessRfProfiles)[vs[1].(int)]
	}).(WirelessRfProfilesOutput)
}

type WirelessRfProfilesMapOutput struct{ *pulumi.OutputState }

func (WirelessRfProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRfProfiles)(nil)).Elem()
}

func (o WirelessRfProfilesMapOutput) ToWirelessRfProfilesMapOutput() WirelessRfProfilesMapOutput {
	return o
}

func (o WirelessRfProfilesMapOutput) ToWirelessRfProfilesMapOutputWithContext(ctx context.Context) WirelessRfProfilesMapOutput {
	return o
}

func (o WirelessRfProfilesMapOutput) MapIndex(k pulumi.StringInput) WirelessRfProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessRfProfiles {
		return vs[0].(map[string]*WirelessRfProfiles)[vs[1].(string)]
	}).(WirelessRfProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRfProfilesInput)(nil)).Elem(), &WirelessRfProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRfProfilesArrayInput)(nil)).Elem(), WirelessRfProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRfProfilesMapInput)(nil)).Elem(), WirelessRfProfilesMap{})
	pulumi.RegisterOutputType(WirelessRfProfilesOutput{})
	pulumi.RegisterOutputType(WirelessRfProfilesArrayOutput{})
	pulumi.RegisterOutputType(WirelessRfProfilesMapOutput{})
}
