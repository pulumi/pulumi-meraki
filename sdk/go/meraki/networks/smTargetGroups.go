// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSmTargetGroups(ctx, "example", &networks.SmTargetGroupsArgs{
//				Name:      pulumi.String("Target group name"),
//				NetworkId: pulumi.String("string"),
//				Scope:     pulumi.String("withAny, tag1, tag2"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSmTargetGroupsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/smTargetGroups:SmTargetGroups example "network_id,target_group_id"
// ```
type SmTargetGroups struct {
	pulumi.CustomResourceState

	// The name of this target group.
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The scope of the target group.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The tags of the target group.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// targetGroupId path parameter. Target group ID
	TargetGroupId pulumi.StringPtrOutput `pulumi:"targetGroupId"`
}

// NewSmTargetGroups registers a new resource with the given unique name, arguments, and options.
func NewSmTargetGroups(ctx *pulumi.Context,
	name string, args *SmTargetGroupsArgs, opts ...pulumi.ResourceOption) (*SmTargetGroups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmTargetGroups
	err := ctx.RegisterResource("meraki:networks/smTargetGroups:SmTargetGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmTargetGroups gets an existing SmTargetGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmTargetGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmTargetGroupsState, opts ...pulumi.ResourceOption) (*SmTargetGroups, error) {
	var resource SmTargetGroups
	err := ctx.ReadResource("meraki:networks/smTargetGroups:SmTargetGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmTargetGroups resources.
type smTargetGroupsState struct {
	// The name of this target group.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The scope of the target group.
	Scope *string `pulumi:"scope"`
	// The tags of the target group.
	Tags []string `pulumi:"tags"`
	// targetGroupId path parameter. Target group ID
	TargetGroupId *string `pulumi:"targetGroupId"`
}

type SmTargetGroupsState struct {
	// The name of this target group.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The scope of the target group.
	Scope pulumi.StringPtrInput
	// The tags of the target group.
	Tags pulumi.StringArrayInput
	// targetGroupId path parameter. Target group ID
	TargetGroupId pulumi.StringPtrInput
}

func (SmTargetGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*smTargetGroupsState)(nil)).Elem()
}

type smTargetGroupsArgs struct {
	// The name of this target group.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The scope of the target group.
	Scope *string `pulumi:"scope"`
	// targetGroupId path parameter. Target group ID
	TargetGroupId *string `pulumi:"targetGroupId"`
}

// The set of arguments for constructing a SmTargetGroups resource.
type SmTargetGroupsArgs struct {
	// The name of this target group.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The scope of the target group.
	Scope pulumi.StringPtrInput
	// targetGroupId path parameter. Target group ID
	TargetGroupId pulumi.StringPtrInput
}

func (SmTargetGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smTargetGroupsArgs)(nil)).Elem()
}

type SmTargetGroupsInput interface {
	pulumi.Input

	ToSmTargetGroupsOutput() SmTargetGroupsOutput
	ToSmTargetGroupsOutputWithContext(ctx context.Context) SmTargetGroupsOutput
}

func (*SmTargetGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**SmTargetGroups)(nil)).Elem()
}

func (i *SmTargetGroups) ToSmTargetGroupsOutput() SmTargetGroupsOutput {
	return i.ToSmTargetGroupsOutputWithContext(context.Background())
}

func (i *SmTargetGroups) ToSmTargetGroupsOutputWithContext(ctx context.Context) SmTargetGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmTargetGroupsOutput)
}

// SmTargetGroupsArrayInput is an input type that accepts SmTargetGroupsArray and SmTargetGroupsArrayOutput values.
// You can construct a concrete instance of `SmTargetGroupsArrayInput` via:
//
//	SmTargetGroupsArray{ SmTargetGroupsArgs{...} }
type SmTargetGroupsArrayInput interface {
	pulumi.Input

	ToSmTargetGroupsArrayOutput() SmTargetGroupsArrayOutput
	ToSmTargetGroupsArrayOutputWithContext(context.Context) SmTargetGroupsArrayOutput
}

type SmTargetGroupsArray []SmTargetGroupsInput

func (SmTargetGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmTargetGroups)(nil)).Elem()
}

func (i SmTargetGroupsArray) ToSmTargetGroupsArrayOutput() SmTargetGroupsArrayOutput {
	return i.ToSmTargetGroupsArrayOutputWithContext(context.Background())
}

func (i SmTargetGroupsArray) ToSmTargetGroupsArrayOutputWithContext(ctx context.Context) SmTargetGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmTargetGroupsArrayOutput)
}

// SmTargetGroupsMapInput is an input type that accepts SmTargetGroupsMap and SmTargetGroupsMapOutput values.
// You can construct a concrete instance of `SmTargetGroupsMapInput` via:
//
//	SmTargetGroupsMap{ "key": SmTargetGroupsArgs{...} }
type SmTargetGroupsMapInput interface {
	pulumi.Input

	ToSmTargetGroupsMapOutput() SmTargetGroupsMapOutput
	ToSmTargetGroupsMapOutputWithContext(context.Context) SmTargetGroupsMapOutput
}

type SmTargetGroupsMap map[string]SmTargetGroupsInput

func (SmTargetGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmTargetGroups)(nil)).Elem()
}

func (i SmTargetGroupsMap) ToSmTargetGroupsMapOutput() SmTargetGroupsMapOutput {
	return i.ToSmTargetGroupsMapOutputWithContext(context.Background())
}

func (i SmTargetGroupsMap) ToSmTargetGroupsMapOutputWithContext(ctx context.Context) SmTargetGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmTargetGroupsMapOutput)
}

type SmTargetGroupsOutput struct{ *pulumi.OutputState }

func (SmTargetGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmTargetGroups)(nil)).Elem()
}

func (o SmTargetGroupsOutput) ToSmTargetGroupsOutput() SmTargetGroupsOutput {
	return o
}

func (o SmTargetGroupsOutput) ToSmTargetGroupsOutputWithContext(ctx context.Context) SmTargetGroupsOutput {
	return o
}

// The name of this target group.
func (o SmTargetGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SmTargetGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SmTargetGroupsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmTargetGroups) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The scope of the target group.
func (o SmTargetGroupsOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *SmTargetGroups) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The tags of the target group.
func (o SmTargetGroupsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SmTargetGroups) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// targetGroupId path parameter. Target group ID
func (o SmTargetGroupsOutput) TargetGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmTargetGroups) pulumi.StringPtrOutput { return v.TargetGroupId }).(pulumi.StringPtrOutput)
}

type SmTargetGroupsArrayOutput struct{ *pulumi.OutputState }

func (SmTargetGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmTargetGroups)(nil)).Elem()
}

func (o SmTargetGroupsArrayOutput) ToSmTargetGroupsArrayOutput() SmTargetGroupsArrayOutput {
	return o
}

func (o SmTargetGroupsArrayOutput) ToSmTargetGroupsArrayOutputWithContext(ctx context.Context) SmTargetGroupsArrayOutput {
	return o
}

func (o SmTargetGroupsArrayOutput) Index(i pulumi.IntInput) SmTargetGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmTargetGroups {
		return vs[0].([]*SmTargetGroups)[vs[1].(int)]
	}).(SmTargetGroupsOutput)
}

type SmTargetGroupsMapOutput struct{ *pulumi.OutputState }

func (SmTargetGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmTargetGroups)(nil)).Elem()
}

func (o SmTargetGroupsMapOutput) ToSmTargetGroupsMapOutput() SmTargetGroupsMapOutput {
	return o
}

func (o SmTargetGroupsMapOutput) ToSmTargetGroupsMapOutputWithContext(ctx context.Context) SmTargetGroupsMapOutput {
	return o
}

func (o SmTargetGroupsMapOutput) MapIndex(k pulumi.StringInput) SmTargetGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmTargetGroups {
		return vs[0].(map[string]*SmTargetGroups)[vs[1].(string)]
	}).(SmTargetGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmTargetGroupsInput)(nil)).Elem(), &SmTargetGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmTargetGroupsArrayInput)(nil)).Elem(), SmTargetGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmTargetGroupsMapInput)(nil)).Elem(), SmTargetGroupsMap{})
	pulumi.RegisterOutputType(SmTargetGroupsOutput{})
	pulumi.RegisterOutputType(SmTargetGroupsArrayOutput{})
	pulumi.RegisterOutputType(SmTargetGroupsMapOutput{})
}
