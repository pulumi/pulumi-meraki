// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchStacksAdd(ctx, "example", &networks.SwitchStacksAddArgs{
//				NetworkId:     pulumi.String("string"),
//				SwitchStackId: pulumi.String("string"),
//				Parameters: &networks.SwitchStacksAddParametersArgs{
//					Serial: pulumi.String("QBZY-XWVU-TSRQ"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchStacksAddExample", example)
//			return nil
//		})
//	}
//
// ```
type SwitchStacksAdd struct {
	pulumi.CustomResourceState

	Item SwitchStacksAddItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput             `pulumi:"networkId"`
	Parameters SwitchStacksAddParametersOutput `pulumi:"parameters"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringOutput `pulumi:"switchStackId"`
}

// NewSwitchStacksAdd registers a new resource with the given unique name, arguments, and options.
func NewSwitchStacksAdd(ctx *pulumi.Context,
	name string, args *SwitchStacksAddArgs, opts ...pulumi.ResourceOption) (*SwitchStacksAdd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.SwitchStackId == nil {
		return nil, errors.New("invalid value for required argument 'SwitchStackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchStacksAdd
	err := ctx.RegisterResource("meraki:networks/switchStacksAdd:SwitchStacksAdd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchStacksAdd gets an existing SwitchStacksAdd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchStacksAdd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchStacksAddState, opts ...pulumi.ResourceOption) (*SwitchStacksAdd, error) {
	var resource SwitchStacksAdd
	err := ctx.ReadResource("meraki:networks/switchStacksAdd:SwitchStacksAdd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchStacksAdd resources.
type switchStacksAddState struct {
	Item *SwitchStacksAddItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                    `pulumi:"networkId"`
	Parameters *SwitchStacksAddParameters `pulumi:"parameters"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId *string `pulumi:"switchStackId"`
}

type SwitchStacksAddState struct {
	Item SwitchStacksAddItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SwitchStacksAddParametersPtrInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrInput
}

func (SwitchStacksAddState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksAddState)(nil)).Elem()
}

type switchStacksAddArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                    `pulumi:"networkId"`
	Parameters SwitchStacksAddParameters `pulumi:"parameters"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId string `pulumi:"switchStackId"`
}

// The set of arguments for constructing a SwitchStacksAdd resource.
type SwitchStacksAddArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SwitchStacksAddParametersInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringInput
}

func (SwitchStacksAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksAddArgs)(nil)).Elem()
}

type SwitchStacksAddInput interface {
	pulumi.Input

	ToSwitchStacksAddOutput() SwitchStacksAddOutput
	ToSwitchStacksAddOutputWithContext(ctx context.Context) SwitchStacksAddOutput
}

func (*SwitchStacksAdd) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksAdd)(nil)).Elem()
}

func (i *SwitchStacksAdd) ToSwitchStacksAddOutput() SwitchStacksAddOutput {
	return i.ToSwitchStacksAddOutputWithContext(context.Background())
}

func (i *SwitchStacksAdd) ToSwitchStacksAddOutputWithContext(ctx context.Context) SwitchStacksAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksAddOutput)
}

// SwitchStacksAddArrayInput is an input type that accepts SwitchStacksAddArray and SwitchStacksAddArrayOutput values.
// You can construct a concrete instance of `SwitchStacksAddArrayInput` via:
//
//	SwitchStacksAddArray{ SwitchStacksAddArgs{...} }
type SwitchStacksAddArrayInput interface {
	pulumi.Input

	ToSwitchStacksAddArrayOutput() SwitchStacksAddArrayOutput
	ToSwitchStacksAddArrayOutputWithContext(context.Context) SwitchStacksAddArrayOutput
}

type SwitchStacksAddArray []SwitchStacksAddInput

func (SwitchStacksAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksAdd)(nil)).Elem()
}

func (i SwitchStacksAddArray) ToSwitchStacksAddArrayOutput() SwitchStacksAddArrayOutput {
	return i.ToSwitchStacksAddArrayOutputWithContext(context.Background())
}

func (i SwitchStacksAddArray) ToSwitchStacksAddArrayOutputWithContext(ctx context.Context) SwitchStacksAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksAddArrayOutput)
}

// SwitchStacksAddMapInput is an input type that accepts SwitchStacksAddMap and SwitchStacksAddMapOutput values.
// You can construct a concrete instance of `SwitchStacksAddMapInput` via:
//
//	SwitchStacksAddMap{ "key": SwitchStacksAddArgs{...} }
type SwitchStacksAddMapInput interface {
	pulumi.Input

	ToSwitchStacksAddMapOutput() SwitchStacksAddMapOutput
	ToSwitchStacksAddMapOutputWithContext(context.Context) SwitchStacksAddMapOutput
}

type SwitchStacksAddMap map[string]SwitchStacksAddInput

func (SwitchStacksAddMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksAdd)(nil)).Elem()
}

func (i SwitchStacksAddMap) ToSwitchStacksAddMapOutput() SwitchStacksAddMapOutput {
	return i.ToSwitchStacksAddMapOutputWithContext(context.Background())
}

func (i SwitchStacksAddMap) ToSwitchStacksAddMapOutputWithContext(ctx context.Context) SwitchStacksAddMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksAddMapOutput)
}

type SwitchStacksAddOutput struct{ *pulumi.OutputState }

func (SwitchStacksAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksAdd)(nil)).Elem()
}

func (o SwitchStacksAddOutput) ToSwitchStacksAddOutput() SwitchStacksAddOutput {
	return o
}

func (o SwitchStacksAddOutput) ToSwitchStacksAddOutputWithContext(ctx context.Context) SwitchStacksAddOutput {
	return o
}

func (o SwitchStacksAddOutput) Item() SwitchStacksAddItemOutput {
	return o.ApplyT(func(v *SwitchStacksAdd) SwitchStacksAddItemOutput { return v.Item }).(SwitchStacksAddItemOutput)
}

// networkId path parameter. Network ID
func (o SwitchStacksAddOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksAdd) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SwitchStacksAddOutput) Parameters() SwitchStacksAddParametersOutput {
	return o.ApplyT(func(v *SwitchStacksAdd) SwitchStacksAddParametersOutput { return v.Parameters }).(SwitchStacksAddParametersOutput)
}

// switchStackId path parameter. Switch stack ID
func (o SwitchStacksAddOutput) SwitchStackId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksAdd) pulumi.StringOutput { return v.SwitchStackId }).(pulumi.StringOutput)
}

type SwitchStacksAddArrayOutput struct{ *pulumi.OutputState }

func (SwitchStacksAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksAdd)(nil)).Elem()
}

func (o SwitchStacksAddArrayOutput) ToSwitchStacksAddArrayOutput() SwitchStacksAddArrayOutput {
	return o
}

func (o SwitchStacksAddArrayOutput) ToSwitchStacksAddArrayOutputWithContext(ctx context.Context) SwitchStacksAddArrayOutput {
	return o
}

func (o SwitchStacksAddArrayOutput) Index(i pulumi.IntInput) SwitchStacksAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchStacksAdd {
		return vs[0].([]*SwitchStacksAdd)[vs[1].(int)]
	}).(SwitchStacksAddOutput)
}

type SwitchStacksAddMapOutput struct{ *pulumi.OutputState }

func (SwitchStacksAddMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksAdd)(nil)).Elem()
}

func (o SwitchStacksAddMapOutput) ToSwitchStacksAddMapOutput() SwitchStacksAddMapOutput {
	return o
}

func (o SwitchStacksAddMapOutput) ToSwitchStacksAddMapOutputWithContext(ctx context.Context) SwitchStacksAddMapOutput {
	return o
}

func (o SwitchStacksAddMapOutput) MapIndex(k pulumi.StringInput) SwitchStacksAddOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchStacksAdd {
		return vs[0].(map[string]*SwitchStacksAdd)[vs[1].(string)]
	}).(SwitchStacksAddOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksAddInput)(nil)).Elem(), &SwitchStacksAdd{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksAddArrayInput)(nil)).Elem(), SwitchStacksAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksAddMapInput)(nil)).Elem(), SwitchStacksAddMap{})
	pulumi.RegisterOutputType(SwitchStacksAddOutput{})
	pulumi.RegisterOutputType(SwitchStacksAddArrayOutput{})
	pulumi.RegisterOutputType(SwitchStacksAddMapOutput{})
}
