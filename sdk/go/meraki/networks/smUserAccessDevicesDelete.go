// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSmUserAccessDevicesDelete(ctx, "example", &networks.SmUserAccessDevicesDeleteArgs{
//				NetworkId:          pulumi.String("string"),
//				UserAccessDeviceId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSmUserAccessDevicesDeleteExample", example)
//			return nil
//		})
//	}
//
// ```
type SmUserAccessDevicesDelete struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// userAccessDeviceId path parameter. User access device ID
	UserAccessDeviceId pulumi.StringOutput `pulumi:"userAccessDeviceId"`
}

// NewSmUserAccessDevicesDelete registers a new resource with the given unique name, arguments, and options.
func NewSmUserAccessDevicesDelete(ctx *pulumi.Context,
	name string, args *SmUserAccessDevicesDeleteArgs, opts ...pulumi.ResourceOption) (*SmUserAccessDevicesDelete, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.UserAccessDeviceId == nil {
		return nil, errors.New("invalid value for required argument 'UserAccessDeviceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmUserAccessDevicesDelete
	err := ctx.RegisterResource("meraki:networks/smUserAccessDevicesDelete:SmUserAccessDevicesDelete", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmUserAccessDevicesDelete gets an existing SmUserAccessDevicesDelete resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmUserAccessDevicesDelete(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmUserAccessDevicesDeleteState, opts ...pulumi.ResourceOption) (*SmUserAccessDevicesDelete, error) {
	var resource SmUserAccessDevicesDelete
	err := ctx.ReadResource("meraki:networks/smUserAccessDevicesDelete:SmUserAccessDevicesDelete", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmUserAccessDevicesDelete resources.
type smUserAccessDevicesDeleteState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// userAccessDeviceId path parameter. User access device ID
	UserAccessDeviceId *string `pulumi:"userAccessDeviceId"`
}

type SmUserAccessDevicesDeleteState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// userAccessDeviceId path parameter. User access device ID
	UserAccessDeviceId pulumi.StringPtrInput
}

func (SmUserAccessDevicesDeleteState) ElementType() reflect.Type {
	return reflect.TypeOf((*smUserAccessDevicesDeleteState)(nil)).Elem()
}

type smUserAccessDevicesDeleteArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// userAccessDeviceId path parameter. User access device ID
	UserAccessDeviceId string `pulumi:"userAccessDeviceId"`
}

// The set of arguments for constructing a SmUserAccessDevicesDelete resource.
type SmUserAccessDevicesDeleteArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// userAccessDeviceId path parameter. User access device ID
	UserAccessDeviceId pulumi.StringInput
}

func (SmUserAccessDevicesDeleteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smUserAccessDevicesDeleteArgs)(nil)).Elem()
}

type SmUserAccessDevicesDeleteInput interface {
	pulumi.Input

	ToSmUserAccessDevicesDeleteOutput() SmUserAccessDevicesDeleteOutput
	ToSmUserAccessDevicesDeleteOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteOutput
}

func (*SmUserAccessDevicesDelete) ElementType() reflect.Type {
	return reflect.TypeOf((**SmUserAccessDevicesDelete)(nil)).Elem()
}

func (i *SmUserAccessDevicesDelete) ToSmUserAccessDevicesDeleteOutput() SmUserAccessDevicesDeleteOutput {
	return i.ToSmUserAccessDevicesDeleteOutputWithContext(context.Background())
}

func (i *SmUserAccessDevicesDelete) ToSmUserAccessDevicesDeleteOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmUserAccessDevicesDeleteOutput)
}

// SmUserAccessDevicesDeleteArrayInput is an input type that accepts SmUserAccessDevicesDeleteArray and SmUserAccessDevicesDeleteArrayOutput values.
// You can construct a concrete instance of `SmUserAccessDevicesDeleteArrayInput` via:
//
//	SmUserAccessDevicesDeleteArray{ SmUserAccessDevicesDeleteArgs{...} }
type SmUserAccessDevicesDeleteArrayInput interface {
	pulumi.Input

	ToSmUserAccessDevicesDeleteArrayOutput() SmUserAccessDevicesDeleteArrayOutput
	ToSmUserAccessDevicesDeleteArrayOutputWithContext(context.Context) SmUserAccessDevicesDeleteArrayOutput
}

type SmUserAccessDevicesDeleteArray []SmUserAccessDevicesDeleteInput

func (SmUserAccessDevicesDeleteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmUserAccessDevicesDelete)(nil)).Elem()
}

func (i SmUserAccessDevicesDeleteArray) ToSmUserAccessDevicesDeleteArrayOutput() SmUserAccessDevicesDeleteArrayOutput {
	return i.ToSmUserAccessDevicesDeleteArrayOutputWithContext(context.Background())
}

func (i SmUserAccessDevicesDeleteArray) ToSmUserAccessDevicesDeleteArrayOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmUserAccessDevicesDeleteArrayOutput)
}

// SmUserAccessDevicesDeleteMapInput is an input type that accepts SmUserAccessDevicesDeleteMap and SmUserAccessDevicesDeleteMapOutput values.
// You can construct a concrete instance of `SmUserAccessDevicesDeleteMapInput` via:
//
//	SmUserAccessDevicesDeleteMap{ "key": SmUserAccessDevicesDeleteArgs{...} }
type SmUserAccessDevicesDeleteMapInput interface {
	pulumi.Input

	ToSmUserAccessDevicesDeleteMapOutput() SmUserAccessDevicesDeleteMapOutput
	ToSmUserAccessDevicesDeleteMapOutputWithContext(context.Context) SmUserAccessDevicesDeleteMapOutput
}

type SmUserAccessDevicesDeleteMap map[string]SmUserAccessDevicesDeleteInput

func (SmUserAccessDevicesDeleteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmUserAccessDevicesDelete)(nil)).Elem()
}

func (i SmUserAccessDevicesDeleteMap) ToSmUserAccessDevicesDeleteMapOutput() SmUserAccessDevicesDeleteMapOutput {
	return i.ToSmUserAccessDevicesDeleteMapOutputWithContext(context.Background())
}

func (i SmUserAccessDevicesDeleteMap) ToSmUserAccessDevicesDeleteMapOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmUserAccessDevicesDeleteMapOutput)
}

type SmUserAccessDevicesDeleteOutput struct{ *pulumi.OutputState }

func (SmUserAccessDevicesDeleteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmUserAccessDevicesDelete)(nil)).Elem()
}

func (o SmUserAccessDevicesDeleteOutput) ToSmUserAccessDevicesDeleteOutput() SmUserAccessDevicesDeleteOutput {
	return o
}

func (o SmUserAccessDevicesDeleteOutput) ToSmUserAccessDevicesDeleteOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteOutput {
	return o
}

// networkId path parameter. Network ID
func (o SmUserAccessDevicesDeleteOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmUserAccessDevicesDelete) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// userAccessDeviceId path parameter. User access device ID
func (o SmUserAccessDevicesDeleteOutput) UserAccessDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmUserAccessDevicesDelete) pulumi.StringOutput { return v.UserAccessDeviceId }).(pulumi.StringOutput)
}

type SmUserAccessDevicesDeleteArrayOutput struct{ *pulumi.OutputState }

func (SmUserAccessDevicesDeleteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmUserAccessDevicesDelete)(nil)).Elem()
}

func (o SmUserAccessDevicesDeleteArrayOutput) ToSmUserAccessDevicesDeleteArrayOutput() SmUserAccessDevicesDeleteArrayOutput {
	return o
}

func (o SmUserAccessDevicesDeleteArrayOutput) ToSmUserAccessDevicesDeleteArrayOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteArrayOutput {
	return o
}

func (o SmUserAccessDevicesDeleteArrayOutput) Index(i pulumi.IntInput) SmUserAccessDevicesDeleteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmUserAccessDevicesDelete {
		return vs[0].([]*SmUserAccessDevicesDelete)[vs[1].(int)]
	}).(SmUserAccessDevicesDeleteOutput)
}

type SmUserAccessDevicesDeleteMapOutput struct{ *pulumi.OutputState }

func (SmUserAccessDevicesDeleteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmUserAccessDevicesDelete)(nil)).Elem()
}

func (o SmUserAccessDevicesDeleteMapOutput) ToSmUserAccessDevicesDeleteMapOutput() SmUserAccessDevicesDeleteMapOutput {
	return o
}

func (o SmUserAccessDevicesDeleteMapOutput) ToSmUserAccessDevicesDeleteMapOutputWithContext(ctx context.Context) SmUserAccessDevicesDeleteMapOutput {
	return o
}

func (o SmUserAccessDevicesDeleteMapOutput) MapIndex(k pulumi.StringInput) SmUserAccessDevicesDeleteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmUserAccessDevicesDelete {
		return vs[0].(map[string]*SmUserAccessDevicesDelete)[vs[1].(string)]
	}).(SmUserAccessDevicesDeleteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmUserAccessDevicesDeleteInput)(nil)).Elem(), &SmUserAccessDevicesDelete{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmUserAccessDevicesDeleteArrayInput)(nil)).Elem(), SmUserAccessDevicesDeleteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmUserAccessDevicesDeleteMapInput)(nil)).Elem(), SmUserAccessDevicesDeleteMap{})
	pulumi.RegisterOutputType(SmUserAccessDevicesDeleteOutput{})
	pulumi.RegisterOutputType(SmUserAccessDevicesDeleteArrayOutput{})
	pulumi.RegisterOutputType(SmUserAccessDevicesDeleteMapOutput{})
}
