// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchPortSchedules(ctx, "example", &networks.SwitchPortSchedulesArgs{
//				Name:      pulumi.String("Weekdays schedule"),
//				NetworkId: pulumi.String("string"),
//				PortSchedule: &networks.SwitchPortSchedulesPortScheduleArgs{
//					Friday: &networks.SwitchPortSchedulesPortScheduleFridayArgs{
//						Active: pulumi.Bool(true),
//						From:   pulumi.String("9:00"),
//						To:     pulumi.String("17:00"),
//					},
//					Monday: &networks.SwitchPortSchedulesPortScheduleMondayArgs{
//						Active: pulumi.Bool(true),
//						From:   pulumi.String("9:00"),
//						To:     pulumi.String("17:00"),
//					},
//					Saturday: &networks.SwitchPortSchedulesPortScheduleSaturdayArgs{
//						Active: pulumi.Bool(false),
//						From:   pulumi.String("0:00"),
//						To:     pulumi.String("24:00"),
//					},
//					Sunday: &networks.SwitchPortSchedulesPortScheduleSundayArgs{
//						Active: pulumi.Bool(false),
//						From:   pulumi.String("0:00"),
//						To:     pulumi.String("24:00"),
//					},
//					Thursday: &networks.SwitchPortSchedulesPortScheduleThursdayArgs{
//						Active: pulumi.Bool(true),
//						From:   pulumi.String("9:00"),
//						To:     pulumi.String("17:00"),
//					},
//					Tuesday: &networks.SwitchPortSchedulesPortScheduleTuesdayArgs{
//						Active: pulumi.Bool(true),
//						From:   pulumi.String("9:00"),
//						To:     pulumi.String("17:00"),
//					},
//					Wednesday: &networks.SwitchPortSchedulesPortScheduleWednesdayArgs{
//						Active: pulumi.Bool(true),
//						From:   pulumi.String("9:00"),
//						To:     pulumi.String("17:00"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchPortSchedulesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchPortSchedules:SwitchPortSchedules example "network_id"
// ```
type SwitchPortSchedules struct {
	pulumi.CustomResourceState

	// The name for your port schedule. Required
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The schedule for switch port scheduling. Schedules are applied to days of the week.
	// When it's empty, default schedule with all days of a week are configured.
	// Any unspecified day in the schedule is added as a default schedule configuration of the day.
	PortSchedule SwitchPortSchedulesPortScheduleOutput `pulumi:"portSchedule"`
	// portScheduleId path parameter. Port schedule ID
	PortScheduleId pulumi.StringOutput `pulumi:"portScheduleId"`
}

// NewSwitchPortSchedules registers a new resource with the given unique name, arguments, and options.
func NewSwitchPortSchedules(ctx *pulumi.Context,
	name string, args *SwitchPortSchedulesArgs, opts ...pulumi.ResourceOption) (*SwitchPortSchedules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchPortSchedules
	err := ctx.RegisterResource("meraki:networks/switchPortSchedules:SwitchPortSchedules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchPortSchedules gets an existing SwitchPortSchedules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchPortSchedules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchPortSchedulesState, opts ...pulumi.ResourceOption) (*SwitchPortSchedules, error) {
	var resource SwitchPortSchedules
	err := ctx.ReadResource("meraki:networks/switchPortSchedules:SwitchPortSchedules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchPortSchedules resources.
type switchPortSchedulesState struct {
	// The name for your port schedule. Required
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The schedule for switch port scheduling. Schedules are applied to days of the week.
	// When it's empty, default schedule with all days of a week are configured.
	// Any unspecified day in the schedule is added as a default schedule configuration of the day.
	PortSchedule *SwitchPortSchedulesPortSchedule `pulumi:"portSchedule"`
	// portScheduleId path parameter. Port schedule ID
	PortScheduleId *string `pulumi:"portScheduleId"`
}

type SwitchPortSchedulesState struct {
	// The name for your port schedule. Required
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The schedule for switch port scheduling. Schedules are applied to days of the week.
	// When it's empty, default schedule with all days of a week are configured.
	// Any unspecified day in the schedule is added as a default schedule configuration of the day.
	PortSchedule SwitchPortSchedulesPortSchedulePtrInput
	// portScheduleId path parameter. Port schedule ID
	PortScheduleId pulumi.StringPtrInput
}

func (SwitchPortSchedulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchPortSchedulesState)(nil)).Elem()
}

type switchPortSchedulesArgs struct {
	// The name for your port schedule. Required
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The schedule for switch port scheduling. Schedules are applied to days of the week.
	// When it's empty, default schedule with all days of a week are configured.
	// Any unspecified day in the schedule is added as a default schedule configuration of the day.
	PortSchedule *SwitchPortSchedulesPortSchedule `pulumi:"portSchedule"`
	// portScheduleId path parameter. Port schedule ID
	PortScheduleId *string `pulumi:"portScheduleId"`
}

// The set of arguments for constructing a SwitchPortSchedules resource.
type SwitchPortSchedulesArgs struct {
	// The name for your port schedule. Required
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The schedule for switch port scheduling. Schedules are applied to days of the week.
	// When it's empty, default schedule with all days of a week are configured.
	// Any unspecified day in the schedule is added as a default schedule configuration of the day.
	PortSchedule SwitchPortSchedulesPortSchedulePtrInput
	// portScheduleId path parameter. Port schedule ID
	PortScheduleId pulumi.StringPtrInput
}

func (SwitchPortSchedulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchPortSchedulesArgs)(nil)).Elem()
}

type SwitchPortSchedulesInput interface {
	pulumi.Input

	ToSwitchPortSchedulesOutput() SwitchPortSchedulesOutput
	ToSwitchPortSchedulesOutputWithContext(ctx context.Context) SwitchPortSchedulesOutput
}

func (*SwitchPortSchedules) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchPortSchedules)(nil)).Elem()
}

func (i *SwitchPortSchedules) ToSwitchPortSchedulesOutput() SwitchPortSchedulesOutput {
	return i.ToSwitchPortSchedulesOutputWithContext(context.Background())
}

func (i *SwitchPortSchedules) ToSwitchPortSchedulesOutputWithContext(ctx context.Context) SwitchPortSchedulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortSchedulesOutput)
}

// SwitchPortSchedulesArrayInput is an input type that accepts SwitchPortSchedulesArray and SwitchPortSchedulesArrayOutput values.
// You can construct a concrete instance of `SwitchPortSchedulesArrayInput` via:
//
//	SwitchPortSchedulesArray{ SwitchPortSchedulesArgs{...} }
type SwitchPortSchedulesArrayInput interface {
	pulumi.Input

	ToSwitchPortSchedulesArrayOutput() SwitchPortSchedulesArrayOutput
	ToSwitchPortSchedulesArrayOutputWithContext(context.Context) SwitchPortSchedulesArrayOutput
}

type SwitchPortSchedulesArray []SwitchPortSchedulesInput

func (SwitchPortSchedulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchPortSchedules)(nil)).Elem()
}

func (i SwitchPortSchedulesArray) ToSwitchPortSchedulesArrayOutput() SwitchPortSchedulesArrayOutput {
	return i.ToSwitchPortSchedulesArrayOutputWithContext(context.Background())
}

func (i SwitchPortSchedulesArray) ToSwitchPortSchedulesArrayOutputWithContext(ctx context.Context) SwitchPortSchedulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortSchedulesArrayOutput)
}

// SwitchPortSchedulesMapInput is an input type that accepts SwitchPortSchedulesMap and SwitchPortSchedulesMapOutput values.
// You can construct a concrete instance of `SwitchPortSchedulesMapInput` via:
//
//	SwitchPortSchedulesMap{ "key": SwitchPortSchedulesArgs{...} }
type SwitchPortSchedulesMapInput interface {
	pulumi.Input

	ToSwitchPortSchedulesMapOutput() SwitchPortSchedulesMapOutput
	ToSwitchPortSchedulesMapOutputWithContext(context.Context) SwitchPortSchedulesMapOutput
}

type SwitchPortSchedulesMap map[string]SwitchPortSchedulesInput

func (SwitchPortSchedulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchPortSchedules)(nil)).Elem()
}

func (i SwitchPortSchedulesMap) ToSwitchPortSchedulesMapOutput() SwitchPortSchedulesMapOutput {
	return i.ToSwitchPortSchedulesMapOutputWithContext(context.Background())
}

func (i SwitchPortSchedulesMap) ToSwitchPortSchedulesMapOutputWithContext(ctx context.Context) SwitchPortSchedulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortSchedulesMapOutput)
}

type SwitchPortSchedulesOutput struct{ *pulumi.OutputState }

func (SwitchPortSchedulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchPortSchedules)(nil)).Elem()
}

func (o SwitchPortSchedulesOutput) ToSwitchPortSchedulesOutput() SwitchPortSchedulesOutput {
	return o
}

func (o SwitchPortSchedulesOutput) ToSwitchPortSchedulesOutputWithContext(ctx context.Context) SwitchPortSchedulesOutput {
	return o
}

// The name for your port schedule. Required
func (o SwitchPortSchedulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchPortSchedules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchPortSchedulesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchPortSchedules) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The schedule for switch port scheduling. Schedules are applied to days of the week.
// When it's empty, default schedule with all days of a week are configured.
// Any unspecified day in the schedule is added as a default schedule configuration of the day.
func (o SwitchPortSchedulesOutput) PortSchedule() SwitchPortSchedulesPortScheduleOutput {
	return o.ApplyT(func(v *SwitchPortSchedules) SwitchPortSchedulesPortScheduleOutput { return v.PortSchedule }).(SwitchPortSchedulesPortScheduleOutput)
}

// portScheduleId path parameter. Port schedule ID
func (o SwitchPortSchedulesOutput) PortScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchPortSchedules) pulumi.StringOutput { return v.PortScheduleId }).(pulumi.StringOutput)
}

type SwitchPortSchedulesArrayOutput struct{ *pulumi.OutputState }

func (SwitchPortSchedulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchPortSchedules)(nil)).Elem()
}

func (o SwitchPortSchedulesArrayOutput) ToSwitchPortSchedulesArrayOutput() SwitchPortSchedulesArrayOutput {
	return o
}

func (o SwitchPortSchedulesArrayOutput) ToSwitchPortSchedulesArrayOutputWithContext(ctx context.Context) SwitchPortSchedulesArrayOutput {
	return o
}

func (o SwitchPortSchedulesArrayOutput) Index(i pulumi.IntInput) SwitchPortSchedulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchPortSchedules {
		return vs[0].([]*SwitchPortSchedules)[vs[1].(int)]
	}).(SwitchPortSchedulesOutput)
}

type SwitchPortSchedulesMapOutput struct{ *pulumi.OutputState }

func (SwitchPortSchedulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchPortSchedules)(nil)).Elem()
}

func (o SwitchPortSchedulesMapOutput) ToSwitchPortSchedulesMapOutput() SwitchPortSchedulesMapOutput {
	return o
}

func (o SwitchPortSchedulesMapOutput) ToSwitchPortSchedulesMapOutputWithContext(ctx context.Context) SwitchPortSchedulesMapOutput {
	return o
}

func (o SwitchPortSchedulesMapOutput) MapIndex(k pulumi.StringInput) SwitchPortSchedulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchPortSchedules {
		return vs[0].(map[string]*SwitchPortSchedules)[vs[1].(string)]
	}).(SwitchPortSchedulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortSchedulesInput)(nil)).Elem(), &SwitchPortSchedules{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortSchedulesArrayInput)(nil)).Elem(), SwitchPortSchedulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortSchedulesMapInput)(nil)).Elem(), SwitchPortSchedulesMap{})
	pulumi.RegisterOutputType(SwitchPortSchedulesOutput{})
	pulumi.RegisterOutputType(SwitchPortSchedulesArrayOutput{})
	pulumi.RegisterOutputType(SwitchPortSchedulesMapOutput{})
}
