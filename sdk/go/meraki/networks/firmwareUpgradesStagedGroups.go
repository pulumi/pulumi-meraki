// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewFirmwareUpgradesStagedGroups(ctx, "example", &networks.FirmwareUpgradesStagedGroupsArgs{
//				AssignedDevices: &networks.FirmwareUpgradesStagedGroupsAssignedDevicesArgs{
//					Devices: networks.FirmwareUpgradesStagedGroupsAssignedDevicesDeviceArray{
//						&networks.FirmwareUpgradesStagedGroupsAssignedDevicesDeviceArgs{
//							Name:   pulumi.String("Device Name"),
//							Serial: pulumi.String("Q234-ABCD-5678"),
//						},
//					},
//					Switch_stacks: []map[string]interface{}{
//						map[string]interface{}{
//							"id":   "1234",
//							"name": "Stack Name",
//						},
//					},
//				},
//				Description: pulumi.String("The description of the group"),
//				IsDefault:   pulumi.Bool(false),
//				Name:        pulumi.String("My Staged Upgrade Group"),
//				NetworkId:   pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksFirmwareUpgradesStagedGroupsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/firmwareUpgradesStagedGroups:FirmwareUpgradesStagedGroups example "group_id,network_id"
// ```
type FirmwareUpgradesStagedGroups struct {
	pulumi.CustomResourceState

	// The devices and Switch Stacks assigned to the Group
	AssignedDevices FirmwareUpgradesStagedGroupsAssignedDevicesOutput `pulumi:"assignedDevices"`
	// Description of the Staged Upgrade Group
	Description pulumi.StringOutput `pulumi:"description"`
	// Id of staged upgrade group
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// Name of the Staged Upgrade Group
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewFirmwareUpgradesStagedGroups registers a new resource with the given unique name, arguments, and options.
func NewFirmwareUpgradesStagedGroups(ctx *pulumi.Context,
	name string, args *FirmwareUpgradesStagedGroupsArgs, opts ...pulumi.ResourceOption) (*FirmwareUpgradesStagedGroups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirmwareUpgradesStagedGroups
	err := ctx.RegisterResource("meraki:networks/firmwareUpgradesStagedGroups:FirmwareUpgradesStagedGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirmwareUpgradesStagedGroups gets an existing FirmwareUpgradesStagedGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirmwareUpgradesStagedGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirmwareUpgradesStagedGroupsState, opts ...pulumi.ResourceOption) (*FirmwareUpgradesStagedGroups, error) {
	var resource FirmwareUpgradesStagedGroups
	err := ctx.ReadResource("meraki:networks/firmwareUpgradesStagedGroups:FirmwareUpgradesStagedGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirmwareUpgradesStagedGroups resources.
type firmwareUpgradesStagedGroupsState struct {
	// The devices and Switch Stacks assigned to the Group
	AssignedDevices *FirmwareUpgradesStagedGroupsAssignedDevices `pulumi:"assignedDevices"`
	// Description of the Staged Upgrade Group
	Description *string `pulumi:"description"`
	// Id of staged upgrade group
	GroupId *string `pulumi:"groupId"`
	// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the Staged Upgrade Group
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type FirmwareUpgradesStagedGroupsState struct {
	// The devices and Switch Stacks assigned to the Group
	AssignedDevices FirmwareUpgradesStagedGroupsAssignedDevicesPtrInput
	// Description of the Staged Upgrade Group
	Description pulumi.StringPtrInput
	// Id of staged upgrade group
	GroupId pulumi.StringPtrInput
	// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
	IsDefault pulumi.BoolPtrInput
	// Name of the Staged Upgrade Group
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (FirmwareUpgradesStagedGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*firmwareUpgradesStagedGroupsState)(nil)).Elem()
}

type firmwareUpgradesStagedGroupsArgs struct {
	// The devices and Switch Stacks assigned to the Group
	AssignedDevices *FirmwareUpgradesStagedGroupsAssignedDevices `pulumi:"assignedDevices"`
	// Description of the Staged Upgrade Group
	Description *string `pulumi:"description"`
	// Id of staged upgrade group
	GroupId *string `pulumi:"groupId"`
	// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
	IsDefault *bool `pulumi:"isDefault"`
	// Name of the Staged Upgrade Group
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a FirmwareUpgradesStagedGroups resource.
type FirmwareUpgradesStagedGroupsArgs struct {
	// The devices and Switch Stacks assigned to the Group
	AssignedDevices FirmwareUpgradesStagedGroupsAssignedDevicesPtrInput
	// Description of the Staged Upgrade Group
	Description pulumi.StringPtrInput
	// Id of staged upgrade group
	GroupId pulumi.StringPtrInput
	// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
	IsDefault pulumi.BoolPtrInput
	// Name of the Staged Upgrade Group
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (FirmwareUpgradesStagedGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firmwareUpgradesStagedGroupsArgs)(nil)).Elem()
}

type FirmwareUpgradesStagedGroupsInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedGroupsOutput() FirmwareUpgradesStagedGroupsOutput
	ToFirmwareUpgradesStagedGroupsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsOutput
}

func (*FirmwareUpgradesStagedGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (i *FirmwareUpgradesStagedGroups) ToFirmwareUpgradesStagedGroupsOutput() FirmwareUpgradesStagedGroupsOutput {
	return i.ToFirmwareUpgradesStagedGroupsOutputWithContext(context.Background())
}

func (i *FirmwareUpgradesStagedGroups) ToFirmwareUpgradesStagedGroupsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedGroupsOutput)
}

// FirmwareUpgradesStagedGroupsArrayInput is an input type that accepts FirmwareUpgradesStagedGroupsArray and FirmwareUpgradesStagedGroupsArrayOutput values.
// You can construct a concrete instance of `FirmwareUpgradesStagedGroupsArrayInput` via:
//
//	FirmwareUpgradesStagedGroupsArray{ FirmwareUpgradesStagedGroupsArgs{...} }
type FirmwareUpgradesStagedGroupsArrayInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedGroupsArrayOutput() FirmwareUpgradesStagedGroupsArrayOutput
	ToFirmwareUpgradesStagedGroupsArrayOutputWithContext(context.Context) FirmwareUpgradesStagedGroupsArrayOutput
}

type FirmwareUpgradesStagedGroupsArray []FirmwareUpgradesStagedGroupsInput

func (FirmwareUpgradesStagedGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (i FirmwareUpgradesStagedGroupsArray) ToFirmwareUpgradesStagedGroupsArrayOutput() FirmwareUpgradesStagedGroupsArrayOutput {
	return i.ToFirmwareUpgradesStagedGroupsArrayOutputWithContext(context.Background())
}

func (i FirmwareUpgradesStagedGroupsArray) ToFirmwareUpgradesStagedGroupsArrayOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedGroupsArrayOutput)
}

// FirmwareUpgradesStagedGroupsMapInput is an input type that accepts FirmwareUpgradesStagedGroupsMap and FirmwareUpgradesStagedGroupsMapOutput values.
// You can construct a concrete instance of `FirmwareUpgradesStagedGroupsMapInput` via:
//
//	FirmwareUpgradesStagedGroupsMap{ "key": FirmwareUpgradesStagedGroupsArgs{...} }
type FirmwareUpgradesStagedGroupsMapInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedGroupsMapOutput() FirmwareUpgradesStagedGroupsMapOutput
	ToFirmwareUpgradesStagedGroupsMapOutputWithContext(context.Context) FirmwareUpgradesStagedGroupsMapOutput
}

type FirmwareUpgradesStagedGroupsMap map[string]FirmwareUpgradesStagedGroupsInput

func (FirmwareUpgradesStagedGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (i FirmwareUpgradesStagedGroupsMap) ToFirmwareUpgradesStagedGroupsMapOutput() FirmwareUpgradesStagedGroupsMapOutput {
	return i.ToFirmwareUpgradesStagedGroupsMapOutputWithContext(context.Background())
}

func (i FirmwareUpgradesStagedGroupsMap) ToFirmwareUpgradesStagedGroupsMapOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedGroupsMapOutput)
}

type FirmwareUpgradesStagedGroupsOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (o FirmwareUpgradesStagedGroupsOutput) ToFirmwareUpgradesStagedGroupsOutput() FirmwareUpgradesStagedGroupsOutput {
	return o
}

func (o FirmwareUpgradesStagedGroupsOutput) ToFirmwareUpgradesStagedGroupsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsOutput {
	return o
}

// The devices and Switch Stacks assigned to the Group
func (o FirmwareUpgradesStagedGroupsOutput) AssignedDevices() FirmwareUpgradesStagedGroupsAssignedDevicesOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) FirmwareUpgradesStagedGroupsAssignedDevicesOutput {
		return v.AssignedDevices
	}).(FirmwareUpgradesStagedGroupsAssignedDevicesOutput)
}

// Description of the Staged Upgrade Group
func (o FirmwareUpgradesStagedGroupsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Id of staged upgrade group
func (o FirmwareUpgradesStagedGroupsOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group
func (o FirmwareUpgradesStagedGroupsOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// Name of the Staged Upgrade Group
func (o FirmwareUpgradesStagedGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o FirmwareUpgradesStagedGroupsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedGroups) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type FirmwareUpgradesStagedGroupsArrayOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (o FirmwareUpgradesStagedGroupsArrayOutput) ToFirmwareUpgradesStagedGroupsArrayOutput() FirmwareUpgradesStagedGroupsArrayOutput {
	return o
}

func (o FirmwareUpgradesStagedGroupsArrayOutput) ToFirmwareUpgradesStagedGroupsArrayOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsArrayOutput {
	return o
}

func (o FirmwareUpgradesStagedGroupsArrayOutput) Index(i pulumi.IntInput) FirmwareUpgradesStagedGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirmwareUpgradesStagedGroups {
		return vs[0].([]*FirmwareUpgradesStagedGroups)[vs[1].(int)]
	}).(FirmwareUpgradesStagedGroupsOutput)
}

type FirmwareUpgradesStagedGroupsMapOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirmwareUpgradesStagedGroups)(nil)).Elem()
}

func (o FirmwareUpgradesStagedGroupsMapOutput) ToFirmwareUpgradesStagedGroupsMapOutput() FirmwareUpgradesStagedGroupsMapOutput {
	return o
}

func (o FirmwareUpgradesStagedGroupsMapOutput) ToFirmwareUpgradesStagedGroupsMapOutputWithContext(ctx context.Context) FirmwareUpgradesStagedGroupsMapOutput {
	return o
}

func (o FirmwareUpgradesStagedGroupsMapOutput) MapIndex(k pulumi.StringInput) FirmwareUpgradesStagedGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirmwareUpgradesStagedGroups {
		return vs[0].(map[string]*FirmwareUpgradesStagedGroups)[vs[1].(string)]
	}).(FirmwareUpgradesStagedGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedGroupsInput)(nil)).Elem(), &FirmwareUpgradesStagedGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedGroupsArrayInput)(nil)).Elem(), FirmwareUpgradesStagedGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedGroupsMapInput)(nil)).Elem(), FirmwareUpgradesStagedGroupsMap{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedGroupsOutput{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedGroupsArrayOutput{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedGroupsMapOutput{})
}
