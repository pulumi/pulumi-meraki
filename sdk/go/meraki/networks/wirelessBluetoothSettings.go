// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewWirelessBluetoothSettings(ctx, "example", &networks.WirelessBluetoothSettingsArgs{
//				AdvertisingEnabled:       pulumi.Bool(true),
//				Major:                    pulumi.Int(1),
//				MajorMinorAssignmentMode: pulumi.String("Non-unique"),
//				Minor:                    pulumi.Int(1),
//				NetworkId:                pulumi.String("string"),
//				ScanningEnabled:          pulumi.Bool(true),
//				Uuid:                     pulumi.String("00000000-0000-0000-000-000000000000"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksWirelessBluetoothSettingsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings example "network_id"
// ```
type WirelessBluetoothSettings struct {
	pulumi.CustomResourceState

	// Whether APs will advertise beacons.
	AdvertisingEnabled pulumi.BoolOutput `pulumi:"advertisingEnabled"`
	// Whether ESL is enabled on this network.
	EslEnabled pulumi.BoolOutput `pulumi:"eslEnabled"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major pulumi.IntOutput `pulumi:"major"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode pulumi.StringOutput `pulumi:"majorMinorAssignmentMode"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor pulumi.IntOutput `pulumi:"minor"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled pulumi.BoolOutput `pulumi:"scanningEnabled"`
	// The UUID to be used in the beacon identifier.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewWirelessBluetoothSettings registers a new resource with the given unique name, arguments, and options.
func NewWirelessBluetoothSettings(ctx *pulumi.Context,
	name string, args *WirelessBluetoothSettingsArgs, opts ...pulumi.ResourceOption) (*WirelessBluetoothSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessBluetoothSettings
	err := ctx.RegisterResource("meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessBluetoothSettings gets an existing WirelessBluetoothSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessBluetoothSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessBluetoothSettingsState, opts ...pulumi.ResourceOption) (*WirelessBluetoothSettings, error) {
	var resource WirelessBluetoothSettings
	err := ctx.ReadResource("meraki:networks/wirelessBluetoothSettings:WirelessBluetoothSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessBluetoothSettings resources.
type wirelessBluetoothSettingsState struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `pulumi:"advertisingEnabled"`
	// Whether ESL is enabled on this network.
	EslEnabled *bool `pulumi:"eslEnabled"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int `pulumi:"major"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *string `pulumi:"majorMinorAssignmentMode"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int `pulumi:"minor"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `pulumi:"scanningEnabled"`
	// The UUID to be used in the beacon identifier.
	Uuid *string `pulumi:"uuid"`
}

type WirelessBluetoothSettingsState struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled pulumi.BoolPtrInput
	// Whether ESL is enabled on this network.
	EslEnabled pulumi.BoolPtrInput
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major pulumi.IntPtrInput
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode pulumi.StringPtrInput
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor pulumi.IntPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled pulumi.BoolPtrInput
	// The UUID to be used in the beacon identifier.
	Uuid pulumi.StringPtrInput
}

func (WirelessBluetoothSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessBluetoothSettingsState)(nil)).Elem()
}

type wirelessBluetoothSettingsArgs struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `pulumi:"advertisingEnabled"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int `pulumi:"major"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *string `pulumi:"majorMinorAssignmentMode"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int `pulumi:"minor"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `pulumi:"scanningEnabled"`
	// The UUID to be used in the beacon identifier.
	Uuid *string `pulumi:"uuid"`
}

// The set of arguments for constructing a WirelessBluetoothSettings resource.
type WirelessBluetoothSettingsArgs struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled pulumi.BoolPtrInput
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major pulumi.IntPtrInput
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode pulumi.StringPtrInput
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor pulumi.IntPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled pulumi.BoolPtrInput
	// The UUID to be used in the beacon identifier.
	Uuid pulumi.StringPtrInput
}

func (WirelessBluetoothSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessBluetoothSettingsArgs)(nil)).Elem()
}

type WirelessBluetoothSettingsInput interface {
	pulumi.Input

	ToWirelessBluetoothSettingsOutput() WirelessBluetoothSettingsOutput
	ToWirelessBluetoothSettingsOutputWithContext(ctx context.Context) WirelessBluetoothSettingsOutput
}

func (*WirelessBluetoothSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessBluetoothSettings)(nil)).Elem()
}

func (i *WirelessBluetoothSettings) ToWirelessBluetoothSettingsOutput() WirelessBluetoothSettingsOutput {
	return i.ToWirelessBluetoothSettingsOutputWithContext(context.Background())
}

func (i *WirelessBluetoothSettings) ToWirelessBluetoothSettingsOutputWithContext(ctx context.Context) WirelessBluetoothSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessBluetoothSettingsOutput)
}

// WirelessBluetoothSettingsArrayInput is an input type that accepts WirelessBluetoothSettingsArray and WirelessBluetoothSettingsArrayOutput values.
// You can construct a concrete instance of `WirelessBluetoothSettingsArrayInput` via:
//
//	WirelessBluetoothSettingsArray{ WirelessBluetoothSettingsArgs{...} }
type WirelessBluetoothSettingsArrayInput interface {
	pulumi.Input

	ToWirelessBluetoothSettingsArrayOutput() WirelessBluetoothSettingsArrayOutput
	ToWirelessBluetoothSettingsArrayOutputWithContext(context.Context) WirelessBluetoothSettingsArrayOutput
}

type WirelessBluetoothSettingsArray []WirelessBluetoothSettingsInput

func (WirelessBluetoothSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessBluetoothSettings)(nil)).Elem()
}

func (i WirelessBluetoothSettingsArray) ToWirelessBluetoothSettingsArrayOutput() WirelessBluetoothSettingsArrayOutput {
	return i.ToWirelessBluetoothSettingsArrayOutputWithContext(context.Background())
}

func (i WirelessBluetoothSettingsArray) ToWirelessBluetoothSettingsArrayOutputWithContext(ctx context.Context) WirelessBluetoothSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessBluetoothSettingsArrayOutput)
}

// WirelessBluetoothSettingsMapInput is an input type that accepts WirelessBluetoothSettingsMap and WirelessBluetoothSettingsMapOutput values.
// You can construct a concrete instance of `WirelessBluetoothSettingsMapInput` via:
//
//	WirelessBluetoothSettingsMap{ "key": WirelessBluetoothSettingsArgs{...} }
type WirelessBluetoothSettingsMapInput interface {
	pulumi.Input

	ToWirelessBluetoothSettingsMapOutput() WirelessBluetoothSettingsMapOutput
	ToWirelessBluetoothSettingsMapOutputWithContext(context.Context) WirelessBluetoothSettingsMapOutput
}

type WirelessBluetoothSettingsMap map[string]WirelessBluetoothSettingsInput

func (WirelessBluetoothSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessBluetoothSettings)(nil)).Elem()
}

func (i WirelessBluetoothSettingsMap) ToWirelessBluetoothSettingsMapOutput() WirelessBluetoothSettingsMapOutput {
	return i.ToWirelessBluetoothSettingsMapOutputWithContext(context.Background())
}

func (i WirelessBluetoothSettingsMap) ToWirelessBluetoothSettingsMapOutputWithContext(ctx context.Context) WirelessBluetoothSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessBluetoothSettingsMapOutput)
}

type WirelessBluetoothSettingsOutput struct{ *pulumi.OutputState }

func (WirelessBluetoothSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessBluetoothSettings)(nil)).Elem()
}

func (o WirelessBluetoothSettingsOutput) ToWirelessBluetoothSettingsOutput() WirelessBluetoothSettingsOutput {
	return o
}

func (o WirelessBluetoothSettingsOutput) ToWirelessBluetoothSettingsOutputWithContext(ctx context.Context) WirelessBluetoothSettingsOutput {
	return o
}

// Whether APs will advertise beacons.
func (o WirelessBluetoothSettingsOutput) AdvertisingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.BoolOutput { return v.AdvertisingEnabled }).(pulumi.BoolOutput)
}

// Whether ESL is enabled on this network.
func (o WirelessBluetoothSettingsOutput) EslEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.BoolOutput { return v.EslEnabled }).(pulumi.BoolOutput)
}

// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
func (o WirelessBluetoothSettingsOutput) Major() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.IntOutput { return v.Major }).(pulumi.IntOutput)
}

// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
func (o WirelessBluetoothSettingsOutput) MajorMinorAssignmentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.StringOutput { return v.MajorMinorAssignmentMode }).(pulumi.StringOutput)
}

// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
func (o WirelessBluetoothSettingsOutput) Minor() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.IntOutput { return v.Minor }).(pulumi.IntOutput)
}

// networkId path parameter. Network ID
func (o WirelessBluetoothSettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Whether APs will scan for Bluetooth enabled clients.
func (o WirelessBluetoothSettingsOutput) ScanningEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.BoolOutput { return v.ScanningEnabled }).(pulumi.BoolOutput)
}

// The UUID to be used in the beacon identifier.
func (o WirelessBluetoothSettingsOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessBluetoothSettings) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type WirelessBluetoothSettingsArrayOutput struct{ *pulumi.OutputState }

func (WirelessBluetoothSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessBluetoothSettings)(nil)).Elem()
}

func (o WirelessBluetoothSettingsArrayOutput) ToWirelessBluetoothSettingsArrayOutput() WirelessBluetoothSettingsArrayOutput {
	return o
}

func (o WirelessBluetoothSettingsArrayOutput) ToWirelessBluetoothSettingsArrayOutputWithContext(ctx context.Context) WirelessBluetoothSettingsArrayOutput {
	return o
}

func (o WirelessBluetoothSettingsArrayOutput) Index(i pulumi.IntInput) WirelessBluetoothSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessBluetoothSettings {
		return vs[0].([]*WirelessBluetoothSettings)[vs[1].(int)]
	}).(WirelessBluetoothSettingsOutput)
}

type WirelessBluetoothSettingsMapOutput struct{ *pulumi.OutputState }

func (WirelessBluetoothSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessBluetoothSettings)(nil)).Elem()
}

func (o WirelessBluetoothSettingsMapOutput) ToWirelessBluetoothSettingsMapOutput() WirelessBluetoothSettingsMapOutput {
	return o
}

func (o WirelessBluetoothSettingsMapOutput) ToWirelessBluetoothSettingsMapOutputWithContext(ctx context.Context) WirelessBluetoothSettingsMapOutput {
	return o
}

func (o WirelessBluetoothSettingsMapOutput) MapIndex(k pulumi.StringInput) WirelessBluetoothSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessBluetoothSettings {
		return vs[0].(map[string]*WirelessBluetoothSettings)[vs[1].(string)]
	}).(WirelessBluetoothSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessBluetoothSettingsInput)(nil)).Elem(), &WirelessBluetoothSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessBluetoothSettingsArrayInput)(nil)).Elem(), WirelessBluetoothSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessBluetoothSettingsMapInput)(nil)).Elem(), WirelessBluetoothSettingsMap{})
	pulumi.RegisterOutputType(WirelessBluetoothSettingsOutput{})
	pulumi.RegisterOutputType(WirelessBluetoothSettingsArrayOutput{})
	pulumi.RegisterOutputType(WirelessBluetoothSettingsMapOutput{})
}
