// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceSettings(ctx, "example", &networks.ApplianceSettingsArgs{
//				ClientTrackingMethod: pulumi.String("MAC address"),
//				DeploymentMode:       pulumi.String("routed"),
//				DynamicDns: &networks.ApplianceSettingsDynamicDnsArgs{
//					Enabled: pulumi.Bool(true),
//					Prefix:  pulumi.String("test"),
//				},
//				NetworkId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceSettingsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceSettings:ApplianceSettings example "network_id"
// ```
type ApplianceSettings struct {
	pulumi.CustomResourceState

	// Client tracking method of a network
	ClientTrackingMethod pulumi.StringOutput `pulumi:"clientTrackingMethod"`
	// Deployment mode of a network
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`
	// Dynamic DNS settings for a network
	DynamicDns ApplianceSettingsDynamicDnsOutput `pulumi:"dynamicDns"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewApplianceSettings registers a new resource with the given unique name, arguments, and options.
func NewApplianceSettings(ctx *pulumi.Context,
	name string, args *ApplianceSettingsArgs, opts ...pulumi.ResourceOption) (*ApplianceSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceSettings
	err := ctx.RegisterResource("meraki:networks/applianceSettings:ApplianceSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceSettings gets an existing ApplianceSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceSettingsState, opts ...pulumi.ResourceOption) (*ApplianceSettings, error) {
	var resource ApplianceSettings
	err := ctx.ReadResource("meraki:networks/applianceSettings:ApplianceSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceSettings resources.
type applianceSettingsState struct {
	// Client tracking method of a network
	ClientTrackingMethod *string `pulumi:"clientTrackingMethod"`
	// Deployment mode of a network
	DeploymentMode *string `pulumi:"deploymentMode"`
	// Dynamic DNS settings for a network
	DynamicDns *ApplianceSettingsDynamicDns `pulumi:"dynamicDns"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type ApplianceSettingsState struct {
	// Client tracking method of a network
	ClientTrackingMethod pulumi.StringPtrInput
	// Deployment mode of a network
	DeploymentMode pulumi.StringPtrInput
	// Dynamic DNS settings for a network
	DynamicDns ApplianceSettingsDynamicDnsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (ApplianceSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceSettingsState)(nil)).Elem()
}

type applianceSettingsArgs struct {
	// Client tracking method of a network
	ClientTrackingMethod *string `pulumi:"clientTrackingMethod"`
	// Deployment mode of a network
	DeploymentMode *string `pulumi:"deploymentMode"`
	// Dynamic DNS settings for a network
	DynamicDns *ApplianceSettingsDynamicDns `pulumi:"dynamicDns"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a ApplianceSettings resource.
type ApplianceSettingsArgs struct {
	// Client tracking method of a network
	ClientTrackingMethod pulumi.StringPtrInput
	// Deployment mode of a network
	DeploymentMode pulumi.StringPtrInput
	// Dynamic DNS settings for a network
	DynamicDns ApplianceSettingsDynamicDnsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (ApplianceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceSettingsArgs)(nil)).Elem()
}

type ApplianceSettingsInput interface {
	pulumi.Input

	ToApplianceSettingsOutput() ApplianceSettingsOutput
	ToApplianceSettingsOutputWithContext(ctx context.Context) ApplianceSettingsOutput
}

func (*ApplianceSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceSettings)(nil)).Elem()
}

func (i *ApplianceSettings) ToApplianceSettingsOutput() ApplianceSettingsOutput {
	return i.ToApplianceSettingsOutputWithContext(context.Background())
}

func (i *ApplianceSettings) ToApplianceSettingsOutputWithContext(ctx context.Context) ApplianceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSettingsOutput)
}

// ApplianceSettingsArrayInput is an input type that accepts ApplianceSettingsArray and ApplianceSettingsArrayOutput values.
// You can construct a concrete instance of `ApplianceSettingsArrayInput` via:
//
//	ApplianceSettingsArray{ ApplianceSettingsArgs{...} }
type ApplianceSettingsArrayInput interface {
	pulumi.Input

	ToApplianceSettingsArrayOutput() ApplianceSettingsArrayOutput
	ToApplianceSettingsArrayOutputWithContext(context.Context) ApplianceSettingsArrayOutput
}

type ApplianceSettingsArray []ApplianceSettingsInput

func (ApplianceSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceSettings)(nil)).Elem()
}

func (i ApplianceSettingsArray) ToApplianceSettingsArrayOutput() ApplianceSettingsArrayOutput {
	return i.ToApplianceSettingsArrayOutputWithContext(context.Background())
}

func (i ApplianceSettingsArray) ToApplianceSettingsArrayOutputWithContext(ctx context.Context) ApplianceSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSettingsArrayOutput)
}

// ApplianceSettingsMapInput is an input type that accepts ApplianceSettingsMap and ApplianceSettingsMapOutput values.
// You can construct a concrete instance of `ApplianceSettingsMapInput` via:
//
//	ApplianceSettingsMap{ "key": ApplianceSettingsArgs{...} }
type ApplianceSettingsMapInput interface {
	pulumi.Input

	ToApplianceSettingsMapOutput() ApplianceSettingsMapOutput
	ToApplianceSettingsMapOutputWithContext(context.Context) ApplianceSettingsMapOutput
}

type ApplianceSettingsMap map[string]ApplianceSettingsInput

func (ApplianceSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceSettings)(nil)).Elem()
}

func (i ApplianceSettingsMap) ToApplianceSettingsMapOutput() ApplianceSettingsMapOutput {
	return i.ToApplianceSettingsMapOutputWithContext(context.Background())
}

func (i ApplianceSettingsMap) ToApplianceSettingsMapOutputWithContext(ctx context.Context) ApplianceSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceSettingsMapOutput)
}

type ApplianceSettingsOutput struct{ *pulumi.OutputState }

func (ApplianceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceSettings)(nil)).Elem()
}

func (o ApplianceSettingsOutput) ToApplianceSettingsOutput() ApplianceSettingsOutput {
	return o
}

func (o ApplianceSettingsOutput) ToApplianceSettingsOutputWithContext(ctx context.Context) ApplianceSettingsOutput {
	return o
}

// Client tracking method of a network
func (o ApplianceSettingsOutput) ClientTrackingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSettings) pulumi.StringOutput { return v.ClientTrackingMethod }).(pulumi.StringOutput)
}

// Deployment mode of a network
func (o ApplianceSettingsOutput) DeploymentMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSettings) pulumi.StringOutput { return v.DeploymentMode }).(pulumi.StringOutput)
}

// Dynamic DNS settings for a network
func (o ApplianceSettingsOutput) DynamicDns() ApplianceSettingsDynamicDnsOutput {
	return o.ApplyT(func(v *ApplianceSettings) ApplianceSettingsDynamicDnsOutput { return v.DynamicDns }).(ApplianceSettingsDynamicDnsOutput)
}

// networkId path parameter. Network ID
func (o ApplianceSettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceSettings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type ApplianceSettingsArrayOutput struct{ *pulumi.OutputState }

func (ApplianceSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceSettings)(nil)).Elem()
}

func (o ApplianceSettingsArrayOutput) ToApplianceSettingsArrayOutput() ApplianceSettingsArrayOutput {
	return o
}

func (o ApplianceSettingsArrayOutput) ToApplianceSettingsArrayOutputWithContext(ctx context.Context) ApplianceSettingsArrayOutput {
	return o
}

func (o ApplianceSettingsArrayOutput) Index(i pulumi.IntInput) ApplianceSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceSettings {
		return vs[0].([]*ApplianceSettings)[vs[1].(int)]
	}).(ApplianceSettingsOutput)
}

type ApplianceSettingsMapOutput struct{ *pulumi.OutputState }

func (ApplianceSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceSettings)(nil)).Elem()
}

func (o ApplianceSettingsMapOutput) ToApplianceSettingsMapOutput() ApplianceSettingsMapOutput {
	return o
}

func (o ApplianceSettingsMapOutput) ToApplianceSettingsMapOutputWithContext(ctx context.Context) ApplianceSettingsMapOutput {
	return o
}

func (o ApplianceSettingsMapOutput) MapIndex(k pulumi.StringInput) ApplianceSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceSettings {
		return vs[0].(map[string]*ApplianceSettings)[vs[1].(string)]
	}).(ApplianceSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSettingsInput)(nil)).Elem(), &ApplianceSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSettingsArrayInput)(nil)).Elem(), ApplianceSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceSettingsMapInput)(nil)).Elem(), ApplianceSettingsMap{})
	pulumi.RegisterOutputType(ApplianceSettingsOutput{})
	pulumi.RegisterOutputType(ApplianceSettingsArrayOutput{})
	pulumi.RegisterOutputType(ApplianceSettingsMapOutput{})
}
