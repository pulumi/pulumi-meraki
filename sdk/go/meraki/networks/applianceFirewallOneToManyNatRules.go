// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceFirewallOneToManyNatRules:ApplianceFirewallOneToManyNatRules example "network_id"
// ```
type ApplianceFirewallOneToManyNatRules struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// An array of 1:Many nat rules
	Rules ApplianceFirewallOneToManyNatRulesRuleArrayOutput `pulumi:"rules"`
}

// NewApplianceFirewallOneToManyNatRules registers a new resource with the given unique name, arguments, and options.
func NewApplianceFirewallOneToManyNatRules(ctx *pulumi.Context,
	name string, args *ApplianceFirewallOneToManyNatRulesArgs, opts ...pulumi.ResourceOption) (*ApplianceFirewallOneToManyNatRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceFirewallOneToManyNatRules
	err := ctx.RegisterResource("meraki:networks/applianceFirewallOneToManyNatRules:ApplianceFirewallOneToManyNatRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceFirewallOneToManyNatRules gets an existing ApplianceFirewallOneToManyNatRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceFirewallOneToManyNatRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceFirewallOneToManyNatRulesState, opts ...pulumi.ResourceOption) (*ApplianceFirewallOneToManyNatRules, error) {
	var resource ApplianceFirewallOneToManyNatRules
	err := ctx.ReadResource("meraki:networks/applianceFirewallOneToManyNatRules:ApplianceFirewallOneToManyNatRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceFirewallOneToManyNatRules resources.
type applianceFirewallOneToManyNatRulesState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// An array of 1:Many nat rules
	Rules []ApplianceFirewallOneToManyNatRulesRule `pulumi:"rules"`
}

type ApplianceFirewallOneToManyNatRulesState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// An array of 1:Many nat rules
	Rules ApplianceFirewallOneToManyNatRulesRuleArrayInput
}

func (ApplianceFirewallOneToManyNatRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallOneToManyNatRulesState)(nil)).Elem()
}

type applianceFirewallOneToManyNatRulesArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// An array of 1:Many nat rules
	Rules []ApplianceFirewallOneToManyNatRulesRule `pulumi:"rules"`
}

// The set of arguments for constructing a ApplianceFirewallOneToManyNatRules resource.
type ApplianceFirewallOneToManyNatRulesArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// An array of 1:Many nat rules
	Rules ApplianceFirewallOneToManyNatRulesRuleArrayInput
}

func (ApplianceFirewallOneToManyNatRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallOneToManyNatRulesArgs)(nil)).Elem()
}

type ApplianceFirewallOneToManyNatRulesInput interface {
	pulumi.Input

	ToApplianceFirewallOneToManyNatRulesOutput() ApplianceFirewallOneToManyNatRulesOutput
	ToApplianceFirewallOneToManyNatRulesOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesOutput
}

func (*ApplianceFirewallOneToManyNatRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (i *ApplianceFirewallOneToManyNatRules) ToApplianceFirewallOneToManyNatRulesOutput() ApplianceFirewallOneToManyNatRulesOutput {
	return i.ToApplianceFirewallOneToManyNatRulesOutputWithContext(context.Background())
}

func (i *ApplianceFirewallOneToManyNatRules) ToApplianceFirewallOneToManyNatRulesOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallOneToManyNatRulesOutput)
}

// ApplianceFirewallOneToManyNatRulesArrayInput is an input type that accepts ApplianceFirewallOneToManyNatRulesArray and ApplianceFirewallOneToManyNatRulesArrayOutput values.
// You can construct a concrete instance of `ApplianceFirewallOneToManyNatRulesArrayInput` via:
//
//	ApplianceFirewallOneToManyNatRulesArray{ ApplianceFirewallOneToManyNatRulesArgs{...} }
type ApplianceFirewallOneToManyNatRulesArrayInput interface {
	pulumi.Input

	ToApplianceFirewallOneToManyNatRulesArrayOutput() ApplianceFirewallOneToManyNatRulesArrayOutput
	ToApplianceFirewallOneToManyNatRulesArrayOutputWithContext(context.Context) ApplianceFirewallOneToManyNatRulesArrayOutput
}

type ApplianceFirewallOneToManyNatRulesArray []ApplianceFirewallOneToManyNatRulesInput

func (ApplianceFirewallOneToManyNatRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (i ApplianceFirewallOneToManyNatRulesArray) ToApplianceFirewallOneToManyNatRulesArrayOutput() ApplianceFirewallOneToManyNatRulesArrayOutput {
	return i.ToApplianceFirewallOneToManyNatRulesArrayOutputWithContext(context.Background())
}

func (i ApplianceFirewallOneToManyNatRulesArray) ToApplianceFirewallOneToManyNatRulesArrayOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallOneToManyNatRulesArrayOutput)
}

// ApplianceFirewallOneToManyNatRulesMapInput is an input type that accepts ApplianceFirewallOneToManyNatRulesMap and ApplianceFirewallOneToManyNatRulesMapOutput values.
// You can construct a concrete instance of `ApplianceFirewallOneToManyNatRulesMapInput` via:
//
//	ApplianceFirewallOneToManyNatRulesMap{ "key": ApplianceFirewallOneToManyNatRulesArgs{...} }
type ApplianceFirewallOneToManyNatRulesMapInput interface {
	pulumi.Input

	ToApplianceFirewallOneToManyNatRulesMapOutput() ApplianceFirewallOneToManyNatRulesMapOutput
	ToApplianceFirewallOneToManyNatRulesMapOutputWithContext(context.Context) ApplianceFirewallOneToManyNatRulesMapOutput
}

type ApplianceFirewallOneToManyNatRulesMap map[string]ApplianceFirewallOneToManyNatRulesInput

func (ApplianceFirewallOneToManyNatRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (i ApplianceFirewallOneToManyNatRulesMap) ToApplianceFirewallOneToManyNatRulesMapOutput() ApplianceFirewallOneToManyNatRulesMapOutput {
	return i.ToApplianceFirewallOneToManyNatRulesMapOutputWithContext(context.Background())
}

func (i ApplianceFirewallOneToManyNatRulesMap) ToApplianceFirewallOneToManyNatRulesMapOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallOneToManyNatRulesMapOutput)
}

type ApplianceFirewallOneToManyNatRulesOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallOneToManyNatRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (o ApplianceFirewallOneToManyNatRulesOutput) ToApplianceFirewallOneToManyNatRulesOutput() ApplianceFirewallOneToManyNatRulesOutput {
	return o
}

func (o ApplianceFirewallOneToManyNatRulesOutput) ToApplianceFirewallOneToManyNatRulesOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesOutput {
	return o
}

// networkId path parameter. Network ID
func (o ApplianceFirewallOneToManyNatRulesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceFirewallOneToManyNatRules) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// An array of 1:Many nat rules
func (o ApplianceFirewallOneToManyNatRulesOutput) Rules() ApplianceFirewallOneToManyNatRulesRuleArrayOutput {
	return o.ApplyT(func(v *ApplianceFirewallOneToManyNatRules) ApplianceFirewallOneToManyNatRulesRuleArrayOutput {
		return v.Rules
	}).(ApplianceFirewallOneToManyNatRulesRuleArrayOutput)
}

type ApplianceFirewallOneToManyNatRulesArrayOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallOneToManyNatRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (o ApplianceFirewallOneToManyNatRulesArrayOutput) ToApplianceFirewallOneToManyNatRulesArrayOutput() ApplianceFirewallOneToManyNatRulesArrayOutput {
	return o
}

func (o ApplianceFirewallOneToManyNatRulesArrayOutput) ToApplianceFirewallOneToManyNatRulesArrayOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesArrayOutput {
	return o
}

func (o ApplianceFirewallOneToManyNatRulesArrayOutput) Index(i pulumi.IntInput) ApplianceFirewallOneToManyNatRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceFirewallOneToManyNatRules {
		return vs[0].([]*ApplianceFirewallOneToManyNatRules)[vs[1].(int)]
	}).(ApplianceFirewallOneToManyNatRulesOutput)
}

type ApplianceFirewallOneToManyNatRulesMapOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallOneToManyNatRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallOneToManyNatRules)(nil)).Elem()
}

func (o ApplianceFirewallOneToManyNatRulesMapOutput) ToApplianceFirewallOneToManyNatRulesMapOutput() ApplianceFirewallOneToManyNatRulesMapOutput {
	return o
}

func (o ApplianceFirewallOneToManyNatRulesMapOutput) ToApplianceFirewallOneToManyNatRulesMapOutputWithContext(ctx context.Context) ApplianceFirewallOneToManyNatRulesMapOutput {
	return o
}

func (o ApplianceFirewallOneToManyNatRulesMapOutput) MapIndex(k pulumi.StringInput) ApplianceFirewallOneToManyNatRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceFirewallOneToManyNatRules {
		return vs[0].(map[string]*ApplianceFirewallOneToManyNatRules)[vs[1].(string)]
	}).(ApplianceFirewallOneToManyNatRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallOneToManyNatRulesInput)(nil)).Elem(), &ApplianceFirewallOneToManyNatRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallOneToManyNatRulesArrayInput)(nil)).Elem(), ApplianceFirewallOneToManyNatRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallOneToManyNatRulesMapInput)(nil)).Elem(), ApplianceFirewallOneToManyNatRulesMap{})
	pulumi.RegisterOutputType(ApplianceFirewallOneToManyNatRulesOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallOneToManyNatRulesArrayOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallOneToManyNatRulesMapOutput{})
}
