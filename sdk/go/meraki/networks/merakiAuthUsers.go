// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewMerakiAuthUsers(ctx, "example", &networks.MerakiAuthUsersArgs{
//				AccountType: pulumi.String("802.1X"),
//				Authorizations: networks.MerakiAuthUsersAuthorizationArray{
//					&networks.MerakiAuthUsersAuthorizationArgs{
//						Expires_at:  "2018-03-13T00:00:00.090210Z",
//						Ssid_number: 1,
//					},
//				},
//				Email:               pulumi.String("miles@meraki.com"),
//				EmailPasswordToUser: pulumi.Bool(false),
//				IsAdmin:             pulumi.Bool(false),
//				Name:                pulumi.String("Miles Meraki"),
//				NetworkId:           pulumi.String("string"),
//				Password:            pulumi.String("secret"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksMerakiAuthUsersExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/merakiAuthUsers:MerakiAuthUsers example "meraki_auth_user_id,network_id"
// ```
type MerakiAuthUsers struct {
	pulumi.CustomResourceState

	// Authorization type for user.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// User authorization info
	Authorizations MerakiAuthUsersAuthorizationArrayOutput `pulumi:"authorizations"`
	// Creation time of the user
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Email address of the user
	Email pulumi.StringOutput `pulumi:"email"`
	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser pulumi.BoolOutput `pulumi:"emailPasswordToUser"`
	// Whether or not the user is a Dashboard administrator
	IsAdmin pulumi.BoolOutput `pulumi:"isAdmin"`
	// merakiAuthUserId path parameter. Meraki auth user ID
	MerakiAuthUserId pulumi.StringPtrOutput `pulumi:"merakiAuthUserId"`
	// Name of the user
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The password for this user account. Only required If the user is not a Dashboard administrator.
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewMerakiAuthUsers registers a new resource with the given unique name, arguments, and options.
func NewMerakiAuthUsers(ctx *pulumi.Context,
	name string, args *MerakiAuthUsersArgs, opts ...pulumi.ResourceOption) (*MerakiAuthUsers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MerakiAuthUsers
	err := ctx.RegisterResource("meraki:networks/merakiAuthUsers:MerakiAuthUsers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMerakiAuthUsers gets an existing MerakiAuthUsers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMerakiAuthUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MerakiAuthUsersState, opts ...pulumi.ResourceOption) (*MerakiAuthUsers, error) {
	var resource MerakiAuthUsers
	err := ctx.ReadResource("meraki:networks/merakiAuthUsers:MerakiAuthUsers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MerakiAuthUsers resources.
type merakiAuthUsersState struct {
	// Authorization type for user.
	AccountType *string `pulumi:"accountType"`
	// User authorization info
	Authorizations []MerakiAuthUsersAuthorization `pulumi:"authorizations"`
	// Creation time of the user
	CreatedAt *string `pulumi:"createdAt"`
	// Email address of the user
	Email *string `pulumi:"email"`
	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser *bool `pulumi:"emailPasswordToUser"`
	// Whether or not the user is a Dashboard administrator
	IsAdmin *bool `pulumi:"isAdmin"`
	// merakiAuthUserId path parameter. Meraki auth user ID
	MerakiAuthUserId *string `pulumi:"merakiAuthUserId"`
	// Name of the user
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The password for this user account. Only required If the user is not a Dashboard administrator.
	Password *string `pulumi:"password"`
}

type MerakiAuthUsersState struct {
	// Authorization type for user.
	AccountType pulumi.StringPtrInput
	// User authorization info
	Authorizations MerakiAuthUsersAuthorizationArrayInput
	// Creation time of the user
	CreatedAt pulumi.StringPtrInput
	// Email address of the user
	Email pulumi.StringPtrInput
	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser pulumi.BoolPtrInput
	// Whether or not the user is a Dashboard administrator
	IsAdmin pulumi.BoolPtrInput
	// merakiAuthUserId path parameter. Meraki auth user ID
	MerakiAuthUserId pulumi.StringPtrInput
	// Name of the user
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The password for this user account. Only required If the user is not a Dashboard administrator.
	Password pulumi.StringPtrInput
}

func (MerakiAuthUsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*merakiAuthUsersState)(nil)).Elem()
}

type merakiAuthUsersArgs struct {
	// Authorization type for user.
	AccountType *string `pulumi:"accountType"`
	// User authorization info
	Authorizations []MerakiAuthUsersAuthorization `pulumi:"authorizations"`
	// Email address of the user
	Email *string `pulumi:"email"`
	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser *bool `pulumi:"emailPasswordToUser"`
	// Whether or not the user is a Dashboard administrator
	IsAdmin *bool `pulumi:"isAdmin"`
	// merakiAuthUserId path parameter. Meraki auth user ID
	MerakiAuthUserId *string `pulumi:"merakiAuthUserId"`
	// Name of the user
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The password for this user account. Only required If the user is not a Dashboard administrator.
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a MerakiAuthUsers resource.
type MerakiAuthUsersArgs struct {
	// Authorization type for user.
	AccountType pulumi.StringPtrInput
	// User authorization info
	Authorizations MerakiAuthUsersAuthorizationArrayInput
	// Email address of the user
	Email pulumi.StringPtrInput
	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser pulumi.BoolPtrInput
	// Whether or not the user is a Dashboard administrator
	IsAdmin pulumi.BoolPtrInput
	// merakiAuthUserId path parameter. Meraki auth user ID
	MerakiAuthUserId pulumi.StringPtrInput
	// Name of the user
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The password for this user account. Only required If the user is not a Dashboard administrator.
	Password pulumi.StringPtrInput
}

func (MerakiAuthUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*merakiAuthUsersArgs)(nil)).Elem()
}

type MerakiAuthUsersInput interface {
	pulumi.Input

	ToMerakiAuthUsersOutput() MerakiAuthUsersOutput
	ToMerakiAuthUsersOutputWithContext(ctx context.Context) MerakiAuthUsersOutput
}

func (*MerakiAuthUsers) ElementType() reflect.Type {
	return reflect.TypeOf((**MerakiAuthUsers)(nil)).Elem()
}

func (i *MerakiAuthUsers) ToMerakiAuthUsersOutput() MerakiAuthUsersOutput {
	return i.ToMerakiAuthUsersOutputWithContext(context.Background())
}

func (i *MerakiAuthUsers) ToMerakiAuthUsersOutputWithContext(ctx context.Context) MerakiAuthUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MerakiAuthUsersOutput)
}

// MerakiAuthUsersArrayInput is an input type that accepts MerakiAuthUsersArray and MerakiAuthUsersArrayOutput values.
// You can construct a concrete instance of `MerakiAuthUsersArrayInput` via:
//
//	MerakiAuthUsersArray{ MerakiAuthUsersArgs{...} }
type MerakiAuthUsersArrayInput interface {
	pulumi.Input

	ToMerakiAuthUsersArrayOutput() MerakiAuthUsersArrayOutput
	ToMerakiAuthUsersArrayOutputWithContext(context.Context) MerakiAuthUsersArrayOutput
}

type MerakiAuthUsersArray []MerakiAuthUsersInput

func (MerakiAuthUsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MerakiAuthUsers)(nil)).Elem()
}

func (i MerakiAuthUsersArray) ToMerakiAuthUsersArrayOutput() MerakiAuthUsersArrayOutput {
	return i.ToMerakiAuthUsersArrayOutputWithContext(context.Background())
}

func (i MerakiAuthUsersArray) ToMerakiAuthUsersArrayOutputWithContext(ctx context.Context) MerakiAuthUsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MerakiAuthUsersArrayOutput)
}

// MerakiAuthUsersMapInput is an input type that accepts MerakiAuthUsersMap and MerakiAuthUsersMapOutput values.
// You can construct a concrete instance of `MerakiAuthUsersMapInput` via:
//
//	MerakiAuthUsersMap{ "key": MerakiAuthUsersArgs{...} }
type MerakiAuthUsersMapInput interface {
	pulumi.Input

	ToMerakiAuthUsersMapOutput() MerakiAuthUsersMapOutput
	ToMerakiAuthUsersMapOutputWithContext(context.Context) MerakiAuthUsersMapOutput
}

type MerakiAuthUsersMap map[string]MerakiAuthUsersInput

func (MerakiAuthUsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MerakiAuthUsers)(nil)).Elem()
}

func (i MerakiAuthUsersMap) ToMerakiAuthUsersMapOutput() MerakiAuthUsersMapOutput {
	return i.ToMerakiAuthUsersMapOutputWithContext(context.Background())
}

func (i MerakiAuthUsersMap) ToMerakiAuthUsersMapOutputWithContext(ctx context.Context) MerakiAuthUsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MerakiAuthUsersMapOutput)
}

type MerakiAuthUsersOutput struct{ *pulumi.OutputState }

func (MerakiAuthUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MerakiAuthUsers)(nil)).Elem()
}

func (o MerakiAuthUsersOutput) ToMerakiAuthUsersOutput() MerakiAuthUsersOutput {
	return o
}

func (o MerakiAuthUsersOutput) ToMerakiAuthUsersOutputWithContext(ctx context.Context) MerakiAuthUsersOutput {
	return o
}

// Authorization type for user.
func (o MerakiAuthUsersOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// User authorization info
func (o MerakiAuthUsersOutput) Authorizations() MerakiAuthUsersAuthorizationArrayOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) MerakiAuthUsersAuthorizationArrayOutput { return v.Authorizations }).(MerakiAuthUsersAuthorizationArrayOutput)
}

// Creation time of the user
func (o MerakiAuthUsersOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Email address of the user
func (o MerakiAuthUsersOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Whether or not Meraki should email the password to user. Default is false.
func (o MerakiAuthUsersOutput) EmailPasswordToUser() pulumi.BoolOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.BoolOutput { return v.EmailPasswordToUser }).(pulumi.BoolOutput)
}

// Whether or not the user is a Dashboard administrator
func (o MerakiAuthUsersOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.BoolOutput { return v.IsAdmin }).(pulumi.BoolOutput)
}

// merakiAuthUserId path parameter. Meraki auth user ID
func (o MerakiAuthUsersOutput) MerakiAuthUserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringPtrOutput { return v.MerakiAuthUserId }).(pulumi.StringPtrOutput)
}

// Name of the user
func (o MerakiAuthUsersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o MerakiAuthUsersOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The password for this user account. Only required If the user is not a Dashboard administrator.
func (o MerakiAuthUsersOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MerakiAuthUsers) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type MerakiAuthUsersArrayOutput struct{ *pulumi.OutputState }

func (MerakiAuthUsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MerakiAuthUsers)(nil)).Elem()
}

func (o MerakiAuthUsersArrayOutput) ToMerakiAuthUsersArrayOutput() MerakiAuthUsersArrayOutput {
	return o
}

func (o MerakiAuthUsersArrayOutput) ToMerakiAuthUsersArrayOutputWithContext(ctx context.Context) MerakiAuthUsersArrayOutput {
	return o
}

func (o MerakiAuthUsersArrayOutput) Index(i pulumi.IntInput) MerakiAuthUsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MerakiAuthUsers {
		return vs[0].([]*MerakiAuthUsers)[vs[1].(int)]
	}).(MerakiAuthUsersOutput)
}

type MerakiAuthUsersMapOutput struct{ *pulumi.OutputState }

func (MerakiAuthUsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MerakiAuthUsers)(nil)).Elem()
}

func (o MerakiAuthUsersMapOutput) ToMerakiAuthUsersMapOutput() MerakiAuthUsersMapOutput {
	return o
}

func (o MerakiAuthUsersMapOutput) ToMerakiAuthUsersMapOutputWithContext(ctx context.Context) MerakiAuthUsersMapOutput {
	return o
}

func (o MerakiAuthUsersMapOutput) MapIndex(k pulumi.StringInput) MerakiAuthUsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MerakiAuthUsers {
		return vs[0].(map[string]*MerakiAuthUsers)[vs[1].(string)]
	}).(MerakiAuthUsersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MerakiAuthUsersInput)(nil)).Elem(), &MerakiAuthUsers{})
	pulumi.RegisterInputType(reflect.TypeOf((*MerakiAuthUsersArrayInput)(nil)).Elem(), MerakiAuthUsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MerakiAuthUsersMapInput)(nil)).Elem(), MerakiAuthUsersMap{})
	pulumi.RegisterOutputType(MerakiAuthUsersOutput{})
	pulumi.RegisterOutputType(MerakiAuthUsersArrayOutput{})
	pulumi.RegisterOutputType(MerakiAuthUsersMapOutput{})
}
