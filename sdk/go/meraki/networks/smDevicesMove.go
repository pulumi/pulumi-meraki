// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type SmDevicesMove struct {
	pulumi.CustomResourceState

	Item SmDevicesMoveItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput           `pulumi:"networkId"`
	Parameters SmDevicesMoveParametersOutput `pulumi:"parameters"`
}

// NewSmDevicesMove registers a new resource with the given unique name, arguments, and options.
func NewSmDevicesMove(ctx *pulumi.Context,
	name string, args *SmDevicesMoveArgs, opts ...pulumi.ResourceOption) (*SmDevicesMove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmDevicesMove
	err := ctx.RegisterResource("meraki:networks/smDevicesMove:SmDevicesMove", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmDevicesMove gets an existing SmDevicesMove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmDevicesMove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmDevicesMoveState, opts ...pulumi.ResourceOption) (*SmDevicesMove, error) {
	var resource SmDevicesMove
	err := ctx.ReadResource("meraki:networks/smDevicesMove:SmDevicesMove", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmDevicesMove resources.
type smDevicesMoveState struct {
	Item *SmDevicesMoveItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                  `pulumi:"networkId"`
	Parameters *SmDevicesMoveParameters `pulumi:"parameters"`
}

type SmDevicesMoveState struct {
	Item SmDevicesMoveItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SmDevicesMoveParametersPtrInput
}

func (SmDevicesMoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesMoveState)(nil)).Elem()
}

type smDevicesMoveArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                  `pulumi:"networkId"`
	Parameters SmDevicesMoveParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a SmDevicesMove resource.
type SmDevicesMoveArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SmDevicesMoveParametersInput
}

func (SmDevicesMoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesMoveArgs)(nil)).Elem()
}

type SmDevicesMoveInput interface {
	pulumi.Input

	ToSmDevicesMoveOutput() SmDevicesMoveOutput
	ToSmDevicesMoveOutputWithContext(ctx context.Context) SmDevicesMoveOutput
}

func (*SmDevicesMove) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesMove)(nil)).Elem()
}

func (i *SmDevicesMove) ToSmDevicesMoveOutput() SmDevicesMoveOutput {
	return i.ToSmDevicesMoveOutputWithContext(context.Background())
}

func (i *SmDevicesMove) ToSmDevicesMoveOutputWithContext(ctx context.Context) SmDevicesMoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesMoveOutput)
}

// SmDevicesMoveArrayInput is an input type that accepts SmDevicesMoveArray and SmDevicesMoveArrayOutput values.
// You can construct a concrete instance of `SmDevicesMoveArrayInput` via:
//
//	SmDevicesMoveArray{ SmDevicesMoveArgs{...} }
type SmDevicesMoveArrayInput interface {
	pulumi.Input

	ToSmDevicesMoveArrayOutput() SmDevicesMoveArrayOutput
	ToSmDevicesMoveArrayOutputWithContext(context.Context) SmDevicesMoveArrayOutput
}

type SmDevicesMoveArray []SmDevicesMoveInput

func (SmDevicesMoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesMove)(nil)).Elem()
}

func (i SmDevicesMoveArray) ToSmDevicesMoveArrayOutput() SmDevicesMoveArrayOutput {
	return i.ToSmDevicesMoveArrayOutputWithContext(context.Background())
}

func (i SmDevicesMoveArray) ToSmDevicesMoveArrayOutputWithContext(ctx context.Context) SmDevicesMoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesMoveArrayOutput)
}

// SmDevicesMoveMapInput is an input type that accepts SmDevicesMoveMap and SmDevicesMoveMapOutput values.
// You can construct a concrete instance of `SmDevicesMoveMapInput` via:
//
//	SmDevicesMoveMap{ "key": SmDevicesMoveArgs{...} }
type SmDevicesMoveMapInput interface {
	pulumi.Input

	ToSmDevicesMoveMapOutput() SmDevicesMoveMapOutput
	ToSmDevicesMoveMapOutputWithContext(context.Context) SmDevicesMoveMapOutput
}

type SmDevicesMoveMap map[string]SmDevicesMoveInput

func (SmDevicesMoveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesMove)(nil)).Elem()
}

func (i SmDevicesMoveMap) ToSmDevicesMoveMapOutput() SmDevicesMoveMapOutput {
	return i.ToSmDevicesMoveMapOutputWithContext(context.Background())
}

func (i SmDevicesMoveMap) ToSmDevicesMoveMapOutputWithContext(ctx context.Context) SmDevicesMoveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesMoveMapOutput)
}

type SmDevicesMoveOutput struct{ *pulumi.OutputState }

func (SmDevicesMoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesMove)(nil)).Elem()
}

func (o SmDevicesMoveOutput) ToSmDevicesMoveOutput() SmDevicesMoveOutput {
	return o
}

func (o SmDevicesMoveOutput) ToSmDevicesMoveOutputWithContext(ctx context.Context) SmDevicesMoveOutput {
	return o
}

func (o SmDevicesMoveOutput) Item() SmDevicesMoveItemOutput {
	return o.ApplyT(func(v *SmDevicesMove) SmDevicesMoveItemOutput { return v.Item }).(SmDevicesMoveItemOutput)
}

// networkId path parameter. Network ID
func (o SmDevicesMoveOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesMove) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmDevicesMoveOutput) Parameters() SmDevicesMoveParametersOutput {
	return o.ApplyT(func(v *SmDevicesMove) SmDevicesMoveParametersOutput { return v.Parameters }).(SmDevicesMoveParametersOutput)
}

type SmDevicesMoveArrayOutput struct{ *pulumi.OutputState }

func (SmDevicesMoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesMove)(nil)).Elem()
}

func (o SmDevicesMoveArrayOutput) ToSmDevicesMoveArrayOutput() SmDevicesMoveArrayOutput {
	return o
}

func (o SmDevicesMoveArrayOutput) ToSmDevicesMoveArrayOutputWithContext(ctx context.Context) SmDevicesMoveArrayOutput {
	return o
}

func (o SmDevicesMoveArrayOutput) Index(i pulumi.IntInput) SmDevicesMoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmDevicesMove {
		return vs[0].([]*SmDevicesMove)[vs[1].(int)]
	}).(SmDevicesMoveOutput)
}

type SmDevicesMoveMapOutput struct{ *pulumi.OutputState }

func (SmDevicesMoveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesMove)(nil)).Elem()
}

func (o SmDevicesMoveMapOutput) ToSmDevicesMoveMapOutput() SmDevicesMoveMapOutput {
	return o
}

func (o SmDevicesMoveMapOutput) ToSmDevicesMoveMapOutputWithContext(ctx context.Context) SmDevicesMoveMapOutput {
	return o
}

func (o SmDevicesMoveMapOutput) MapIndex(k pulumi.StringInput) SmDevicesMoveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmDevicesMove {
		return vs[0].(map[string]*SmDevicesMove)[vs[1].(string)]
	}).(SmDevicesMoveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesMoveInput)(nil)).Elem(), &SmDevicesMove{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesMoveArrayInput)(nil)).Elem(), SmDevicesMoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesMoveMapInput)(nil)).Elem(), SmDevicesMoveMap{})
	pulumi.RegisterOutputType(SmDevicesMoveOutput{})
	pulumi.RegisterOutputType(SmDevicesMoveArrayOutput{})
	pulumi.RegisterOutputType(SmDevicesMoveMapOutput{})
}
