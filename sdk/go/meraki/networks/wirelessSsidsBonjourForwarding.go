// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsidsBonjourForwarding:WirelessSsidsBonjourForwarding example "network_id,number"
// ```
type WirelessSsidsBonjourForwarding struct {
	pulumi.CustomResourceState

	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Bonjour forwarding exception
	Exception WirelessSsidsBonjourForwardingExceptionOutput `pulumi:"exception"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// number path parameter.
	Number pulumi.StringOutput `pulumi:"number"`
	// Bonjour forwarding rules
	Rules WirelessSsidsBonjourForwardingRuleArrayOutput `pulumi:"rules"`
}

// NewWirelessSsidsBonjourForwarding registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsidsBonjourForwarding(ctx *pulumi.Context,
	name string, args *WirelessSsidsBonjourForwardingArgs, opts ...pulumi.ResourceOption) (*WirelessSsidsBonjourForwarding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsidsBonjourForwarding
	err := ctx.RegisterResource("meraki:networks/wirelessSsidsBonjourForwarding:WirelessSsidsBonjourForwarding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsidsBonjourForwarding gets an existing WirelessSsidsBonjourForwarding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsidsBonjourForwarding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsBonjourForwardingState, opts ...pulumi.ResourceOption) (*WirelessSsidsBonjourForwarding, error) {
	var resource WirelessSsidsBonjourForwarding
	err := ctx.ReadResource("meraki:networks/wirelessSsidsBonjourForwarding:WirelessSsidsBonjourForwarding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsidsBonjourForwarding resources.
type wirelessSsidsBonjourForwardingState struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled *bool `pulumi:"enabled"`
	// Bonjour forwarding exception
	Exception *WirelessSsidsBonjourForwardingException `pulumi:"exception"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// number path parameter.
	Number *string `pulumi:"number"`
	// Bonjour forwarding rules
	Rules []WirelessSsidsBonjourForwardingRule `pulumi:"rules"`
}

type WirelessSsidsBonjourForwardingState struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled pulumi.BoolPtrInput
	// Bonjour forwarding exception
	Exception WirelessSsidsBonjourForwardingExceptionPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// number path parameter.
	Number pulumi.StringPtrInput
	// Bonjour forwarding rules
	Rules WirelessSsidsBonjourForwardingRuleArrayInput
}

func (WirelessSsidsBonjourForwardingState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsBonjourForwardingState)(nil)).Elem()
}

type wirelessSsidsBonjourForwardingArgs struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled *bool `pulumi:"enabled"`
	// Bonjour forwarding exception
	Exception *WirelessSsidsBonjourForwardingException `pulumi:"exception"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// number path parameter.
	Number string `pulumi:"number"`
	// Bonjour forwarding rules
	Rules []WirelessSsidsBonjourForwardingRule `pulumi:"rules"`
}

// The set of arguments for constructing a WirelessSsidsBonjourForwarding resource.
type WirelessSsidsBonjourForwardingArgs struct {
	// If true, Bonjour forwarding is enabled on the SSID.
	Enabled pulumi.BoolPtrInput
	// Bonjour forwarding exception
	Exception WirelessSsidsBonjourForwardingExceptionPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// number path parameter.
	Number pulumi.StringInput
	// Bonjour forwarding rules
	Rules WirelessSsidsBonjourForwardingRuleArrayInput
}

func (WirelessSsidsBonjourForwardingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsBonjourForwardingArgs)(nil)).Elem()
}

type WirelessSsidsBonjourForwardingInput interface {
	pulumi.Input

	ToWirelessSsidsBonjourForwardingOutput() WirelessSsidsBonjourForwardingOutput
	ToWirelessSsidsBonjourForwardingOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingOutput
}

func (*WirelessSsidsBonjourForwarding) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (i *WirelessSsidsBonjourForwarding) ToWirelessSsidsBonjourForwardingOutput() WirelessSsidsBonjourForwardingOutput {
	return i.ToWirelessSsidsBonjourForwardingOutputWithContext(context.Background())
}

func (i *WirelessSsidsBonjourForwarding) ToWirelessSsidsBonjourForwardingOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsBonjourForwardingOutput)
}

// WirelessSsidsBonjourForwardingArrayInput is an input type that accepts WirelessSsidsBonjourForwardingArray and WirelessSsidsBonjourForwardingArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsBonjourForwardingArrayInput` via:
//
//	WirelessSsidsBonjourForwardingArray{ WirelessSsidsBonjourForwardingArgs{...} }
type WirelessSsidsBonjourForwardingArrayInput interface {
	pulumi.Input

	ToWirelessSsidsBonjourForwardingArrayOutput() WirelessSsidsBonjourForwardingArrayOutput
	ToWirelessSsidsBonjourForwardingArrayOutputWithContext(context.Context) WirelessSsidsBonjourForwardingArrayOutput
}

type WirelessSsidsBonjourForwardingArray []WirelessSsidsBonjourForwardingInput

func (WirelessSsidsBonjourForwardingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (i WirelessSsidsBonjourForwardingArray) ToWirelessSsidsBonjourForwardingArrayOutput() WirelessSsidsBonjourForwardingArrayOutput {
	return i.ToWirelessSsidsBonjourForwardingArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsBonjourForwardingArray) ToWirelessSsidsBonjourForwardingArrayOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsBonjourForwardingArrayOutput)
}

// WirelessSsidsBonjourForwardingMapInput is an input type that accepts WirelessSsidsBonjourForwardingMap and WirelessSsidsBonjourForwardingMapOutput values.
// You can construct a concrete instance of `WirelessSsidsBonjourForwardingMapInput` via:
//
//	WirelessSsidsBonjourForwardingMap{ "key": WirelessSsidsBonjourForwardingArgs{...} }
type WirelessSsidsBonjourForwardingMapInput interface {
	pulumi.Input

	ToWirelessSsidsBonjourForwardingMapOutput() WirelessSsidsBonjourForwardingMapOutput
	ToWirelessSsidsBonjourForwardingMapOutputWithContext(context.Context) WirelessSsidsBonjourForwardingMapOutput
}

type WirelessSsidsBonjourForwardingMap map[string]WirelessSsidsBonjourForwardingInput

func (WirelessSsidsBonjourForwardingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (i WirelessSsidsBonjourForwardingMap) ToWirelessSsidsBonjourForwardingMapOutput() WirelessSsidsBonjourForwardingMapOutput {
	return i.ToWirelessSsidsBonjourForwardingMapOutputWithContext(context.Background())
}

func (i WirelessSsidsBonjourForwardingMap) ToWirelessSsidsBonjourForwardingMapOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsBonjourForwardingMapOutput)
}

type WirelessSsidsBonjourForwardingOutput struct{ *pulumi.OutputState }

func (WirelessSsidsBonjourForwardingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (o WirelessSsidsBonjourForwardingOutput) ToWirelessSsidsBonjourForwardingOutput() WirelessSsidsBonjourForwardingOutput {
	return o
}

func (o WirelessSsidsBonjourForwardingOutput) ToWirelessSsidsBonjourForwardingOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingOutput {
	return o
}

// If true, Bonjour forwarding is enabled on the SSID.
func (o WirelessSsidsBonjourForwardingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsBonjourForwarding) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Bonjour forwarding exception
func (o WirelessSsidsBonjourForwardingOutput) Exception() WirelessSsidsBonjourForwardingExceptionOutput {
	return o.ApplyT(func(v *WirelessSsidsBonjourForwarding) WirelessSsidsBonjourForwardingExceptionOutput {
		return v.Exception
	}).(WirelessSsidsBonjourForwardingExceptionOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsBonjourForwardingOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsBonjourForwarding) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// number path parameter.
func (o WirelessSsidsBonjourForwardingOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsBonjourForwarding) pulumi.StringOutput { return v.Number }).(pulumi.StringOutput)
}

// Bonjour forwarding rules
func (o WirelessSsidsBonjourForwardingOutput) Rules() WirelessSsidsBonjourForwardingRuleArrayOutput {
	return o.ApplyT(func(v *WirelessSsidsBonjourForwarding) WirelessSsidsBonjourForwardingRuleArrayOutput { return v.Rules }).(WirelessSsidsBonjourForwardingRuleArrayOutput)
}

type WirelessSsidsBonjourForwardingArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsBonjourForwardingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (o WirelessSsidsBonjourForwardingArrayOutput) ToWirelessSsidsBonjourForwardingArrayOutput() WirelessSsidsBonjourForwardingArrayOutput {
	return o
}

func (o WirelessSsidsBonjourForwardingArrayOutput) ToWirelessSsidsBonjourForwardingArrayOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingArrayOutput {
	return o
}

func (o WirelessSsidsBonjourForwardingArrayOutput) Index(i pulumi.IntInput) WirelessSsidsBonjourForwardingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsidsBonjourForwarding {
		return vs[0].([]*WirelessSsidsBonjourForwarding)[vs[1].(int)]
	}).(WirelessSsidsBonjourForwardingOutput)
}

type WirelessSsidsBonjourForwardingMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsBonjourForwardingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsBonjourForwarding)(nil)).Elem()
}

func (o WirelessSsidsBonjourForwardingMapOutput) ToWirelessSsidsBonjourForwardingMapOutput() WirelessSsidsBonjourForwardingMapOutput {
	return o
}

func (o WirelessSsidsBonjourForwardingMapOutput) ToWirelessSsidsBonjourForwardingMapOutputWithContext(ctx context.Context) WirelessSsidsBonjourForwardingMapOutput {
	return o
}

func (o WirelessSsidsBonjourForwardingMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsBonjourForwardingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsidsBonjourForwarding {
		return vs[0].(map[string]*WirelessSsidsBonjourForwarding)[vs[1].(string)]
	}).(WirelessSsidsBonjourForwardingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsBonjourForwardingInput)(nil)).Elem(), &WirelessSsidsBonjourForwarding{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsBonjourForwardingArrayInput)(nil)).Elem(), WirelessSsidsBonjourForwardingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsBonjourForwardingMapInput)(nil)).Elem(), WirelessSsidsBonjourForwardingMap{})
	pulumi.RegisterOutputType(WirelessSsidsBonjourForwardingOutput{})
	pulumi.RegisterOutputType(WirelessSsidsBonjourForwardingArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsBonjourForwardingMapOutput{})
}
