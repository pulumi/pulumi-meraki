// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSettings(ctx, "example", &networks.SettingsArgs{
//				LocalStatusPage: &networks.SettingsLocalStatusPageArgs{
//					Authentication: &networks.SettingsLocalStatusPageAuthenticationArgs{
//						Enabled:  pulumi.Bool(false),
//						Password: pulumi.String("miles123"),
//					},
//				},
//				LocalStatusPageEnabled: pulumi.Bool(true),
//				NamedVlans: &networks.SettingsNamedVlansArgs{
//					Enabled: pulumi.Bool(true),
//				},
//				NetworkId:               pulumi.String("string"),
//				RemoteStatusPageEnabled: pulumi.Bool(true),
//				SecurePort: &networks.SettingsSecurePortArgs{
//					Enabled: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSettingsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/settings:Settings example "network_id"
// ```
type Settings struct {
	pulumi.CustomResourceState

	// A hash of FIPS options applied to the Network
	Fips SettingsFipsOutput `pulumi:"fips"`
	// A hash of Local Status page(s)' authentication options applied to the Network.
	LocalStatusPage SettingsLocalStatusPageOutput `pulumi:"localStatusPage"`
	// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
	LocalStatusPageEnabled pulumi.BoolOutput `pulumi:"localStatusPageEnabled"`
	// A hash of Named VLANs options applied to the Network.
	NamedVlans SettingsNamedVlansOutput `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled pulumi.BoolOutput `pulumi:"remoteStatusPageEnabled"`
	// A hash of SecureConnect options applied to the Network.
	SecurePort SettingsSecurePortOutput `pulumi:"securePort"`
}

// NewSettings registers a new resource with the given unique name, arguments, and options.
func NewSettings(ctx *pulumi.Context,
	name string, args *SettingsArgs, opts ...pulumi.ResourceOption) (*Settings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Settings
	err := ctx.RegisterResource("meraki:networks/settings:Settings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettings gets an existing Settings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingsState, opts ...pulumi.ResourceOption) (*Settings, error) {
	var resource Settings
	err := ctx.ReadResource("meraki:networks/settings:Settings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Settings resources.
type settingsState struct {
	// A hash of FIPS options applied to the Network
	Fips *SettingsFips `pulumi:"fips"`
	// A hash of Local Status page(s)' authentication options applied to the Network.
	LocalStatusPage *SettingsLocalStatusPage `pulumi:"localStatusPage"`
	// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
	LocalStatusPageEnabled *bool `pulumi:"localStatusPageEnabled"`
	// A hash of Named VLANs options applied to the Network.
	NamedVlans *SettingsNamedVlans `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled *bool `pulumi:"remoteStatusPageEnabled"`
	// A hash of SecureConnect options applied to the Network.
	SecurePort *SettingsSecurePort `pulumi:"securePort"`
}

type SettingsState struct {
	// A hash of FIPS options applied to the Network
	Fips SettingsFipsPtrInput
	// A hash of Local Status page(s)' authentication options applied to the Network.
	LocalStatusPage SettingsLocalStatusPagePtrInput
	// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
	LocalStatusPageEnabled pulumi.BoolPtrInput
	// A hash of Named VLANs options applied to the Network.
	NamedVlans SettingsNamedVlansPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled pulumi.BoolPtrInput
	// A hash of SecureConnect options applied to the Network.
	SecurePort SettingsSecurePortPtrInput
}

func (SettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsState)(nil)).Elem()
}

type settingsArgs struct {
	// A hash of Local Status page(s)' authentication options applied to the Network.
	LocalStatusPage *SettingsLocalStatusPage `pulumi:"localStatusPage"`
	// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
	LocalStatusPageEnabled *bool `pulumi:"localStatusPageEnabled"`
	// A hash of Named VLANs options applied to the Network.
	NamedVlans *SettingsNamedVlans `pulumi:"namedVlans"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled *bool `pulumi:"remoteStatusPageEnabled"`
	// A hash of SecureConnect options applied to the Network.
	SecurePort *SettingsSecurePort `pulumi:"securePort"`
}

// The set of arguments for constructing a Settings resource.
type SettingsArgs struct {
	// A hash of Local Status page(s)' authentication options applied to the Network.
	LocalStatusPage SettingsLocalStatusPagePtrInput
	// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
	LocalStatusPageEnabled pulumi.BoolPtrInput
	// A hash of Named VLANs options applied to the Network.
	NamedVlans SettingsNamedVlansPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled pulumi.BoolPtrInput
	// A hash of SecureConnect options applied to the Network.
	SecurePort SettingsSecurePortPtrInput
}

func (SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsArgs)(nil)).Elem()
}

type SettingsInput interface {
	pulumi.Input

	ToSettingsOutput() SettingsOutput
	ToSettingsOutputWithContext(ctx context.Context) SettingsOutput
}

func (*Settings) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (i *Settings) ToSettingsOutput() SettingsOutput {
	return i.ToSettingsOutputWithContext(context.Background())
}

func (i *Settings) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput)
}

// SettingsArrayInput is an input type that accepts SettingsArray and SettingsArrayOutput values.
// You can construct a concrete instance of `SettingsArrayInput` via:
//
//	SettingsArray{ SettingsArgs{...} }
type SettingsArrayInput interface {
	pulumi.Input

	ToSettingsArrayOutput() SettingsArrayOutput
	ToSettingsArrayOutputWithContext(context.Context) SettingsArrayOutput
}

type SettingsArray []SettingsInput

func (SettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Settings)(nil)).Elem()
}

func (i SettingsArray) ToSettingsArrayOutput() SettingsArrayOutput {
	return i.ToSettingsArrayOutputWithContext(context.Background())
}

func (i SettingsArray) ToSettingsArrayOutputWithContext(ctx context.Context) SettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsArrayOutput)
}

// SettingsMapInput is an input type that accepts SettingsMap and SettingsMapOutput values.
// You can construct a concrete instance of `SettingsMapInput` via:
//
//	SettingsMap{ "key": SettingsArgs{...} }
type SettingsMapInput interface {
	pulumi.Input

	ToSettingsMapOutput() SettingsMapOutput
	ToSettingsMapOutputWithContext(context.Context) SettingsMapOutput
}

type SettingsMap map[string]SettingsInput

func (SettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Settings)(nil)).Elem()
}

func (i SettingsMap) ToSettingsMapOutput() SettingsMapOutput {
	return i.ToSettingsMapOutputWithContext(context.Background())
}

func (i SettingsMap) ToSettingsMapOutputWithContext(ctx context.Context) SettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsMapOutput)
}

type SettingsOutput struct{ *pulumi.OutputState }

func (SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (o SettingsOutput) ToSettingsOutput() SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return o
}

// A hash of FIPS options applied to the Network
func (o SettingsOutput) Fips() SettingsFipsOutput {
	return o.ApplyT(func(v *Settings) SettingsFipsOutput { return v.Fips }).(SettingsFipsOutput)
}

// A hash of Local Status page(s)' authentication options applied to the Network.
func (o SettingsOutput) LocalStatusPage() SettingsLocalStatusPageOutput {
	return o.ApplyT(func(v *Settings) SettingsLocalStatusPageOutput { return v.LocalStatusPage }).(SettingsLocalStatusPageOutput)
}

// Enables / disables the local device status pages (\n\nmy.meraki.com, \n\n\n\nap.meraki.com, \n\n\n\nswitch.meraki.com, \n\n\n\nwired.meraki.com\n\n). Optional (defaults to false)
func (o SettingsOutput) LocalStatusPageEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Settings) pulumi.BoolOutput { return v.LocalStatusPageEnabled }).(pulumi.BoolOutput)
}

// A hash of Named VLANs options applied to the Network.
func (o SettingsOutput) NamedVlans() SettingsNamedVlansOutput {
	return o.ApplyT(func(v *Settings) SettingsNamedVlansOutput { return v.NamedVlans }).(SettingsNamedVlansOutput)
}

// networkId path parameter. Network ID
func (o SettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Settings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Enables / disables access to the device status page (\n\nhttp://[device's LAN IP])\n\n. Optional. Can only be set if localStatusPageEnabled is set to true
func (o SettingsOutput) RemoteStatusPageEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Settings) pulumi.BoolOutput { return v.RemoteStatusPageEnabled }).(pulumi.BoolOutput)
}

// A hash of SecureConnect options applied to the Network.
func (o SettingsOutput) SecurePort() SettingsSecurePortOutput {
	return o.ApplyT(func(v *Settings) SettingsSecurePortOutput { return v.SecurePort }).(SettingsSecurePortOutput)
}

type SettingsArrayOutput struct{ *pulumi.OutputState }

func (SettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Settings)(nil)).Elem()
}

func (o SettingsArrayOutput) ToSettingsArrayOutput() SettingsArrayOutput {
	return o
}

func (o SettingsArrayOutput) ToSettingsArrayOutputWithContext(ctx context.Context) SettingsArrayOutput {
	return o
}

func (o SettingsArrayOutput) Index(i pulumi.IntInput) SettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Settings {
		return vs[0].([]*Settings)[vs[1].(int)]
	}).(SettingsOutput)
}

type SettingsMapOutput struct{ *pulumi.OutputState }

func (SettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Settings)(nil)).Elem()
}

func (o SettingsMapOutput) ToSettingsMapOutput() SettingsMapOutput {
	return o
}

func (o SettingsMapOutput) ToSettingsMapOutputWithContext(ctx context.Context) SettingsMapOutput {
	return o
}

func (o SettingsMapOutput) MapIndex(k pulumi.StringInput) SettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Settings {
		return vs[0].(map[string]*Settings)[vs[1].(string)]
	}).(SettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsInput)(nil)).Elem(), &Settings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsArrayInput)(nil)).Elem(), SettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsMapInput)(nil)).Elem(), SettingsMap{})
	pulumi.RegisterOutputType(SettingsOutput{})
	pulumi.RegisterOutputType(SettingsArrayOutput{})
	pulumi.RegisterOutputType(SettingsMapOutput{})
}
