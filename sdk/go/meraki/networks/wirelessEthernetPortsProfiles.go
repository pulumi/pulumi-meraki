// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles example "network_id,profile_id"
// ```
type WirelessEthernetPortsProfiles struct {
	pulumi.CustomResourceState

	// Is default profile
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// AP port profile name
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Ports config
	Ports WirelessEthernetPortsProfilesPortArrayOutput `pulumi:"ports"`
	// AP port profile ID
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// Usb ports config
	UsbPorts WirelessEthernetPortsProfilesUsbPortArrayOutput `pulumi:"usbPorts"`
}

// NewWirelessEthernetPortsProfiles registers a new resource with the given unique name, arguments, and options.
func NewWirelessEthernetPortsProfiles(ctx *pulumi.Context,
	name string, args *WirelessEthernetPortsProfilesArgs, opts ...pulumi.ResourceOption) (*WirelessEthernetPortsProfiles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessEthernetPortsProfiles
	err := ctx.RegisterResource("meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessEthernetPortsProfiles gets an existing WirelessEthernetPortsProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessEthernetPortsProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessEthernetPortsProfilesState, opts ...pulumi.ResourceOption) (*WirelessEthernetPortsProfiles, error) {
	var resource WirelessEthernetPortsProfiles
	err := ctx.ReadResource("meraki:networks/wirelessEthernetPortsProfiles:WirelessEthernetPortsProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessEthernetPortsProfiles resources.
type wirelessEthernetPortsProfilesState struct {
	// Is default profile
	IsDefault *bool `pulumi:"isDefault"`
	// AP port profile name
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Ports config
	Ports []WirelessEthernetPortsProfilesPort `pulumi:"ports"`
	// AP port profile ID
	ProfileId *string `pulumi:"profileId"`
	// Usb ports config
	UsbPorts []WirelessEthernetPortsProfilesUsbPort `pulumi:"usbPorts"`
}

type WirelessEthernetPortsProfilesState struct {
	// Is default profile
	IsDefault pulumi.BoolPtrInput
	// AP port profile name
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Ports config
	Ports WirelessEthernetPortsProfilesPortArrayInput
	// AP port profile ID
	ProfileId pulumi.StringPtrInput
	// Usb ports config
	UsbPorts WirelessEthernetPortsProfilesUsbPortArrayInput
}

func (WirelessEthernetPortsProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessEthernetPortsProfilesState)(nil)).Elem()
}

type wirelessEthernetPortsProfilesArgs struct {
	// AP port profile name
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Ports config
	Ports []WirelessEthernetPortsProfilesPort `pulumi:"ports"`
	// AP port profile ID
	ProfileId string `pulumi:"profileId"`
	// Usb ports config
	UsbPorts []WirelessEthernetPortsProfilesUsbPort `pulumi:"usbPorts"`
}

// The set of arguments for constructing a WirelessEthernetPortsProfiles resource.
type WirelessEthernetPortsProfilesArgs struct {
	// AP port profile name
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Ports config
	Ports WirelessEthernetPortsProfilesPortArrayInput
	// AP port profile ID
	ProfileId pulumi.StringInput
	// Usb ports config
	UsbPorts WirelessEthernetPortsProfilesUsbPortArrayInput
}

func (WirelessEthernetPortsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessEthernetPortsProfilesArgs)(nil)).Elem()
}

type WirelessEthernetPortsProfilesInput interface {
	pulumi.Input

	ToWirelessEthernetPortsProfilesOutput() WirelessEthernetPortsProfilesOutput
	ToWirelessEthernetPortsProfilesOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesOutput
}

func (*WirelessEthernetPortsProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (i *WirelessEthernetPortsProfiles) ToWirelessEthernetPortsProfilesOutput() WirelessEthernetPortsProfilesOutput {
	return i.ToWirelessEthernetPortsProfilesOutputWithContext(context.Background())
}

func (i *WirelessEthernetPortsProfiles) ToWirelessEthernetPortsProfilesOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessEthernetPortsProfilesOutput)
}

// WirelessEthernetPortsProfilesArrayInput is an input type that accepts WirelessEthernetPortsProfilesArray and WirelessEthernetPortsProfilesArrayOutput values.
// You can construct a concrete instance of `WirelessEthernetPortsProfilesArrayInput` via:
//
//	WirelessEthernetPortsProfilesArray{ WirelessEthernetPortsProfilesArgs{...} }
type WirelessEthernetPortsProfilesArrayInput interface {
	pulumi.Input

	ToWirelessEthernetPortsProfilesArrayOutput() WirelessEthernetPortsProfilesArrayOutput
	ToWirelessEthernetPortsProfilesArrayOutputWithContext(context.Context) WirelessEthernetPortsProfilesArrayOutput
}

type WirelessEthernetPortsProfilesArray []WirelessEthernetPortsProfilesInput

func (WirelessEthernetPortsProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (i WirelessEthernetPortsProfilesArray) ToWirelessEthernetPortsProfilesArrayOutput() WirelessEthernetPortsProfilesArrayOutput {
	return i.ToWirelessEthernetPortsProfilesArrayOutputWithContext(context.Background())
}

func (i WirelessEthernetPortsProfilesArray) ToWirelessEthernetPortsProfilesArrayOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessEthernetPortsProfilesArrayOutput)
}

// WirelessEthernetPortsProfilesMapInput is an input type that accepts WirelessEthernetPortsProfilesMap and WirelessEthernetPortsProfilesMapOutput values.
// You can construct a concrete instance of `WirelessEthernetPortsProfilesMapInput` via:
//
//	WirelessEthernetPortsProfilesMap{ "key": WirelessEthernetPortsProfilesArgs{...} }
type WirelessEthernetPortsProfilesMapInput interface {
	pulumi.Input

	ToWirelessEthernetPortsProfilesMapOutput() WirelessEthernetPortsProfilesMapOutput
	ToWirelessEthernetPortsProfilesMapOutputWithContext(context.Context) WirelessEthernetPortsProfilesMapOutput
}

type WirelessEthernetPortsProfilesMap map[string]WirelessEthernetPortsProfilesInput

func (WirelessEthernetPortsProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (i WirelessEthernetPortsProfilesMap) ToWirelessEthernetPortsProfilesMapOutput() WirelessEthernetPortsProfilesMapOutput {
	return i.ToWirelessEthernetPortsProfilesMapOutputWithContext(context.Background())
}

func (i WirelessEthernetPortsProfilesMap) ToWirelessEthernetPortsProfilesMapOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessEthernetPortsProfilesMapOutput)
}

type WirelessEthernetPortsProfilesOutput struct{ *pulumi.OutputState }

func (WirelessEthernetPortsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (o WirelessEthernetPortsProfilesOutput) ToWirelessEthernetPortsProfilesOutput() WirelessEthernetPortsProfilesOutput {
	return o
}

func (o WirelessEthernetPortsProfilesOutput) ToWirelessEthernetPortsProfilesOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesOutput {
	return o
}

// Is default profile
func (o WirelessEthernetPortsProfilesOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// AP port profile name
func (o WirelessEthernetPortsProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o WirelessEthernetPortsProfilesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Ports config
func (o WirelessEthernetPortsProfilesOutput) Ports() WirelessEthernetPortsProfilesPortArrayOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) WirelessEthernetPortsProfilesPortArrayOutput { return v.Ports }).(WirelessEthernetPortsProfilesPortArrayOutput)
}

// AP port profile ID
func (o WirelessEthernetPortsProfilesOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// Usb ports config
func (o WirelessEthernetPortsProfilesOutput) UsbPorts() WirelessEthernetPortsProfilesUsbPortArrayOutput {
	return o.ApplyT(func(v *WirelessEthernetPortsProfiles) WirelessEthernetPortsProfilesUsbPortArrayOutput {
		return v.UsbPorts
	}).(WirelessEthernetPortsProfilesUsbPortArrayOutput)
}

type WirelessEthernetPortsProfilesArrayOutput struct{ *pulumi.OutputState }

func (WirelessEthernetPortsProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (o WirelessEthernetPortsProfilesArrayOutput) ToWirelessEthernetPortsProfilesArrayOutput() WirelessEthernetPortsProfilesArrayOutput {
	return o
}

func (o WirelessEthernetPortsProfilesArrayOutput) ToWirelessEthernetPortsProfilesArrayOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesArrayOutput {
	return o
}

func (o WirelessEthernetPortsProfilesArrayOutput) Index(i pulumi.IntInput) WirelessEthernetPortsProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessEthernetPortsProfiles {
		return vs[0].([]*WirelessEthernetPortsProfiles)[vs[1].(int)]
	}).(WirelessEthernetPortsProfilesOutput)
}

type WirelessEthernetPortsProfilesMapOutput struct{ *pulumi.OutputState }

func (WirelessEthernetPortsProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessEthernetPortsProfiles)(nil)).Elem()
}

func (o WirelessEthernetPortsProfilesMapOutput) ToWirelessEthernetPortsProfilesMapOutput() WirelessEthernetPortsProfilesMapOutput {
	return o
}

func (o WirelessEthernetPortsProfilesMapOutput) ToWirelessEthernetPortsProfilesMapOutputWithContext(ctx context.Context) WirelessEthernetPortsProfilesMapOutput {
	return o
}

func (o WirelessEthernetPortsProfilesMapOutput) MapIndex(k pulumi.StringInput) WirelessEthernetPortsProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessEthernetPortsProfiles {
		return vs[0].(map[string]*WirelessEthernetPortsProfiles)[vs[1].(string)]
	}).(WirelessEthernetPortsProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessEthernetPortsProfilesInput)(nil)).Elem(), &WirelessEthernetPortsProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessEthernetPortsProfilesArrayInput)(nil)).Elem(), WirelessEthernetPortsProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessEthernetPortsProfilesMapInput)(nil)).Elem(), WirelessEthernetPortsProfilesMap{})
	pulumi.RegisterOutputType(WirelessEthernetPortsProfilesOutput{})
	pulumi.RegisterOutputType(WirelessEthernetPortsProfilesArrayOutput{})
	pulumi.RegisterOutputType(WirelessEthernetPortsProfilesMapOutput{})
}
