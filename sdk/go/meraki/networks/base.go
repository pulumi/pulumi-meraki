// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.Newbase(ctx, "example", &networks.baseArgs{
//				Name:           pulumi.String("Main Office"),
//				Notes:          pulumi.String("Additional description of the network"),
//				OrganizationId: pulumi.String("string"),
//				ProductTypes: pulumi.StringArray{
//					pulumi.String("appliance"),
//					pulumi.String("switch"),
//					pulumi.String("wireless"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("tag1"),
//					pulumi.String("tag2"),
//				},
//				TimeZone: pulumi.String("America/Los_Angeles"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/base:base example "network_id,organization_id"
// ```
type Base struct {
	pulumi.CustomResourceState

	// Enrollment string for the network
	EnrollmentString pulumi.StringOutput `pulumi:"enrollmentString"`
	// If the network is bound to a config template
	IsBoundToConfigTemplate pulumi.BoolOutput `pulumi:"isBoundToConfigTemplate"`
	// Network name
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Notes for the network
	Notes pulumi.StringOutput `pulumi:"notes"`
	// Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of the product types that the network supports
	ProductTypes pulumi.StringArrayOutput `pulumi:"productTypes"`
	// Network tags
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Timezone of the network
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// URL to the network Dashboard UI
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewBase registers a new resource with the given unique name, arguments, and options.
func NewBase(ctx *pulumi.Context,
	name string, args *BaseArgs, opts ...pulumi.ResourceOption) (*Base, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Base
	err := ctx.RegisterResource("meraki:networks/base:base", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBase gets an existing Base resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaseState, opts ...pulumi.ResourceOption) (*Base, error) {
	var resource Base
	err := ctx.ReadResource("meraki:networks/base:base", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Base resources.
type baseState struct {
	// Enrollment string for the network
	EnrollmentString *string `pulumi:"enrollmentString"`
	// If the network is bound to a config template
	IsBoundToConfigTemplate *bool `pulumi:"isBoundToConfigTemplate"`
	// Network name
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Notes for the network
	Notes *string `pulumi:"notes"`
	// Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// List of the product types that the network supports
	ProductTypes []string `pulumi:"productTypes"`
	// Network tags
	Tags []string `pulumi:"tags"`
	// Timezone of the network
	TimeZone *string `pulumi:"timeZone"`
	// URL to the network Dashboard UI
	Url *string `pulumi:"url"`
}

type BaseState struct {
	// Enrollment string for the network
	EnrollmentString pulumi.StringPtrInput
	// If the network is bound to a config template
	IsBoundToConfigTemplate pulumi.BoolPtrInput
	// Network name
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Notes for the network
	Notes pulumi.StringPtrInput
	// Organization ID
	OrganizationId pulumi.StringPtrInput
	// List of the product types that the network supports
	ProductTypes pulumi.StringArrayInput
	// Network tags
	Tags pulumi.StringArrayInput
	// Timezone of the network
	TimeZone pulumi.StringPtrInput
	// URL to the network Dashboard UI
	Url pulumi.StringPtrInput
}

func (BaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*baseState)(nil)).Elem()
}

type baseArgs struct {
	// Enrollment string for the network
	EnrollmentString *string `pulumi:"enrollmentString"`
	// Network name
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Notes for the network
	Notes *string `pulumi:"notes"`
	// Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// List of the product types that the network supports
	ProductTypes []string `pulumi:"productTypes"`
	// Network tags
	Tags []string `pulumi:"tags"`
	// Timezone of the network
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Base resource.
type BaseArgs struct {
	// Enrollment string for the network
	EnrollmentString pulumi.StringPtrInput
	// Network name
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Notes for the network
	Notes pulumi.StringPtrInput
	// Organization ID
	OrganizationId pulumi.StringInput
	// List of the product types that the network supports
	ProductTypes pulumi.StringArrayInput
	// Network tags
	Tags pulumi.StringArrayInput
	// Timezone of the network
	TimeZone pulumi.StringPtrInput
}

func (BaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baseArgs)(nil)).Elem()
}

type BaseInput interface {
	pulumi.Input

	ToBaseOutput() BaseOutput
	ToBaseOutputWithContext(ctx context.Context) BaseOutput
}

func (*Base) ElementType() reflect.Type {
	return reflect.TypeOf((**Base)(nil)).Elem()
}

func (i *Base) ToBaseOutput() BaseOutput {
	return i.ToBaseOutputWithContext(context.Background())
}

func (i *Base) ToBaseOutputWithContext(ctx context.Context) BaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseOutput)
}

// BaseArrayInput is an input type that accepts BaseArray and BaseArrayOutput values.
// You can construct a concrete instance of `BaseArrayInput` via:
//
//	BaseArray{ BaseArgs{...} }
type BaseArrayInput interface {
	pulumi.Input

	ToBaseArrayOutput() BaseArrayOutput
	ToBaseArrayOutputWithContext(context.Context) BaseArrayOutput
}

type BaseArray []BaseInput

func (BaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Base)(nil)).Elem()
}

func (i BaseArray) ToBaseArrayOutput() BaseArrayOutput {
	return i.ToBaseArrayOutputWithContext(context.Background())
}

func (i BaseArray) ToBaseArrayOutputWithContext(ctx context.Context) BaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseArrayOutput)
}

// BaseMapInput is an input type that accepts BaseMap and BaseMapOutput values.
// You can construct a concrete instance of `BaseMapInput` via:
//
//	BaseMap{ "key": BaseArgs{...} }
type BaseMapInput interface {
	pulumi.Input

	ToBaseMapOutput() BaseMapOutput
	ToBaseMapOutputWithContext(context.Context) BaseMapOutput
}

type BaseMap map[string]BaseInput

func (BaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Base)(nil)).Elem()
}

func (i BaseMap) ToBaseMapOutput() BaseMapOutput {
	return i.ToBaseMapOutputWithContext(context.Background())
}

func (i BaseMap) ToBaseMapOutputWithContext(ctx context.Context) BaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseMapOutput)
}

type BaseOutput struct{ *pulumi.OutputState }

func (BaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Base)(nil)).Elem()
}

func (o BaseOutput) ToBaseOutput() BaseOutput {
	return o
}

func (o BaseOutput) ToBaseOutputWithContext(ctx context.Context) BaseOutput {
	return o
}

// Enrollment string for the network
func (o BaseOutput) EnrollmentString() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.EnrollmentString }).(pulumi.StringOutput)
}

// If the network is bound to a config template
func (o BaseOutput) IsBoundToConfigTemplate() pulumi.BoolOutput {
	return o.ApplyT(func(v *Base) pulumi.BoolOutput { return v.IsBoundToConfigTemplate }).(pulumi.BoolOutput)
}

// Network name
func (o BaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o BaseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Notes for the network
func (o BaseOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

// Organization ID
func (o BaseOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of the product types that the network supports
func (o BaseOutput) ProductTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Base) pulumi.StringArrayOutput { return v.ProductTypes }).(pulumi.StringArrayOutput)
}

// Network tags
func (o BaseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Base) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Timezone of the network
func (o BaseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// URL to the network Dashboard UI
func (o BaseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Base) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type BaseArrayOutput struct{ *pulumi.OutputState }

func (BaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Base)(nil)).Elem()
}

func (o BaseArrayOutput) ToBaseArrayOutput() BaseArrayOutput {
	return o
}

func (o BaseArrayOutput) ToBaseArrayOutputWithContext(ctx context.Context) BaseArrayOutput {
	return o
}

func (o BaseArrayOutput) Index(i pulumi.IntInput) BaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Base {
		return vs[0].([]*Base)[vs[1].(int)]
	}).(BaseOutput)
}

type BaseMapOutput struct{ *pulumi.OutputState }

func (BaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Base)(nil)).Elem()
}

func (o BaseMapOutput) ToBaseMapOutput() BaseMapOutput {
	return o
}

func (o BaseMapOutput) ToBaseMapOutputWithContext(ctx context.Context) BaseMapOutput {
	return o
}

func (o BaseMapOutput) MapIndex(k pulumi.StringInput) BaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Base {
		return vs[0].(map[string]*Base)[vs[1].(string)]
	}).(BaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BaseInput)(nil)).Elem(), &Base{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseArrayInput)(nil)).Elem(), BaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseMapInput)(nil)).Elem(), BaseMap{})
	pulumi.RegisterOutputType(BaseOutput{})
	pulumi.RegisterOutputType(BaseArrayOutput{})
	pulumi.RegisterOutputType(BaseMapOutput{})
}
