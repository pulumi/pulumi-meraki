// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchSettings:SwitchSettings example "network_id"
// ```
type SwitchSettings struct {
	pulumi.CustomResourceState

	// MAC blocklist
	MacBlocklist SwitchSettingsMacBlocklistOutput `pulumi:"macBlocklist"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions SwitchSettingsPowerExceptionArrayOutput `pulumi:"powerExceptions"`
	// Uplink client sampling
	UplinkClientSampling SwitchSettingsUplinkClientSamplingOutput `pulumi:"uplinkClientSampling"`
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower pulumi.BoolOutput `pulumi:"useCombinedPower"`
	// Management VLAN
	Vlan pulumi.IntOutput `pulumi:"vlan"`
}

// NewSwitchSettings registers a new resource with the given unique name, arguments, and options.
func NewSwitchSettings(ctx *pulumi.Context,
	name string, args *SwitchSettingsArgs, opts ...pulumi.ResourceOption) (*SwitchSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchSettings
	err := ctx.RegisterResource("meraki:networks/switchSettings:SwitchSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchSettings gets an existing SwitchSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchSettingsState, opts ...pulumi.ResourceOption) (*SwitchSettings, error) {
	var resource SwitchSettings
	err := ctx.ReadResource("meraki:networks/switchSettings:SwitchSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchSettings resources.
type switchSettingsState struct {
	// MAC blocklist
	MacBlocklist *SwitchSettingsMacBlocklist `pulumi:"macBlocklist"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions []SwitchSettingsPowerException `pulumi:"powerExceptions"`
	// Uplink client sampling
	UplinkClientSampling *SwitchSettingsUplinkClientSampling `pulumi:"uplinkClientSampling"`
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower *bool `pulumi:"useCombinedPower"`
	// Management VLAN
	Vlan *int `pulumi:"vlan"`
}

type SwitchSettingsState struct {
	// MAC blocklist
	MacBlocklist SwitchSettingsMacBlocklistPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions SwitchSettingsPowerExceptionArrayInput
	// Uplink client sampling
	UplinkClientSampling SwitchSettingsUplinkClientSamplingPtrInput
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower pulumi.BoolPtrInput
	// Management VLAN
	Vlan pulumi.IntPtrInput
}

func (SwitchSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchSettingsState)(nil)).Elem()
}

type switchSettingsArgs struct {
	// MAC blocklist
	MacBlocklist *SwitchSettingsMacBlocklist `pulumi:"macBlocklist"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions []SwitchSettingsPowerException `pulumi:"powerExceptions"`
	// Uplink client sampling
	UplinkClientSampling *SwitchSettingsUplinkClientSampling `pulumi:"uplinkClientSampling"`
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower *bool `pulumi:"useCombinedPower"`
	// Management VLAN
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a SwitchSettings resource.
type SwitchSettingsArgs struct {
	// MAC blocklist
	MacBlocklist SwitchSettingsMacBlocklistPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions SwitchSettingsPowerExceptionArrayInput
	// Uplink client sampling
	UplinkClientSampling SwitchSettingsUplinkClientSamplingPtrInput
	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower pulumi.BoolPtrInput
	// Management VLAN
	Vlan pulumi.IntPtrInput
}

func (SwitchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchSettingsArgs)(nil)).Elem()
}

type SwitchSettingsInput interface {
	pulumi.Input

	ToSwitchSettingsOutput() SwitchSettingsOutput
	ToSwitchSettingsOutputWithContext(ctx context.Context) SwitchSettingsOutput
}

func (*SwitchSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchSettings)(nil)).Elem()
}

func (i *SwitchSettings) ToSwitchSettingsOutput() SwitchSettingsOutput {
	return i.ToSwitchSettingsOutputWithContext(context.Background())
}

func (i *SwitchSettings) ToSwitchSettingsOutputWithContext(ctx context.Context) SwitchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchSettingsOutput)
}

// SwitchSettingsArrayInput is an input type that accepts SwitchSettingsArray and SwitchSettingsArrayOutput values.
// You can construct a concrete instance of `SwitchSettingsArrayInput` via:
//
//	SwitchSettingsArray{ SwitchSettingsArgs{...} }
type SwitchSettingsArrayInput interface {
	pulumi.Input

	ToSwitchSettingsArrayOutput() SwitchSettingsArrayOutput
	ToSwitchSettingsArrayOutputWithContext(context.Context) SwitchSettingsArrayOutput
}

type SwitchSettingsArray []SwitchSettingsInput

func (SwitchSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchSettings)(nil)).Elem()
}

func (i SwitchSettingsArray) ToSwitchSettingsArrayOutput() SwitchSettingsArrayOutput {
	return i.ToSwitchSettingsArrayOutputWithContext(context.Background())
}

func (i SwitchSettingsArray) ToSwitchSettingsArrayOutputWithContext(ctx context.Context) SwitchSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchSettingsArrayOutput)
}

// SwitchSettingsMapInput is an input type that accepts SwitchSettingsMap and SwitchSettingsMapOutput values.
// You can construct a concrete instance of `SwitchSettingsMapInput` via:
//
//	SwitchSettingsMap{ "key": SwitchSettingsArgs{...} }
type SwitchSettingsMapInput interface {
	pulumi.Input

	ToSwitchSettingsMapOutput() SwitchSettingsMapOutput
	ToSwitchSettingsMapOutputWithContext(context.Context) SwitchSettingsMapOutput
}

type SwitchSettingsMap map[string]SwitchSettingsInput

func (SwitchSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchSettings)(nil)).Elem()
}

func (i SwitchSettingsMap) ToSwitchSettingsMapOutput() SwitchSettingsMapOutput {
	return i.ToSwitchSettingsMapOutputWithContext(context.Background())
}

func (i SwitchSettingsMap) ToSwitchSettingsMapOutputWithContext(ctx context.Context) SwitchSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchSettingsMapOutput)
}

type SwitchSettingsOutput struct{ *pulumi.OutputState }

func (SwitchSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchSettings)(nil)).Elem()
}

func (o SwitchSettingsOutput) ToSwitchSettingsOutput() SwitchSettingsOutput {
	return o
}

func (o SwitchSettingsOutput) ToSwitchSettingsOutputWithContext(ctx context.Context) SwitchSettingsOutput {
	return o
}

// MAC blocklist
func (o SwitchSettingsOutput) MacBlocklist() SwitchSettingsMacBlocklistOutput {
	return o.ApplyT(func(v *SwitchSettings) SwitchSettingsMacBlocklistOutput { return v.MacBlocklist }).(SwitchSettingsMacBlocklistOutput)
}

// networkId path parameter. Network ID
func (o SwitchSettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchSettings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Exceptions on a per switch basis to "useCombinedPower"
func (o SwitchSettingsOutput) PowerExceptions() SwitchSettingsPowerExceptionArrayOutput {
	return o.ApplyT(func(v *SwitchSettings) SwitchSettingsPowerExceptionArrayOutput { return v.PowerExceptions }).(SwitchSettingsPowerExceptionArrayOutput)
}

// Uplink client sampling
func (o SwitchSettingsOutput) UplinkClientSampling() SwitchSettingsUplinkClientSamplingOutput {
	return o.ApplyT(func(v *SwitchSettings) SwitchSettingsUplinkClientSamplingOutput { return v.UplinkClientSampling }).(SwitchSettingsUplinkClientSamplingOutput)
}

// The use Combined Power as the default behavior of secondary power supplies on supported devices.
func (o SwitchSettingsOutput) UseCombinedPower() pulumi.BoolOutput {
	return o.ApplyT(func(v *SwitchSettings) pulumi.BoolOutput { return v.UseCombinedPower }).(pulumi.BoolOutput)
}

// Management VLAN
func (o SwitchSettingsOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchSettings) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

type SwitchSettingsArrayOutput struct{ *pulumi.OutputState }

func (SwitchSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchSettings)(nil)).Elem()
}

func (o SwitchSettingsArrayOutput) ToSwitchSettingsArrayOutput() SwitchSettingsArrayOutput {
	return o
}

func (o SwitchSettingsArrayOutput) ToSwitchSettingsArrayOutputWithContext(ctx context.Context) SwitchSettingsArrayOutput {
	return o
}

func (o SwitchSettingsArrayOutput) Index(i pulumi.IntInput) SwitchSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchSettings {
		return vs[0].([]*SwitchSettings)[vs[1].(int)]
	}).(SwitchSettingsOutput)
}

type SwitchSettingsMapOutput struct{ *pulumi.OutputState }

func (SwitchSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchSettings)(nil)).Elem()
}

func (o SwitchSettingsMapOutput) ToSwitchSettingsMapOutput() SwitchSettingsMapOutput {
	return o
}

func (o SwitchSettingsMapOutput) ToSwitchSettingsMapOutputWithContext(ctx context.Context) SwitchSettingsMapOutput {
	return o
}

func (o SwitchSettingsMapOutput) MapIndex(k pulumi.StringInput) SwitchSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchSettings {
		return vs[0].(map[string]*SwitchSettings)[vs[1].(string)]
	}).(SwitchSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchSettingsInput)(nil)).Elem(), &SwitchSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchSettingsArrayInput)(nil)).Elem(), SwitchSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchSettingsMapInput)(nil)).Elem(), SwitchSettingsMap{})
	pulumi.RegisterOutputType(SwitchSettingsOutput{})
	pulumi.RegisterOutputType(SwitchSettingsArrayOutput{})
	pulumi.RegisterOutputType(SwitchSettingsMapOutput{})
}
