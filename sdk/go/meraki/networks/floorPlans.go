// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewFloorPlans(ctx, "example", &networks.FloorPlansArgs{
//				BottomLeftCorner: &networks.FloorPlansBottomLeftCornerArgs{
//					Lat: pulumi.Float64(37.770040510499996),
//					Lng: pulumi.Float64(-122.38714009525),
//				},
//				BottomRightCorner: &networks.FloorPlansBottomRightCornerArgs{
//					Lat: pulumi.Float64(37.770040510499996),
//					Lng: pulumi.Float64(-122.38714009525),
//				},
//				Center: &networks.FloorPlansCenterArgs{
//					Lat: pulumi.Float64(37.770040510499996),
//					Lng: pulumi.Float64(-122.38714009525),
//				},
//				ImageContents: pulumi.String("2a9edd3f4ffd80130c647d13eacb59f3"),
//				Name:          pulumi.String("HQ Floor Plan"),
//				NetworkId:     pulumi.String("string"),
//				TopLeftCorner: &networks.FloorPlansTopLeftCornerArgs{
//					Lat: pulumi.Float64(37.770040510499996),
//					Lng: pulumi.Float64(-122.38714009525),
//				},
//				TopRightCorner: &networks.FloorPlansTopRightCornerArgs{
//					Lat: pulumi.Float64(37.770040510499996),
//					Lng: pulumi.Float64(-122.38714009525),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksFloorPlansExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/floorPlans:FloorPlans example "floor_plan_id,network_id"
// ```
type FloorPlans struct {
	pulumi.CustomResourceState

	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner FloorPlansBottomLeftCornerOutput `pulumi:"bottomLeftCorner"`
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner FloorPlansBottomRightCornerOutput `pulumi:"bottomRightCorner"`
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center FloorPlansCenterOutput `pulumi:"center"`
	// List of devices for the floorplan
	Devices FloorPlansDeviceArrayOutput `pulumi:"devices"`
	// Floor plan ID
	FloorPlanId pulumi.StringOutput `pulumi:"floorPlanId"`
	// The height of your floor plan.
	Height pulumi.Float64Output `pulumi:"height"`
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents pulumi.StringOutput `pulumi:"imageContents"`
	// The format type of the image.
	ImageExtension pulumi.StringOutput `pulumi:"imageExtension"`
	// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
	ImageMd5 pulumi.StringOutput `pulumi:"imageMd5"`
	// The url link for the floor plan image.
	ImageUrl pulumi.StringOutput `pulumi:"imageUrl"`
	// The time the image url link will expire.
	ImageUrlExpiresAt pulumi.StringOutput `pulumi:"imageUrlExpiresAt"`
	// The name of your floor plan.
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner FloorPlansTopLeftCornerOutput `pulumi:"topLeftCorner"`
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner FloorPlansTopRightCornerOutput `pulumi:"topRightCorner"`
	// The width of your floor plan.
	Width pulumi.Float64Output `pulumi:"width"`
}

// NewFloorPlans registers a new resource with the given unique name, arguments, and options.
func NewFloorPlans(ctx *pulumi.Context,
	name string, args *FloorPlansArgs, opts ...pulumi.ResourceOption) (*FloorPlans, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FloorPlans
	err := ctx.RegisterResource("meraki:networks/floorPlans:FloorPlans", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFloorPlans gets an existing FloorPlans resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloorPlans(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FloorPlansState, opts ...pulumi.ResourceOption) (*FloorPlans, error) {
	var resource FloorPlans
	err := ctx.ReadResource("meraki:networks/floorPlans:FloorPlans", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FloorPlans resources.
type floorPlansState struct {
	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner *FloorPlansBottomLeftCorner `pulumi:"bottomLeftCorner"`
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner *FloorPlansBottomRightCorner `pulumi:"bottomRightCorner"`
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center *FloorPlansCenter `pulumi:"center"`
	// List of devices for the floorplan
	Devices []FloorPlansDevice `pulumi:"devices"`
	// Floor plan ID
	FloorPlanId *string `pulumi:"floorPlanId"`
	// The height of your floor plan.
	Height *float64 `pulumi:"height"`
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents *string `pulumi:"imageContents"`
	// The format type of the image.
	ImageExtension *string `pulumi:"imageExtension"`
	// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
	ImageMd5 *string `pulumi:"imageMd5"`
	// The url link for the floor plan image.
	ImageUrl *string `pulumi:"imageUrl"`
	// The time the image url link will expire.
	ImageUrlExpiresAt *string `pulumi:"imageUrlExpiresAt"`
	// The name of your floor plan.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner *FloorPlansTopLeftCorner `pulumi:"topLeftCorner"`
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner *FloorPlansTopRightCorner `pulumi:"topRightCorner"`
	// The width of your floor plan.
	Width *float64 `pulumi:"width"`
}

type FloorPlansState struct {
	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner FloorPlansBottomLeftCornerPtrInput
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner FloorPlansBottomRightCornerPtrInput
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center FloorPlansCenterPtrInput
	// List of devices for the floorplan
	Devices FloorPlansDeviceArrayInput
	// Floor plan ID
	FloorPlanId pulumi.StringPtrInput
	// The height of your floor plan.
	Height pulumi.Float64PtrInput
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents pulumi.StringPtrInput
	// The format type of the image.
	ImageExtension pulumi.StringPtrInput
	// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
	ImageMd5 pulumi.StringPtrInput
	// The url link for the floor plan image.
	ImageUrl pulumi.StringPtrInput
	// The time the image url link will expire.
	ImageUrlExpiresAt pulumi.StringPtrInput
	// The name of your floor plan.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner FloorPlansTopLeftCornerPtrInput
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner FloorPlansTopRightCornerPtrInput
	// The width of your floor plan.
	Width pulumi.Float64PtrInput
}

func (FloorPlansState) ElementType() reflect.Type {
	return reflect.TypeOf((*floorPlansState)(nil)).Elem()
}

type floorPlansArgs struct {
	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner *FloorPlansBottomLeftCorner `pulumi:"bottomLeftCorner"`
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner *FloorPlansBottomRightCorner `pulumi:"bottomRightCorner"`
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center *FloorPlansCenter `pulumi:"center"`
	// Floor plan ID
	FloorPlanId *string `pulumi:"floorPlanId"`
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents *string `pulumi:"imageContents"`
	// The name of your floor plan.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner *FloorPlansTopLeftCorner `pulumi:"topLeftCorner"`
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner *FloorPlansTopRightCorner `pulumi:"topRightCorner"`
}

// The set of arguments for constructing a FloorPlans resource.
type FloorPlansArgs struct {
	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner FloorPlansBottomLeftCornerPtrInput
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner FloorPlansBottomRightCornerPtrInput
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center FloorPlansCenterPtrInput
	// Floor plan ID
	FloorPlanId pulumi.StringPtrInput
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents pulumi.StringPtrInput
	// The name of your floor plan.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner FloorPlansTopLeftCornerPtrInput
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner FloorPlansTopRightCornerPtrInput
}

func (FloorPlansArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*floorPlansArgs)(nil)).Elem()
}

type FloorPlansInput interface {
	pulumi.Input

	ToFloorPlansOutput() FloorPlansOutput
	ToFloorPlansOutputWithContext(ctx context.Context) FloorPlansOutput
}

func (*FloorPlans) ElementType() reflect.Type {
	return reflect.TypeOf((**FloorPlans)(nil)).Elem()
}

func (i *FloorPlans) ToFloorPlansOutput() FloorPlansOutput {
	return i.ToFloorPlansOutputWithContext(context.Background())
}

func (i *FloorPlans) ToFloorPlansOutputWithContext(ctx context.Context) FloorPlansOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloorPlansOutput)
}

// FloorPlansArrayInput is an input type that accepts FloorPlansArray and FloorPlansArrayOutput values.
// You can construct a concrete instance of `FloorPlansArrayInput` via:
//
//	FloorPlansArray{ FloorPlansArgs{...} }
type FloorPlansArrayInput interface {
	pulumi.Input

	ToFloorPlansArrayOutput() FloorPlansArrayOutput
	ToFloorPlansArrayOutputWithContext(context.Context) FloorPlansArrayOutput
}

type FloorPlansArray []FloorPlansInput

func (FloorPlansArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloorPlans)(nil)).Elem()
}

func (i FloorPlansArray) ToFloorPlansArrayOutput() FloorPlansArrayOutput {
	return i.ToFloorPlansArrayOutputWithContext(context.Background())
}

func (i FloorPlansArray) ToFloorPlansArrayOutputWithContext(ctx context.Context) FloorPlansArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloorPlansArrayOutput)
}

// FloorPlansMapInput is an input type that accepts FloorPlansMap and FloorPlansMapOutput values.
// You can construct a concrete instance of `FloorPlansMapInput` via:
//
//	FloorPlansMap{ "key": FloorPlansArgs{...} }
type FloorPlansMapInput interface {
	pulumi.Input

	ToFloorPlansMapOutput() FloorPlansMapOutput
	ToFloorPlansMapOutputWithContext(context.Context) FloorPlansMapOutput
}

type FloorPlansMap map[string]FloorPlansInput

func (FloorPlansMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloorPlans)(nil)).Elem()
}

func (i FloorPlansMap) ToFloorPlansMapOutput() FloorPlansMapOutput {
	return i.ToFloorPlansMapOutputWithContext(context.Background())
}

func (i FloorPlansMap) ToFloorPlansMapOutputWithContext(ctx context.Context) FloorPlansMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FloorPlansMapOutput)
}

type FloorPlansOutput struct{ *pulumi.OutputState }

func (FloorPlansOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FloorPlans)(nil)).Elem()
}

func (o FloorPlansOutput) ToFloorPlansOutput() FloorPlansOutput {
	return o
}

func (o FloorPlansOutput) ToFloorPlansOutputWithContext(ctx context.Context) FloorPlansOutput {
	return o
}

// The longitude and latitude of the bottom left corner of your floor plan.
func (o FloorPlansOutput) BottomLeftCorner() FloorPlansBottomLeftCornerOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansBottomLeftCornerOutput { return v.BottomLeftCorner }).(FloorPlansBottomLeftCornerOutput)
}

// The longitude and latitude of the bottom right corner of your floor plan.
func (o FloorPlansOutput) BottomRightCorner() FloorPlansBottomRightCornerOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansBottomRightCornerOutput { return v.BottomRightCorner }).(FloorPlansBottomRightCornerOutput)
}

// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
func (o FloorPlansOutput) Center() FloorPlansCenterOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansCenterOutput { return v.Center }).(FloorPlansCenterOutput)
}

// List of devices for the floorplan
func (o FloorPlansOutput) Devices() FloorPlansDeviceArrayOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansDeviceArrayOutput { return v.Devices }).(FloorPlansDeviceArrayOutput)
}

// Floor plan ID
func (o FloorPlansOutput) FloorPlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.FloorPlanId }).(pulumi.StringOutput)
}

// The height of your floor plan.
func (o FloorPlansOutput) Height() pulumi.Float64Output {
	return o.ApplyT(func(v *FloorPlans) pulumi.Float64Output { return v.Height }).(pulumi.Float64Output)
}

// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
func (o FloorPlansOutput) ImageContents() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.ImageContents }).(pulumi.StringOutput)
}

// The format type of the image.
func (o FloorPlansOutput) ImageExtension() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.ImageExtension }).(pulumi.StringOutput)
}

// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
func (o FloorPlansOutput) ImageMd5() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.ImageMd5 }).(pulumi.StringOutput)
}

// The url link for the floor plan image.
func (o FloorPlansOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// The time the image url link will expire.
func (o FloorPlansOutput) ImageUrlExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.ImageUrlExpiresAt }).(pulumi.StringOutput)
}

// The name of your floor plan.
func (o FloorPlansOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o FloorPlansOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *FloorPlans) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The longitude and latitude of the top left corner of your floor plan.
func (o FloorPlansOutput) TopLeftCorner() FloorPlansTopLeftCornerOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansTopLeftCornerOutput { return v.TopLeftCorner }).(FloorPlansTopLeftCornerOutput)
}

// The longitude and latitude of the top right corner of your floor plan.
func (o FloorPlansOutput) TopRightCorner() FloorPlansTopRightCornerOutput {
	return o.ApplyT(func(v *FloorPlans) FloorPlansTopRightCornerOutput { return v.TopRightCorner }).(FloorPlansTopRightCornerOutput)
}

// The width of your floor plan.
func (o FloorPlansOutput) Width() pulumi.Float64Output {
	return o.ApplyT(func(v *FloorPlans) pulumi.Float64Output { return v.Width }).(pulumi.Float64Output)
}

type FloorPlansArrayOutput struct{ *pulumi.OutputState }

func (FloorPlansArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FloorPlans)(nil)).Elem()
}

func (o FloorPlansArrayOutput) ToFloorPlansArrayOutput() FloorPlansArrayOutput {
	return o
}

func (o FloorPlansArrayOutput) ToFloorPlansArrayOutputWithContext(ctx context.Context) FloorPlansArrayOutput {
	return o
}

func (o FloorPlansArrayOutput) Index(i pulumi.IntInput) FloorPlansOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FloorPlans {
		return vs[0].([]*FloorPlans)[vs[1].(int)]
	}).(FloorPlansOutput)
}

type FloorPlansMapOutput struct{ *pulumi.OutputState }

func (FloorPlansMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FloorPlans)(nil)).Elem()
}

func (o FloorPlansMapOutput) ToFloorPlansMapOutput() FloorPlansMapOutput {
	return o
}

func (o FloorPlansMapOutput) ToFloorPlansMapOutputWithContext(ctx context.Context) FloorPlansMapOutput {
	return o
}

func (o FloorPlansMapOutput) MapIndex(k pulumi.StringInput) FloorPlansOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FloorPlans {
		return vs[0].(map[string]*FloorPlans)[vs[1].(string)]
	}).(FloorPlansOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FloorPlansInput)(nil)).Elem(), &FloorPlans{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloorPlansArrayInput)(nil)).Elem(), FloorPlansArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FloorPlansMapInput)(nil)).Elem(), FloorPlansMap{})
	pulumi.RegisterOutputType(FloorPlansOutput{})
	pulumi.RegisterOutputType(FloorPlansArrayOutput{})
	pulumi.RegisterOutputType(FloorPlansMapOutput{})
}
