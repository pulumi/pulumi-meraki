// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchStacksRoutingInterfacesDhcp(ctx, "example", &networks.SwitchStacksRoutingInterfacesDhcpArgs{
//				BootFileName:       pulumi.String("home_boot_file"),
//				BootNextServer:     pulumi.String("1.2.3.4"),
//				BootOptionsEnabled: pulumi.Bool(true),
//				DhcpLeaseTime:      pulumi.String("1 day"),
//				DhcpMode:           pulumi.String("dhcpServer"),
//				DhcpOptions: networks.SwitchStacksRoutingInterfacesDhcpDhcpOptionArray{
//					&networks.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs{
//						Code:  pulumi.String("5"),
//						Type:  pulumi.String("text"),
//						Value: pulumi.String("five"),
//					},
//				},
//				DhcpRelayServerIps: pulumi.StringArray{
//					pulumi.String("1.2.3.4"),
//				},
//				DnsCustomNameservers: pulumi.StringArray{
//					pulumi.String("8.8.8.8, 8.8.4.4"),
//				},
//				DnsNameserversOption: pulumi.String("custom"),
//				FixedIpAssignments: networks.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArray{
//					&networks.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs{
//						Ip:   pulumi.String("192.168.1.12"),
//						Mac:  pulumi.String("22:33:44:55:66:77"),
//						Name: pulumi.String("Cisco Meraki valued client"),
//					},
//				},
//				InterfaceId: pulumi.String("string"),
//				NetworkId:   pulumi.String("string"),
//				ReservedIpRanges: networks.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArray{
//					&networks.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs{
//						Comment: pulumi.String("A reserved IP range"),
//						End:     pulumi.String("192.168.1.10"),
//						Start:   pulumi.String("192.168.1.1"),
//					},
//				},
//				SwitchStackId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchStacksRoutingInterfacesDhcpExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp example "interface_id,network_id,switch_stack_id"
// ```
type SwitchStacksRoutingInterfacesDhcp struct {
	pulumi.CustomResourceState

	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringOutput `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringOutput `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolOutput `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringOutput `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringOutput `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayOutput `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayOutput `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayOutput `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringOutput `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayOutput `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayOutput `pulumi:"reservedIpRanges"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringOutput `pulumi:"switchStackId"`
}

// NewSwitchStacksRoutingInterfacesDhcp registers a new resource with the given unique name, arguments, and options.
func NewSwitchStacksRoutingInterfacesDhcp(ctx *pulumi.Context,
	name string, args *SwitchStacksRoutingInterfacesDhcpArgs, opts ...pulumi.ResourceOption) (*SwitchStacksRoutingInterfacesDhcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.SwitchStackId == nil {
		return nil, errors.New("invalid value for required argument 'SwitchStackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchStacksRoutingInterfacesDhcp
	err := ctx.RegisterResource("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchStacksRoutingInterfacesDhcp gets an existing SwitchStacksRoutingInterfacesDhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchStacksRoutingInterfacesDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchStacksRoutingInterfacesDhcpState, opts ...pulumi.ResourceOption) (*SwitchStacksRoutingInterfacesDhcp, error) {
	var resource SwitchStacksRoutingInterfacesDhcp
	err := ctx.ReadResource("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchStacksRoutingInterfacesDhcp resources.
type switchStacksRoutingInterfacesDhcpState struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName *string `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer *string `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled *bool `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *string `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *string `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions []SwitchStacksRoutingInterfacesDhcpDhcpOption `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps []string `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers []string `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption *string `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments []SwitchStacksRoutingInterfacesDhcpFixedIpAssignment `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId *string `pulumi:"interfaceId"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges []SwitchStacksRoutingInterfacesDhcpReservedIpRange `pulumi:"reservedIpRanges"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId *string `pulumi:"switchStackId"`
}

type SwitchStacksRoutingInterfacesDhcpState struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringPtrInput
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringPtrInput
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolPtrInput
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringPtrInput
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringPtrInput
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayInput
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayInput
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayInput
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayInput
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrInput
}

func (SwitchStacksRoutingInterfacesDhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksRoutingInterfacesDhcpState)(nil)).Elem()
}

type switchStacksRoutingInterfacesDhcpArgs struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName *string `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer *string `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled *bool `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *string `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *string `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions []SwitchStacksRoutingInterfacesDhcpDhcpOption `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps []string `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers []string `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption *string `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments []SwitchStacksRoutingInterfacesDhcpFixedIpAssignment `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId string `pulumi:"interfaceId"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges []SwitchStacksRoutingInterfacesDhcpReservedIpRange `pulumi:"reservedIpRanges"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId string `pulumi:"switchStackId"`
}

// The set of arguments for constructing a SwitchStacksRoutingInterfacesDhcp resource.
type SwitchStacksRoutingInterfacesDhcpArgs struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringPtrInput
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringPtrInput
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolPtrInput
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringPtrInput
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringPtrInput
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayInput
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayInput
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayInput
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayInput
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringInput
}

func (SwitchStacksRoutingInterfacesDhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksRoutingInterfacesDhcpArgs)(nil)).Elem()
}

type SwitchStacksRoutingInterfacesDhcpInput interface {
	pulumi.Input

	ToSwitchStacksRoutingInterfacesDhcpOutput() SwitchStacksRoutingInterfacesDhcpOutput
	ToSwitchStacksRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpOutput
}

func (*SwitchStacksRoutingInterfacesDhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (i *SwitchStacksRoutingInterfacesDhcp) ToSwitchStacksRoutingInterfacesDhcpOutput() SwitchStacksRoutingInterfacesDhcpOutput {
	return i.ToSwitchStacksRoutingInterfacesDhcpOutputWithContext(context.Background())
}

func (i *SwitchStacksRoutingInterfacesDhcp) ToSwitchStacksRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingInterfacesDhcpOutput)
}

// SwitchStacksRoutingInterfacesDhcpArrayInput is an input type that accepts SwitchStacksRoutingInterfacesDhcpArray and SwitchStacksRoutingInterfacesDhcpArrayOutput values.
// You can construct a concrete instance of `SwitchStacksRoutingInterfacesDhcpArrayInput` via:
//
//	SwitchStacksRoutingInterfacesDhcpArray{ SwitchStacksRoutingInterfacesDhcpArgs{...} }
type SwitchStacksRoutingInterfacesDhcpArrayInput interface {
	pulumi.Input

	ToSwitchStacksRoutingInterfacesDhcpArrayOutput() SwitchStacksRoutingInterfacesDhcpArrayOutput
	ToSwitchStacksRoutingInterfacesDhcpArrayOutputWithContext(context.Context) SwitchStacksRoutingInterfacesDhcpArrayOutput
}

type SwitchStacksRoutingInterfacesDhcpArray []SwitchStacksRoutingInterfacesDhcpInput

func (SwitchStacksRoutingInterfacesDhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (i SwitchStacksRoutingInterfacesDhcpArray) ToSwitchStacksRoutingInterfacesDhcpArrayOutput() SwitchStacksRoutingInterfacesDhcpArrayOutput {
	return i.ToSwitchStacksRoutingInterfacesDhcpArrayOutputWithContext(context.Background())
}

func (i SwitchStacksRoutingInterfacesDhcpArray) ToSwitchStacksRoutingInterfacesDhcpArrayOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingInterfacesDhcpArrayOutput)
}

// SwitchStacksRoutingInterfacesDhcpMapInput is an input type that accepts SwitchStacksRoutingInterfacesDhcpMap and SwitchStacksRoutingInterfacesDhcpMapOutput values.
// You can construct a concrete instance of `SwitchStacksRoutingInterfacesDhcpMapInput` via:
//
//	SwitchStacksRoutingInterfacesDhcpMap{ "key": SwitchStacksRoutingInterfacesDhcpArgs{...} }
type SwitchStacksRoutingInterfacesDhcpMapInput interface {
	pulumi.Input

	ToSwitchStacksRoutingInterfacesDhcpMapOutput() SwitchStacksRoutingInterfacesDhcpMapOutput
	ToSwitchStacksRoutingInterfacesDhcpMapOutputWithContext(context.Context) SwitchStacksRoutingInterfacesDhcpMapOutput
}

type SwitchStacksRoutingInterfacesDhcpMap map[string]SwitchStacksRoutingInterfacesDhcpInput

func (SwitchStacksRoutingInterfacesDhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (i SwitchStacksRoutingInterfacesDhcpMap) ToSwitchStacksRoutingInterfacesDhcpMapOutput() SwitchStacksRoutingInterfacesDhcpMapOutput {
	return i.ToSwitchStacksRoutingInterfacesDhcpMapOutputWithContext(context.Background())
}

func (i SwitchStacksRoutingInterfacesDhcpMap) ToSwitchStacksRoutingInterfacesDhcpMapOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingInterfacesDhcpMapOutput)
}

type SwitchStacksRoutingInterfacesDhcpOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingInterfacesDhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchStacksRoutingInterfacesDhcpOutput) ToSwitchStacksRoutingInterfacesDhcpOutput() SwitchStacksRoutingInterfacesDhcpOutput {
	return o
}

func (o SwitchStacksRoutingInterfacesDhcpOutput) ToSwitchStacksRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpOutput {
	return o
}

// The PXE boot server file name for the DHCP server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) BootFileName() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.BootFileName }).(pulumi.StringOutput)
}

// The PXE boot server IP for the DHCP server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) BootNextServer() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.BootNextServer }).(pulumi.StringOutput)
}

// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) BootOptionsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.BoolOutput { return v.BootOptionsEnabled }).(pulumi.BoolOutput)
}

// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
func (o SwitchStacksRoutingInterfacesDhcpOutput) DhcpLeaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.DhcpLeaseTime }).(pulumi.StringOutput)
}

// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
func (o SwitchStacksRoutingInterfacesDhcpOutput) DhcpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.DhcpMode }).(pulumi.StringOutput)
}

// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) DhcpOptions() SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayOutput {
		return v.DhcpOptions
	}).(SwitchStacksRoutingInterfacesDhcpDhcpOptionArrayOutput)
}

// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) DhcpRelayServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringArrayOutput { return v.DhcpRelayServerIps }).(pulumi.StringArrayOutput)
}

// The DHCP name server IPs when DHCP name server option is 'custom'
func (o SwitchStacksRoutingInterfacesDhcpOutput) DnsCustomNameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringArrayOutput { return v.DnsCustomNameservers }).(pulumi.StringArrayOutput)
}

// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
func (o SwitchStacksRoutingInterfacesDhcpOutput) DnsNameserversOption() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.DnsNameserversOption }).(pulumi.StringOutput)
}

// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) FixedIpAssignments() SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayOutput {
		return v.FixedIpAssignments
	}).(SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArrayOutput)
}

// interfaceId path parameter. Interface ID
func (o SwitchStacksRoutingInterfacesDhcpOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchStacksRoutingInterfacesDhcpOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
func (o SwitchStacksRoutingInterfacesDhcpOutput) ReservedIpRanges() SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayOutput {
		return v.ReservedIpRanges
	}).(SwitchStacksRoutingInterfacesDhcpReservedIpRangeArrayOutput)
}

// switchStackId path parameter. Switch stack ID
func (o SwitchStacksRoutingInterfacesDhcpOutput) SwitchStackId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingInterfacesDhcp) pulumi.StringOutput { return v.SwitchStackId }).(pulumi.StringOutput)
}

type SwitchStacksRoutingInterfacesDhcpArrayOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingInterfacesDhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchStacksRoutingInterfacesDhcpArrayOutput) ToSwitchStacksRoutingInterfacesDhcpArrayOutput() SwitchStacksRoutingInterfacesDhcpArrayOutput {
	return o
}

func (o SwitchStacksRoutingInterfacesDhcpArrayOutput) ToSwitchStacksRoutingInterfacesDhcpArrayOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpArrayOutput {
	return o
}

func (o SwitchStacksRoutingInterfacesDhcpArrayOutput) Index(i pulumi.IntInput) SwitchStacksRoutingInterfacesDhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchStacksRoutingInterfacesDhcp {
		return vs[0].([]*SwitchStacksRoutingInterfacesDhcp)[vs[1].(int)]
	}).(SwitchStacksRoutingInterfacesDhcpOutput)
}

type SwitchStacksRoutingInterfacesDhcpMapOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingInterfacesDhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchStacksRoutingInterfacesDhcpMapOutput) ToSwitchStacksRoutingInterfacesDhcpMapOutput() SwitchStacksRoutingInterfacesDhcpMapOutput {
	return o
}

func (o SwitchStacksRoutingInterfacesDhcpMapOutput) ToSwitchStacksRoutingInterfacesDhcpMapOutputWithContext(ctx context.Context) SwitchStacksRoutingInterfacesDhcpMapOutput {
	return o
}

func (o SwitchStacksRoutingInterfacesDhcpMapOutput) MapIndex(k pulumi.StringInput) SwitchStacksRoutingInterfacesDhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchStacksRoutingInterfacesDhcp {
		return vs[0].(map[string]*SwitchStacksRoutingInterfacesDhcp)[vs[1].(string)]
	}).(SwitchStacksRoutingInterfacesDhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingInterfacesDhcpInput)(nil)).Elem(), &SwitchStacksRoutingInterfacesDhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingInterfacesDhcpArrayInput)(nil)).Elem(), SwitchStacksRoutingInterfacesDhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingInterfacesDhcpMapInput)(nil)).Elem(), SwitchStacksRoutingInterfacesDhcpMap{})
	pulumi.RegisterOutputType(SwitchStacksRoutingInterfacesDhcpOutput{})
	pulumi.RegisterOutputType(SwitchStacksRoutingInterfacesDhcpArrayOutput{})
	pulumi.RegisterOutputType(SwitchStacksRoutingInterfacesDhcpMapOutput{})
}
