// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection example "network_id"
// ```
type ApplianceTrafficShapingUplinkSelection struct {
	pulumi.CustomResourceState

	// Whether active-active AutoVPN is enabled
	ActiveActiveAutoVpnEnabled pulumi.BoolOutput `pulumi:"activeActiveAutoVpnEnabled"`
	// The default uplink. Must be one of: 'wan1' or 'wan2'
	DefaultUplink pulumi.StringOutput `pulumi:"defaultUplink"`
	// WAN failover and failback
	FailoverAndFailback ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackOutput `pulumi:"failoverAndFailback"`
	// Whether load balancing is enabled
	LoadBalancingEnabled pulumi.BoolOutput `pulumi:"loadBalancingEnabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Uplink preference rules for VPN traffic
	VpnTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayOutput `pulumi:"vpnTrafficUplinkPreferences"`
	// Uplink preference rules for WAN traffic
	WanTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayOutput `pulumi:"wanTrafficUplinkPreferences"`
}

// NewApplianceTrafficShapingUplinkSelection registers a new resource with the given unique name, arguments, and options.
func NewApplianceTrafficShapingUplinkSelection(ctx *pulumi.Context,
	name string, args *ApplianceTrafficShapingUplinkSelectionArgs, opts ...pulumi.ResourceOption) (*ApplianceTrafficShapingUplinkSelection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceTrafficShapingUplinkSelection
	err := ctx.RegisterResource("meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceTrafficShapingUplinkSelection gets an existing ApplianceTrafficShapingUplinkSelection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceTrafficShapingUplinkSelection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceTrafficShapingUplinkSelectionState, opts ...pulumi.ResourceOption) (*ApplianceTrafficShapingUplinkSelection, error) {
	var resource ApplianceTrafficShapingUplinkSelection
	err := ctx.ReadResource("meraki:networks/applianceTrafficShapingUplinkSelection:ApplianceTrafficShapingUplinkSelection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceTrafficShapingUplinkSelection resources.
type applianceTrafficShapingUplinkSelectionState struct {
	// Whether active-active AutoVPN is enabled
	ActiveActiveAutoVpnEnabled *bool `pulumi:"activeActiveAutoVpnEnabled"`
	// The default uplink. Must be one of: 'wan1' or 'wan2'
	DefaultUplink *string `pulumi:"defaultUplink"`
	// WAN failover and failback
	FailoverAndFailback *ApplianceTrafficShapingUplinkSelectionFailoverAndFailback `pulumi:"failoverAndFailback"`
	// Whether load balancing is enabled
	LoadBalancingEnabled *bool `pulumi:"loadBalancingEnabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Uplink preference rules for VPN traffic
	VpnTrafficUplinkPreferences []ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreference `pulumi:"vpnTrafficUplinkPreferences"`
	// Uplink preference rules for WAN traffic
	WanTrafficUplinkPreferences []ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreference `pulumi:"wanTrafficUplinkPreferences"`
}

type ApplianceTrafficShapingUplinkSelectionState struct {
	// Whether active-active AutoVPN is enabled
	ActiveActiveAutoVpnEnabled pulumi.BoolPtrInput
	// The default uplink. Must be one of: 'wan1' or 'wan2'
	DefaultUplink pulumi.StringPtrInput
	// WAN failover and failback
	FailoverAndFailback ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackPtrInput
	// Whether load balancing is enabled
	LoadBalancingEnabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Uplink preference rules for VPN traffic
	VpnTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayInput
	// Uplink preference rules for WAN traffic
	WanTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayInput
}

func (ApplianceTrafficShapingUplinkSelectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceTrafficShapingUplinkSelectionState)(nil)).Elem()
}

type applianceTrafficShapingUplinkSelectionArgs struct {
	// Whether active-active AutoVPN is enabled
	ActiveActiveAutoVpnEnabled *bool `pulumi:"activeActiveAutoVpnEnabled"`
	// The default uplink. Must be one of: 'wan1' or 'wan2'
	DefaultUplink *string `pulumi:"defaultUplink"`
	// WAN failover and failback
	FailoverAndFailback *ApplianceTrafficShapingUplinkSelectionFailoverAndFailback `pulumi:"failoverAndFailback"`
	// Whether load balancing is enabled
	LoadBalancingEnabled *bool `pulumi:"loadBalancingEnabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Uplink preference rules for VPN traffic
	VpnTrafficUplinkPreferences []ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreference `pulumi:"vpnTrafficUplinkPreferences"`
	// Uplink preference rules for WAN traffic
	WanTrafficUplinkPreferences []ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreference `pulumi:"wanTrafficUplinkPreferences"`
}

// The set of arguments for constructing a ApplianceTrafficShapingUplinkSelection resource.
type ApplianceTrafficShapingUplinkSelectionArgs struct {
	// Whether active-active AutoVPN is enabled
	ActiveActiveAutoVpnEnabled pulumi.BoolPtrInput
	// The default uplink. Must be one of: 'wan1' or 'wan2'
	DefaultUplink pulumi.StringPtrInput
	// WAN failover and failback
	FailoverAndFailback ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackPtrInput
	// Whether load balancing is enabled
	LoadBalancingEnabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Uplink preference rules for VPN traffic
	VpnTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayInput
	// Uplink preference rules for WAN traffic
	WanTrafficUplinkPreferences ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayInput
}

func (ApplianceTrafficShapingUplinkSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceTrafficShapingUplinkSelectionArgs)(nil)).Elem()
}

type ApplianceTrafficShapingUplinkSelectionInput interface {
	pulumi.Input

	ToApplianceTrafficShapingUplinkSelectionOutput() ApplianceTrafficShapingUplinkSelectionOutput
	ToApplianceTrafficShapingUplinkSelectionOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionOutput
}

func (*ApplianceTrafficShapingUplinkSelection) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (i *ApplianceTrafficShapingUplinkSelection) ToApplianceTrafficShapingUplinkSelectionOutput() ApplianceTrafficShapingUplinkSelectionOutput {
	return i.ToApplianceTrafficShapingUplinkSelectionOutputWithContext(context.Background())
}

func (i *ApplianceTrafficShapingUplinkSelection) ToApplianceTrafficShapingUplinkSelectionOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceTrafficShapingUplinkSelectionOutput)
}

// ApplianceTrafficShapingUplinkSelectionArrayInput is an input type that accepts ApplianceTrafficShapingUplinkSelectionArray and ApplianceTrafficShapingUplinkSelectionArrayOutput values.
// You can construct a concrete instance of `ApplianceTrafficShapingUplinkSelectionArrayInput` via:
//
//	ApplianceTrafficShapingUplinkSelectionArray{ ApplianceTrafficShapingUplinkSelectionArgs{...} }
type ApplianceTrafficShapingUplinkSelectionArrayInput interface {
	pulumi.Input

	ToApplianceTrafficShapingUplinkSelectionArrayOutput() ApplianceTrafficShapingUplinkSelectionArrayOutput
	ToApplianceTrafficShapingUplinkSelectionArrayOutputWithContext(context.Context) ApplianceTrafficShapingUplinkSelectionArrayOutput
}

type ApplianceTrafficShapingUplinkSelectionArray []ApplianceTrafficShapingUplinkSelectionInput

func (ApplianceTrafficShapingUplinkSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (i ApplianceTrafficShapingUplinkSelectionArray) ToApplianceTrafficShapingUplinkSelectionArrayOutput() ApplianceTrafficShapingUplinkSelectionArrayOutput {
	return i.ToApplianceTrafficShapingUplinkSelectionArrayOutputWithContext(context.Background())
}

func (i ApplianceTrafficShapingUplinkSelectionArray) ToApplianceTrafficShapingUplinkSelectionArrayOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceTrafficShapingUplinkSelectionArrayOutput)
}

// ApplianceTrafficShapingUplinkSelectionMapInput is an input type that accepts ApplianceTrafficShapingUplinkSelectionMap and ApplianceTrafficShapingUplinkSelectionMapOutput values.
// You can construct a concrete instance of `ApplianceTrafficShapingUplinkSelectionMapInput` via:
//
//	ApplianceTrafficShapingUplinkSelectionMap{ "key": ApplianceTrafficShapingUplinkSelectionArgs{...} }
type ApplianceTrafficShapingUplinkSelectionMapInput interface {
	pulumi.Input

	ToApplianceTrafficShapingUplinkSelectionMapOutput() ApplianceTrafficShapingUplinkSelectionMapOutput
	ToApplianceTrafficShapingUplinkSelectionMapOutputWithContext(context.Context) ApplianceTrafficShapingUplinkSelectionMapOutput
}

type ApplianceTrafficShapingUplinkSelectionMap map[string]ApplianceTrafficShapingUplinkSelectionInput

func (ApplianceTrafficShapingUplinkSelectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (i ApplianceTrafficShapingUplinkSelectionMap) ToApplianceTrafficShapingUplinkSelectionMapOutput() ApplianceTrafficShapingUplinkSelectionMapOutput {
	return i.ToApplianceTrafficShapingUplinkSelectionMapOutputWithContext(context.Background())
}

func (i ApplianceTrafficShapingUplinkSelectionMap) ToApplianceTrafficShapingUplinkSelectionMapOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceTrafficShapingUplinkSelectionMapOutput)
}

type ApplianceTrafficShapingUplinkSelectionOutput struct{ *pulumi.OutputState }

func (ApplianceTrafficShapingUplinkSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (o ApplianceTrafficShapingUplinkSelectionOutput) ToApplianceTrafficShapingUplinkSelectionOutput() ApplianceTrafficShapingUplinkSelectionOutput {
	return o
}

func (o ApplianceTrafficShapingUplinkSelectionOutput) ToApplianceTrafficShapingUplinkSelectionOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionOutput {
	return o
}

// Whether active-active AutoVPN is enabled
func (o ApplianceTrafficShapingUplinkSelectionOutput) ActiveActiveAutoVpnEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) pulumi.BoolOutput { return v.ActiveActiveAutoVpnEnabled }).(pulumi.BoolOutput)
}

// The default uplink. Must be one of: 'wan1' or 'wan2'
func (o ApplianceTrafficShapingUplinkSelectionOutput) DefaultUplink() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) pulumi.StringOutput { return v.DefaultUplink }).(pulumi.StringOutput)
}

// WAN failover and failback
func (o ApplianceTrafficShapingUplinkSelectionOutput) FailoverAndFailback() ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackOutput {
		return v.FailoverAndFailback
	}).(ApplianceTrafficShapingUplinkSelectionFailoverAndFailbackOutput)
}

// Whether load balancing is enabled
func (o ApplianceTrafficShapingUplinkSelectionOutput) LoadBalancingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) pulumi.BoolOutput { return v.LoadBalancingEnabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o ApplianceTrafficShapingUplinkSelectionOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Uplink preference rules for VPN traffic
func (o ApplianceTrafficShapingUplinkSelectionOutput) VpnTrafficUplinkPreferences() ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayOutput {
		return v.VpnTrafficUplinkPreferences
	}).(ApplianceTrafficShapingUplinkSelectionVpnTrafficUplinkPreferenceArrayOutput)
}

// Uplink preference rules for WAN traffic
func (o ApplianceTrafficShapingUplinkSelectionOutput) WanTrafficUplinkPreferences() ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayOutput {
	return o.ApplyT(func(v *ApplianceTrafficShapingUplinkSelection) ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayOutput {
		return v.WanTrafficUplinkPreferences
	}).(ApplianceTrafficShapingUplinkSelectionWanTrafficUplinkPreferenceArrayOutput)
}

type ApplianceTrafficShapingUplinkSelectionArrayOutput struct{ *pulumi.OutputState }

func (ApplianceTrafficShapingUplinkSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (o ApplianceTrafficShapingUplinkSelectionArrayOutput) ToApplianceTrafficShapingUplinkSelectionArrayOutput() ApplianceTrafficShapingUplinkSelectionArrayOutput {
	return o
}

func (o ApplianceTrafficShapingUplinkSelectionArrayOutput) ToApplianceTrafficShapingUplinkSelectionArrayOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionArrayOutput {
	return o
}

func (o ApplianceTrafficShapingUplinkSelectionArrayOutput) Index(i pulumi.IntInput) ApplianceTrafficShapingUplinkSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceTrafficShapingUplinkSelection {
		return vs[0].([]*ApplianceTrafficShapingUplinkSelection)[vs[1].(int)]
	}).(ApplianceTrafficShapingUplinkSelectionOutput)
}

type ApplianceTrafficShapingUplinkSelectionMapOutput struct{ *pulumi.OutputState }

func (ApplianceTrafficShapingUplinkSelectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceTrafficShapingUplinkSelection)(nil)).Elem()
}

func (o ApplianceTrafficShapingUplinkSelectionMapOutput) ToApplianceTrafficShapingUplinkSelectionMapOutput() ApplianceTrafficShapingUplinkSelectionMapOutput {
	return o
}

func (o ApplianceTrafficShapingUplinkSelectionMapOutput) ToApplianceTrafficShapingUplinkSelectionMapOutputWithContext(ctx context.Context) ApplianceTrafficShapingUplinkSelectionMapOutput {
	return o
}

func (o ApplianceTrafficShapingUplinkSelectionMapOutput) MapIndex(k pulumi.StringInput) ApplianceTrafficShapingUplinkSelectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceTrafficShapingUplinkSelection {
		return vs[0].(map[string]*ApplianceTrafficShapingUplinkSelection)[vs[1].(string)]
	}).(ApplianceTrafficShapingUplinkSelectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceTrafficShapingUplinkSelectionInput)(nil)).Elem(), &ApplianceTrafficShapingUplinkSelection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceTrafficShapingUplinkSelectionArrayInput)(nil)).Elem(), ApplianceTrafficShapingUplinkSelectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceTrafficShapingUplinkSelectionMapInput)(nil)).Elem(), ApplianceTrafficShapingUplinkSelectionMap{})
	pulumi.RegisterOutputType(ApplianceTrafficShapingUplinkSelectionOutput{})
	pulumi.RegisterOutputType(ApplianceTrafficShapingUplinkSelectionArrayOutput{})
	pulumi.RegisterOutputType(ApplianceTrafficShapingUplinkSelectionMapOutput{})
}
