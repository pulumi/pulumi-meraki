// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/sensorAlertsProfiles:SensorAlertsProfiles example "id,network_id"
// ```
type SensorAlertsProfiles struct {
	pulumi.CustomResourceState

	// List of conditions that will cause the profile to send an alert.
	Conditions SensorAlertsProfilesConditionArrayOutput `pulumi:"conditions"`
	// List of conditions that will cause the profile to send an alert.
	ConditionsResponses SensorAlertsProfilesConditionsResponseArrayOutput `pulumi:"conditionsResponses"`
	// Name of the sensor alert profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// ID of the sensor alert profile.
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// List of recipients that will receive the alert.
	Recipients SensorAlertsProfilesRecipientsOutput `pulumi:"recipients"`
	// The sensor schedule to use with the alert profile.
	Schedule SensorAlertsProfilesScheduleOutput `pulumi:"schedule"`
	// List of device serials assigned to this sensor alert profile.
	Serials pulumi.StringArrayOutput `pulumi:"serials"`
}

// NewSensorAlertsProfiles registers a new resource with the given unique name, arguments, and options.
func NewSensorAlertsProfiles(ctx *pulumi.Context,
	name string, args *SensorAlertsProfilesArgs, opts ...pulumi.ResourceOption) (*SensorAlertsProfiles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SensorAlertsProfiles
	err := ctx.RegisterResource("meraki:networks/sensorAlertsProfiles:SensorAlertsProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorAlertsProfiles gets an existing SensorAlertsProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorAlertsProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorAlertsProfilesState, opts ...pulumi.ResourceOption) (*SensorAlertsProfiles, error) {
	var resource SensorAlertsProfiles
	err := ctx.ReadResource("meraki:networks/sensorAlertsProfiles:SensorAlertsProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorAlertsProfiles resources.
type sensorAlertsProfilesState struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []SensorAlertsProfilesCondition `pulumi:"conditions"`
	// List of conditions that will cause the profile to send an alert.
	ConditionsResponses []SensorAlertsProfilesConditionsResponse `pulumi:"conditionsResponses"`
	// Name of the sensor alert profile.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// ID of the sensor alert profile.
	ProfileId *string `pulumi:"profileId"`
	// List of recipients that will receive the alert.
	Recipients *SensorAlertsProfilesRecipients `pulumi:"recipients"`
	// The sensor schedule to use with the alert profile.
	Schedule *SensorAlertsProfilesSchedule `pulumi:"schedule"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `pulumi:"serials"`
}

type SensorAlertsProfilesState struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions SensorAlertsProfilesConditionArrayInput
	// List of conditions that will cause the profile to send an alert.
	ConditionsResponses SensorAlertsProfilesConditionsResponseArrayInput
	// Name of the sensor alert profile.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// ID of the sensor alert profile.
	ProfileId pulumi.StringPtrInput
	// List of recipients that will receive the alert.
	Recipients SensorAlertsProfilesRecipientsPtrInput
	// The sensor schedule to use with the alert profile.
	Schedule SensorAlertsProfilesSchedulePtrInput
	// List of device serials assigned to this sensor alert profile.
	Serials pulumi.StringArrayInput
}

func (SensorAlertsProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorAlertsProfilesState)(nil)).Elem()
}

type sensorAlertsProfilesArgs struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []SensorAlertsProfilesCondition `pulumi:"conditions"`
	// Name of the sensor alert profile.
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// List of recipients that will receive the alert.
	Recipients *SensorAlertsProfilesRecipients `pulumi:"recipients"`
	// The sensor schedule to use with the alert profile.
	Schedule *SensorAlertsProfilesSchedule `pulumi:"schedule"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `pulumi:"serials"`
}

// The set of arguments for constructing a SensorAlertsProfiles resource.
type SensorAlertsProfilesArgs struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions SensorAlertsProfilesConditionArrayInput
	// Name of the sensor alert profile.
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// List of recipients that will receive the alert.
	Recipients SensorAlertsProfilesRecipientsPtrInput
	// The sensor schedule to use with the alert profile.
	Schedule SensorAlertsProfilesSchedulePtrInput
	// List of device serials assigned to this sensor alert profile.
	Serials pulumi.StringArrayInput
}

func (SensorAlertsProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorAlertsProfilesArgs)(nil)).Elem()
}

type SensorAlertsProfilesInput interface {
	pulumi.Input

	ToSensorAlertsProfilesOutput() SensorAlertsProfilesOutput
	ToSensorAlertsProfilesOutputWithContext(ctx context.Context) SensorAlertsProfilesOutput
}

func (*SensorAlertsProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorAlertsProfiles)(nil)).Elem()
}

func (i *SensorAlertsProfiles) ToSensorAlertsProfilesOutput() SensorAlertsProfilesOutput {
	return i.ToSensorAlertsProfilesOutputWithContext(context.Background())
}

func (i *SensorAlertsProfiles) ToSensorAlertsProfilesOutputWithContext(ctx context.Context) SensorAlertsProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorAlertsProfilesOutput)
}

// SensorAlertsProfilesArrayInput is an input type that accepts SensorAlertsProfilesArray and SensorAlertsProfilesArrayOutput values.
// You can construct a concrete instance of `SensorAlertsProfilesArrayInput` via:
//
//	SensorAlertsProfilesArray{ SensorAlertsProfilesArgs{...} }
type SensorAlertsProfilesArrayInput interface {
	pulumi.Input

	ToSensorAlertsProfilesArrayOutput() SensorAlertsProfilesArrayOutput
	ToSensorAlertsProfilesArrayOutputWithContext(context.Context) SensorAlertsProfilesArrayOutput
}

type SensorAlertsProfilesArray []SensorAlertsProfilesInput

func (SensorAlertsProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorAlertsProfiles)(nil)).Elem()
}

func (i SensorAlertsProfilesArray) ToSensorAlertsProfilesArrayOutput() SensorAlertsProfilesArrayOutput {
	return i.ToSensorAlertsProfilesArrayOutputWithContext(context.Background())
}

func (i SensorAlertsProfilesArray) ToSensorAlertsProfilesArrayOutputWithContext(ctx context.Context) SensorAlertsProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorAlertsProfilesArrayOutput)
}

// SensorAlertsProfilesMapInput is an input type that accepts SensorAlertsProfilesMap and SensorAlertsProfilesMapOutput values.
// You can construct a concrete instance of `SensorAlertsProfilesMapInput` via:
//
//	SensorAlertsProfilesMap{ "key": SensorAlertsProfilesArgs{...} }
type SensorAlertsProfilesMapInput interface {
	pulumi.Input

	ToSensorAlertsProfilesMapOutput() SensorAlertsProfilesMapOutput
	ToSensorAlertsProfilesMapOutputWithContext(context.Context) SensorAlertsProfilesMapOutput
}

type SensorAlertsProfilesMap map[string]SensorAlertsProfilesInput

func (SensorAlertsProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorAlertsProfiles)(nil)).Elem()
}

func (i SensorAlertsProfilesMap) ToSensorAlertsProfilesMapOutput() SensorAlertsProfilesMapOutput {
	return i.ToSensorAlertsProfilesMapOutputWithContext(context.Background())
}

func (i SensorAlertsProfilesMap) ToSensorAlertsProfilesMapOutputWithContext(ctx context.Context) SensorAlertsProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorAlertsProfilesMapOutput)
}

type SensorAlertsProfilesOutput struct{ *pulumi.OutputState }

func (SensorAlertsProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorAlertsProfiles)(nil)).Elem()
}

func (o SensorAlertsProfilesOutput) ToSensorAlertsProfilesOutput() SensorAlertsProfilesOutput {
	return o
}

func (o SensorAlertsProfilesOutput) ToSensorAlertsProfilesOutputWithContext(ctx context.Context) SensorAlertsProfilesOutput {
	return o
}

// List of conditions that will cause the profile to send an alert.
func (o SensorAlertsProfilesOutput) Conditions() SensorAlertsProfilesConditionArrayOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) SensorAlertsProfilesConditionArrayOutput { return v.Conditions }).(SensorAlertsProfilesConditionArrayOutput)
}

// List of conditions that will cause the profile to send an alert.
func (o SensorAlertsProfilesOutput) ConditionsResponses() SensorAlertsProfilesConditionsResponseArrayOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) SensorAlertsProfilesConditionsResponseArrayOutput {
		return v.ConditionsResponses
	}).(SensorAlertsProfilesConditionsResponseArrayOutput)
}

// Name of the sensor alert profile.
func (o SensorAlertsProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SensorAlertsProfilesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// ID of the sensor alert profile.
func (o SensorAlertsProfilesOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// List of recipients that will receive the alert.
func (o SensorAlertsProfilesOutput) Recipients() SensorAlertsProfilesRecipientsOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) SensorAlertsProfilesRecipientsOutput { return v.Recipients }).(SensorAlertsProfilesRecipientsOutput)
}

// The sensor schedule to use with the alert profile.
func (o SensorAlertsProfilesOutput) Schedule() SensorAlertsProfilesScheduleOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) SensorAlertsProfilesScheduleOutput { return v.Schedule }).(SensorAlertsProfilesScheduleOutput)
}

// List of device serials assigned to this sensor alert profile.
func (o SensorAlertsProfilesOutput) Serials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SensorAlertsProfiles) pulumi.StringArrayOutput { return v.Serials }).(pulumi.StringArrayOutput)
}

type SensorAlertsProfilesArrayOutput struct{ *pulumi.OutputState }

func (SensorAlertsProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorAlertsProfiles)(nil)).Elem()
}

func (o SensorAlertsProfilesArrayOutput) ToSensorAlertsProfilesArrayOutput() SensorAlertsProfilesArrayOutput {
	return o
}

func (o SensorAlertsProfilesArrayOutput) ToSensorAlertsProfilesArrayOutputWithContext(ctx context.Context) SensorAlertsProfilesArrayOutput {
	return o
}

func (o SensorAlertsProfilesArrayOutput) Index(i pulumi.IntInput) SensorAlertsProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorAlertsProfiles {
		return vs[0].([]*SensorAlertsProfiles)[vs[1].(int)]
	}).(SensorAlertsProfilesOutput)
}

type SensorAlertsProfilesMapOutput struct{ *pulumi.OutputState }

func (SensorAlertsProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorAlertsProfiles)(nil)).Elem()
}

func (o SensorAlertsProfilesMapOutput) ToSensorAlertsProfilesMapOutput() SensorAlertsProfilesMapOutput {
	return o
}

func (o SensorAlertsProfilesMapOutput) ToSensorAlertsProfilesMapOutputWithContext(ctx context.Context) SensorAlertsProfilesMapOutput {
	return o
}

func (o SensorAlertsProfilesMapOutput) MapIndex(k pulumi.StringInput) SensorAlertsProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorAlertsProfiles {
		return vs[0].(map[string]*SensorAlertsProfiles)[vs[1].(string)]
	}).(SensorAlertsProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorAlertsProfilesInput)(nil)).Elem(), &SensorAlertsProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorAlertsProfilesArrayInput)(nil)).Elem(), SensorAlertsProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorAlertsProfilesMapInput)(nil)).Elem(), SensorAlertsProfilesMap{})
	pulumi.RegisterOutputType(SensorAlertsProfilesOutput{})
	pulumi.RegisterOutputType(SensorAlertsProfilesArrayOutput{})
	pulumi.RegisterOutputType(SensorAlertsProfilesMapOutput{})
}
