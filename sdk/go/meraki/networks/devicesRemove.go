// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewDevicesRemove(ctx, "example", &networks.DevicesRemoveArgs{
//				NetworkId: pulumi.String("string"),
//				Parameters: &networks.DevicesRemoveParametersArgs{
//					Serial: pulumi.String("Q234-ABCD-5678"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksDevicesRemoveExample", example)
//			return nil
//		})
//	}
//
// ```
type DevicesRemove struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput           `pulumi:"networkId"`
	Parameters DevicesRemoveParametersOutput `pulumi:"parameters"`
}

// NewDevicesRemove registers a new resource with the given unique name, arguments, and options.
func NewDevicesRemove(ctx *pulumi.Context,
	name string, args *DevicesRemoveArgs, opts ...pulumi.ResourceOption) (*DevicesRemove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicesRemove
	err := ctx.RegisterResource("meraki:networks/devicesRemove:DevicesRemove", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicesRemove gets an existing DevicesRemove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicesRemove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicesRemoveState, opts ...pulumi.ResourceOption) (*DevicesRemove, error) {
	var resource DevicesRemove
	err := ctx.ReadResource("meraki:networks/devicesRemove:DevicesRemove", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicesRemove resources.
type devicesRemoveState struct {
	// networkId path parameter. Network ID
	NetworkId  *string                  `pulumi:"networkId"`
	Parameters *DevicesRemoveParameters `pulumi:"parameters"`
}

type DevicesRemoveState struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters DevicesRemoveParametersPtrInput
}

func (DevicesRemoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicesRemoveState)(nil)).Elem()
}

type devicesRemoveArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                  `pulumi:"networkId"`
	Parameters DevicesRemoveParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a DevicesRemove resource.
type DevicesRemoveArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters DevicesRemoveParametersInput
}

func (DevicesRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicesRemoveArgs)(nil)).Elem()
}

type DevicesRemoveInput interface {
	pulumi.Input

	ToDevicesRemoveOutput() DevicesRemoveOutput
	ToDevicesRemoveOutputWithContext(ctx context.Context) DevicesRemoveOutput
}

func (*DevicesRemove) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicesRemove)(nil)).Elem()
}

func (i *DevicesRemove) ToDevicesRemoveOutput() DevicesRemoveOutput {
	return i.ToDevicesRemoveOutputWithContext(context.Background())
}

func (i *DevicesRemove) ToDevicesRemoveOutputWithContext(ctx context.Context) DevicesRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesRemoveOutput)
}

// DevicesRemoveArrayInput is an input type that accepts DevicesRemoveArray and DevicesRemoveArrayOutput values.
// You can construct a concrete instance of `DevicesRemoveArrayInput` via:
//
//	DevicesRemoveArray{ DevicesRemoveArgs{...} }
type DevicesRemoveArrayInput interface {
	pulumi.Input

	ToDevicesRemoveArrayOutput() DevicesRemoveArrayOutput
	ToDevicesRemoveArrayOutputWithContext(context.Context) DevicesRemoveArrayOutput
}

type DevicesRemoveArray []DevicesRemoveInput

func (DevicesRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicesRemove)(nil)).Elem()
}

func (i DevicesRemoveArray) ToDevicesRemoveArrayOutput() DevicesRemoveArrayOutput {
	return i.ToDevicesRemoveArrayOutputWithContext(context.Background())
}

func (i DevicesRemoveArray) ToDevicesRemoveArrayOutputWithContext(ctx context.Context) DevicesRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesRemoveArrayOutput)
}

// DevicesRemoveMapInput is an input type that accepts DevicesRemoveMap and DevicesRemoveMapOutput values.
// You can construct a concrete instance of `DevicesRemoveMapInput` via:
//
//	DevicesRemoveMap{ "key": DevicesRemoveArgs{...} }
type DevicesRemoveMapInput interface {
	pulumi.Input

	ToDevicesRemoveMapOutput() DevicesRemoveMapOutput
	ToDevicesRemoveMapOutputWithContext(context.Context) DevicesRemoveMapOutput
}

type DevicesRemoveMap map[string]DevicesRemoveInput

func (DevicesRemoveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicesRemove)(nil)).Elem()
}

func (i DevicesRemoveMap) ToDevicesRemoveMapOutput() DevicesRemoveMapOutput {
	return i.ToDevicesRemoveMapOutputWithContext(context.Background())
}

func (i DevicesRemoveMap) ToDevicesRemoveMapOutputWithContext(ctx context.Context) DevicesRemoveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesRemoveMapOutput)
}

type DevicesRemoveOutput struct{ *pulumi.OutputState }

func (DevicesRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicesRemove)(nil)).Elem()
}

func (o DevicesRemoveOutput) ToDevicesRemoveOutput() DevicesRemoveOutput {
	return o
}

func (o DevicesRemoveOutput) ToDevicesRemoveOutputWithContext(ctx context.Context) DevicesRemoveOutput {
	return o
}

// networkId path parameter. Network ID
func (o DevicesRemoveOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicesRemove) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o DevicesRemoveOutput) Parameters() DevicesRemoveParametersOutput {
	return o.ApplyT(func(v *DevicesRemove) DevicesRemoveParametersOutput { return v.Parameters }).(DevicesRemoveParametersOutput)
}

type DevicesRemoveArrayOutput struct{ *pulumi.OutputState }

func (DevicesRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicesRemove)(nil)).Elem()
}

func (o DevicesRemoveArrayOutput) ToDevicesRemoveArrayOutput() DevicesRemoveArrayOutput {
	return o
}

func (o DevicesRemoveArrayOutput) ToDevicesRemoveArrayOutputWithContext(ctx context.Context) DevicesRemoveArrayOutput {
	return o
}

func (o DevicesRemoveArrayOutput) Index(i pulumi.IntInput) DevicesRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicesRemove {
		return vs[0].([]*DevicesRemove)[vs[1].(int)]
	}).(DevicesRemoveOutput)
}

type DevicesRemoveMapOutput struct{ *pulumi.OutputState }

func (DevicesRemoveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicesRemove)(nil)).Elem()
}

func (o DevicesRemoveMapOutput) ToDevicesRemoveMapOutput() DevicesRemoveMapOutput {
	return o
}

func (o DevicesRemoveMapOutput) ToDevicesRemoveMapOutputWithContext(ctx context.Context) DevicesRemoveMapOutput {
	return o
}

func (o DevicesRemoveMapOutput) MapIndex(k pulumi.StringInput) DevicesRemoveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicesRemove {
		return vs[0].(map[string]*DevicesRemove)[vs[1].(string)]
	}).(DevicesRemoveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesRemoveInput)(nil)).Elem(), &DevicesRemove{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesRemoveArrayInput)(nil)).Elem(), DevicesRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesRemoveMapInput)(nil)).Elem(), DevicesRemoveMap{})
	pulumi.RegisterOutputType(DevicesRemoveOutput{})
	pulumi.RegisterOutputType(DevicesRemoveArrayOutput{})
	pulumi.RegisterOutputType(DevicesRemoveMapOutput{})
}
