// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
type SmDevicesCheckin struct {
	pulumi.CustomResourceState

	Item SmDevicesCheckinItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput              `pulumi:"networkId"`
	Parameters SmDevicesCheckinParametersOutput `pulumi:"parameters"`
}

// NewSmDevicesCheckin registers a new resource with the given unique name, arguments, and options.
func NewSmDevicesCheckin(ctx *pulumi.Context,
	name string, args *SmDevicesCheckinArgs, opts ...pulumi.ResourceOption) (*SmDevicesCheckin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmDevicesCheckin
	err := ctx.RegisterResource("meraki:networks/smDevicesCheckin:SmDevicesCheckin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmDevicesCheckin gets an existing SmDevicesCheckin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmDevicesCheckin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmDevicesCheckinState, opts ...pulumi.ResourceOption) (*SmDevicesCheckin, error) {
	var resource SmDevicesCheckin
	err := ctx.ReadResource("meraki:networks/smDevicesCheckin:SmDevicesCheckin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmDevicesCheckin resources.
type smDevicesCheckinState struct {
	Item *SmDevicesCheckinItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                     `pulumi:"networkId"`
	Parameters *SmDevicesCheckinParameters `pulumi:"parameters"`
}

type SmDevicesCheckinState struct {
	Item SmDevicesCheckinItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SmDevicesCheckinParametersPtrInput
}

func (SmDevicesCheckinState) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesCheckinState)(nil)).Elem()
}

type smDevicesCheckinArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                     `pulumi:"networkId"`
	Parameters SmDevicesCheckinParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a SmDevicesCheckin resource.
type SmDevicesCheckinArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SmDevicesCheckinParametersInput
}

func (SmDevicesCheckinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesCheckinArgs)(nil)).Elem()
}

type SmDevicesCheckinInput interface {
	pulumi.Input

	ToSmDevicesCheckinOutput() SmDevicesCheckinOutput
	ToSmDevicesCheckinOutputWithContext(ctx context.Context) SmDevicesCheckinOutput
}

func (*SmDevicesCheckin) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesCheckin)(nil)).Elem()
}

func (i *SmDevicesCheckin) ToSmDevicesCheckinOutput() SmDevicesCheckinOutput {
	return i.ToSmDevicesCheckinOutputWithContext(context.Background())
}

func (i *SmDevicesCheckin) ToSmDevicesCheckinOutputWithContext(ctx context.Context) SmDevicesCheckinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesCheckinOutput)
}

// SmDevicesCheckinArrayInput is an input type that accepts SmDevicesCheckinArray and SmDevicesCheckinArrayOutput values.
// You can construct a concrete instance of `SmDevicesCheckinArrayInput` via:
//
//	SmDevicesCheckinArray{ SmDevicesCheckinArgs{...} }
type SmDevicesCheckinArrayInput interface {
	pulumi.Input

	ToSmDevicesCheckinArrayOutput() SmDevicesCheckinArrayOutput
	ToSmDevicesCheckinArrayOutputWithContext(context.Context) SmDevicesCheckinArrayOutput
}

type SmDevicesCheckinArray []SmDevicesCheckinInput

func (SmDevicesCheckinArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesCheckin)(nil)).Elem()
}

func (i SmDevicesCheckinArray) ToSmDevicesCheckinArrayOutput() SmDevicesCheckinArrayOutput {
	return i.ToSmDevicesCheckinArrayOutputWithContext(context.Background())
}

func (i SmDevicesCheckinArray) ToSmDevicesCheckinArrayOutputWithContext(ctx context.Context) SmDevicesCheckinArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesCheckinArrayOutput)
}

// SmDevicesCheckinMapInput is an input type that accepts SmDevicesCheckinMap and SmDevicesCheckinMapOutput values.
// You can construct a concrete instance of `SmDevicesCheckinMapInput` via:
//
//	SmDevicesCheckinMap{ "key": SmDevicesCheckinArgs{...} }
type SmDevicesCheckinMapInput interface {
	pulumi.Input

	ToSmDevicesCheckinMapOutput() SmDevicesCheckinMapOutput
	ToSmDevicesCheckinMapOutputWithContext(context.Context) SmDevicesCheckinMapOutput
}

type SmDevicesCheckinMap map[string]SmDevicesCheckinInput

func (SmDevicesCheckinMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesCheckin)(nil)).Elem()
}

func (i SmDevicesCheckinMap) ToSmDevicesCheckinMapOutput() SmDevicesCheckinMapOutput {
	return i.ToSmDevicesCheckinMapOutputWithContext(context.Background())
}

func (i SmDevicesCheckinMap) ToSmDevicesCheckinMapOutputWithContext(ctx context.Context) SmDevicesCheckinMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesCheckinMapOutput)
}

type SmDevicesCheckinOutput struct{ *pulumi.OutputState }

func (SmDevicesCheckinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesCheckin)(nil)).Elem()
}

func (o SmDevicesCheckinOutput) ToSmDevicesCheckinOutput() SmDevicesCheckinOutput {
	return o
}

func (o SmDevicesCheckinOutput) ToSmDevicesCheckinOutputWithContext(ctx context.Context) SmDevicesCheckinOutput {
	return o
}

func (o SmDevicesCheckinOutput) Item() SmDevicesCheckinItemOutput {
	return o.ApplyT(func(v *SmDevicesCheckin) SmDevicesCheckinItemOutput { return v.Item }).(SmDevicesCheckinItemOutput)
}

// networkId path parameter. Network ID
func (o SmDevicesCheckinOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesCheckin) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmDevicesCheckinOutput) Parameters() SmDevicesCheckinParametersOutput {
	return o.ApplyT(func(v *SmDevicesCheckin) SmDevicesCheckinParametersOutput { return v.Parameters }).(SmDevicesCheckinParametersOutput)
}

type SmDevicesCheckinArrayOutput struct{ *pulumi.OutputState }

func (SmDevicesCheckinArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesCheckin)(nil)).Elem()
}

func (o SmDevicesCheckinArrayOutput) ToSmDevicesCheckinArrayOutput() SmDevicesCheckinArrayOutput {
	return o
}

func (o SmDevicesCheckinArrayOutput) ToSmDevicesCheckinArrayOutputWithContext(ctx context.Context) SmDevicesCheckinArrayOutput {
	return o
}

func (o SmDevicesCheckinArrayOutput) Index(i pulumi.IntInput) SmDevicesCheckinOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmDevicesCheckin {
		return vs[0].([]*SmDevicesCheckin)[vs[1].(int)]
	}).(SmDevicesCheckinOutput)
}

type SmDevicesCheckinMapOutput struct{ *pulumi.OutputState }

func (SmDevicesCheckinMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesCheckin)(nil)).Elem()
}

func (o SmDevicesCheckinMapOutput) ToSmDevicesCheckinMapOutput() SmDevicesCheckinMapOutput {
	return o
}

func (o SmDevicesCheckinMapOutput) ToSmDevicesCheckinMapOutputWithContext(ctx context.Context) SmDevicesCheckinMapOutput {
	return o
}

func (o SmDevicesCheckinMapOutput) MapIndex(k pulumi.StringInput) SmDevicesCheckinOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmDevicesCheckin {
		return vs[0].(map[string]*SmDevicesCheckin)[vs[1].(string)]
	}).(SmDevicesCheckinOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesCheckinInput)(nil)).Elem(), &SmDevicesCheckin{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesCheckinArrayInput)(nil)).Elem(), SmDevicesCheckinArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesCheckinMapInput)(nil)).Elem(), SmDevicesCheckinMap{})
	pulumi.RegisterOutputType(SmDevicesCheckinOutput{})
	pulumi.RegisterOutputType(SmDevicesCheckinArrayOutput{})
	pulumi.RegisterOutputType(SmDevicesCheckinMapOutput{})
}
