// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/cellularGatewayUplink:CellularGatewayUplink example "network_id"
// ```
type CellularGatewayUplink struct {
	pulumi.CustomResourceState

	// The bandwidth settings for the 'cellular' uplink
	BandwidthLimits CellularGatewayUplinkBandwidthLimitsOutput `pulumi:"bandwidthLimits"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewCellularGatewayUplink registers a new resource with the given unique name, arguments, and options.
func NewCellularGatewayUplink(ctx *pulumi.Context,
	name string, args *CellularGatewayUplinkArgs, opts ...pulumi.ResourceOption) (*CellularGatewayUplink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CellularGatewayUplink
	err := ctx.RegisterResource("meraki:networks/cellularGatewayUplink:CellularGatewayUplink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCellularGatewayUplink gets an existing CellularGatewayUplink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCellularGatewayUplink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellularGatewayUplinkState, opts ...pulumi.ResourceOption) (*CellularGatewayUplink, error) {
	var resource CellularGatewayUplink
	err := ctx.ReadResource("meraki:networks/cellularGatewayUplink:CellularGatewayUplink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CellularGatewayUplink resources.
type cellularGatewayUplinkState struct {
	// The bandwidth settings for the 'cellular' uplink
	BandwidthLimits *CellularGatewayUplinkBandwidthLimits `pulumi:"bandwidthLimits"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type CellularGatewayUplinkState struct {
	// The bandwidth settings for the 'cellular' uplink
	BandwidthLimits CellularGatewayUplinkBandwidthLimitsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (CellularGatewayUplinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularGatewayUplinkState)(nil)).Elem()
}

type cellularGatewayUplinkArgs struct {
	// The bandwidth settings for the 'cellular' uplink
	BandwidthLimits *CellularGatewayUplinkBandwidthLimits `pulumi:"bandwidthLimits"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a CellularGatewayUplink resource.
type CellularGatewayUplinkArgs struct {
	// The bandwidth settings for the 'cellular' uplink
	BandwidthLimits CellularGatewayUplinkBandwidthLimitsPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (CellularGatewayUplinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularGatewayUplinkArgs)(nil)).Elem()
}

type CellularGatewayUplinkInput interface {
	pulumi.Input

	ToCellularGatewayUplinkOutput() CellularGatewayUplinkOutput
	ToCellularGatewayUplinkOutputWithContext(ctx context.Context) CellularGatewayUplinkOutput
}

func (*CellularGatewayUplink) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularGatewayUplink)(nil)).Elem()
}

func (i *CellularGatewayUplink) ToCellularGatewayUplinkOutput() CellularGatewayUplinkOutput {
	return i.ToCellularGatewayUplinkOutputWithContext(context.Background())
}

func (i *CellularGatewayUplink) ToCellularGatewayUplinkOutputWithContext(ctx context.Context) CellularGatewayUplinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewayUplinkOutput)
}

// CellularGatewayUplinkArrayInput is an input type that accepts CellularGatewayUplinkArray and CellularGatewayUplinkArrayOutput values.
// You can construct a concrete instance of `CellularGatewayUplinkArrayInput` via:
//
//	CellularGatewayUplinkArray{ CellularGatewayUplinkArgs{...} }
type CellularGatewayUplinkArrayInput interface {
	pulumi.Input

	ToCellularGatewayUplinkArrayOutput() CellularGatewayUplinkArrayOutput
	ToCellularGatewayUplinkArrayOutputWithContext(context.Context) CellularGatewayUplinkArrayOutput
}

type CellularGatewayUplinkArray []CellularGatewayUplinkInput

func (CellularGatewayUplinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularGatewayUplink)(nil)).Elem()
}

func (i CellularGatewayUplinkArray) ToCellularGatewayUplinkArrayOutput() CellularGatewayUplinkArrayOutput {
	return i.ToCellularGatewayUplinkArrayOutputWithContext(context.Background())
}

func (i CellularGatewayUplinkArray) ToCellularGatewayUplinkArrayOutputWithContext(ctx context.Context) CellularGatewayUplinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewayUplinkArrayOutput)
}

// CellularGatewayUplinkMapInput is an input type that accepts CellularGatewayUplinkMap and CellularGatewayUplinkMapOutput values.
// You can construct a concrete instance of `CellularGatewayUplinkMapInput` via:
//
//	CellularGatewayUplinkMap{ "key": CellularGatewayUplinkArgs{...} }
type CellularGatewayUplinkMapInput interface {
	pulumi.Input

	ToCellularGatewayUplinkMapOutput() CellularGatewayUplinkMapOutput
	ToCellularGatewayUplinkMapOutputWithContext(context.Context) CellularGatewayUplinkMapOutput
}

type CellularGatewayUplinkMap map[string]CellularGatewayUplinkInput

func (CellularGatewayUplinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularGatewayUplink)(nil)).Elem()
}

func (i CellularGatewayUplinkMap) ToCellularGatewayUplinkMapOutput() CellularGatewayUplinkMapOutput {
	return i.ToCellularGatewayUplinkMapOutputWithContext(context.Background())
}

func (i CellularGatewayUplinkMap) ToCellularGatewayUplinkMapOutputWithContext(ctx context.Context) CellularGatewayUplinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularGatewayUplinkMapOutput)
}

type CellularGatewayUplinkOutput struct{ *pulumi.OutputState }

func (CellularGatewayUplinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularGatewayUplink)(nil)).Elem()
}

func (o CellularGatewayUplinkOutput) ToCellularGatewayUplinkOutput() CellularGatewayUplinkOutput {
	return o
}

func (o CellularGatewayUplinkOutput) ToCellularGatewayUplinkOutputWithContext(ctx context.Context) CellularGatewayUplinkOutput {
	return o
}

// The bandwidth settings for the 'cellular' uplink
func (o CellularGatewayUplinkOutput) BandwidthLimits() CellularGatewayUplinkBandwidthLimitsOutput {
	return o.ApplyT(func(v *CellularGatewayUplink) CellularGatewayUplinkBandwidthLimitsOutput { return v.BandwidthLimits }).(CellularGatewayUplinkBandwidthLimitsOutput)
}

// networkId path parameter. Network ID
func (o CellularGatewayUplinkOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularGatewayUplink) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type CellularGatewayUplinkArrayOutput struct{ *pulumi.OutputState }

func (CellularGatewayUplinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularGatewayUplink)(nil)).Elem()
}

func (o CellularGatewayUplinkArrayOutput) ToCellularGatewayUplinkArrayOutput() CellularGatewayUplinkArrayOutput {
	return o
}

func (o CellularGatewayUplinkArrayOutput) ToCellularGatewayUplinkArrayOutputWithContext(ctx context.Context) CellularGatewayUplinkArrayOutput {
	return o
}

func (o CellularGatewayUplinkArrayOutput) Index(i pulumi.IntInput) CellularGatewayUplinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CellularGatewayUplink {
		return vs[0].([]*CellularGatewayUplink)[vs[1].(int)]
	}).(CellularGatewayUplinkOutput)
}

type CellularGatewayUplinkMapOutput struct{ *pulumi.OutputState }

func (CellularGatewayUplinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularGatewayUplink)(nil)).Elem()
}

func (o CellularGatewayUplinkMapOutput) ToCellularGatewayUplinkMapOutput() CellularGatewayUplinkMapOutput {
	return o
}

func (o CellularGatewayUplinkMapOutput) ToCellularGatewayUplinkMapOutputWithContext(ctx context.Context) CellularGatewayUplinkMapOutput {
	return o
}

func (o CellularGatewayUplinkMapOutput) MapIndex(k pulumi.StringInput) CellularGatewayUplinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CellularGatewayUplink {
		return vs[0].(map[string]*CellularGatewayUplink)[vs[1].(string)]
	}).(CellularGatewayUplinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewayUplinkInput)(nil)).Elem(), &CellularGatewayUplink{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewayUplinkArrayInput)(nil)).Elem(), CellularGatewayUplinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularGatewayUplinkMapInput)(nil)).Elem(), CellularGatewayUplinkMap{})
	pulumi.RegisterOutputType(CellularGatewayUplinkOutput{})
	pulumi.RegisterOutputType(CellularGatewayUplinkArrayOutput{})
	pulumi.RegisterOutputType(CellularGatewayUplinkMapOutput{})
}
