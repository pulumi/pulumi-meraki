// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewWirelessSsidsDeviceTypeGroupPolicies(ctx, "example", &networks.WirelessSsidsDeviceTypeGroupPoliciesArgs{
//				DeviceTypePolicies: networks.WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArray{
//					&networks.WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArgs{
//						Device_policy: "Allowed",
//						Device_type:   "Android",
//					},
//				},
//				Enabled:   pulumi.Bool(true),
//				NetworkId: pulumi.String("string"),
//				Number:    pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksWirelessSsidsDeviceTypeGroupPoliciesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsidsDeviceTypeGroupPolicies:WirelessSsidsDeviceTypeGroupPolicies example "network_id,number"
// ```
type WirelessSsidsDeviceTypeGroupPolicies struct {
	pulumi.CustomResourceState

	// List of device type policies.
	DeviceTypePolicies WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayOutput `pulumi:"deviceTypePolicies"`
	// If true, the SSID device type group policies are enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// number path parameter.
	Number pulumi.StringOutput `pulumi:"number"`
}

// NewWirelessSsidsDeviceTypeGroupPolicies registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsidsDeviceTypeGroupPolicies(ctx *pulumi.Context,
	name string, args *WirelessSsidsDeviceTypeGroupPoliciesArgs, opts ...pulumi.ResourceOption) (*WirelessSsidsDeviceTypeGroupPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsidsDeviceTypeGroupPolicies
	err := ctx.RegisterResource("meraki:networks/wirelessSsidsDeviceTypeGroupPolicies:WirelessSsidsDeviceTypeGroupPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsidsDeviceTypeGroupPolicies gets an existing WirelessSsidsDeviceTypeGroupPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsidsDeviceTypeGroupPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsDeviceTypeGroupPoliciesState, opts ...pulumi.ResourceOption) (*WirelessSsidsDeviceTypeGroupPolicies, error) {
	var resource WirelessSsidsDeviceTypeGroupPolicies
	err := ctx.ReadResource("meraki:networks/wirelessSsidsDeviceTypeGroupPolicies:WirelessSsidsDeviceTypeGroupPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsidsDeviceTypeGroupPolicies resources.
type wirelessSsidsDeviceTypeGroupPoliciesState struct {
	// List of device type policies.
	DeviceTypePolicies []WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicy `pulumi:"deviceTypePolicies"`
	// If true, the SSID device type group policies are enabled.
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// number path parameter.
	Number *string `pulumi:"number"`
}

type WirelessSsidsDeviceTypeGroupPoliciesState struct {
	// List of device type policies.
	DeviceTypePolicies WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayInput
	// If true, the SSID device type group policies are enabled.
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// number path parameter.
	Number pulumi.StringPtrInput
}

func (WirelessSsidsDeviceTypeGroupPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsDeviceTypeGroupPoliciesState)(nil)).Elem()
}

type wirelessSsidsDeviceTypeGroupPoliciesArgs struct {
	// List of device type policies.
	DeviceTypePolicies []WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicy `pulumi:"deviceTypePolicies"`
	// If true, the SSID device type group policies are enabled.
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// number path parameter.
	Number string `pulumi:"number"`
}

// The set of arguments for constructing a WirelessSsidsDeviceTypeGroupPolicies resource.
type WirelessSsidsDeviceTypeGroupPoliciesArgs struct {
	// List of device type policies.
	DeviceTypePolicies WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayInput
	// If true, the SSID device type group policies are enabled.
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// number path parameter.
	Number pulumi.StringInput
}

func (WirelessSsidsDeviceTypeGroupPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsDeviceTypeGroupPoliciesArgs)(nil)).Elem()
}

type WirelessSsidsDeviceTypeGroupPoliciesInput interface {
	pulumi.Input

	ToWirelessSsidsDeviceTypeGroupPoliciesOutput() WirelessSsidsDeviceTypeGroupPoliciesOutput
	ToWirelessSsidsDeviceTypeGroupPoliciesOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesOutput
}

func (*WirelessSsidsDeviceTypeGroupPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (i *WirelessSsidsDeviceTypeGroupPolicies) ToWirelessSsidsDeviceTypeGroupPoliciesOutput() WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return i.ToWirelessSsidsDeviceTypeGroupPoliciesOutputWithContext(context.Background())
}

func (i *WirelessSsidsDeviceTypeGroupPolicies) ToWirelessSsidsDeviceTypeGroupPoliciesOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsDeviceTypeGroupPoliciesOutput)
}

// WirelessSsidsDeviceTypeGroupPoliciesArrayInput is an input type that accepts WirelessSsidsDeviceTypeGroupPoliciesArray and WirelessSsidsDeviceTypeGroupPoliciesArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsDeviceTypeGroupPoliciesArrayInput` via:
//
//	WirelessSsidsDeviceTypeGroupPoliciesArray{ WirelessSsidsDeviceTypeGroupPoliciesArgs{...} }
type WirelessSsidsDeviceTypeGroupPoliciesArrayInput interface {
	pulumi.Input

	ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutput() WirelessSsidsDeviceTypeGroupPoliciesArrayOutput
	ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutputWithContext(context.Context) WirelessSsidsDeviceTypeGroupPoliciesArrayOutput
}

type WirelessSsidsDeviceTypeGroupPoliciesArray []WirelessSsidsDeviceTypeGroupPoliciesInput

func (WirelessSsidsDeviceTypeGroupPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (i WirelessSsidsDeviceTypeGroupPoliciesArray) ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutput() WirelessSsidsDeviceTypeGroupPoliciesArrayOutput {
	return i.ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsDeviceTypeGroupPoliciesArray) ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsDeviceTypeGroupPoliciesArrayOutput)
}

// WirelessSsidsDeviceTypeGroupPoliciesMapInput is an input type that accepts WirelessSsidsDeviceTypeGroupPoliciesMap and WirelessSsidsDeviceTypeGroupPoliciesMapOutput values.
// You can construct a concrete instance of `WirelessSsidsDeviceTypeGroupPoliciesMapInput` via:
//
//	WirelessSsidsDeviceTypeGroupPoliciesMap{ "key": WirelessSsidsDeviceTypeGroupPoliciesArgs{...} }
type WirelessSsidsDeviceTypeGroupPoliciesMapInput interface {
	pulumi.Input

	ToWirelessSsidsDeviceTypeGroupPoliciesMapOutput() WirelessSsidsDeviceTypeGroupPoliciesMapOutput
	ToWirelessSsidsDeviceTypeGroupPoliciesMapOutputWithContext(context.Context) WirelessSsidsDeviceTypeGroupPoliciesMapOutput
}

type WirelessSsidsDeviceTypeGroupPoliciesMap map[string]WirelessSsidsDeviceTypeGroupPoliciesInput

func (WirelessSsidsDeviceTypeGroupPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (i WirelessSsidsDeviceTypeGroupPoliciesMap) ToWirelessSsidsDeviceTypeGroupPoliciesMapOutput() WirelessSsidsDeviceTypeGroupPoliciesMapOutput {
	return i.ToWirelessSsidsDeviceTypeGroupPoliciesMapOutputWithContext(context.Background())
}

func (i WirelessSsidsDeviceTypeGroupPoliciesMap) ToWirelessSsidsDeviceTypeGroupPoliciesMapOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsDeviceTypeGroupPoliciesMapOutput)
}

type WirelessSsidsDeviceTypeGroupPoliciesOutput struct{ *pulumi.OutputState }

func (WirelessSsidsDeviceTypeGroupPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) ToWirelessSsidsDeviceTypeGroupPoliciesOutput() WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return o
}

func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) ToWirelessSsidsDeviceTypeGroupPoliciesOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return o
}

// List of device type policies.
func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) DeviceTypePolicies() WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayOutput {
	return o.ApplyT(func(v *WirelessSsidsDeviceTypeGroupPolicies) WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayOutput {
		return v.DeviceTypePolicies
	}).(WirelessSsidsDeviceTypeGroupPoliciesDeviceTypePolicyArrayOutput)
}

// If true, the SSID device type group policies are enabled.
func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsDeviceTypeGroupPolicies) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsDeviceTypeGroupPolicies) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// number path parameter.
func (o WirelessSsidsDeviceTypeGroupPoliciesOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsDeviceTypeGroupPolicies) pulumi.StringOutput { return v.Number }).(pulumi.StringOutput)
}

type WirelessSsidsDeviceTypeGroupPoliciesArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsDeviceTypeGroupPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (o WirelessSsidsDeviceTypeGroupPoliciesArrayOutput) ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutput() WirelessSsidsDeviceTypeGroupPoliciesArrayOutput {
	return o
}

func (o WirelessSsidsDeviceTypeGroupPoliciesArrayOutput) ToWirelessSsidsDeviceTypeGroupPoliciesArrayOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesArrayOutput {
	return o
}

func (o WirelessSsidsDeviceTypeGroupPoliciesArrayOutput) Index(i pulumi.IntInput) WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsidsDeviceTypeGroupPolicies {
		return vs[0].([]*WirelessSsidsDeviceTypeGroupPolicies)[vs[1].(int)]
	}).(WirelessSsidsDeviceTypeGroupPoliciesOutput)
}

type WirelessSsidsDeviceTypeGroupPoliciesMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsDeviceTypeGroupPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsDeviceTypeGroupPolicies)(nil)).Elem()
}

func (o WirelessSsidsDeviceTypeGroupPoliciesMapOutput) ToWirelessSsidsDeviceTypeGroupPoliciesMapOutput() WirelessSsidsDeviceTypeGroupPoliciesMapOutput {
	return o
}

func (o WirelessSsidsDeviceTypeGroupPoliciesMapOutput) ToWirelessSsidsDeviceTypeGroupPoliciesMapOutputWithContext(ctx context.Context) WirelessSsidsDeviceTypeGroupPoliciesMapOutput {
	return o
}

func (o WirelessSsidsDeviceTypeGroupPoliciesMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsDeviceTypeGroupPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsidsDeviceTypeGroupPolicies {
		return vs[0].(map[string]*WirelessSsidsDeviceTypeGroupPolicies)[vs[1].(string)]
	}).(WirelessSsidsDeviceTypeGroupPoliciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsDeviceTypeGroupPoliciesInput)(nil)).Elem(), &WirelessSsidsDeviceTypeGroupPolicies{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsDeviceTypeGroupPoliciesArrayInput)(nil)).Elem(), WirelessSsidsDeviceTypeGroupPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsDeviceTypeGroupPoliciesMapInput)(nil)).Elem(), WirelessSsidsDeviceTypeGroupPoliciesMap{})
	pulumi.RegisterOutputType(WirelessSsidsDeviceTypeGroupPoliciesOutput{})
	pulumi.RegisterOutputType(WirelessSsidsDeviceTypeGroupPoliciesArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsDeviceTypeGroupPoliciesMapOutput{})
}
