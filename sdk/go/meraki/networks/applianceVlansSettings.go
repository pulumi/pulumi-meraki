// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceVlansSettings(ctx, "example", &networks.ApplianceVlansSettingsArgs{
//				NetworkId:    pulumi.String("string"),
//				VlansEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceVlansSettingsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceVlansSettings:ApplianceVlansSettings example "network_id"
// ```
type ApplianceVlansSettings struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
	VlansEnabled pulumi.BoolOutput `pulumi:"vlansEnabled"`
}

// NewApplianceVlansSettings registers a new resource with the given unique name, arguments, and options.
func NewApplianceVlansSettings(ctx *pulumi.Context,
	name string, args *ApplianceVlansSettingsArgs, opts ...pulumi.ResourceOption) (*ApplianceVlansSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceVlansSettings
	err := ctx.RegisterResource("meraki:networks/applianceVlansSettings:ApplianceVlansSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceVlansSettings gets an existing ApplianceVlansSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceVlansSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceVlansSettingsState, opts ...pulumi.ResourceOption) (*ApplianceVlansSettings, error) {
	var resource ApplianceVlansSettings
	err := ctx.ReadResource("meraki:networks/applianceVlansSettings:ApplianceVlansSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceVlansSettings resources.
type applianceVlansSettingsState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
	VlansEnabled *bool `pulumi:"vlansEnabled"`
}

type ApplianceVlansSettingsState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
	VlansEnabled pulumi.BoolPtrInput
}

func (ApplianceVlansSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVlansSettingsState)(nil)).Elem()
}

type applianceVlansSettingsArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
	VlansEnabled *bool `pulumi:"vlansEnabled"`
}

// The set of arguments for constructing a ApplianceVlansSettings resource.
type ApplianceVlansSettingsArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
	VlansEnabled pulumi.BoolPtrInput
}

func (ApplianceVlansSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVlansSettingsArgs)(nil)).Elem()
}

type ApplianceVlansSettingsInput interface {
	pulumi.Input

	ToApplianceVlansSettingsOutput() ApplianceVlansSettingsOutput
	ToApplianceVlansSettingsOutputWithContext(ctx context.Context) ApplianceVlansSettingsOutput
}

func (*ApplianceVlansSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVlansSettings)(nil)).Elem()
}

func (i *ApplianceVlansSettings) ToApplianceVlansSettingsOutput() ApplianceVlansSettingsOutput {
	return i.ToApplianceVlansSettingsOutputWithContext(context.Background())
}

func (i *ApplianceVlansSettings) ToApplianceVlansSettingsOutputWithContext(ctx context.Context) ApplianceVlansSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVlansSettingsOutput)
}

// ApplianceVlansSettingsArrayInput is an input type that accepts ApplianceVlansSettingsArray and ApplianceVlansSettingsArrayOutput values.
// You can construct a concrete instance of `ApplianceVlansSettingsArrayInput` via:
//
//	ApplianceVlansSettingsArray{ ApplianceVlansSettingsArgs{...} }
type ApplianceVlansSettingsArrayInput interface {
	pulumi.Input

	ToApplianceVlansSettingsArrayOutput() ApplianceVlansSettingsArrayOutput
	ToApplianceVlansSettingsArrayOutputWithContext(context.Context) ApplianceVlansSettingsArrayOutput
}

type ApplianceVlansSettingsArray []ApplianceVlansSettingsInput

func (ApplianceVlansSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVlansSettings)(nil)).Elem()
}

func (i ApplianceVlansSettingsArray) ToApplianceVlansSettingsArrayOutput() ApplianceVlansSettingsArrayOutput {
	return i.ToApplianceVlansSettingsArrayOutputWithContext(context.Background())
}

func (i ApplianceVlansSettingsArray) ToApplianceVlansSettingsArrayOutputWithContext(ctx context.Context) ApplianceVlansSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVlansSettingsArrayOutput)
}

// ApplianceVlansSettingsMapInput is an input type that accepts ApplianceVlansSettingsMap and ApplianceVlansSettingsMapOutput values.
// You can construct a concrete instance of `ApplianceVlansSettingsMapInput` via:
//
//	ApplianceVlansSettingsMap{ "key": ApplianceVlansSettingsArgs{...} }
type ApplianceVlansSettingsMapInput interface {
	pulumi.Input

	ToApplianceVlansSettingsMapOutput() ApplianceVlansSettingsMapOutput
	ToApplianceVlansSettingsMapOutputWithContext(context.Context) ApplianceVlansSettingsMapOutput
}

type ApplianceVlansSettingsMap map[string]ApplianceVlansSettingsInput

func (ApplianceVlansSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVlansSettings)(nil)).Elem()
}

func (i ApplianceVlansSettingsMap) ToApplianceVlansSettingsMapOutput() ApplianceVlansSettingsMapOutput {
	return i.ToApplianceVlansSettingsMapOutputWithContext(context.Background())
}

func (i ApplianceVlansSettingsMap) ToApplianceVlansSettingsMapOutputWithContext(ctx context.Context) ApplianceVlansSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVlansSettingsMapOutput)
}

type ApplianceVlansSettingsOutput struct{ *pulumi.OutputState }

func (ApplianceVlansSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVlansSettings)(nil)).Elem()
}

func (o ApplianceVlansSettingsOutput) ToApplianceVlansSettingsOutput() ApplianceVlansSettingsOutput {
	return o
}

func (o ApplianceVlansSettingsOutput) ToApplianceVlansSettingsOutputWithContext(ctx context.Context) ApplianceVlansSettingsOutput {
	return o
}

// networkId path parameter. Network ID
func (o ApplianceVlansSettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceVlansSettings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Boolean indicating whether VLANs are enabled (true) or disabled (false) for the network
func (o ApplianceVlansSettingsOutput) VlansEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceVlansSettings) pulumi.BoolOutput { return v.VlansEnabled }).(pulumi.BoolOutput)
}

type ApplianceVlansSettingsArrayOutput struct{ *pulumi.OutputState }

func (ApplianceVlansSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVlansSettings)(nil)).Elem()
}

func (o ApplianceVlansSettingsArrayOutput) ToApplianceVlansSettingsArrayOutput() ApplianceVlansSettingsArrayOutput {
	return o
}

func (o ApplianceVlansSettingsArrayOutput) ToApplianceVlansSettingsArrayOutputWithContext(ctx context.Context) ApplianceVlansSettingsArrayOutput {
	return o
}

func (o ApplianceVlansSettingsArrayOutput) Index(i pulumi.IntInput) ApplianceVlansSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceVlansSettings {
		return vs[0].([]*ApplianceVlansSettings)[vs[1].(int)]
	}).(ApplianceVlansSettingsOutput)
}

type ApplianceVlansSettingsMapOutput struct{ *pulumi.OutputState }

func (ApplianceVlansSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVlansSettings)(nil)).Elem()
}

func (o ApplianceVlansSettingsMapOutput) ToApplianceVlansSettingsMapOutput() ApplianceVlansSettingsMapOutput {
	return o
}

func (o ApplianceVlansSettingsMapOutput) ToApplianceVlansSettingsMapOutputWithContext(ctx context.Context) ApplianceVlansSettingsMapOutput {
	return o
}

func (o ApplianceVlansSettingsMapOutput) MapIndex(k pulumi.StringInput) ApplianceVlansSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceVlansSettings {
		return vs[0].(map[string]*ApplianceVlansSettings)[vs[1].(string)]
	}).(ApplianceVlansSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVlansSettingsInput)(nil)).Elem(), &ApplianceVlansSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVlansSettingsArrayInput)(nil)).Elem(), ApplianceVlansSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVlansSettingsMapInput)(nil)).Elem(), ApplianceVlansSettingsMap{})
	pulumi.RegisterOutputType(ApplianceVlansSettingsOutput{})
	pulumi.RegisterOutputType(ApplianceVlansSettingsArrayOutput{})
	pulumi.RegisterOutputType(ApplianceVlansSettingsMapOutput{})
}
