// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSmBypassActivationLockAttempts(ctx, "example", &networks.SmBypassActivationLockAttemptsArgs{
//				Ids: pulumi.StringArray{
//					pulumi.String("1284392014819"),
//					pulumi.String("2983092129865"),
//				},
//				NetworkId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSmBypassActivationLockAttemptsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts example "attempt_id,network_id"
// ```
type SmBypassActivationLockAttempts struct {
	pulumi.CustomResourceState

	// attemptId path parameter. Attempt ID
	AttemptId pulumi.StringPtrOutput                   `pulumi:"attemptId"`
	Data      SmBypassActivationLockAttemptsDataOutput `pulumi:"data"`
	// The ids of the devices to attempt activation lock bypass.
	Ids pulumi.StringArrayOutput `pulumi:"ids"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	Status    pulumi.StringOutput `pulumi:"status"`
}

// NewSmBypassActivationLockAttempts registers a new resource with the given unique name, arguments, and options.
func NewSmBypassActivationLockAttempts(ctx *pulumi.Context,
	name string, args *SmBypassActivationLockAttemptsArgs, opts ...pulumi.ResourceOption) (*SmBypassActivationLockAttempts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmBypassActivationLockAttempts
	err := ctx.RegisterResource("meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmBypassActivationLockAttempts gets an existing SmBypassActivationLockAttempts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmBypassActivationLockAttempts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmBypassActivationLockAttemptsState, opts ...pulumi.ResourceOption) (*SmBypassActivationLockAttempts, error) {
	var resource SmBypassActivationLockAttempts
	err := ctx.ReadResource("meraki:networks/smBypassActivationLockAttempts:SmBypassActivationLockAttempts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmBypassActivationLockAttempts resources.
type smBypassActivationLockAttemptsState struct {
	// attemptId path parameter. Attempt ID
	AttemptId *string                             `pulumi:"attemptId"`
	Data      *SmBypassActivationLockAttemptsData `pulumi:"data"`
	// The ids of the devices to attempt activation lock bypass.
	Ids []string `pulumi:"ids"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	Status    *string `pulumi:"status"`
}

type SmBypassActivationLockAttemptsState struct {
	// attemptId path parameter. Attempt ID
	AttemptId pulumi.StringPtrInput
	Data      SmBypassActivationLockAttemptsDataPtrInput
	// The ids of the devices to attempt activation lock bypass.
	Ids pulumi.StringArrayInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
}

func (SmBypassActivationLockAttemptsState) ElementType() reflect.Type {
	return reflect.TypeOf((*smBypassActivationLockAttemptsState)(nil)).Elem()
}

type smBypassActivationLockAttemptsArgs struct {
	// attemptId path parameter. Attempt ID
	AttemptId *string `pulumi:"attemptId"`
	// The ids of the devices to attempt activation lock bypass.
	Ids []string `pulumi:"ids"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a SmBypassActivationLockAttempts resource.
type SmBypassActivationLockAttemptsArgs struct {
	// attemptId path parameter. Attempt ID
	AttemptId pulumi.StringPtrInput
	// The ids of the devices to attempt activation lock bypass.
	Ids pulumi.StringArrayInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (SmBypassActivationLockAttemptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smBypassActivationLockAttemptsArgs)(nil)).Elem()
}

type SmBypassActivationLockAttemptsInput interface {
	pulumi.Input

	ToSmBypassActivationLockAttemptsOutput() SmBypassActivationLockAttemptsOutput
	ToSmBypassActivationLockAttemptsOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsOutput
}

func (*SmBypassActivationLockAttempts) ElementType() reflect.Type {
	return reflect.TypeOf((**SmBypassActivationLockAttempts)(nil)).Elem()
}

func (i *SmBypassActivationLockAttempts) ToSmBypassActivationLockAttemptsOutput() SmBypassActivationLockAttemptsOutput {
	return i.ToSmBypassActivationLockAttemptsOutputWithContext(context.Background())
}

func (i *SmBypassActivationLockAttempts) ToSmBypassActivationLockAttemptsOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmBypassActivationLockAttemptsOutput)
}

// SmBypassActivationLockAttemptsArrayInput is an input type that accepts SmBypassActivationLockAttemptsArray and SmBypassActivationLockAttemptsArrayOutput values.
// You can construct a concrete instance of `SmBypassActivationLockAttemptsArrayInput` via:
//
//	SmBypassActivationLockAttemptsArray{ SmBypassActivationLockAttemptsArgs{...} }
type SmBypassActivationLockAttemptsArrayInput interface {
	pulumi.Input

	ToSmBypassActivationLockAttemptsArrayOutput() SmBypassActivationLockAttemptsArrayOutput
	ToSmBypassActivationLockAttemptsArrayOutputWithContext(context.Context) SmBypassActivationLockAttemptsArrayOutput
}

type SmBypassActivationLockAttemptsArray []SmBypassActivationLockAttemptsInput

func (SmBypassActivationLockAttemptsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmBypassActivationLockAttempts)(nil)).Elem()
}

func (i SmBypassActivationLockAttemptsArray) ToSmBypassActivationLockAttemptsArrayOutput() SmBypassActivationLockAttemptsArrayOutput {
	return i.ToSmBypassActivationLockAttemptsArrayOutputWithContext(context.Background())
}

func (i SmBypassActivationLockAttemptsArray) ToSmBypassActivationLockAttemptsArrayOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmBypassActivationLockAttemptsArrayOutput)
}

// SmBypassActivationLockAttemptsMapInput is an input type that accepts SmBypassActivationLockAttemptsMap and SmBypassActivationLockAttemptsMapOutput values.
// You can construct a concrete instance of `SmBypassActivationLockAttemptsMapInput` via:
//
//	SmBypassActivationLockAttemptsMap{ "key": SmBypassActivationLockAttemptsArgs{...} }
type SmBypassActivationLockAttemptsMapInput interface {
	pulumi.Input

	ToSmBypassActivationLockAttemptsMapOutput() SmBypassActivationLockAttemptsMapOutput
	ToSmBypassActivationLockAttemptsMapOutputWithContext(context.Context) SmBypassActivationLockAttemptsMapOutput
}

type SmBypassActivationLockAttemptsMap map[string]SmBypassActivationLockAttemptsInput

func (SmBypassActivationLockAttemptsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmBypassActivationLockAttempts)(nil)).Elem()
}

func (i SmBypassActivationLockAttemptsMap) ToSmBypassActivationLockAttemptsMapOutput() SmBypassActivationLockAttemptsMapOutput {
	return i.ToSmBypassActivationLockAttemptsMapOutputWithContext(context.Background())
}

func (i SmBypassActivationLockAttemptsMap) ToSmBypassActivationLockAttemptsMapOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmBypassActivationLockAttemptsMapOutput)
}

type SmBypassActivationLockAttemptsOutput struct{ *pulumi.OutputState }

func (SmBypassActivationLockAttemptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmBypassActivationLockAttempts)(nil)).Elem()
}

func (o SmBypassActivationLockAttemptsOutput) ToSmBypassActivationLockAttemptsOutput() SmBypassActivationLockAttemptsOutput {
	return o
}

func (o SmBypassActivationLockAttemptsOutput) ToSmBypassActivationLockAttemptsOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsOutput {
	return o
}

// attemptId path parameter. Attempt ID
func (o SmBypassActivationLockAttemptsOutput) AttemptId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmBypassActivationLockAttempts) pulumi.StringPtrOutput { return v.AttemptId }).(pulumi.StringPtrOutput)
}

func (o SmBypassActivationLockAttemptsOutput) Data() SmBypassActivationLockAttemptsDataOutput {
	return o.ApplyT(func(v *SmBypassActivationLockAttempts) SmBypassActivationLockAttemptsDataOutput { return v.Data }).(SmBypassActivationLockAttemptsDataOutput)
}

// The ids of the devices to attempt activation lock bypass.
func (o SmBypassActivationLockAttemptsOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SmBypassActivationLockAttempts) pulumi.StringArrayOutput { return v.Ids }).(pulumi.StringArrayOutput)
}

// networkId path parameter. Network ID
func (o SmBypassActivationLockAttemptsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmBypassActivationLockAttempts) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmBypassActivationLockAttemptsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SmBypassActivationLockAttempts) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type SmBypassActivationLockAttemptsArrayOutput struct{ *pulumi.OutputState }

func (SmBypassActivationLockAttemptsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmBypassActivationLockAttempts)(nil)).Elem()
}

func (o SmBypassActivationLockAttemptsArrayOutput) ToSmBypassActivationLockAttemptsArrayOutput() SmBypassActivationLockAttemptsArrayOutput {
	return o
}

func (o SmBypassActivationLockAttemptsArrayOutput) ToSmBypassActivationLockAttemptsArrayOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsArrayOutput {
	return o
}

func (o SmBypassActivationLockAttemptsArrayOutput) Index(i pulumi.IntInput) SmBypassActivationLockAttemptsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmBypassActivationLockAttempts {
		return vs[0].([]*SmBypassActivationLockAttempts)[vs[1].(int)]
	}).(SmBypassActivationLockAttemptsOutput)
}

type SmBypassActivationLockAttemptsMapOutput struct{ *pulumi.OutputState }

func (SmBypassActivationLockAttemptsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmBypassActivationLockAttempts)(nil)).Elem()
}

func (o SmBypassActivationLockAttemptsMapOutput) ToSmBypassActivationLockAttemptsMapOutput() SmBypassActivationLockAttemptsMapOutput {
	return o
}

func (o SmBypassActivationLockAttemptsMapOutput) ToSmBypassActivationLockAttemptsMapOutputWithContext(ctx context.Context) SmBypassActivationLockAttemptsMapOutput {
	return o
}

func (o SmBypassActivationLockAttemptsMapOutput) MapIndex(k pulumi.StringInput) SmBypassActivationLockAttemptsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmBypassActivationLockAttempts {
		return vs[0].(map[string]*SmBypassActivationLockAttempts)[vs[1].(string)]
	}).(SmBypassActivationLockAttemptsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmBypassActivationLockAttemptsInput)(nil)).Elem(), &SmBypassActivationLockAttempts{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmBypassActivationLockAttemptsArrayInput)(nil)).Elem(), SmBypassActivationLockAttemptsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmBypassActivationLockAttemptsMapInput)(nil)).Elem(), SmBypassActivationLockAttemptsMap{})
	pulumi.RegisterOutputType(SmBypassActivationLockAttemptsOutput{})
	pulumi.RegisterOutputType(SmBypassActivationLockAttemptsArrayOutput{})
	pulumi.RegisterOutputType(SmBypassActivationLockAttemptsMapOutput{})
}
