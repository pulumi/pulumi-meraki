// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchStacksRoutingStaticRoutes(ctx, "example", &networks.SwitchStacksRoutingStaticRoutesArgs{
//				AdvertiseViaOspfEnabled:     pulumi.Bool(false),
//				Name:                        pulumi.String("My route"),
//				NetworkId:                   pulumi.String("string"),
//				NextHopIp:                   pulumi.String("1.2.3.4"),
//				PreferOverOspfRoutesEnabled: pulumi.Bool(false),
//				Subnet:                      pulumi.String("192.168.1.0/24"),
//				SwitchStackId:               pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchStacksRoutingStaticRoutesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes example "network_id,static_route_id,switch_stack_id"
// ```
type SwitchStacksRoutingStaticRoutes struct {
	pulumi.CustomResourceState

	// Option to advertise static routes via OSPF
	AdvertiseViaOspfEnabled pulumi.BoolOutput `pulumi:"advertiseViaOspfEnabled"`
	// The name or description of the layer 3 static route
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The IP address of the router to which traffic for this destination network should be sent
	NextHopIp pulumi.StringOutput `pulumi:"nextHopIp"`
	// Option to prefer static routes over OSPF routes
	PreferOverOspfRoutesEnabled pulumi.BoolOutput `pulumi:"preferOverOspfRoutesEnabled"`
	// The identifier of a layer 3 static route
	StaticRouteId pulumi.StringOutput `pulumi:"staticRouteId"`
	// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringOutput `pulumi:"switchStackId"`
}

// NewSwitchStacksRoutingStaticRoutes registers a new resource with the given unique name, arguments, and options.
func NewSwitchStacksRoutingStaticRoutes(ctx *pulumi.Context,
	name string, args *SwitchStacksRoutingStaticRoutesArgs, opts ...pulumi.ResourceOption) (*SwitchStacksRoutingStaticRoutes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.SwitchStackId == nil {
		return nil, errors.New("invalid value for required argument 'SwitchStackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchStacksRoutingStaticRoutes
	err := ctx.RegisterResource("meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchStacksRoutingStaticRoutes gets an existing SwitchStacksRoutingStaticRoutes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchStacksRoutingStaticRoutes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchStacksRoutingStaticRoutesState, opts ...pulumi.ResourceOption) (*SwitchStacksRoutingStaticRoutes, error) {
	var resource SwitchStacksRoutingStaticRoutes
	err := ctx.ReadResource("meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchStacksRoutingStaticRoutes resources.
type switchStacksRoutingStaticRoutesState struct {
	// Option to advertise static routes via OSPF
	AdvertiseViaOspfEnabled *bool `pulumi:"advertiseViaOspfEnabled"`
	// The name or description of the layer 3 static route
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The IP address of the router to which traffic for this destination network should be sent
	NextHopIp *string `pulumi:"nextHopIp"`
	// Option to prefer static routes over OSPF routes
	PreferOverOspfRoutesEnabled *bool `pulumi:"preferOverOspfRoutesEnabled"`
	// The identifier of a layer 3 static route
	StaticRouteId *string `pulumi:"staticRouteId"`
	// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
	Subnet *string `pulumi:"subnet"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId *string `pulumi:"switchStackId"`
}

type SwitchStacksRoutingStaticRoutesState struct {
	// Option to advertise static routes via OSPF
	AdvertiseViaOspfEnabled pulumi.BoolPtrInput
	// The name or description of the layer 3 static route
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The IP address of the router to which traffic for this destination network should be sent
	NextHopIp pulumi.StringPtrInput
	// Option to prefer static routes over OSPF routes
	PreferOverOspfRoutesEnabled pulumi.BoolPtrInput
	// The identifier of a layer 3 static route
	StaticRouteId pulumi.StringPtrInput
	// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
	Subnet pulumi.StringPtrInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrInput
}

func (SwitchStacksRoutingStaticRoutesState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksRoutingStaticRoutesState)(nil)).Elem()
}

type switchStacksRoutingStaticRoutesArgs struct {
	// Option to advertise static routes via OSPF
	AdvertiseViaOspfEnabled *bool `pulumi:"advertiseViaOspfEnabled"`
	// The name or description of the layer 3 static route
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The IP address of the router to which traffic for this destination network should be sent
	NextHopIp *string `pulumi:"nextHopIp"`
	// Option to prefer static routes over OSPF routes
	PreferOverOspfRoutesEnabled *bool `pulumi:"preferOverOspfRoutesEnabled"`
	// The identifier of a layer 3 static route
	StaticRouteId *string `pulumi:"staticRouteId"`
	// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
	Subnet *string `pulumi:"subnet"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId string `pulumi:"switchStackId"`
}

// The set of arguments for constructing a SwitchStacksRoutingStaticRoutes resource.
type SwitchStacksRoutingStaticRoutesArgs struct {
	// Option to advertise static routes via OSPF
	AdvertiseViaOspfEnabled pulumi.BoolPtrInput
	// The name or description of the layer 3 static route
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The IP address of the router to which traffic for this destination network should be sent
	NextHopIp pulumi.StringPtrInput
	// Option to prefer static routes over OSPF routes
	PreferOverOspfRoutesEnabled pulumi.BoolPtrInput
	// The identifier of a layer 3 static route
	StaticRouteId pulumi.StringPtrInput
	// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
	Subnet pulumi.StringPtrInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringInput
}

func (SwitchStacksRoutingStaticRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksRoutingStaticRoutesArgs)(nil)).Elem()
}

type SwitchStacksRoutingStaticRoutesInput interface {
	pulumi.Input

	ToSwitchStacksRoutingStaticRoutesOutput() SwitchStacksRoutingStaticRoutesOutput
	ToSwitchStacksRoutingStaticRoutesOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesOutput
}

func (*SwitchStacksRoutingStaticRoutes) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (i *SwitchStacksRoutingStaticRoutes) ToSwitchStacksRoutingStaticRoutesOutput() SwitchStacksRoutingStaticRoutesOutput {
	return i.ToSwitchStacksRoutingStaticRoutesOutputWithContext(context.Background())
}

func (i *SwitchStacksRoutingStaticRoutes) ToSwitchStacksRoutingStaticRoutesOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingStaticRoutesOutput)
}

// SwitchStacksRoutingStaticRoutesArrayInput is an input type that accepts SwitchStacksRoutingStaticRoutesArray and SwitchStacksRoutingStaticRoutesArrayOutput values.
// You can construct a concrete instance of `SwitchStacksRoutingStaticRoutesArrayInput` via:
//
//	SwitchStacksRoutingStaticRoutesArray{ SwitchStacksRoutingStaticRoutesArgs{...} }
type SwitchStacksRoutingStaticRoutesArrayInput interface {
	pulumi.Input

	ToSwitchStacksRoutingStaticRoutesArrayOutput() SwitchStacksRoutingStaticRoutesArrayOutput
	ToSwitchStacksRoutingStaticRoutesArrayOutputWithContext(context.Context) SwitchStacksRoutingStaticRoutesArrayOutput
}

type SwitchStacksRoutingStaticRoutesArray []SwitchStacksRoutingStaticRoutesInput

func (SwitchStacksRoutingStaticRoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (i SwitchStacksRoutingStaticRoutesArray) ToSwitchStacksRoutingStaticRoutesArrayOutput() SwitchStacksRoutingStaticRoutesArrayOutput {
	return i.ToSwitchStacksRoutingStaticRoutesArrayOutputWithContext(context.Background())
}

func (i SwitchStacksRoutingStaticRoutesArray) ToSwitchStacksRoutingStaticRoutesArrayOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingStaticRoutesArrayOutput)
}

// SwitchStacksRoutingStaticRoutesMapInput is an input type that accepts SwitchStacksRoutingStaticRoutesMap and SwitchStacksRoutingStaticRoutesMapOutput values.
// You can construct a concrete instance of `SwitchStacksRoutingStaticRoutesMapInput` via:
//
//	SwitchStacksRoutingStaticRoutesMap{ "key": SwitchStacksRoutingStaticRoutesArgs{...} }
type SwitchStacksRoutingStaticRoutesMapInput interface {
	pulumi.Input

	ToSwitchStacksRoutingStaticRoutesMapOutput() SwitchStacksRoutingStaticRoutesMapOutput
	ToSwitchStacksRoutingStaticRoutesMapOutputWithContext(context.Context) SwitchStacksRoutingStaticRoutesMapOutput
}

type SwitchStacksRoutingStaticRoutesMap map[string]SwitchStacksRoutingStaticRoutesInput

func (SwitchStacksRoutingStaticRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (i SwitchStacksRoutingStaticRoutesMap) ToSwitchStacksRoutingStaticRoutesMapOutput() SwitchStacksRoutingStaticRoutesMapOutput {
	return i.ToSwitchStacksRoutingStaticRoutesMapOutputWithContext(context.Background())
}

func (i SwitchStacksRoutingStaticRoutesMap) ToSwitchStacksRoutingStaticRoutesMapOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksRoutingStaticRoutesMapOutput)
}

type SwitchStacksRoutingStaticRoutesOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingStaticRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (o SwitchStacksRoutingStaticRoutesOutput) ToSwitchStacksRoutingStaticRoutesOutput() SwitchStacksRoutingStaticRoutesOutput {
	return o
}

func (o SwitchStacksRoutingStaticRoutesOutput) ToSwitchStacksRoutingStaticRoutesOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesOutput {
	return o
}

// Option to advertise static routes via OSPF
func (o SwitchStacksRoutingStaticRoutesOutput) AdvertiseViaOspfEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.BoolOutput { return v.AdvertiseViaOspfEnabled }).(pulumi.BoolOutput)
}

// The name or description of the layer 3 static route
func (o SwitchStacksRoutingStaticRoutesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchStacksRoutingStaticRoutesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The IP address of the router to which traffic for this destination network should be sent
func (o SwitchStacksRoutingStaticRoutesOutput) NextHopIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.NextHopIp }).(pulumi.StringOutput)
}

// Option to prefer static routes over OSPF routes
func (o SwitchStacksRoutingStaticRoutesOutput) PreferOverOspfRoutesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.BoolOutput { return v.PreferOverOspfRoutesEnabled }).(pulumi.BoolOutput)
}

// The identifier of a layer 3 static route
func (o SwitchStacksRoutingStaticRoutesOutput) StaticRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.StaticRouteId }).(pulumi.StringOutput)
}

// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
func (o SwitchStacksRoutingStaticRoutesOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// switchStackId path parameter. Switch stack ID
func (o SwitchStacksRoutingStaticRoutesOutput) SwitchStackId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacksRoutingStaticRoutes) pulumi.StringOutput { return v.SwitchStackId }).(pulumi.StringOutput)
}

type SwitchStacksRoutingStaticRoutesArrayOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingStaticRoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (o SwitchStacksRoutingStaticRoutesArrayOutput) ToSwitchStacksRoutingStaticRoutesArrayOutput() SwitchStacksRoutingStaticRoutesArrayOutput {
	return o
}

func (o SwitchStacksRoutingStaticRoutesArrayOutput) ToSwitchStacksRoutingStaticRoutesArrayOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesArrayOutput {
	return o
}

func (o SwitchStacksRoutingStaticRoutesArrayOutput) Index(i pulumi.IntInput) SwitchStacksRoutingStaticRoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchStacksRoutingStaticRoutes {
		return vs[0].([]*SwitchStacksRoutingStaticRoutes)[vs[1].(int)]
	}).(SwitchStacksRoutingStaticRoutesOutput)
}

type SwitchStacksRoutingStaticRoutesMapOutput struct{ *pulumi.OutputState }

func (SwitchStacksRoutingStaticRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacksRoutingStaticRoutes)(nil)).Elem()
}

func (o SwitchStacksRoutingStaticRoutesMapOutput) ToSwitchStacksRoutingStaticRoutesMapOutput() SwitchStacksRoutingStaticRoutesMapOutput {
	return o
}

func (o SwitchStacksRoutingStaticRoutesMapOutput) ToSwitchStacksRoutingStaticRoutesMapOutputWithContext(ctx context.Context) SwitchStacksRoutingStaticRoutesMapOutput {
	return o
}

func (o SwitchStacksRoutingStaticRoutesMapOutput) MapIndex(k pulumi.StringInput) SwitchStacksRoutingStaticRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchStacksRoutingStaticRoutes {
		return vs[0].(map[string]*SwitchStacksRoutingStaticRoutes)[vs[1].(string)]
	}).(SwitchStacksRoutingStaticRoutesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingStaticRoutesInput)(nil)).Elem(), &SwitchStacksRoutingStaticRoutes{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingStaticRoutesArrayInput)(nil)).Elem(), SwitchStacksRoutingStaticRoutesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksRoutingStaticRoutesMapInput)(nil)).Elem(), SwitchStacksRoutingStaticRoutesMap{})
	pulumi.RegisterOutputType(SwitchStacksRoutingStaticRoutesOutput{})
	pulumi.RegisterOutputType(SwitchStacksRoutingStaticRoutesArrayOutput{})
	pulumi.RegisterOutputType(SwitchStacksRoutingStaticRoutesMapOutput{})
}
