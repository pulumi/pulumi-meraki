// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewDevicesClaimVmx(ctx, "example", &networks.DevicesClaimVmxArgs{
//				NetworkId: pulumi.String("string"),
//				Parameters: &networks.DevicesClaimVmxParametersArgs{
//					Size: pulumi.String("small"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksDevicesClaimVmxExample", example)
//			return nil
//		})
//	}
//
// ```
type DevicesClaimVmx struct {
	pulumi.CustomResourceState

	Item DevicesClaimVmxItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput             `pulumi:"networkId"`
	Parameters DevicesClaimVmxParametersOutput `pulumi:"parameters"`
}

// NewDevicesClaimVmx registers a new resource with the given unique name, arguments, and options.
func NewDevicesClaimVmx(ctx *pulumi.Context,
	name string, args *DevicesClaimVmxArgs, opts ...pulumi.ResourceOption) (*DevicesClaimVmx, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicesClaimVmx
	err := ctx.RegisterResource("meraki:networks/devicesClaimVmx:DevicesClaimVmx", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicesClaimVmx gets an existing DevicesClaimVmx resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicesClaimVmx(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicesClaimVmxState, opts ...pulumi.ResourceOption) (*DevicesClaimVmx, error) {
	var resource DevicesClaimVmx
	err := ctx.ReadResource("meraki:networks/devicesClaimVmx:DevicesClaimVmx", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicesClaimVmx resources.
type devicesClaimVmxState struct {
	Item *DevicesClaimVmxItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string                    `pulumi:"networkId"`
	Parameters *DevicesClaimVmxParameters `pulumi:"parameters"`
}

type DevicesClaimVmxState struct {
	Item DevicesClaimVmxItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters DevicesClaimVmxParametersPtrInput
}

func (DevicesClaimVmxState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicesClaimVmxState)(nil)).Elem()
}

type devicesClaimVmxArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string                    `pulumi:"networkId"`
	Parameters DevicesClaimVmxParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a DevicesClaimVmx resource.
type DevicesClaimVmxArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters DevicesClaimVmxParametersInput
}

func (DevicesClaimVmxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicesClaimVmxArgs)(nil)).Elem()
}

type DevicesClaimVmxInput interface {
	pulumi.Input

	ToDevicesClaimVmxOutput() DevicesClaimVmxOutput
	ToDevicesClaimVmxOutputWithContext(ctx context.Context) DevicesClaimVmxOutput
}

func (*DevicesClaimVmx) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicesClaimVmx)(nil)).Elem()
}

func (i *DevicesClaimVmx) ToDevicesClaimVmxOutput() DevicesClaimVmxOutput {
	return i.ToDevicesClaimVmxOutputWithContext(context.Background())
}

func (i *DevicesClaimVmx) ToDevicesClaimVmxOutputWithContext(ctx context.Context) DevicesClaimVmxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesClaimVmxOutput)
}

// DevicesClaimVmxArrayInput is an input type that accepts DevicesClaimVmxArray and DevicesClaimVmxArrayOutput values.
// You can construct a concrete instance of `DevicesClaimVmxArrayInput` via:
//
//	DevicesClaimVmxArray{ DevicesClaimVmxArgs{...} }
type DevicesClaimVmxArrayInput interface {
	pulumi.Input

	ToDevicesClaimVmxArrayOutput() DevicesClaimVmxArrayOutput
	ToDevicesClaimVmxArrayOutputWithContext(context.Context) DevicesClaimVmxArrayOutput
}

type DevicesClaimVmxArray []DevicesClaimVmxInput

func (DevicesClaimVmxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicesClaimVmx)(nil)).Elem()
}

func (i DevicesClaimVmxArray) ToDevicesClaimVmxArrayOutput() DevicesClaimVmxArrayOutput {
	return i.ToDevicesClaimVmxArrayOutputWithContext(context.Background())
}

func (i DevicesClaimVmxArray) ToDevicesClaimVmxArrayOutputWithContext(ctx context.Context) DevicesClaimVmxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesClaimVmxArrayOutput)
}

// DevicesClaimVmxMapInput is an input type that accepts DevicesClaimVmxMap and DevicesClaimVmxMapOutput values.
// You can construct a concrete instance of `DevicesClaimVmxMapInput` via:
//
//	DevicesClaimVmxMap{ "key": DevicesClaimVmxArgs{...} }
type DevicesClaimVmxMapInput interface {
	pulumi.Input

	ToDevicesClaimVmxMapOutput() DevicesClaimVmxMapOutput
	ToDevicesClaimVmxMapOutputWithContext(context.Context) DevicesClaimVmxMapOutput
}

type DevicesClaimVmxMap map[string]DevicesClaimVmxInput

func (DevicesClaimVmxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicesClaimVmx)(nil)).Elem()
}

func (i DevicesClaimVmxMap) ToDevicesClaimVmxMapOutput() DevicesClaimVmxMapOutput {
	return i.ToDevicesClaimVmxMapOutputWithContext(context.Background())
}

func (i DevicesClaimVmxMap) ToDevicesClaimVmxMapOutputWithContext(ctx context.Context) DevicesClaimVmxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicesClaimVmxMapOutput)
}

type DevicesClaimVmxOutput struct{ *pulumi.OutputState }

func (DevicesClaimVmxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicesClaimVmx)(nil)).Elem()
}

func (o DevicesClaimVmxOutput) ToDevicesClaimVmxOutput() DevicesClaimVmxOutput {
	return o
}

func (o DevicesClaimVmxOutput) ToDevicesClaimVmxOutputWithContext(ctx context.Context) DevicesClaimVmxOutput {
	return o
}

func (o DevicesClaimVmxOutput) Item() DevicesClaimVmxItemOutput {
	return o.ApplyT(func(v *DevicesClaimVmx) DevicesClaimVmxItemOutput { return v.Item }).(DevicesClaimVmxItemOutput)
}

// networkId path parameter. Network ID
func (o DevicesClaimVmxOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicesClaimVmx) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o DevicesClaimVmxOutput) Parameters() DevicesClaimVmxParametersOutput {
	return o.ApplyT(func(v *DevicesClaimVmx) DevicesClaimVmxParametersOutput { return v.Parameters }).(DevicesClaimVmxParametersOutput)
}

type DevicesClaimVmxArrayOutput struct{ *pulumi.OutputState }

func (DevicesClaimVmxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicesClaimVmx)(nil)).Elem()
}

func (o DevicesClaimVmxArrayOutput) ToDevicesClaimVmxArrayOutput() DevicesClaimVmxArrayOutput {
	return o
}

func (o DevicesClaimVmxArrayOutput) ToDevicesClaimVmxArrayOutputWithContext(ctx context.Context) DevicesClaimVmxArrayOutput {
	return o
}

func (o DevicesClaimVmxArrayOutput) Index(i pulumi.IntInput) DevicesClaimVmxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicesClaimVmx {
		return vs[0].([]*DevicesClaimVmx)[vs[1].(int)]
	}).(DevicesClaimVmxOutput)
}

type DevicesClaimVmxMapOutput struct{ *pulumi.OutputState }

func (DevicesClaimVmxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicesClaimVmx)(nil)).Elem()
}

func (o DevicesClaimVmxMapOutput) ToDevicesClaimVmxMapOutput() DevicesClaimVmxMapOutput {
	return o
}

func (o DevicesClaimVmxMapOutput) ToDevicesClaimVmxMapOutputWithContext(ctx context.Context) DevicesClaimVmxMapOutput {
	return o
}

func (o DevicesClaimVmxMapOutput) MapIndex(k pulumi.StringInput) DevicesClaimVmxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicesClaimVmx {
		return vs[0].(map[string]*DevicesClaimVmx)[vs[1].(string)]
	}).(DevicesClaimVmxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesClaimVmxInput)(nil)).Elem(), &DevicesClaimVmx{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesClaimVmxArrayInput)(nil)).Elem(), DevicesClaimVmxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicesClaimVmxMapInput)(nil)).Elem(), DevicesClaimVmxMap{})
	pulumi.RegisterOutputType(DevicesClaimVmxOutput{})
	pulumi.RegisterOutputType(DevicesClaimVmxArrayOutput{})
	pulumi.RegisterOutputType(DevicesClaimVmxMapOutput{})
}
