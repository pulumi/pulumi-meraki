// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceFirewallFirewalledServices(ctx, "example", &networks.ApplianceFirewallFirewalledServicesArgs{
//				Access: pulumi.String("restricted"),
//				AllowedIps: pulumi.StringArray{
//					pulumi.String("123.123.123.1"),
//				},
//				NetworkId: pulumi.String("string"),
//				Service:   pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceFirewallFirewalledServicesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceFirewallFirewalledServices:ApplianceFirewallFirewalledServices example "network_id,service"
// ```
type ApplianceFirewallFirewalledServices struct {
	pulumi.CustomResourceState

	// A string indicating the rule for which IPs are allowed to use the specified service
	Access pulumi.StringOutput `pulumi:"access"`
	// An array of allowed IPs that can access the service
	AllowedIps pulumi.StringArrayOutput `pulumi:"allowedIps"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Appliance service name
	Service pulumi.StringOutput `pulumi:"service"`
}

// NewApplianceFirewallFirewalledServices registers a new resource with the given unique name, arguments, and options.
func NewApplianceFirewallFirewalledServices(ctx *pulumi.Context,
	name string, args *ApplianceFirewallFirewalledServicesArgs, opts ...pulumi.ResourceOption) (*ApplianceFirewallFirewalledServices, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceFirewallFirewalledServices
	err := ctx.RegisterResource("meraki:networks/applianceFirewallFirewalledServices:ApplianceFirewallFirewalledServices", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceFirewallFirewalledServices gets an existing ApplianceFirewallFirewalledServices resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceFirewallFirewalledServices(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceFirewallFirewalledServicesState, opts ...pulumi.ResourceOption) (*ApplianceFirewallFirewalledServices, error) {
	var resource ApplianceFirewallFirewalledServices
	err := ctx.ReadResource("meraki:networks/applianceFirewallFirewalledServices:ApplianceFirewallFirewalledServices", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceFirewallFirewalledServices resources.
type applianceFirewallFirewalledServicesState struct {
	// A string indicating the rule for which IPs are allowed to use the specified service
	Access *string `pulumi:"access"`
	// An array of allowed IPs that can access the service
	AllowedIps []string `pulumi:"allowedIps"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Appliance service name
	Service *string `pulumi:"service"`
}

type ApplianceFirewallFirewalledServicesState struct {
	// A string indicating the rule for which IPs are allowed to use the specified service
	Access pulumi.StringPtrInput
	// An array of allowed IPs that can access the service
	AllowedIps pulumi.StringArrayInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Appliance service name
	Service pulumi.StringPtrInput
}

func (ApplianceFirewallFirewalledServicesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallFirewalledServicesState)(nil)).Elem()
}

type applianceFirewallFirewalledServicesArgs struct {
	// A string indicating the rule for which IPs are allowed to use the specified service
	Access *string `pulumi:"access"`
	// An array of allowed IPs that can access the service
	AllowedIps []string `pulumi:"allowedIps"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Appliance service name
	Service string `pulumi:"service"`
}

// The set of arguments for constructing a ApplianceFirewallFirewalledServices resource.
type ApplianceFirewallFirewalledServicesArgs struct {
	// A string indicating the rule for which IPs are allowed to use the specified service
	Access pulumi.StringPtrInput
	// An array of allowed IPs that can access the service
	AllowedIps pulumi.StringArrayInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Appliance service name
	Service pulumi.StringInput
}

func (ApplianceFirewallFirewalledServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceFirewallFirewalledServicesArgs)(nil)).Elem()
}

type ApplianceFirewallFirewalledServicesInput interface {
	pulumi.Input

	ToApplianceFirewallFirewalledServicesOutput() ApplianceFirewallFirewalledServicesOutput
	ToApplianceFirewallFirewalledServicesOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesOutput
}

func (*ApplianceFirewallFirewalledServices) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (i *ApplianceFirewallFirewalledServices) ToApplianceFirewallFirewalledServicesOutput() ApplianceFirewallFirewalledServicesOutput {
	return i.ToApplianceFirewallFirewalledServicesOutputWithContext(context.Background())
}

func (i *ApplianceFirewallFirewalledServices) ToApplianceFirewallFirewalledServicesOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallFirewalledServicesOutput)
}

// ApplianceFirewallFirewalledServicesArrayInput is an input type that accepts ApplianceFirewallFirewalledServicesArray and ApplianceFirewallFirewalledServicesArrayOutput values.
// You can construct a concrete instance of `ApplianceFirewallFirewalledServicesArrayInput` via:
//
//	ApplianceFirewallFirewalledServicesArray{ ApplianceFirewallFirewalledServicesArgs{...} }
type ApplianceFirewallFirewalledServicesArrayInput interface {
	pulumi.Input

	ToApplianceFirewallFirewalledServicesArrayOutput() ApplianceFirewallFirewalledServicesArrayOutput
	ToApplianceFirewallFirewalledServicesArrayOutputWithContext(context.Context) ApplianceFirewallFirewalledServicesArrayOutput
}

type ApplianceFirewallFirewalledServicesArray []ApplianceFirewallFirewalledServicesInput

func (ApplianceFirewallFirewalledServicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (i ApplianceFirewallFirewalledServicesArray) ToApplianceFirewallFirewalledServicesArrayOutput() ApplianceFirewallFirewalledServicesArrayOutput {
	return i.ToApplianceFirewallFirewalledServicesArrayOutputWithContext(context.Background())
}

func (i ApplianceFirewallFirewalledServicesArray) ToApplianceFirewallFirewalledServicesArrayOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallFirewalledServicesArrayOutput)
}

// ApplianceFirewallFirewalledServicesMapInput is an input type that accepts ApplianceFirewallFirewalledServicesMap and ApplianceFirewallFirewalledServicesMapOutput values.
// You can construct a concrete instance of `ApplianceFirewallFirewalledServicesMapInput` via:
//
//	ApplianceFirewallFirewalledServicesMap{ "key": ApplianceFirewallFirewalledServicesArgs{...} }
type ApplianceFirewallFirewalledServicesMapInput interface {
	pulumi.Input

	ToApplianceFirewallFirewalledServicesMapOutput() ApplianceFirewallFirewalledServicesMapOutput
	ToApplianceFirewallFirewalledServicesMapOutputWithContext(context.Context) ApplianceFirewallFirewalledServicesMapOutput
}

type ApplianceFirewallFirewalledServicesMap map[string]ApplianceFirewallFirewalledServicesInput

func (ApplianceFirewallFirewalledServicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (i ApplianceFirewallFirewalledServicesMap) ToApplianceFirewallFirewalledServicesMapOutput() ApplianceFirewallFirewalledServicesMapOutput {
	return i.ToApplianceFirewallFirewalledServicesMapOutputWithContext(context.Background())
}

func (i ApplianceFirewallFirewalledServicesMap) ToApplianceFirewallFirewalledServicesMapOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceFirewallFirewalledServicesMapOutput)
}

type ApplianceFirewallFirewalledServicesOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallFirewalledServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (o ApplianceFirewallFirewalledServicesOutput) ToApplianceFirewallFirewalledServicesOutput() ApplianceFirewallFirewalledServicesOutput {
	return o
}

func (o ApplianceFirewallFirewalledServicesOutput) ToApplianceFirewallFirewalledServicesOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesOutput {
	return o
}

// A string indicating the rule for which IPs are allowed to use the specified service
func (o ApplianceFirewallFirewalledServicesOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceFirewallFirewalledServices) pulumi.StringOutput { return v.Access }).(pulumi.StringOutput)
}

// An array of allowed IPs that can access the service
func (o ApplianceFirewallFirewalledServicesOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplianceFirewallFirewalledServices) pulumi.StringArrayOutput { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// networkId path parameter. Network ID
func (o ApplianceFirewallFirewalledServicesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceFirewallFirewalledServices) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Appliance service name
func (o ApplianceFirewallFirewalledServicesOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceFirewallFirewalledServices) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

type ApplianceFirewallFirewalledServicesArrayOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallFirewalledServicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (o ApplianceFirewallFirewalledServicesArrayOutput) ToApplianceFirewallFirewalledServicesArrayOutput() ApplianceFirewallFirewalledServicesArrayOutput {
	return o
}

func (o ApplianceFirewallFirewalledServicesArrayOutput) ToApplianceFirewallFirewalledServicesArrayOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesArrayOutput {
	return o
}

func (o ApplianceFirewallFirewalledServicesArrayOutput) Index(i pulumi.IntInput) ApplianceFirewallFirewalledServicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceFirewallFirewalledServices {
		return vs[0].([]*ApplianceFirewallFirewalledServices)[vs[1].(int)]
	}).(ApplianceFirewallFirewalledServicesOutput)
}

type ApplianceFirewallFirewalledServicesMapOutput struct{ *pulumi.OutputState }

func (ApplianceFirewallFirewalledServicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceFirewallFirewalledServices)(nil)).Elem()
}

func (o ApplianceFirewallFirewalledServicesMapOutput) ToApplianceFirewallFirewalledServicesMapOutput() ApplianceFirewallFirewalledServicesMapOutput {
	return o
}

func (o ApplianceFirewallFirewalledServicesMapOutput) ToApplianceFirewallFirewalledServicesMapOutputWithContext(ctx context.Context) ApplianceFirewallFirewalledServicesMapOutput {
	return o
}

func (o ApplianceFirewallFirewalledServicesMapOutput) MapIndex(k pulumi.StringInput) ApplianceFirewallFirewalledServicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceFirewallFirewalledServices {
		return vs[0].(map[string]*ApplianceFirewallFirewalledServices)[vs[1].(string)]
	}).(ApplianceFirewallFirewalledServicesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallFirewalledServicesInput)(nil)).Elem(), &ApplianceFirewallFirewalledServices{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallFirewalledServicesArrayInput)(nil)).Elem(), ApplianceFirewallFirewalledServicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceFirewallFirewalledServicesMapInput)(nil)).Elem(), ApplianceFirewallFirewalledServicesMap{})
	pulumi.RegisterOutputType(ApplianceFirewallFirewalledServicesOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallFirewalledServicesArrayOutput{})
	pulumi.RegisterOutputType(ApplianceFirewallFirewalledServicesMapOutput{})
}
