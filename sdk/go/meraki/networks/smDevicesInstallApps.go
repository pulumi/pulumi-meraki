// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSmDevicesInstallApps(ctx, "example", &networks.SmDevicesInstallAppsArgs{
//				DeviceId:  pulumi.String("string"),
//				NetworkId: pulumi.String("string"),
//				Parameters: &networks.SmDevicesInstallAppsParametersArgs{
//					App_ids: []string{
//						"1284392014819",
//						"2983092129865",
//					},
//					Force: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSmDevicesInstallAppsExample", example)
//			return nil
//		})
//	}
//
// ```
type SmDevicesInstallApps struct {
	pulumi.CustomResourceState

	// deviceId path parameter. Device ID
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput                  `pulumi:"networkId"`
	Parameters SmDevicesInstallAppsParametersOutput `pulumi:"parameters"`
}

// NewSmDevicesInstallApps registers a new resource with the given unique name, arguments, and options.
func NewSmDevicesInstallApps(ctx *pulumi.Context,
	name string, args *SmDevicesInstallAppsArgs, opts ...pulumi.ResourceOption) (*SmDevicesInstallApps, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmDevicesInstallApps
	err := ctx.RegisterResource("meraki:networks/smDevicesInstallApps:SmDevicesInstallApps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmDevicesInstallApps gets an existing SmDevicesInstallApps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmDevicesInstallApps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmDevicesInstallAppsState, opts ...pulumi.ResourceOption) (*SmDevicesInstallApps, error) {
	var resource SmDevicesInstallApps
	err := ctx.ReadResource("meraki:networks/smDevicesInstallApps:SmDevicesInstallApps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmDevicesInstallApps resources.
type smDevicesInstallAppsState struct {
	// deviceId path parameter. Device ID
	DeviceId *string `pulumi:"deviceId"`
	// networkId path parameter. Network ID
	NetworkId  *string                         `pulumi:"networkId"`
	Parameters *SmDevicesInstallAppsParameters `pulumi:"parameters"`
}

type SmDevicesInstallAppsState struct {
	// deviceId path parameter. Device ID
	DeviceId pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters SmDevicesInstallAppsParametersPtrInput
}

func (SmDevicesInstallAppsState) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesInstallAppsState)(nil)).Elem()
}

type smDevicesInstallAppsArgs struct {
	// deviceId path parameter. Device ID
	DeviceId string `pulumi:"deviceId"`
	// networkId path parameter. Network ID
	NetworkId  string                         `pulumi:"networkId"`
	Parameters SmDevicesInstallAppsParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a SmDevicesInstallApps resource.
type SmDevicesInstallAppsArgs struct {
	// deviceId path parameter. Device ID
	DeviceId pulumi.StringInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters SmDevicesInstallAppsParametersInput
}

func (SmDevicesInstallAppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smDevicesInstallAppsArgs)(nil)).Elem()
}

type SmDevicesInstallAppsInput interface {
	pulumi.Input

	ToSmDevicesInstallAppsOutput() SmDevicesInstallAppsOutput
	ToSmDevicesInstallAppsOutputWithContext(ctx context.Context) SmDevicesInstallAppsOutput
}

func (*SmDevicesInstallApps) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesInstallApps)(nil)).Elem()
}

func (i *SmDevicesInstallApps) ToSmDevicesInstallAppsOutput() SmDevicesInstallAppsOutput {
	return i.ToSmDevicesInstallAppsOutputWithContext(context.Background())
}

func (i *SmDevicesInstallApps) ToSmDevicesInstallAppsOutputWithContext(ctx context.Context) SmDevicesInstallAppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesInstallAppsOutput)
}

// SmDevicesInstallAppsArrayInput is an input type that accepts SmDevicesInstallAppsArray and SmDevicesInstallAppsArrayOutput values.
// You can construct a concrete instance of `SmDevicesInstallAppsArrayInput` via:
//
//	SmDevicesInstallAppsArray{ SmDevicesInstallAppsArgs{...} }
type SmDevicesInstallAppsArrayInput interface {
	pulumi.Input

	ToSmDevicesInstallAppsArrayOutput() SmDevicesInstallAppsArrayOutput
	ToSmDevicesInstallAppsArrayOutputWithContext(context.Context) SmDevicesInstallAppsArrayOutput
}

type SmDevicesInstallAppsArray []SmDevicesInstallAppsInput

func (SmDevicesInstallAppsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesInstallApps)(nil)).Elem()
}

func (i SmDevicesInstallAppsArray) ToSmDevicesInstallAppsArrayOutput() SmDevicesInstallAppsArrayOutput {
	return i.ToSmDevicesInstallAppsArrayOutputWithContext(context.Background())
}

func (i SmDevicesInstallAppsArray) ToSmDevicesInstallAppsArrayOutputWithContext(ctx context.Context) SmDevicesInstallAppsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesInstallAppsArrayOutput)
}

// SmDevicesInstallAppsMapInput is an input type that accepts SmDevicesInstallAppsMap and SmDevicesInstallAppsMapOutput values.
// You can construct a concrete instance of `SmDevicesInstallAppsMapInput` via:
//
//	SmDevicesInstallAppsMap{ "key": SmDevicesInstallAppsArgs{...} }
type SmDevicesInstallAppsMapInput interface {
	pulumi.Input

	ToSmDevicesInstallAppsMapOutput() SmDevicesInstallAppsMapOutput
	ToSmDevicesInstallAppsMapOutputWithContext(context.Context) SmDevicesInstallAppsMapOutput
}

type SmDevicesInstallAppsMap map[string]SmDevicesInstallAppsInput

func (SmDevicesInstallAppsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesInstallApps)(nil)).Elem()
}

func (i SmDevicesInstallAppsMap) ToSmDevicesInstallAppsMapOutput() SmDevicesInstallAppsMapOutput {
	return i.ToSmDevicesInstallAppsMapOutputWithContext(context.Background())
}

func (i SmDevicesInstallAppsMap) ToSmDevicesInstallAppsMapOutputWithContext(ctx context.Context) SmDevicesInstallAppsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmDevicesInstallAppsMapOutput)
}

type SmDevicesInstallAppsOutput struct{ *pulumi.OutputState }

func (SmDevicesInstallAppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmDevicesInstallApps)(nil)).Elem()
}

func (o SmDevicesInstallAppsOutput) ToSmDevicesInstallAppsOutput() SmDevicesInstallAppsOutput {
	return o
}

func (o SmDevicesInstallAppsOutput) ToSmDevicesInstallAppsOutputWithContext(ctx context.Context) SmDevicesInstallAppsOutput {
	return o
}

// deviceId path parameter. Device ID
func (o SmDevicesInstallAppsOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesInstallApps) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SmDevicesInstallAppsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmDevicesInstallApps) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o SmDevicesInstallAppsOutput) Parameters() SmDevicesInstallAppsParametersOutput {
	return o.ApplyT(func(v *SmDevicesInstallApps) SmDevicesInstallAppsParametersOutput { return v.Parameters }).(SmDevicesInstallAppsParametersOutput)
}

type SmDevicesInstallAppsArrayOutput struct{ *pulumi.OutputState }

func (SmDevicesInstallAppsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmDevicesInstallApps)(nil)).Elem()
}

func (o SmDevicesInstallAppsArrayOutput) ToSmDevicesInstallAppsArrayOutput() SmDevicesInstallAppsArrayOutput {
	return o
}

func (o SmDevicesInstallAppsArrayOutput) ToSmDevicesInstallAppsArrayOutputWithContext(ctx context.Context) SmDevicesInstallAppsArrayOutput {
	return o
}

func (o SmDevicesInstallAppsArrayOutput) Index(i pulumi.IntInput) SmDevicesInstallAppsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmDevicesInstallApps {
		return vs[0].([]*SmDevicesInstallApps)[vs[1].(int)]
	}).(SmDevicesInstallAppsOutput)
}

type SmDevicesInstallAppsMapOutput struct{ *pulumi.OutputState }

func (SmDevicesInstallAppsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmDevicesInstallApps)(nil)).Elem()
}

func (o SmDevicesInstallAppsMapOutput) ToSmDevicesInstallAppsMapOutput() SmDevicesInstallAppsMapOutput {
	return o
}

func (o SmDevicesInstallAppsMapOutput) ToSmDevicesInstallAppsMapOutputWithContext(ctx context.Context) SmDevicesInstallAppsMapOutput {
	return o
}

func (o SmDevicesInstallAppsMapOutput) MapIndex(k pulumi.StringInput) SmDevicesInstallAppsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmDevicesInstallApps {
		return vs[0].(map[string]*SmDevicesInstallApps)[vs[1].(string)]
	}).(SmDevicesInstallAppsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesInstallAppsInput)(nil)).Elem(), &SmDevicesInstallApps{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesInstallAppsArrayInput)(nil)).Elem(), SmDevicesInstallAppsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmDevicesInstallAppsMapInput)(nil)).Elem(), SmDevicesInstallAppsMap{})
	pulumi.RegisterOutputType(SmDevicesInstallAppsOutput{})
	pulumi.RegisterOutputType(SmDevicesInstallAppsArrayOutput{})
	pulumi.RegisterOutputType(SmDevicesInstallAppsMapOutput{})
}
