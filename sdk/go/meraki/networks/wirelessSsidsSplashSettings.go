// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings example "network_id,number"
// ```
type WirelessSsidsSplashSettings struct {
	pulumi.CustomResourceState

	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins pulumi.BoolOutput `pulumi:"allowSimultaneousLogins"`
	// Details associated with billing splash
	Billing WirelessSsidsSplashSettingsBillingOutput `pulumi:"billing"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn pulumi.BoolOutput `pulumi:"blockAllTrafficBeforeSignOn"`
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior pulumi.StringOutput `pulumi:"controllerDisconnectionBehavior"`
	// Details associated with guest sponsored splash
	GuestSponsorship WirelessSsidsSplashSettingsGuestSponsorshipOutput `pulumi:"guestSponsorship"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// number path parameter.
	Number pulumi.StringOutput `pulumi:"number"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectUrl pulumi.StringOutput `pulumi:"redirectUrl"`
	// Self-registration for splash with Meraki authentication.
	SelfRegistration WirelessSsidsSplashSettingsSelfRegistrationOutput `pulumi:"selfRegistration"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment WirelessSsidsSplashSettingsSentryEnrollmentOutput `pulumi:"sentryEnrollment"`
	// The image used in the splash page.
	SplashImage WirelessSsidsSplashSettingsSplashImageOutput `pulumi:"splashImage"`
	// The logo used in the splash page.
	SplashLogo WirelessSsidsSplashSettingsSplashLogoOutput `pulumi:"splashLogo"`
	// The type of splash page for this SSID
	SplashPage pulumi.StringOutput `pulumi:"splashPage"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront WirelessSsidsSplashSettingsSplashPrepaidFrontOutput `pulumi:"splashPrepaidFront"`
	// Splash timeout in minutes.
	SplashTimeout pulumi.IntOutput `pulumi:"splashTimeout"`
	// The custom splash URL of the click-through splash page.
	SplashUrl pulumi.StringOutput `pulumi:"splashUrl"`
	// SSID number
	SsidNumber pulumi.IntOutput `pulumi:"ssidNumber"`
	// The id of the selected splash theme.
	ThemeId pulumi.StringOutput `pulumi:"themeId"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectUrl pulumi.BoolOutput `pulumi:"useRedirectUrl"`
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashUrl pulumi.BoolOutput `pulumi:"useSplashUrl"`
	// The welcome message for the users on the splash page.
	WelcomeMessage pulumi.StringOutput `pulumi:"welcomeMessage"`
}

// NewWirelessSsidsSplashSettings registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsidsSplashSettings(ctx *pulumi.Context,
	name string, args *WirelessSsidsSplashSettingsArgs, opts ...pulumi.ResourceOption) (*WirelessSsidsSplashSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsidsSplashSettings
	err := ctx.RegisterResource("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsidsSplashSettings gets an existing WirelessSsidsSplashSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsidsSplashSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsSplashSettingsState, opts ...pulumi.ResourceOption) (*WirelessSsidsSplashSettings, error) {
	var resource WirelessSsidsSplashSettings
	err := ctx.ReadResource("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsidsSplashSettings resources.
type wirelessSsidsSplashSettingsState struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins *bool `pulumi:"allowSimultaneousLogins"`
	// Details associated with billing splash
	Billing *WirelessSsidsSplashSettingsBilling `pulumi:"billing"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn *bool `pulumi:"blockAllTrafficBeforeSignOn"`
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior *string `pulumi:"controllerDisconnectionBehavior"`
	// Details associated with guest sponsored splash
	GuestSponsorship *WirelessSsidsSplashSettingsGuestSponsorship `pulumi:"guestSponsorship"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// number path parameter.
	Number *string `pulumi:"number"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Self-registration for splash with Meraki authentication.
	SelfRegistration *WirelessSsidsSplashSettingsSelfRegistration `pulumi:"selfRegistration"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment *WirelessSsidsSplashSettingsSentryEnrollment `pulumi:"sentryEnrollment"`
	// The image used in the splash page.
	SplashImage *WirelessSsidsSplashSettingsSplashImage `pulumi:"splashImage"`
	// The logo used in the splash page.
	SplashLogo *WirelessSsidsSplashSettingsSplashLogo `pulumi:"splashLogo"`
	// The type of splash page for this SSID
	SplashPage *string `pulumi:"splashPage"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront *WirelessSsidsSplashSettingsSplashPrepaidFront `pulumi:"splashPrepaidFront"`
	// Splash timeout in minutes.
	SplashTimeout *int `pulumi:"splashTimeout"`
	// The custom splash URL of the click-through splash page.
	SplashUrl *string `pulumi:"splashUrl"`
	// SSID number
	SsidNumber *int `pulumi:"ssidNumber"`
	// The id of the selected splash theme.
	ThemeId *string `pulumi:"themeId"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectUrl *bool `pulumi:"useRedirectUrl"`
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashUrl *bool `pulumi:"useSplashUrl"`
	// The welcome message for the users on the splash page.
	WelcomeMessage *string `pulumi:"welcomeMessage"`
}

type WirelessSsidsSplashSettingsState struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins pulumi.BoolPtrInput
	// Details associated with billing splash
	Billing WirelessSsidsSplashSettingsBillingPtrInput
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn pulumi.BoolPtrInput
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior pulumi.StringPtrInput
	// Details associated with guest sponsored splash
	GuestSponsorship WirelessSsidsSplashSettingsGuestSponsorshipPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// number path parameter.
	Number pulumi.StringPtrInput
	// The custom redirect URL where the users will go after the splash page.
	RedirectUrl pulumi.StringPtrInput
	// Self-registration for splash with Meraki authentication.
	SelfRegistration WirelessSsidsSplashSettingsSelfRegistrationPtrInput
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment WirelessSsidsSplashSettingsSentryEnrollmentPtrInput
	// The image used in the splash page.
	SplashImage WirelessSsidsSplashSettingsSplashImagePtrInput
	// The logo used in the splash page.
	SplashLogo WirelessSsidsSplashSettingsSplashLogoPtrInput
	// The type of splash page for this SSID
	SplashPage pulumi.StringPtrInput
	// The prepaid front image used in the splash page.
	SplashPrepaidFront WirelessSsidsSplashSettingsSplashPrepaidFrontPtrInput
	// Splash timeout in minutes.
	SplashTimeout pulumi.IntPtrInput
	// The custom splash URL of the click-through splash page.
	SplashUrl pulumi.StringPtrInput
	// SSID number
	SsidNumber pulumi.IntPtrInput
	// The id of the selected splash theme.
	ThemeId pulumi.StringPtrInput
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectUrl pulumi.BoolPtrInput
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashUrl pulumi.BoolPtrInput
	// The welcome message for the users on the splash page.
	WelcomeMessage pulumi.StringPtrInput
}

func (WirelessSsidsSplashSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsSplashSettingsState)(nil)).Elem()
}

type wirelessSsidsSplashSettingsArgs struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins *bool `pulumi:"allowSimultaneousLogins"`
	// Details associated with billing splash
	Billing *WirelessSsidsSplashSettingsBilling `pulumi:"billing"`
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn *bool `pulumi:"blockAllTrafficBeforeSignOn"`
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior *string `pulumi:"controllerDisconnectionBehavior"`
	// Details associated with guest sponsored splash
	GuestSponsorship *WirelessSsidsSplashSettingsGuestSponsorship `pulumi:"guestSponsorship"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// number path parameter.
	Number string `pulumi:"number"`
	// The custom redirect URL where the users will go after the splash page.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment *WirelessSsidsSplashSettingsSentryEnrollment `pulumi:"sentryEnrollment"`
	// The image used in the splash page.
	SplashImage *WirelessSsidsSplashSettingsSplashImage `pulumi:"splashImage"`
	// The logo used in the splash page.
	SplashLogo *WirelessSsidsSplashSettingsSplashLogo `pulumi:"splashLogo"`
	// The prepaid front image used in the splash page.
	SplashPrepaidFront *WirelessSsidsSplashSettingsSplashPrepaidFront `pulumi:"splashPrepaidFront"`
	// Splash timeout in minutes.
	SplashTimeout *int `pulumi:"splashTimeout"`
	// The custom splash URL of the click-through splash page.
	SplashUrl *string `pulumi:"splashUrl"`
	// The id of the selected splash theme.
	ThemeId *string `pulumi:"themeId"`
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectUrl *bool `pulumi:"useRedirectUrl"`
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashUrl *bool `pulumi:"useSplashUrl"`
	// The welcome message for the users on the splash page.
	WelcomeMessage *string `pulumi:"welcomeMessage"`
}

// The set of arguments for constructing a WirelessSsidsSplashSettings resource.
type WirelessSsidsSplashSettingsArgs struct {
	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins pulumi.BoolPtrInput
	// Details associated with billing splash
	Billing WirelessSsidsSplashSettingsBillingPtrInput
	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn pulumi.BoolPtrInput
	// How login attempts should be handled when the controller is unreachable.
	ControllerDisconnectionBehavior pulumi.StringPtrInput
	// Details associated with guest sponsored splash
	GuestSponsorship WirelessSsidsSplashSettingsGuestSponsorshipPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// number path parameter.
	Number pulumi.StringInput
	// The custom redirect URL where the users will go after the splash page.
	RedirectUrl pulumi.StringPtrInput
	// Systems Manager sentry enrollment splash settings.
	SentryEnrollment WirelessSsidsSplashSettingsSentryEnrollmentPtrInput
	// The image used in the splash page.
	SplashImage WirelessSsidsSplashSettingsSplashImagePtrInput
	// The logo used in the splash page.
	SplashLogo WirelessSsidsSplashSettingsSplashLogoPtrInput
	// The prepaid front image used in the splash page.
	SplashPrepaidFront WirelessSsidsSplashSettingsSplashPrepaidFrontPtrInput
	// Splash timeout in minutes.
	SplashTimeout pulumi.IntPtrInput
	// The custom splash URL of the click-through splash page.
	SplashUrl pulumi.StringPtrInput
	// The id of the selected splash theme.
	ThemeId pulumi.StringPtrInput
	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
	UseRedirectUrl pulumi.BoolPtrInput
	// Boolean indicating whether the users will be redirected to the custom splash url
	UseSplashUrl pulumi.BoolPtrInput
	// The welcome message for the users on the splash page.
	WelcomeMessage pulumi.StringPtrInput
}

func (WirelessSsidsSplashSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsSplashSettingsArgs)(nil)).Elem()
}

type WirelessSsidsSplashSettingsInput interface {
	pulumi.Input

	ToWirelessSsidsSplashSettingsOutput() WirelessSsidsSplashSettingsOutput
	ToWirelessSsidsSplashSettingsOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsOutput
}

func (*WirelessSsidsSplashSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsSplashSettings)(nil)).Elem()
}

func (i *WirelessSsidsSplashSettings) ToWirelessSsidsSplashSettingsOutput() WirelessSsidsSplashSettingsOutput {
	return i.ToWirelessSsidsSplashSettingsOutputWithContext(context.Background())
}

func (i *WirelessSsidsSplashSettings) ToWirelessSsidsSplashSettingsOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSplashSettingsOutput)
}

// WirelessSsidsSplashSettingsArrayInput is an input type that accepts WirelessSsidsSplashSettingsArray and WirelessSsidsSplashSettingsArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsSplashSettingsArrayInput` via:
//
//	WirelessSsidsSplashSettingsArray{ WirelessSsidsSplashSettingsArgs{...} }
type WirelessSsidsSplashSettingsArrayInput interface {
	pulumi.Input

	ToWirelessSsidsSplashSettingsArrayOutput() WirelessSsidsSplashSettingsArrayOutput
	ToWirelessSsidsSplashSettingsArrayOutputWithContext(context.Context) WirelessSsidsSplashSettingsArrayOutput
}

type WirelessSsidsSplashSettingsArray []WirelessSsidsSplashSettingsInput

func (WirelessSsidsSplashSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsSplashSettings)(nil)).Elem()
}

func (i WirelessSsidsSplashSettingsArray) ToWirelessSsidsSplashSettingsArrayOutput() WirelessSsidsSplashSettingsArrayOutput {
	return i.ToWirelessSsidsSplashSettingsArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsSplashSettingsArray) ToWirelessSsidsSplashSettingsArrayOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSplashSettingsArrayOutput)
}

// WirelessSsidsSplashSettingsMapInput is an input type that accepts WirelessSsidsSplashSettingsMap and WirelessSsidsSplashSettingsMapOutput values.
// You can construct a concrete instance of `WirelessSsidsSplashSettingsMapInput` via:
//
//	WirelessSsidsSplashSettingsMap{ "key": WirelessSsidsSplashSettingsArgs{...} }
type WirelessSsidsSplashSettingsMapInput interface {
	pulumi.Input

	ToWirelessSsidsSplashSettingsMapOutput() WirelessSsidsSplashSettingsMapOutput
	ToWirelessSsidsSplashSettingsMapOutputWithContext(context.Context) WirelessSsidsSplashSettingsMapOutput
}

type WirelessSsidsSplashSettingsMap map[string]WirelessSsidsSplashSettingsInput

func (WirelessSsidsSplashSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsSplashSettings)(nil)).Elem()
}

func (i WirelessSsidsSplashSettingsMap) ToWirelessSsidsSplashSettingsMapOutput() WirelessSsidsSplashSettingsMapOutput {
	return i.ToWirelessSsidsSplashSettingsMapOutputWithContext(context.Background())
}

func (i WirelessSsidsSplashSettingsMap) ToWirelessSsidsSplashSettingsMapOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSplashSettingsMapOutput)
}

type WirelessSsidsSplashSettingsOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSplashSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsSplashSettings)(nil)).Elem()
}

func (o WirelessSsidsSplashSettingsOutput) ToWirelessSsidsSplashSettingsOutput() WirelessSsidsSplashSettingsOutput {
	return o
}

func (o WirelessSsidsSplashSettingsOutput) ToWirelessSsidsSplashSettingsOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsOutput {
	return o
}

// Whether or not to allow simultaneous logins from different devices.
func (o WirelessSsidsSplashSettingsOutput) AllowSimultaneousLogins() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.BoolOutput { return v.AllowSimultaneousLogins }).(pulumi.BoolOutput)
}

// Details associated with billing splash
func (o WirelessSsidsSplashSettingsOutput) Billing() WirelessSsidsSplashSettingsBillingOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsBillingOutput { return v.Billing }).(WirelessSsidsSplashSettingsBillingOutput)
}

// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
func (o WirelessSsidsSplashSettingsOutput) BlockAllTrafficBeforeSignOn() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.BoolOutput { return v.BlockAllTrafficBeforeSignOn }).(pulumi.BoolOutput)
}

// How login attempts should be handled when the controller is unreachable.
func (o WirelessSsidsSplashSettingsOutput) ControllerDisconnectionBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.ControllerDisconnectionBehavior }).(pulumi.StringOutput)
}

// Details associated with guest sponsored splash
func (o WirelessSsidsSplashSettingsOutput) GuestSponsorship() WirelessSsidsSplashSettingsGuestSponsorshipOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsGuestSponsorshipOutput {
		return v.GuestSponsorship
	}).(WirelessSsidsSplashSettingsGuestSponsorshipOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsSplashSettingsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// number path parameter.
func (o WirelessSsidsSplashSettingsOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.Number }).(pulumi.StringOutput)
}

// The custom redirect URL where the users will go after the splash page.
func (o WirelessSsidsSplashSettingsOutput) RedirectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.RedirectUrl }).(pulumi.StringOutput)
}

// Self-registration for splash with Meraki authentication.
func (o WirelessSsidsSplashSettingsOutput) SelfRegistration() WirelessSsidsSplashSettingsSelfRegistrationOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsSelfRegistrationOutput {
		return v.SelfRegistration
	}).(WirelessSsidsSplashSettingsSelfRegistrationOutput)
}

// Systems Manager sentry enrollment splash settings.
func (o WirelessSsidsSplashSettingsOutput) SentryEnrollment() WirelessSsidsSplashSettingsSentryEnrollmentOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsSentryEnrollmentOutput {
		return v.SentryEnrollment
	}).(WirelessSsidsSplashSettingsSentryEnrollmentOutput)
}

// The image used in the splash page.
func (o WirelessSsidsSplashSettingsOutput) SplashImage() WirelessSsidsSplashSettingsSplashImageOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsSplashImageOutput {
		return v.SplashImage
	}).(WirelessSsidsSplashSettingsSplashImageOutput)
}

// The logo used in the splash page.
func (o WirelessSsidsSplashSettingsOutput) SplashLogo() WirelessSsidsSplashSettingsSplashLogoOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsSplashLogoOutput { return v.SplashLogo }).(WirelessSsidsSplashSettingsSplashLogoOutput)
}

// The type of splash page for this SSID
func (o WirelessSsidsSplashSettingsOutput) SplashPage() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.SplashPage }).(pulumi.StringOutput)
}

// The prepaid front image used in the splash page.
func (o WirelessSsidsSplashSettingsOutput) SplashPrepaidFront() WirelessSsidsSplashSettingsSplashPrepaidFrontOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) WirelessSsidsSplashSettingsSplashPrepaidFrontOutput {
		return v.SplashPrepaidFront
	}).(WirelessSsidsSplashSettingsSplashPrepaidFrontOutput)
}

// Splash timeout in minutes.
func (o WirelessSsidsSplashSettingsOutput) SplashTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.IntOutput { return v.SplashTimeout }).(pulumi.IntOutput)
}

// The custom splash URL of the click-through splash page.
func (o WirelessSsidsSplashSettingsOutput) SplashUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.SplashUrl }).(pulumi.StringOutput)
}

// SSID number
func (o WirelessSsidsSplashSettingsOutput) SsidNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.IntOutput { return v.SsidNumber }).(pulumi.IntOutput)
}

// The id of the selected splash theme.
func (o WirelessSsidsSplashSettingsOutput) ThemeId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.ThemeId }).(pulumi.StringOutput)
}

// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
func (o WirelessSsidsSplashSettingsOutput) UseRedirectUrl() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.BoolOutput { return v.UseRedirectUrl }).(pulumi.BoolOutput)
}

// Boolean indicating whether the users will be redirected to the custom splash url
func (o WirelessSsidsSplashSettingsOutput) UseSplashUrl() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.BoolOutput { return v.UseSplashUrl }).(pulumi.BoolOutput)
}

// The welcome message for the users on the splash page.
func (o WirelessSsidsSplashSettingsOutput) WelcomeMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSplashSettings) pulumi.StringOutput { return v.WelcomeMessage }).(pulumi.StringOutput)
}

type WirelessSsidsSplashSettingsArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSplashSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsSplashSettings)(nil)).Elem()
}

func (o WirelessSsidsSplashSettingsArrayOutput) ToWirelessSsidsSplashSettingsArrayOutput() WirelessSsidsSplashSettingsArrayOutput {
	return o
}

func (o WirelessSsidsSplashSettingsArrayOutput) ToWirelessSsidsSplashSettingsArrayOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsArrayOutput {
	return o
}

func (o WirelessSsidsSplashSettingsArrayOutput) Index(i pulumi.IntInput) WirelessSsidsSplashSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsidsSplashSettings {
		return vs[0].([]*WirelessSsidsSplashSettings)[vs[1].(int)]
	}).(WirelessSsidsSplashSettingsOutput)
}

type WirelessSsidsSplashSettingsMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSplashSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsSplashSettings)(nil)).Elem()
}

func (o WirelessSsidsSplashSettingsMapOutput) ToWirelessSsidsSplashSettingsMapOutput() WirelessSsidsSplashSettingsMapOutput {
	return o
}

func (o WirelessSsidsSplashSettingsMapOutput) ToWirelessSsidsSplashSettingsMapOutputWithContext(ctx context.Context) WirelessSsidsSplashSettingsMapOutput {
	return o
}

func (o WirelessSsidsSplashSettingsMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsSplashSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsidsSplashSettings {
		return vs[0].(map[string]*WirelessSsidsSplashSettings)[vs[1].(string)]
	}).(WirelessSsidsSplashSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSplashSettingsInput)(nil)).Elem(), &WirelessSsidsSplashSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSplashSettingsArrayInput)(nil)).Elem(), WirelessSsidsSplashSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSplashSettingsMapInput)(nil)).Elem(), WirelessSsidsSplashSettingsMap{})
	pulumi.RegisterOutputType(WirelessSsidsSplashSettingsOutput{})
	pulumi.RegisterOutputType(WirelessSsidsSplashSettingsArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsSplashSettingsMapOutput{})
}
