// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewSwitchStacks(ctx, "example", &networks.SwitchStacksArgs{
//				Name:      pulumi.String("A cool stack"),
//				NetworkId: pulumi.String("string"),
//				Serials: pulumi.StringArray{
//					pulumi.String("QBZY-XWVU-TSRQ"),
//					pulumi.String("QBAB-CDEF-GHIJ"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksSwitchStacksExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/switchStacks:SwitchStacks example "network_id,switch_stack_id"
// ```
type SwitchStacks struct {
	pulumi.CustomResourceState

	// Name of the Switch stack
	Name pulumi.StringOutput `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Serials of the switches in the switch stack
	Serials pulumi.StringArrayOutput `pulumi:"serials"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrOutput `pulumi:"switchStackId"`
}

// NewSwitchStacks registers a new resource with the given unique name, arguments, and options.
func NewSwitchStacks(ctx *pulumi.Context,
	name string, args *SwitchStacksArgs, opts ...pulumi.ResourceOption) (*SwitchStacks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchStacks
	err := ctx.RegisterResource("meraki:networks/switchStacks:SwitchStacks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchStacks gets an existing SwitchStacks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchStacks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchStacksState, opts ...pulumi.ResourceOption) (*SwitchStacks, error) {
	var resource SwitchStacks
	err := ctx.ReadResource("meraki:networks/switchStacks:SwitchStacks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchStacks resources.
type switchStacksState struct {
	// Name of the Switch stack
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Serials of the switches in the switch stack
	Serials []string `pulumi:"serials"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId *string `pulumi:"switchStackId"`
}

type SwitchStacksState struct {
	// Name of the Switch stack
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Serials of the switches in the switch stack
	Serials pulumi.StringArrayInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrInput
}

func (SwitchStacksState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksState)(nil)).Elem()
}

type switchStacksArgs struct {
	// Name of the Switch stack
	Name *string `pulumi:"name"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Serials of the switches in the switch stack
	Serials []string `pulumi:"serials"`
	// switchStackId path parameter. Switch stack ID
	SwitchStackId *string `pulumi:"switchStackId"`
}

// The set of arguments for constructing a SwitchStacks resource.
type SwitchStacksArgs struct {
	// Name of the Switch stack
	Name pulumi.StringPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Serials of the switches in the switch stack
	Serials pulumi.StringArrayInput
	// switchStackId path parameter. Switch stack ID
	SwitchStackId pulumi.StringPtrInput
}

func (SwitchStacksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchStacksArgs)(nil)).Elem()
}

type SwitchStacksInput interface {
	pulumi.Input

	ToSwitchStacksOutput() SwitchStacksOutput
	ToSwitchStacksOutputWithContext(ctx context.Context) SwitchStacksOutput
}

func (*SwitchStacks) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacks)(nil)).Elem()
}

func (i *SwitchStacks) ToSwitchStacksOutput() SwitchStacksOutput {
	return i.ToSwitchStacksOutputWithContext(context.Background())
}

func (i *SwitchStacks) ToSwitchStacksOutputWithContext(ctx context.Context) SwitchStacksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksOutput)
}

// SwitchStacksArrayInput is an input type that accepts SwitchStacksArray and SwitchStacksArrayOutput values.
// You can construct a concrete instance of `SwitchStacksArrayInput` via:
//
//	SwitchStacksArray{ SwitchStacksArgs{...} }
type SwitchStacksArrayInput interface {
	pulumi.Input

	ToSwitchStacksArrayOutput() SwitchStacksArrayOutput
	ToSwitchStacksArrayOutputWithContext(context.Context) SwitchStacksArrayOutput
}

type SwitchStacksArray []SwitchStacksInput

func (SwitchStacksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacks)(nil)).Elem()
}

func (i SwitchStacksArray) ToSwitchStacksArrayOutput() SwitchStacksArrayOutput {
	return i.ToSwitchStacksArrayOutputWithContext(context.Background())
}

func (i SwitchStacksArray) ToSwitchStacksArrayOutputWithContext(ctx context.Context) SwitchStacksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksArrayOutput)
}

// SwitchStacksMapInput is an input type that accepts SwitchStacksMap and SwitchStacksMapOutput values.
// You can construct a concrete instance of `SwitchStacksMapInput` via:
//
//	SwitchStacksMap{ "key": SwitchStacksArgs{...} }
type SwitchStacksMapInput interface {
	pulumi.Input

	ToSwitchStacksMapOutput() SwitchStacksMapOutput
	ToSwitchStacksMapOutputWithContext(context.Context) SwitchStacksMapOutput
}

type SwitchStacksMap map[string]SwitchStacksInput

func (SwitchStacksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacks)(nil)).Elem()
}

func (i SwitchStacksMap) ToSwitchStacksMapOutput() SwitchStacksMapOutput {
	return i.ToSwitchStacksMapOutputWithContext(context.Background())
}

func (i SwitchStacksMap) ToSwitchStacksMapOutputWithContext(ctx context.Context) SwitchStacksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchStacksMapOutput)
}

type SwitchStacksOutput struct{ *pulumi.OutputState }

func (SwitchStacksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchStacks)(nil)).Elem()
}

func (o SwitchStacksOutput) ToSwitchStacksOutput() SwitchStacksOutput {
	return o
}

func (o SwitchStacksOutput) ToSwitchStacksOutputWithContext(ctx context.Context) SwitchStacksOutput {
	return o
}

// Name of the Switch stack
func (o SwitchStacksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// networkId path parameter. Network ID
func (o SwitchStacksOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchStacks) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Serials of the switches in the switch stack
func (o SwitchStacksOutput) Serials() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchStacks) pulumi.StringArrayOutput { return v.Serials }).(pulumi.StringArrayOutput)
}

// switchStackId path parameter. Switch stack ID
func (o SwitchStacksOutput) SwitchStackId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchStacks) pulumi.StringPtrOutput { return v.SwitchStackId }).(pulumi.StringPtrOutput)
}

type SwitchStacksArrayOutput struct{ *pulumi.OutputState }

func (SwitchStacksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchStacks)(nil)).Elem()
}

func (o SwitchStacksArrayOutput) ToSwitchStacksArrayOutput() SwitchStacksArrayOutput {
	return o
}

func (o SwitchStacksArrayOutput) ToSwitchStacksArrayOutputWithContext(ctx context.Context) SwitchStacksArrayOutput {
	return o
}

func (o SwitchStacksArrayOutput) Index(i pulumi.IntInput) SwitchStacksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchStacks {
		return vs[0].([]*SwitchStacks)[vs[1].(int)]
	}).(SwitchStacksOutput)
}

type SwitchStacksMapOutput struct{ *pulumi.OutputState }

func (SwitchStacksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchStacks)(nil)).Elem()
}

func (o SwitchStacksMapOutput) ToSwitchStacksMapOutput() SwitchStacksMapOutput {
	return o
}

func (o SwitchStacksMapOutput) ToSwitchStacksMapOutputWithContext(ctx context.Context) SwitchStacksMapOutput {
	return o
}

func (o SwitchStacksMapOutput) MapIndex(k pulumi.StringInput) SwitchStacksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchStacks {
		return vs[0].(map[string]*SwitchStacks)[vs[1].(string)]
	}).(SwitchStacksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksInput)(nil)).Elem(), &SwitchStacks{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksArrayInput)(nil)).Elem(), SwitchStacksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchStacksMapInput)(nil)).Elem(), SwitchStacksMap{})
	pulumi.RegisterOutputType(SwitchStacksOutput{})
	pulumi.RegisterOutputType(SwitchStacksArrayOutput{})
	pulumi.RegisterOutputType(SwitchStacksMapOutput{})
}
