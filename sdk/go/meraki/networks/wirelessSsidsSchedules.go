// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewWirelessSsidsSchedules(ctx, "example", &networks.WirelessSsidsSchedulesArgs{
//				Enabled:   pulumi.Bool(true),
//				NetworkId: pulumi.String("string"),
//				Number:    pulumi.String("string"),
//				Ranges: networks.WirelessSsidsSchedulesRangeArray{
//					&networks.WirelessSsidsSchedulesRangeArgs{
//						End_day:    "Tuesday",
//						End_time:   "05:00",
//						Start_day:  "Tuesday",
//						Start_time: "01:00",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksWirelessSsidsSchedulesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessSsidsSchedules:WirelessSsidsSchedules example "network_id,number"
// ```
type WirelessSsidsSchedules struct {
	pulumi.CustomResourceState

	// If true, the SSID outage schedule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// number path parameter.
	Number pulumi.StringOutput `pulumi:"number"`
	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges WirelessSsidsSchedulesRangeArrayOutput `pulumi:"ranges"`
	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds WirelessSsidsSchedulesRangesInSecondArrayOutput `pulumi:"rangesInSeconds"`
}

// NewWirelessSsidsSchedules registers a new resource with the given unique name, arguments, and options.
func NewWirelessSsidsSchedules(ctx *pulumi.Context,
	name string, args *WirelessSsidsSchedulesArgs, opts ...pulumi.ResourceOption) (*WirelessSsidsSchedules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessSsidsSchedules
	err := ctx.RegisterResource("meraki:networks/wirelessSsidsSchedules:WirelessSsidsSchedules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessSsidsSchedules gets an existing WirelessSsidsSchedules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessSsidsSchedules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessSsidsSchedulesState, opts ...pulumi.ResourceOption) (*WirelessSsidsSchedules, error) {
	var resource WirelessSsidsSchedules
	err := ctx.ReadResource("meraki:networks/wirelessSsidsSchedules:WirelessSsidsSchedules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessSsidsSchedules resources.
type wirelessSsidsSchedulesState struct {
	// If true, the SSID outage schedule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// number path parameter.
	Number *string `pulumi:"number"`
	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges []WirelessSsidsSchedulesRange `pulumi:"ranges"`
	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds []WirelessSsidsSchedulesRangesInSecond `pulumi:"rangesInSeconds"`
}

type WirelessSsidsSchedulesState struct {
	// If true, the SSID outage schedule is enabled.
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// number path parameter.
	Number pulumi.StringPtrInput
	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges WirelessSsidsSchedulesRangeArrayInput
	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds WirelessSsidsSchedulesRangesInSecondArrayInput
}

func (WirelessSsidsSchedulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsSchedulesState)(nil)).Elem()
}

type wirelessSsidsSchedulesArgs struct {
	// If true, the SSID outage schedule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// number path parameter.
	Number string `pulumi:"number"`
	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges []WirelessSsidsSchedulesRange `pulumi:"ranges"`
	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds []WirelessSsidsSchedulesRangesInSecond `pulumi:"rangesInSeconds"`
}

// The set of arguments for constructing a WirelessSsidsSchedules resource.
type WirelessSsidsSchedulesArgs struct {
	// If true, the SSID outage schedule is enabled.
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// number path parameter.
	Number pulumi.StringInput
	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges WirelessSsidsSchedulesRangeArrayInput
	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds WirelessSsidsSchedulesRangesInSecondArrayInput
}

func (WirelessSsidsSchedulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessSsidsSchedulesArgs)(nil)).Elem()
}

type WirelessSsidsSchedulesInput interface {
	pulumi.Input

	ToWirelessSsidsSchedulesOutput() WirelessSsidsSchedulesOutput
	ToWirelessSsidsSchedulesOutputWithContext(ctx context.Context) WirelessSsidsSchedulesOutput
}

func (*WirelessSsidsSchedules) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsSchedules)(nil)).Elem()
}

func (i *WirelessSsidsSchedules) ToWirelessSsidsSchedulesOutput() WirelessSsidsSchedulesOutput {
	return i.ToWirelessSsidsSchedulesOutputWithContext(context.Background())
}

func (i *WirelessSsidsSchedules) ToWirelessSsidsSchedulesOutputWithContext(ctx context.Context) WirelessSsidsSchedulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSchedulesOutput)
}

// WirelessSsidsSchedulesArrayInput is an input type that accepts WirelessSsidsSchedulesArray and WirelessSsidsSchedulesArrayOutput values.
// You can construct a concrete instance of `WirelessSsidsSchedulesArrayInput` via:
//
//	WirelessSsidsSchedulesArray{ WirelessSsidsSchedulesArgs{...} }
type WirelessSsidsSchedulesArrayInput interface {
	pulumi.Input

	ToWirelessSsidsSchedulesArrayOutput() WirelessSsidsSchedulesArrayOutput
	ToWirelessSsidsSchedulesArrayOutputWithContext(context.Context) WirelessSsidsSchedulesArrayOutput
}

type WirelessSsidsSchedulesArray []WirelessSsidsSchedulesInput

func (WirelessSsidsSchedulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsSchedules)(nil)).Elem()
}

func (i WirelessSsidsSchedulesArray) ToWirelessSsidsSchedulesArrayOutput() WirelessSsidsSchedulesArrayOutput {
	return i.ToWirelessSsidsSchedulesArrayOutputWithContext(context.Background())
}

func (i WirelessSsidsSchedulesArray) ToWirelessSsidsSchedulesArrayOutputWithContext(ctx context.Context) WirelessSsidsSchedulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSchedulesArrayOutput)
}

// WirelessSsidsSchedulesMapInput is an input type that accepts WirelessSsidsSchedulesMap and WirelessSsidsSchedulesMapOutput values.
// You can construct a concrete instance of `WirelessSsidsSchedulesMapInput` via:
//
//	WirelessSsidsSchedulesMap{ "key": WirelessSsidsSchedulesArgs{...} }
type WirelessSsidsSchedulesMapInput interface {
	pulumi.Input

	ToWirelessSsidsSchedulesMapOutput() WirelessSsidsSchedulesMapOutput
	ToWirelessSsidsSchedulesMapOutputWithContext(context.Context) WirelessSsidsSchedulesMapOutput
}

type WirelessSsidsSchedulesMap map[string]WirelessSsidsSchedulesInput

func (WirelessSsidsSchedulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsSchedules)(nil)).Elem()
}

func (i WirelessSsidsSchedulesMap) ToWirelessSsidsSchedulesMapOutput() WirelessSsidsSchedulesMapOutput {
	return i.ToWirelessSsidsSchedulesMapOutputWithContext(context.Background())
}

func (i WirelessSsidsSchedulesMap) ToWirelessSsidsSchedulesMapOutputWithContext(ctx context.Context) WirelessSsidsSchedulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessSsidsSchedulesMapOutput)
}

type WirelessSsidsSchedulesOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSchedulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessSsidsSchedules)(nil)).Elem()
}

func (o WirelessSsidsSchedulesOutput) ToWirelessSsidsSchedulesOutput() WirelessSsidsSchedulesOutput {
	return o
}

func (o WirelessSsidsSchedulesOutput) ToWirelessSsidsSchedulesOutputWithContext(ctx context.Context) WirelessSsidsSchedulesOutput {
	return o
}

// If true, the SSID outage schedule is enabled.
func (o WirelessSsidsSchedulesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessSsidsSchedules) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o WirelessSsidsSchedulesOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSchedules) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// number path parameter.
func (o WirelessSsidsSchedulesOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessSsidsSchedules) pulumi.StringOutput { return v.Number }).(pulumi.StringOutput)
}

// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
func (o WirelessSsidsSchedulesOutput) Ranges() WirelessSsidsSchedulesRangeArrayOutput {
	return o.ApplyT(func(v *WirelessSsidsSchedules) WirelessSsidsSchedulesRangeArrayOutput { return v.Ranges }).(WirelessSsidsSchedulesRangeArrayOutput)
}

// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
func (o WirelessSsidsSchedulesOutput) RangesInSeconds() WirelessSsidsSchedulesRangesInSecondArrayOutput {
	return o.ApplyT(func(v *WirelessSsidsSchedules) WirelessSsidsSchedulesRangesInSecondArrayOutput {
		return v.RangesInSeconds
	}).(WirelessSsidsSchedulesRangesInSecondArrayOutput)
}

type WirelessSsidsSchedulesArrayOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSchedulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessSsidsSchedules)(nil)).Elem()
}

func (o WirelessSsidsSchedulesArrayOutput) ToWirelessSsidsSchedulesArrayOutput() WirelessSsidsSchedulesArrayOutput {
	return o
}

func (o WirelessSsidsSchedulesArrayOutput) ToWirelessSsidsSchedulesArrayOutputWithContext(ctx context.Context) WirelessSsidsSchedulesArrayOutput {
	return o
}

func (o WirelessSsidsSchedulesArrayOutput) Index(i pulumi.IntInput) WirelessSsidsSchedulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessSsidsSchedules {
		return vs[0].([]*WirelessSsidsSchedules)[vs[1].(int)]
	}).(WirelessSsidsSchedulesOutput)
}

type WirelessSsidsSchedulesMapOutput struct{ *pulumi.OutputState }

func (WirelessSsidsSchedulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessSsidsSchedules)(nil)).Elem()
}

func (o WirelessSsidsSchedulesMapOutput) ToWirelessSsidsSchedulesMapOutput() WirelessSsidsSchedulesMapOutput {
	return o
}

func (o WirelessSsidsSchedulesMapOutput) ToWirelessSsidsSchedulesMapOutputWithContext(ctx context.Context) WirelessSsidsSchedulesMapOutput {
	return o
}

func (o WirelessSsidsSchedulesMapOutput) MapIndex(k pulumi.StringInput) WirelessSsidsSchedulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessSsidsSchedules {
		return vs[0].(map[string]*WirelessSsidsSchedules)[vs[1].(string)]
	}).(WirelessSsidsSchedulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSchedulesInput)(nil)).Elem(), &WirelessSsidsSchedules{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSchedulesArrayInput)(nil)).Elem(), WirelessSsidsSchedulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessSsidsSchedulesMapInput)(nil)).Elem(), WirelessSsidsSchedulesMap{})
	pulumi.RegisterOutputType(WirelessSsidsSchedulesOutput{})
	pulumi.RegisterOutputType(WirelessSsidsSchedulesArrayOutput{})
	pulumi.RegisterOutputType(WirelessSsidsSchedulesMapOutput{})
}
