// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceWarmSpare(ctx, "example", &networks.ApplianceWarmSpareArgs{
//				Enabled:     pulumi.Bool(true),
//				NetworkId:   pulumi.String("string"),
//				SpareSerial: pulumi.String("Q234-ABCD-5678"),
//				UplinkMode:  pulumi.String("virtual"),
//				VirtualIp1:  pulumi.String("1.2.3.4"),
//				VirtualIp2:  pulumi.String("1.2.3.4"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceWarmSpareExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/applianceWarmSpare:ApplianceWarmSpare example "network_id"
// ```
type ApplianceWarmSpare struct {
	pulumi.CustomResourceState

	// Enable warm spare
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId     pulumi.StringOutput `pulumi:"networkId"`
	PrimarySerial pulumi.StringOutput `pulumi:"primarySerial"`
	// Serial number of the warm spare appliance
	SpareSerial pulumi.StringOutput `pulumi:"spareSerial"`
	// Uplink mode, either virtual or public
	UplinkMode pulumi.StringOutput `pulumi:"uplinkMode"`
	// The WAN 1 shared IP
	VirtualIp1 pulumi.StringOutput `pulumi:"virtualIp1"`
	// The WAN 2 shared IP
	VirtualIp2 pulumi.StringOutput          `pulumi:"virtualIp2"`
	Wan1       ApplianceWarmSpareWan1Output `pulumi:"wan1"`
	Wan2       ApplianceWarmSpareWan2Output `pulumi:"wan2"`
}

// NewApplianceWarmSpare registers a new resource with the given unique name, arguments, and options.
func NewApplianceWarmSpare(ctx *pulumi.Context,
	name string, args *ApplianceWarmSpareArgs, opts ...pulumi.ResourceOption) (*ApplianceWarmSpare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceWarmSpare
	err := ctx.RegisterResource("meraki:networks/applianceWarmSpare:ApplianceWarmSpare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceWarmSpare gets an existing ApplianceWarmSpare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceWarmSpare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceWarmSpareState, opts ...pulumi.ResourceOption) (*ApplianceWarmSpare, error) {
	var resource ApplianceWarmSpare
	err := ctx.ReadResource("meraki:networks/applianceWarmSpare:ApplianceWarmSpare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceWarmSpare resources.
type applianceWarmSpareState struct {
	// Enable warm spare
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId     *string `pulumi:"networkId"`
	PrimarySerial *string `pulumi:"primarySerial"`
	// Serial number of the warm spare appliance
	SpareSerial *string `pulumi:"spareSerial"`
	// Uplink mode, either virtual or public
	UplinkMode *string `pulumi:"uplinkMode"`
	// The WAN 1 shared IP
	VirtualIp1 *string `pulumi:"virtualIp1"`
	// The WAN 2 shared IP
	VirtualIp2 *string                 `pulumi:"virtualIp2"`
	Wan1       *ApplianceWarmSpareWan1 `pulumi:"wan1"`
	Wan2       *ApplianceWarmSpareWan2 `pulumi:"wan2"`
}

type ApplianceWarmSpareState struct {
	// Enable warm spare
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId     pulumi.StringPtrInput
	PrimarySerial pulumi.StringPtrInput
	// Serial number of the warm spare appliance
	SpareSerial pulumi.StringPtrInput
	// Uplink mode, either virtual or public
	UplinkMode pulumi.StringPtrInput
	// The WAN 1 shared IP
	VirtualIp1 pulumi.StringPtrInput
	// The WAN 2 shared IP
	VirtualIp2 pulumi.StringPtrInput
	Wan1       ApplianceWarmSpareWan1PtrInput
	Wan2       ApplianceWarmSpareWan2PtrInput
}

func (ApplianceWarmSpareState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceWarmSpareState)(nil)).Elem()
}

type applianceWarmSpareArgs struct {
	// Enable warm spare
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Serial number of the warm spare appliance
	SpareSerial *string `pulumi:"spareSerial"`
	// Uplink mode, either virtual or public
	UplinkMode *string `pulumi:"uplinkMode"`
	// The WAN 1 shared IP
	VirtualIp1 *string `pulumi:"virtualIp1"`
	// The WAN 2 shared IP
	VirtualIp2 *string `pulumi:"virtualIp2"`
}

// The set of arguments for constructing a ApplianceWarmSpare resource.
type ApplianceWarmSpareArgs struct {
	// Enable warm spare
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Serial number of the warm spare appliance
	SpareSerial pulumi.StringPtrInput
	// Uplink mode, either virtual or public
	UplinkMode pulumi.StringPtrInput
	// The WAN 1 shared IP
	VirtualIp1 pulumi.StringPtrInput
	// The WAN 2 shared IP
	VirtualIp2 pulumi.StringPtrInput
}

func (ApplianceWarmSpareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceWarmSpareArgs)(nil)).Elem()
}

type ApplianceWarmSpareInput interface {
	pulumi.Input

	ToApplianceWarmSpareOutput() ApplianceWarmSpareOutput
	ToApplianceWarmSpareOutputWithContext(ctx context.Context) ApplianceWarmSpareOutput
}

func (*ApplianceWarmSpare) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceWarmSpare)(nil)).Elem()
}

func (i *ApplianceWarmSpare) ToApplianceWarmSpareOutput() ApplianceWarmSpareOutput {
	return i.ToApplianceWarmSpareOutputWithContext(context.Background())
}

func (i *ApplianceWarmSpare) ToApplianceWarmSpareOutputWithContext(ctx context.Context) ApplianceWarmSpareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareOutput)
}

// ApplianceWarmSpareArrayInput is an input type that accepts ApplianceWarmSpareArray and ApplianceWarmSpareArrayOutput values.
// You can construct a concrete instance of `ApplianceWarmSpareArrayInput` via:
//
//	ApplianceWarmSpareArray{ ApplianceWarmSpareArgs{...} }
type ApplianceWarmSpareArrayInput interface {
	pulumi.Input

	ToApplianceWarmSpareArrayOutput() ApplianceWarmSpareArrayOutput
	ToApplianceWarmSpareArrayOutputWithContext(context.Context) ApplianceWarmSpareArrayOutput
}

type ApplianceWarmSpareArray []ApplianceWarmSpareInput

func (ApplianceWarmSpareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceWarmSpare)(nil)).Elem()
}

func (i ApplianceWarmSpareArray) ToApplianceWarmSpareArrayOutput() ApplianceWarmSpareArrayOutput {
	return i.ToApplianceWarmSpareArrayOutputWithContext(context.Background())
}

func (i ApplianceWarmSpareArray) ToApplianceWarmSpareArrayOutputWithContext(ctx context.Context) ApplianceWarmSpareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareArrayOutput)
}

// ApplianceWarmSpareMapInput is an input type that accepts ApplianceWarmSpareMap and ApplianceWarmSpareMapOutput values.
// You can construct a concrete instance of `ApplianceWarmSpareMapInput` via:
//
//	ApplianceWarmSpareMap{ "key": ApplianceWarmSpareArgs{...} }
type ApplianceWarmSpareMapInput interface {
	pulumi.Input

	ToApplianceWarmSpareMapOutput() ApplianceWarmSpareMapOutput
	ToApplianceWarmSpareMapOutputWithContext(context.Context) ApplianceWarmSpareMapOutput
}

type ApplianceWarmSpareMap map[string]ApplianceWarmSpareInput

func (ApplianceWarmSpareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceWarmSpare)(nil)).Elem()
}

func (i ApplianceWarmSpareMap) ToApplianceWarmSpareMapOutput() ApplianceWarmSpareMapOutput {
	return i.ToApplianceWarmSpareMapOutputWithContext(context.Background())
}

func (i ApplianceWarmSpareMap) ToApplianceWarmSpareMapOutputWithContext(ctx context.Context) ApplianceWarmSpareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareMapOutput)
}

type ApplianceWarmSpareOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceWarmSpare)(nil)).Elem()
}

func (o ApplianceWarmSpareOutput) ToApplianceWarmSpareOutput() ApplianceWarmSpareOutput {
	return o
}

func (o ApplianceWarmSpareOutput) ToApplianceWarmSpareOutputWithContext(ctx context.Context) ApplianceWarmSpareOutput {
	return o
}

// Enable warm spare
func (o ApplianceWarmSpareOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o ApplianceWarmSpareOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o ApplianceWarmSpareOutput) PrimarySerial() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.PrimarySerial }).(pulumi.StringOutput)
}

// Serial number of the warm spare appliance
func (o ApplianceWarmSpareOutput) SpareSerial() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.SpareSerial }).(pulumi.StringOutput)
}

// Uplink mode, either virtual or public
func (o ApplianceWarmSpareOutput) UplinkMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.UplinkMode }).(pulumi.StringOutput)
}

// The WAN 1 shared IP
func (o ApplianceWarmSpareOutput) VirtualIp1() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.VirtualIp1 }).(pulumi.StringOutput)
}

// The WAN 2 shared IP
func (o ApplianceWarmSpareOutput) VirtualIp2() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpare) pulumi.StringOutput { return v.VirtualIp2 }).(pulumi.StringOutput)
}

func (o ApplianceWarmSpareOutput) Wan1() ApplianceWarmSpareWan1Output {
	return o.ApplyT(func(v *ApplianceWarmSpare) ApplianceWarmSpareWan1Output { return v.Wan1 }).(ApplianceWarmSpareWan1Output)
}

func (o ApplianceWarmSpareOutput) Wan2() ApplianceWarmSpareWan2Output {
	return o.ApplyT(func(v *ApplianceWarmSpare) ApplianceWarmSpareWan2Output { return v.Wan2 }).(ApplianceWarmSpareWan2Output)
}

type ApplianceWarmSpareArrayOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceWarmSpare)(nil)).Elem()
}

func (o ApplianceWarmSpareArrayOutput) ToApplianceWarmSpareArrayOutput() ApplianceWarmSpareArrayOutput {
	return o
}

func (o ApplianceWarmSpareArrayOutput) ToApplianceWarmSpareArrayOutputWithContext(ctx context.Context) ApplianceWarmSpareArrayOutput {
	return o
}

func (o ApplianceWarmSpareArrayOutput) Index(i pulumi.IntInput) ApplianceWarmSpareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceWarmSpare {
		return vs[0].([]*ApplianceWarmSpare)[vs[1].(int)]
	}).(ApplianceWarmSpareOutput)
}

type ApplianceWarmSpareMapOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceWarmSpare)(nil)).Elem()
}

func (o ApplianceWarmSpareMapOutput) ToApplianceWarmSpareMapOutput() ApplianceWarmSpareMapOutput {
	return o
}

func (o ApplianceWarmSpareMapOutput) ToApplianceWarmSpareMapOutputWithContext(ctx context.Context) ApplianceWarmSpareMapOutput {
	return o
}

func (o ApplianceWarmSpareMapOutput) MapIndex(k pulumi.StringInput) ApplianceWarmSpareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceWarmSpare {
		return vs[0].(map[string]*ApplianceWarmSpare)[vs[1].(string)]
	}).(ApplianceWarmSpareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareInput)(nil)).Elem(), &ApplianceWarmSpare{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareArrayInput)(nil)).Elem(), ApplianceWarmSpareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareMapInput)(nil)).Elem(), ApplianceWarmSpareMap{})
	pulumi.RegisterOutputType(ApplianceWarmSpareOutput{})
	pulumi.RegisterOutputType(ApplianceWarmSpareArrayOutput{})
	pulumi.RegisterOutputType(ApplianceWarmSpareMapOutput{})
}
