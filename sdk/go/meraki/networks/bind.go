// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewBind(ctx, "example", &networks.BindArgs{
//				NetworkId: pulumi.String("string"),
//				Parameters: &networks.BindParametersArgs{
//					Auto_bind:          false,
//					Config_template_id: "N_23952905",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksBindExample", example)
//			return nil
//		})
//	}
//
// ```
type Bind struct {
	pulumi.CustomResourceState

	Item BindItemOutput `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringOutput  `pulumi:"networkId"`
	Parameters BindParametersOutput `pulumi:"parameters"`
}

// NewBind registers a new resource with the given unique name, arguments, and options.
func NewBind(ctx *pulumi.Context,
	name string, args *BindArgs, opts ...pulumi.ResourceOption) (*Bind, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bind
	err := ctx.RegisterResource("meraki:networks/bind:Bind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBind gets an existing Bind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindState, opts ...pulumi.ResourceOption) (*Bind, error) {
	var resource Bind
	err := ctx.ReadResource("meraki:networks/bind:Bind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bind resources.
type bindState struct {
	Item *BindItem `pulumi:"item"`
	// networkId path parameter. Network ID
	NetworkId  *string         `pulumi:"networkId"`
	Parameters *BindParameters `pulumi:"parameters"`
}

type BindState struct {
	Item BindItemPtrInput
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringPtrInput
	Parameters BindParametersPtrInput
}

func (BindState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindState)(nil)).Elem()
}

type bindArgs struct {
	// networkId path parameter. Network ID
	NetworkId  string         `pulumi:"networkId"`
	Parameters BindParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a Bind resource.
type BindArgs struct {
	// networkId path parameter. Network ID
	NetworkId  pulumi.StringInput
	Parameters BindParametersInput
}

func (BindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindArgs)(nil)).Elem()
}

type BindInput interface {
	pulumi.Input

	ToBindOutput() BindOutput
	ToBindOutputWithContext(ctx context.Context) BindOutput
}

func (*Bind) ElementType() reflect.Type {
	return reflect.TypeOf((**Bind)(nil)).Elem()
}

func (i *Bind) ToBindOutput() BindOutput {
	return i.ToBindOutputWithContext(context.Background())
}

func (i *Bind) ToBindOutputWithContext(ctx context.Context) BindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOutput)
}

// BindArrayInput is an input type that accepts BindArray and BindArrayOutput values.
// You can construct a concrete instance of `BindArrayInput` via:
//
//	BindArray{ BindArgs{...} }
type BindArrayInput interface {
	pulumi.Input

	ToBindArrayOutput() BindArrayOutput
	ToBindArrayOutputWithContext(context.Context) BindArrayOutput
}

type BindArray []BindInput

func (BindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bind)(nil)).Elem()
}

func (i BindArray) ToBindArrayOutput() BindArrayOutput {
	return i.ToBindArrayOutputWithContext(context.Background())
}

func (i BindArray) ToBindArrayOutputWithContext(ctx context.Context) BindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindArrayOutput)
}

// BindMapInput is an input type that accepts BindMap and BindMapOutput values.
// You can construct a concrete instance of `BindMapInput` via:
//
//	BindMap{ "key": BindArgs{...} }
type BindMapInput interface {
	pulumi.Input

	ToBindMapOutput() BindMapOutput
	ToBindMapOutputWithContext(context.Context) BindMapOutput
}

type BindMap map[string]BindInput

func (BindMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bind)(nil)).Elem()
}

func (i BindMap) ToBindMapOutput() BindMapOutput {
	return i.ToBindMapOutputWithContext(context.Background())
}

func (i BindMap) ToBindMapOutputWithContext(ctx context.Context) BindMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindMapOutput)
}

type BindOutput struct{ *pulumi.OutputState }

func (BindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bind)(nil)).Elem()
}

func (o BindOutput) ToBindOutput() BindOutput {
	return o
}

func (o BindOutput) ToBindOutputWithContext(ctx context.Context) BindOutput {
	return o
}

func (o BindOutput) Item() BindItemOutput {
	return o.ApplyT(func(v *Bind) BindItemOutput { return v.Item }).(BindItemOutput)
}

// networkId path parameter. Network ID
func (o BindOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Bind) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o BindOutput) Parameters() BindParametersOutput {
	return o.ApplyT(func(v *Bind) BindParametersOutput { return v.Parameters }).(BindParametersOutput)
}

type BindArrayOutput struct{ *pulumi.OutputState }

func (BindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bind)(nil)).Elem()
}

func (o BindArrayOutput) ToBindArrayOutput() BindArrayOutput {
	return o
}

func (o BindArrayOutput) ToBindArrayOutputWithContext(ctx context.Context) BindArrayOutput {
	return o
}

func (o BindArrayOutput) Index(i pulumi.IntInput) BindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bind {
		return vs[0].([]*Bind)[vs[1].(int)]
	}).(BindOutput)
}

type BindMapOutput struct{ *pulumi.OutputState }

func (BindMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bind)(nil)).Elem()
}

func (o BindMapOutput) ToBindMapOutput() BindMapOutput {
	return o
}

func (o BindMapOutput) ToBindMapOutputWithContext(ctx context.Context) BindMapOutput {
	return o
}

func (o BindMapOutput) MapIndex(k pulumi.StringInput) BindOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bind {
		return vs[0].(map[string]*Bind)[vs[1].(string)]
	}).(BindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindInput)(nil)).Elem(), &Bind{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindArrayInput)(nil)).Elem(), BindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindMapInput)(nil)).Elem(), BindMap{})
	pulumi.RegisterOutputType(BindOutput{})
	pulumi.RegisterOutputType(BindArrayOutput{})
	pulumi.RegisterOutputType(BindMapOutput{})
}
