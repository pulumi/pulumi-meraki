// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewFirmwareUpgradesStagedEvents(ctx, "example", &networks.FirmwareUpgradesStagedEventsArgs{
//				NetworkId: pulumi.String("string"),
//				Products: &networks.FirmwareUpgradesStagedEventsProductsArgs{
//					Switch: &networks.FirmwareUpgradesStagedEventsProductsSwitchArgs{
//						NextUpgrade: &networks.FirmwareUpgradesStagedEventsProductsSwitchNextUpgradeArgs{
//							ToVersion: &networks.FirmwareUpgradesStagedEventsProductsSwitchNextUpgradeToVersionArgs{
//								Id: pulumi.String("1234"),
//							},
//						},
//					},
//					Switch_catalyst: map[string]interface{}{
//						"nextUpgrade": map[string]interface{}{
//							"toVersion": map[string]interface{}{
//								"id": "4321",
//							},
//						},
//					},
//				},
//				Stages: networks.FirmwareUpgradesStagedEventsStageArray{
//					&networks.FirmwareUpgradesStagedEventsStageArgs{
//						Group: &networks.FirmwareUpgradesStagedEventsStageGroupArgs{
//							Id: pulumi.String("1234"),
//						},
//						Milestones: &networks.FirmwareUpgradesStagedEventsStageMilestonesArgs{
//							ScheduledFor: pulumi.String("2018-02-11T00:00:00Z"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksFirmwareUpgradesStagedEventsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/firmwareUpgradesStagedEvents:FirmwareUpgradesStagedEvents example "network_id"
// ```
type FirmwareUpgradesStagedEvents struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The network devices to be updated
	Products FirmwareUpgradesStagedEventsProductsOutput `pulumi:"products"`
	// Reasons for the rollback
	Reasons FirmwareUpgradesStagedEventsReasonArrayOutput `pulumi:"reasons"`
	// The ordered stages in the network
	Stages FirmwareUpgradesStagedEventsStageArrayOutput `pulumi:"stages"`
}

// NewFirmwareUpgradesStagedEvents registers a new resource with the given unique name, arguments, and options.
func NewFirmwareUpgradesStagedEvents(ctx *pulumi.Context,
	name string, args *FirmwareUpgradesStagedEventsArgs, opts ...pulumi.ResourceOption) (*FirmwareUpgradesStagedEvents, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirmwareUpgradesStagedEvents
	err := ctx.RegisterResource("meraki:networks/firmwareUpgradesStagedEvents:FirmwareUpgradesStagedEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirmwareUpgradesStagedEvents gets an existing FirmwareUpgradesStagedEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirmwareUpgradesStagedEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirmwareUpgradesStagedEventsState, opts ...pulumi.ResourceOption) (*FirmwareUpgradesStagedEvents, error) {
	var resource FirmwareUpgradesStagedEvents
	err := ctx.ReadResource("meraki:networks/firmwareUpgradesStagedEvents:FirmwareUpgradesStagedEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirmwareUpgradesStagedEvents resources.
type firmwareUpgradesStagedEventsState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// The network devices to be updated
	Products *FirmwareUpgradesStagedEventsProducts `pulumi:"products"`
	// Reasons for the rollback
	Reasons []FirmwareUpgradesStagedEventsReason `pulumi:"reasons"`
	// The ordered stages in the network
	Stages []FirmwareUpgradesStagedEventsStage `pulumi:"stages"`
}

type FirmwareUpgradesStagedEventsState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// The network devices to be updated
	Products FirmwareUpgradesStagedEventsProductsPtrInput
	// Reasons for the rollback
	Reasons FirmwareUpgradesStagedEventsReasonArrayInput
	// The ordered stages in the network
	Stages FirmwareUpgradesStagedEventsStageArrayInput
}

func (FirmwareUpgradesStagedEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*firmwareUpgradesStagedEventsState)(nil)).Elem()
}

type firmwareUpgradesStagedEventsArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// The network devices to be updated
	Products *FirmwareUpgradesStagedEventsProducts `pulumi:"products"`
	// The ordered stages in the network
	Stages []FirmwareUpgradesStagedEventsStage `pulumi:"stages"`
}

// The set of arguments for constructing a FirmwareUpgradesStagedEvents resource.
type FirmwareUpgradesStagedEventsArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// The network devices to be updated
	Products FirmwareUpgradesStagedEventsProductsPtrInput
	// The ordered stages in the network
	Stages FirmwareUpgradesStagedEventsStageArrayInput
}

func (FirmwareUpgradesStagedEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firmwareUpgradesStagedEventsArgs)(nil)).Elem()
}

type FirmwareUpgradesStagedEventsInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedEventsOutput() FirmwareUpgradesStagedEventsOutput
	ToFirmwareUpgradesStagedEventsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsOutput
}

func (*FirmwareUpgradesStagedEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (i *FirmwareUpgradesStagedEvents) ToFirmwareUpgradesStagedEventsOutput() FirmwareUpgradesStagedEventsOutput {
	return i.ToFirmwareUpgradesStagedEventsOutputWithContext(context.Background())
}

func (i *FirmwareUpgradesStagedEvents) ToFirmwareUpgradesStagedEventsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedEventsOutput)
}

// FirmwareUpgradesStagedEventsArrayInput is an input type that accepts FirmwareUpgradesStagedEventsArray and FirmwareUpgradesStagedEventsArrayOutput values.
// You can construct a concrete instance of `FirmwareUpgradesStagedEventsArrayInput` via:
//
//	FirmwareUpgradesStagedEventsArray{ FirmwareUpgradesStagedEventsArgs{...} }
type FirmwareUpgradesStagedEventsArrayInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedEventsArrayOutput() FirmwareUpgradesStagedEventsArrayOutput
	ToFirmwareUpgradesStagedEventsArrayOutputWithContext(context.Context) FirmwareUpgradesStagedEventsArrayOutput
}

type FirmwareUpgradesStagedEventsArray []FirmwareUpgradesStagedEventsInput

func (FirmwareUpgradesStagedEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (i FirmwareUpgradesStagedEventsArray) ToFirmwareUpgradesStagedEventsArrayOutput() FirmwareUpgradesStagedEventsArrayOutput {
	return i.ToFirmwareUpgradesStagedEventsArrayOutputWithContext(context.Background())
}

func (i FirmwareUpgradesStagedEventsArray) ToFirmwareUpgradesStagedEventsArrayOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedEventsArrayOutput)
}

// FirmwareUpgradesStagedEventsMapInput is an input type that accepts FirmwareUpgradesStagedEventsMap and FirmwareUpgradesStagedEventsMapOutput values.
// You can construct a concrete instance of `FirmwareUpgradesStagedEventsMapInput` via:
//
//	FirmwareUpgradesStagedEventsMap{ "key": FirmwareUpgradesStagedEventsArgs{...} }
type FirmwareUpgradesStagedEventsMapInput interface {
	pulumi.Input

	ToFirmwareUpgradesStagedEventsMapOutput() FirmwareUpgradesStagedEventsMapOutput
	ToFirmwareUpgradesStagedEventsMapOutputWithContext(context.Context) FirmwareUpgradesStagedEventsMapOutput
}

type FirmwareUpgradesStagedEventsMap map[string]FirmwareUpgradesStagedEventsInput

func (FirmwareUpgradesStagedEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (i FirmwareUpgradesStagedEventsMap) ToFirmwareUpgradesStagedEventsMapOutput() FirmwareUpgradesStagedEventsMapOutput {
	return i.ToFirmwareUpgradesStagedEventsMapOutputWithContext(context.Background())
}

func (i FirmwareUpgradesStagedEventsMap) ToFirmwareUpgradesStagedEventsMapOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwareUpgradesStagedEventsMapOutput)
}

type FirmwareUpgradesStagedEventsOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (o FirmwareUpgradesStagedEventsOutput) ToFirmwareUpgradesStagedEventsOutput() FirmwareUpgradesStagedEventsOutput {
	return o
}

func (o FirmwareUpgradesStagedEventsOutput) ToFirmwareUpgradesStagedEventsOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsOutput {
	return o
}

// networkId path parameter. Network ID
func (o FirmwareUpgradesStagedEventsOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedEvents) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The network devices to be updated
func (o FirmwareUpgradesStagedEventsOutput) Products() FirmwareUpgradesStagedEventsProductsOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedEvents) FirmwareUpgradesStagedEventsProductsOutput { return v.Products }).(FirmwareUpgradesStagedEventsProductsOutput)
}

// Reasons for the rollback
func (o FirmwareUpgradesStagedEventsOutput) Reasons() FirmwareUpgradesStagedEventsReasonArrayOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedEvents) FirmwareUpgradesStagedEventsReasonArrayOutput { return v.Reasons }).(FirmwareUpgradesStagedEventsReasonArrayOutput)
}

// The ordered stages in the network
func (o FirmwareUpgradesStagedEventsOutput) Stages() FirmwareUpgradesStagedEventsStageArrayOutput {
	return o.ApplyT(func(v *FirmwareUpgradesStagedEvents) FirmwareUpgradesStagedEventsStageArrayOutput { return v.Stages }).(FirmwareUpgradesStagedEventsStageArrayOutput)
}

type FirmwareUpgradesStagedEventsArrayOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (o FirmwareUpgradesStagedEventsArrayOutput) ToFirmwareUpgradesStagedEventsArrayOutput() FirmwareUpgradesStagedEventsArrayOutput {
	return o
}

func (o FirmwareUpgradesStagedEventsArrayOutput) ToFirmwareUpgradesStagedEventsArrayOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsArrayOutput {
	return o
}

func (o FirmwareUpgradesStagedEventsArrayOutput) Index(i pulumi.IntInput) FirmwareUpgradesStagedEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirmwareUpgradesStagedEvents {
		return vs[0].([]*FirmwareUpgradesStagedEvents)[vs[1].(int)]
	}).(FirmwareUpgradesStagedEventsOutput)
}

type FirmwareUpgradesStagedEventsMapOutput struct{ *pulumi.OutputState }

func (FirmwareUpgradesStagedEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirmwareUpgradesStagedEvents)(nil)).Elem()
}

func (o FirmwareUpgradesStagedEventsMapOutput) ToFirmwareUpgradesStagedEventsMapOutput() FirmwareUpgradesStagedEventsMapOutput {
	return o
}

func (o FirmwareUpgradesStagedEventsMapOutput) ToFirmwareUpgradesStagedEventsMapOutputWithContext(ctx context.Context) FirmwareUpgradesStagedEventsMapOutput {
	return o
}

func (o FirmwareUpgradesStagedEventsMapOutput) MapIndex(k pulumi.StringInput) FirmwareUpgradesStagedEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirmwareUpgradesStagedEvents {
		return vs[0].(map[string]*FirmwareUpgradesStagedEvents)[vs[1].(string)]
	}).(FirmwareUpgradesStagedEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedEventsInput)(nil)).Elem(), &FirmwareUpgradesStagedEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedEventsArrayInput)(nil)).Elem(), FirmwareUpgradesStagedEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirmwareUpgradesStagedEventsMapInput)(nil)).Elem(), FirmwareUpgradesStagedEventsMap{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedEventsOutput{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedEventsArrayOutput{})
	pulumi.RegisterOutputType(FirmwareUpgradesStagedEventsMapOutput{})
}
