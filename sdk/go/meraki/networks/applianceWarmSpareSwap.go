// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/networks"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := networks.NewApplianceWarmSpareSwap(ctx, "example", &networks.ApplianceWarmSpareSwapArgs{
//				NetworkId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiNetworksApplianceWarmSpareSwapExample", example)
//			return nil
//		})
//	}
//
// ```
type ApplianceWarmSpareSwap struct {
	pulumi.CustomResourceState

	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
}

// NewApplianceWarmSpareSwap registers a new resource with the given unique name, arguments, and options.
func NewApplianceWarmSpareSwap(ctx *pulumi.Context,
	name string, args *ApplianceWarmSpareSwapArgs, opts ...pulumi.ResourceOption) (*ApplianceWarmSpareSwap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceWarmSpareSwap
	err := ctx.RegisterResource("meraki:networks/applianceWarmSpareSwap:ApplianceWarmSpareSwap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceWarmSpareSwap gets an existing ApplianceWarmSpareSwap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceWarmSpareSwap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceWarmSpareSwapState, opts ...pulumi.ResourceOption) (*ApplianceWarmSpareSwap, error) {
	var resource ApplianceWarmSpareSwap
	err := ctx.ReadResource("meraki:networks/applianceWarmSpareSwap:ApplianceWarmSpareSwap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceWarmSpareSwap resources.
type applianceWarmSpareSwapState struct {
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
}

type ApplianceWarmSpareSwapState struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
}

func (ApplianceWarmSpareSwapState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceWarmSpareSwapState)(nil)).Elem()
}

type applianceWarmSpareSwapArgs struct {
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
}

// The set of arguments for constructing a ApplianceWarmSpareSwap resource.
type ApplianceWarmSpareSwapArgs struct {
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
}

func (ApplianceWarmSpareSwapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceWarmSpareSwapArgs)(nil)).Elem()
}

type ApplianceWarmSpareSwapInput interface {
	pulumi.Input

	ToApplianceWarmSpareSwapOutput() ApplianceWarmSpareSwapOutput
	ToApplianceWarmSpareSwapOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapOutput
}

func (*ApplianceWarmSpareSwap) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceWarmSpareSwap)(nil)).Elem()
}

func (i *ApplianceWarmSpareSwap) ToApplianceWarmSpareSwapOutput() ApplianceWarmSpareSwapOutput {
	return i.ToApplianceWarmSpareSwapOutputWithContext(context.Background())
}

func (i *ApplianceWarmSpareSwap) ToApplianceWarmSpareSwapOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareSwapOutput)
}

// ApplianceWarmSpareSwapArrayInput is an input type that accepts ApplianceWarmSpareSwapArray and ApplianceWarmSpareSwapArrayOutput values.
// You can construct a concrete instance of `ApplianceWarmSpareSwapArrayInput` via:
//
//	ApplianceWarmSpareSwapArray{ ApplianceWarmSpareSwapArgs{...} }
type ApplianceWarmSpareSwapArrayInput interface {
	pulumi.Input

	ToApplianceWarmSpareSwapArrayOutput() ApplianceWarmSpareSwapArrayOutput
	ToApplianceWarmSpareSwapArrayOutputWithContext(context.Context) ApplianceWarmSpareSwapArrayOutput
}

type ApplianceWarmSpareSwapArray []ApplianceWarmSpareSwapInput

func (ApplianceWarmSpareSwapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceWarmSpareSwap)(nil)).Elem()
}

func (i ApplianceWarmSpareSwapArray) ToApplianceWarmSpareSwapArrayOutput() ApplianceWarmSpareSwapArrayOutput {
	return i.ToApplianceWarmSpareSwapArrayOutputWithContext(context.Background())
}

func (i ApplianceWarmSpareSwapArray) ToApplianceWarmSpareSwapArrayOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareSwapArrayOutput)
}

// ApplianceWarmSpareSwapMapInput is an input type that accepts ApplianceWarmSpareSwapMap and ApplianceWarmSpareSwapMapOutput values.
// You can construct a concrete instance of `ApplianceWarmSpareSwapMapInput` via:
//
//	ApplianceWarmSpareSwapMap{ "key": ApplianceWarmSpareSwapArgs{...} }
type ApplianceWarmSpareSwapMapInput interface {
	pulumi.Input

	ToApplianceWarmSpareSwapMapOutput() ApplianceWarmSpareSwapMapOutput
	ToApplianceWarmSpareSwapMapOutputWithContext(context.Context) ApplianceWarmSpareSwapMapOutput
}

type ApplianceWarmSpareSwapMap map[string]ApplianceWarmSpareSwapInput

func (ApplianceWarmSpareSwapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceWarmSpareSwap)(nil)).Elem()
}

func (i ApplianceWarmSpareSwapMap) ToApplianceWarmSpareSwapMapOutput() ApplianceWarmSpareSwapMapOutput {
	return i.ToApplianceWarmSpareSwapMapOutputWithContext(context.Background())
}

func (i ApplianceWarmSpareSwapMap) ToApplianceWarmSpareSwapMapOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceWarmSpareSwapMapOutput)
}

type ApplianceWarmSpareSwapOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareSwapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceWarmSpareSwap)(nil)).Elem()
}

func (o ApplianceWarmSpareSwapOutput) ToApplianceWarmSpareSwapOutput() ApplianceWarmSpareSwapOutput {
	return o
}

func (o ApplianceWarmSpareSwapOutput) ToApplianceWarmSpareSwapOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapOutput {
	return o
}

// networkId path parameter. Network ID
func (o ApplianceWarmSpareSwapOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceWarmSpareSwap) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

type ApplianceWarmSpareSwapArrayOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareSwapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceWarmSpareSwap)(nil)).Elem()
}

func (o ApplianceWarmSpareSwapArrayOutput) ToApplianceWarmSpareSwapArrayOutput() ApplianceWarmSpareSwapArrayOutput {
	return o
}

func (o ApplianceWarmSpareSwapArrayOutput) ToApplianceWarmSpareSwapArrayOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapArrayOutput {
	return o
}

func (o ApplianceWarmSpareSwapArrayOutput) Index(i pulumi.IntInput) ApplianceWarmSpareSwapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceWarmSpareSwap {
		return vs[0].([]*ApplianceWarmSpareSwap)[vs[1].(int)]
	}).(ApplianceWarmSpareSwapOutput)
}

type ApplianceWarmSpareSwapMapOutput struct{ *pulumi.OutputState }

func (ApplianceWarmSpareSwapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceWarmSpareSwap)(nil)).Elem()
}

func (o ApplianceWarmSpareSwapMapOutput) ToApplianceWarmSpareSwapMapOutput() ApplianceWarmSpareSwapMapOutput {
	return o
}

func (o ApplianceWarmSpareSwapMapOutput) ToApplianceWarmSpareSwapMapOutputWithContext(ctx context.Context) ApplianceWarmSpareSwapMapOutput {
	return o
}

func (o ApplianceWarmSpareSwapMapOutput) MapIndex(k pulumi.StringInput) ApplianceWarmSpareSwapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceWarmSpareSwap {
		return vs[0].(map[string]*ApplianceWarmSpareSwap)[vs[1].(string)]
	}).(ApplianceWarmSpareSwapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareSwapInput)(nil)).Elem(), &ApplianceWarmSpareSwap{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareSwapArrayInput)(nil)).Elem(), ApplianceWarmSpareSwapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceWarmSpareSwapMapInput)(nil)).Elem(), ApplianceWarmSpareSwapMap{})
	pulumi.RegisterOutputType(ApplianceWarmSpareSwapOutput{})
	pulumi.RegisterOutputType(ApplianceWarmSpareSwapArrayOutput{})
	pulumi.RegisterOutputType(ApplianceWarmSpareSwapMapOutput{})
}
