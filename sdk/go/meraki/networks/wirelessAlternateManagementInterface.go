// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networks

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:networks/wirelessAlternateManagementInterface:WirelessAlternateManagementInterface example "network_id"
// ```
type WirelessAlternateManagementInterface struct {
	pulumi.CustomResourceState

	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints WirelessAlternateManagementInterfaceAccessPointArrayOutput `pulumi:"accessPoints"`
	// Boolean value to enable or disable alternate management interface
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Alternate management interface VLAN, must be between 1 and 4094
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewWirelessAlternateManagementInterface registers a new resource with the given unique name, arguments, and options.
func NewWirelessAlternateManagementInterface(ctx *pulumi.Context,
	name string, args *WirelessAlternateManagementInterfaceArgs, opts ...pulumi.ResourceOption) (*WirelessAlternateManagementInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessAlternateManagementInterface
	err := ctx.RegisterResource("meraki:networks/wirelessAlternateManagementInterface:WirelessAlternateManagementInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessAlternateManagementInterface gets an existing WirelessAlternateManagementInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessAlternateManagementInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessAlternateManagementInterfaceState, opts ...pulumi.ResourceOption) (*WirelessAlternateManagementInterface, error) {
	var resource WirelessAlternateManagementInterface
	err := ctx.ReadResource("meraki:networks/wirelessAlternateManagementInterface:WirelessAlternateManagementInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessAlternateManagementInterface resources.
type wirelessAlternateManagementInterfaceState struct {
	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints []WirelessAlternateManagementInterfaceAccessPoint `pulumi:"accessPoints"`
	// Boolean value to enable or disable alternate management interface
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId *string `pulumi:"networkId"`
	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols []string `pulumi:"protocols"`
	// Alternate management interface VLAN, must be between 1 and 4094
	VlanId *int `pulumi:"vlanId"`
}

type WirelessAlternateManagementInterfaceState struct {
	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints WirelessAlternateManagementInterfaceAccessPointArrayInput
	// Boolean value to enable or disable alternate management interface
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringPtrInput
	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols pulumi.StringArrayInput
	// Alternate management interface VLAN, must be between 1 and 4094
	VlanId pulumi.IntPtrInput
}

func (WirelessAlternateManagementInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessAlternateManagementInterfaceState)(nil)).Elem()
}

type wirelessAlternateManagementInterfaceArgs struct {
	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints []WirelessAlternateManagementInterfaceAccessPoint `pulumi:"accessPoints"`
	// Boolean value to enable or disable alternate management interface
	Enabled *bool `pulumi:"enabled"`
	// networkId path parameter. Network ID
	NetworkId string `pulumi:"networkId"`
	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols []string `pulumi:"protocols"`
	// Alternate management interface VLAN, must be between 1 and 4094
	VlanId *int `pulumi:"vlanId"`
}

// The set of arguments for constructing a WirelessAlternateManagementInterface resource.
type WirelessAlternateManagementInterfaceArgs struct {
	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints WirelessAlternateManagementInterfaceAccessPointArrayInput
	// Boolean value to enable or disable alternate management interface
	Enabled pulumi.BoolPtrInput
	// networkId path parameter. Network ID
	NetworkId pulumi.StringInput
	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols pulumi.StringArrayInput
	// Alternate management interface VLAN, must be between 1 and 4094
	VlanId pulumi.IntPtrInput
}

func (WirelessAlternateManagementInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessAlternateManagementInterfaceArgs)(nil)).Elem()
}

type WirelessAlternateManagementInterfaceInput interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceOutput() WirelessAlternateManagementInterfaceOutput
	ToWirelessAlternateManagementInterfaceOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceOutput
}

func (*WirelessAlternateManagementInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessAlternateManagementInterface)(nil)).Elem()
}

func (i *WirelessAlternateManagementInterface) ToWirelessAlternateManagementInterfaceOutput() WirelessAlternateManagementInterfaceOutput {
	return i.ToWirelessAlternateManagementInterfaceOutputWithContext(context.Background())
}

func (i *WirelessAlternateManagementInterface) ToWirelessAlternateManagementInterfaceOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceOutput)
}

// WirelessAlternateManagementInterfaceArrayInput is an input type that accepts WirelessAlternateManagementInterfaceArray and WirelessAlternateManagementInterfaceArrayOutput values.
// You can construct a concrete instance of `WirelessAlternateManagementInterfaceArrayInput` via:
//
//	WirelessAlternateManagementInterfaceArray{ WirelessAlternateManagementInterfaceArgs{...} }
type WirelessAlternateManagementInterfaceArrayInput interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceArrayOutput() WirelessAlternateManagementInterfaceArrayOutput
	ToWirelessAlternateManagementInterfaceArrayOutputWithContext(context.Context) WirelessAlternateManagementInterfaceArrayOutput
}

type WirelessAlternateManagementInterfaceArray []WirelessAlternateManagementInterfaceInput

func (WirelessAlternateManagementInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessAlternateManagementInterface)(nil)).Elem()
}

func (i WirelessAlternateManagementInterfaceArray) ToWirelessAlternateManagementInterfaceArrayOutput() WirelessAlternateManagementInterfaceArrayOutput {
	return i.ToWirelessAlternateManagementInterfaceArrayOutputWithContext(context.Background())
}

func (i WirelessAlternateManagementInterfaceArray) ToWirelessAlternateManagementInterfaceArrayOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceArrayOutput)
}

// WirelessAlternateManagementInterfaceMapInput is an input type that accepts WirelessAlternateManagementInterfaceMap and WirelessAlternateManagementInterfaceMapOutput values.
// You can construct a concrete instance of `WirelessAlternateManagementInterfaceMapInput` via:
//
//	WirelessAlternateManagementInterfaceMap{ "key": WirelessAlternateManagementInterfaceArgs{...} }
type WirelessAlternateManagementInterfaceMapInput interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceMapOutput() WirelessAlternateManagementInterfaceMapOutput
	ToWirelessAlternateManagementInterfaceMapOutputWithContext(context.Context) WirelessAlternateManagementInterfaceMapOutput
}

type WirelessAlternateManagementInterfaceMap map[string]WirelessAlternateManagementInterfaceInput

func (WirelessAlternateManagementInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessAlternateManagementInterface)(nil)).Elem()
}

func (i WirelessAlternateManagementInterfaceMap) ToWirelessAlternateManagementInterfaceMapOutput() WirelessAlternateManagementInterfaceMapOutput {
	return i.ToWirelessAlternateManagementInterfaceMapOutputWithContext(context.Background())
}

func (i WirelessAlternateManagementInterfaceMap) ToWirelessAlternateManagementInterfaceMapOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceMapOutput)
}

type WirelessAlternateManagementInterfaceOutput struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessAlternateManagementInterface)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceOutput) ToWirelessAlternateManagementInterfaceOutput() WirelessAlternateManagementInterfaceOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceOutput) ToWirelessAlternateManagementInterfaceOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceOutput {
	return o
}

// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
func (o WirelessAlternateManagementInterfaceOutput) AccessPoints() WirelessAlternateManagementInterfaceAccessPointArrayOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterface) WirelessAlternateManagementInterfaceAccessPointArrayOutput {
		return v.AccessPoints
	}).(WirelessAlternateManagementInterfaceAccessPointArrayOutput)
}

// Boolean value to enable or disable alternate management interface
func (o WirelessAlternateManagementInterfaceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterface) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// networkId path parameter. Network ID
func (o WirelessAlternateManagementInterfaceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterface) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
func (o WirelessAlternateManagementInterfaceOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterface) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Alternate management interface VLAN, must be between 1 and 4094
func (o WirelessAlternateManagementInterfaceOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterface) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

type WirelessAlternateManagementInterfaceArrayOutput struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessAlternateManagementInterface)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceArrayOutput) ToWirelessAlternateManagementInterfaceArrayOutput() WirelessAlternateManagementInterfaceArrayOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceArrayOutput) ToWirelessAlternateManagementInterfaceArrayOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceArrayOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceArrayOutput) Index(i pulumi.IntInput) WirelessAlternateManagementInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessAlternateManagementInterface {
		return vs[0].([]*WirelessAlternateManagementInterface)[vs[1].(int)]
	}).(WirelessAlternateManagementInterfaceOutput)
}

type WirelessAlternateManagementInterfaceMapOutput struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessAlternateManagementInterface)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceMapOutput) ToWirelessAlternateManagementInterfaceMapOutput() WirelessAlternateManagementInterfaceMapOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceMapOutput) ToWirelessAlternateManagementInterfaceMapOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceMapOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceMapOutput) MapIndex(k pulumi.StringInput) WirelessAlternateManagementInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessAlternateManagementInterface {
		return vs[0].(map[string]*WirelessAlternateManagementInterface)[vs[1].(string)]
	}).(WirelessAlternateManagementInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceInput)(nil)).Elem(), &WirelessAlternateManagementInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceArrayInput)(nil)).Elem(), WirelessAlternateManagementInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceMapInput)(nil)).Elem(), WirelessAlternateManagementInterfaceMap{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceOutput{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceArrayOutput{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceMapOutput{})
}
