// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LiveToolsCable struct {
	pulumi.CustomResourceState

	// Id of the cable test request. Used to check the status of the request.
	CableTestId pulumi.StringOutput `pulumi:"cableTestId"`
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsCableCallbackOutput `pulumi:"callback"`
	// An error message for a failed execution
	Error pulumi.StringOutput `pulumi:"error"`
	// A list of ports for which to perform the cable test.
	Ports pulumi.StringArrayOutput `pulumi:"ports"`
	// Cable test request parameters
	Request LiveToolsCableRequestOutput `pulumi:"request"`
	// Results of the cable test request, one for each requested port.
	Results LiveToolsCableResultArrayOutput `pulumi:"results"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// Status of the cable test request.
	Status pulumi.StringOutput `pulumi:"status"`
	// GET this url to check the status of your cable test request.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewLiveToolsCable registers a new resource with the given unique name, arguments, and options.
func NewLiveToolsCable(ctx *pulumi.Context,
	name string, args *LiveToolsCableArgs, opts ...pulumi.ResourceOption) (*LiveToolsCable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LiveToolsCable
	err := ctx.RegisterResource("meraki:devices/liveToolsCable:LiveToolsCable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveToolsCable gets an existing LiveToolsCable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveToolsCable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveToolsCableState, opts ...pulumi.ResourceOption) (*LiveToolsCable, error) {
	var resource LiveToolsCable
	err := ctx.ReadResource("meraki:devices/liveToolsCable:LiveToolsCable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveToolsCable resources.
type liveToolsCableState struct {
	// Id of the cable test request. Used to check the status of the request.
	CableTestId *string `pulumi:"cableTestId"`
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsCableCallback `pulumi:"callback"`
	// An error message for a failed execution
	Error *string `pulumi:"error"`
	// A list of ports for which to perform the cable test.
	Ports []string `pulumi:"ports"`
	// Cable test request parameters
	Request *LiveToolsCableRequest `pulumi:"request"`
	// Results of the cable test request, one for each requested port.
	Results []LiveToolsCableResult `pulumi:"results"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// Status of the cable test request.
	Status *string `pulumi:"status"`
	// GET this url to check the status of your cable test request.
	Url *string `pulumi:"url"`
}

type LiveToolsCableState struct {
	// Id of the cable test request. Used to check the status of the request.
	CableTestId pulumi.StringPtrInput
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsCableCallbackPtrInput
	// An error message for a failed execution
	Error pulumi.StringPtrInput
	// A list of ports for which to perform the cable test.
	Ports pulumi.StringArrayInput
	// Cable test request parameters
	Request LiveToolsCableRequestPtrInput
	// Results of the cable test request, one for each requested port.
	Results LiveToolsCableResultArrayInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// Status of the cable test request.
	Status pulumi.StringPtrInput
	// GET this url to check the status of your cable test request.
	Url pulumi.StringPtrInput
}

func (LiveToolsCableState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsCableState)(nil)).Elem()
}

type liveToolsCableArgs struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsCableCallback `pulumi:"callback"`
	// A list of ports for which to perform the cable test.
	Ports []string `pulumi:"ports"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a LiveToolsCable resource.
type LiveToolsCableArgs struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsCableCallbackPtrInput
	// A list of ports for which to perform the cable test.
	Ports pulumi.StringArrayInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (LiveToolsCableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsCableArgs)(nil)).Elem()
}

type LiveToolsCableInput interface {
	pulumi.Input

	ToLiveToolsCableOutput() LiveToolsCableOutput
	ToLiveToolsCableOutputWithContext(ctx context.Context) LiveToolsCableOutput
}

func (*LiveToolsCable) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsCable)(nil)).Elem()
}

func (i *LiveToolsCable) ToLiveToolsCableOutput() LiveToolsCableOutput {
	return i.ToLiveToolsCableOutputWithContext(context.Background())
}

func (i *LiveToolsCable) ToLiveToolsCableOutputWithContext(ctx context.Context) LiveToolsCableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsCableOutput)
}

// LiveToolsCableArrayInput is an input type that accepts LiveToolsCableArray and LiveToolsCableArrayOutput values.
// You can construct a concrete instance of `LiveToolsCableArrayInput` via:
//
//	LiveToolsCableArray{ LiveToolsCableArgs{...} }
type LiveToolsCableArrayInput interface {
	pulumi.Input

	ToLiveToolsCableArrayOutput() LiveToolsCableArrayOutput
	ToLiveToolsCableArrayOutputWithContext(context.Context) LiveToolsCableArrayOutput
}

type LiveToolsCableArray []LiveToolsCableInput

func (LiveToolsCableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsCable)(nil)).Elem()
}

func (i LiveToolsCableArray) ToLiveToolsCableArrayOutput() LiveToolsCableArrayOutput {
	return i.ToLiveToolsCableArrayOutputWithContext(context.Background())
}

func (i LiveToolsCableArray) ToLiveToolsCableArrayOutputWithContext(ctx context.Context) LiveToolsCableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsCableArrayOutput)
}

// LiveToolsCableMapInput is an input type that accepts LiveToolsCableMap and LiveToolsCableMapOutput values.
// You can construct a concrete instance of `LiveToolsCableMapInput` via:
//
//	LiveToolsCableMap{ "key": LiveToolsCableArgs{...} }
type LiveToolsCableMapInput interface {
	pulumi.Input

	ToLiveToolsCableMapOutput() LiveToolsCableMapOutput
	ToLiveToolsCableMapOutputWithContext(context.Context) LiveToolsCableMapOutput
}

type LiveToolsCableMap map[string]LiveToolsCableInput

func (LiveToolsCableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsCable)(nil)).Elem()
}

func (i LiveToolsCableMap) ToLiveToolsCableMapOutput() LiveToolsCableMapOutput {
	return i.ToLiveToolsCableMapOutputWithContext(context.Background())
}

func (i LiveToolsCableMap) ToLiveToolsCableMapOutputWithContext(ctx context.Context) LiveToolsCableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsCableMapOutput)
}

type LiveToolsCableOutput struct{ *pulumi.OutputState }

func (LiveToolsCableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsCable)(nil)).Elem()
}

func (o LiveToolsCableOutput) ToLiveToolsCableOutput() LiveToolsCableOutput {
	return o
}

func (o LiveToolsCableOutput) ToLiveToolsCableOutputWithContext(ctx context.Context) LiveToolsCableOutput {
	return o
}

// Id of the cable test request. Used to check the status of the request.
func (o LiveToolsCableOutput) CableTestId() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringOutput { return v.CableTestId }).(pulumi.StringOutput)
}

// Details for the callback. Please include either an httpServerId OR url and sharedSecret
func (o LiveToolsCableOutput) Callback() LiveToolsCableCallbackOutput {
	return o.ApplyT(func(v *LiveToolsCable) LiveToolsCableCallbackOutput { return v.Callback }).(LiveToolsCableCallbackOutput)
}

// An error message for a failed execution
func (o LiveToolsCableOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringOutput { return v.Error }).(pulumi.StringOutput)
}

// A list of ports for which to perform the cable test.
func (o LiveToolsCableOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringArrayOutput { return v.Ports }).(pulumi.StringArrayOutput)
}

// Cable test request parameters
func (o LiveToolsCableOutput) Request() LiveToolsCableRequestOutput {
	return o.ApplyT(func(v *LiveToolsCable) LiveToolsCableRequestOutput { return v.Request }).(LiveToolsCableRequestOutput)
}

// Results of the cable test request, one for each requested port.
func (o LiveToolsCableOutput) Results() LiveToolsCableResultArrayOutput {
	return o.ApplyT(func(v *LiveToolsCable) LiveToolsCableResultArrayOutput { return v.Results }).(LiveToolsCableResultArrayOutput)
}

// serial path parameter.
func (o LiveToolsCableOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// Status of the cable test request.
func (o LiveToolsCableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// GET this url to check the status of your cable test request.
func (o LiveToolsCableOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsCable) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type LiveToolsCableArrayOutput struct{ *pulumi.OutputState }

func (LiveToolsCableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsCable)(nil)).Elem()
}

func (o LiveToolsCableArrayOutput) ToLiveToolsCableArrayOutput() LiveToolsCableArrayOutput {
	return o
}

func (o LiveToolsCableArrayOutput) ToLiveToolsCableArrayOutputWithContext(ctx context.Context) LiveToolsCableArrayOutput {
	return o
}

func (o LiveToolsCableArrayOutput) Index(i pulumi.IntInput) LiveToolsCableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveToolsCable {
		return vs[0].([]*LiveToolsCable)[vs[1].(int)]
	}).(LiveToolsCableOutput)
}

type LiveToolsCableMapOutput struct{ *pulumi.OutputState }

func (LiveToolsCableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsCable)(nil)).Elem()
}

func (o LiveToolsCableMapOutput) ToLiveToolsCableMapOutput() LiveToolsCableMapOutput {
	return o
}

func (o LiveToolsCableMapOutput) ToLiveToolsCableMapOutputWithContext(ctx context.Context) LiveToolsCableMapOutput {
	return o
}

func (o LiveToolsCableMapOutput) MapIndex(k pulumi.StringInput) LiveToolsCableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveToolsCable {
		return vs[0].(map[string]*LiveToolsCable)[vs[1].(string)]
	}).(LiveToolsCableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsCableInput)(nil)).Elem(), &LiveToolsCable{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsCableArrayInput)(nil)).Elem(), LiveToolsCableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsCableMapInput)(nil)).Elem(), LiveToolsCableMap{})
	pulumi.RegisterOutputType(LiveToolsCableOutput{})
	pulumi.RegisterOutputType(LiveToolsCableArrayOutput{})
	pulumi.RegisterOutputType(LiveToolsCableMapOutput{})
}
