// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewCameraCustomAnalytics(ctx, "example", &devices.CameraCustomAnalyticsArgs{
//				ArtifactId: pulumi.String("1"),
//				Enabled:    pulumi.Bool(true),
//				Parameters: devices.CameraCustomAnalyticsParameterArray{
//					&devices.CameraCustomAnalyticsParameterArgs{
//						Name:  pulumi.String("detection_threshold"),
//						Value: pulumi.Float64(0.5),
//					},
//				},
//				Serial: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesCameraCustomAnalyticsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/cameraCustomAnalytics:CameraCustomAnalytics example "serial"
// ```
type CameraCustomAnalytics struct {
	pulumi.CustomResourceState

	// Custom analytics artifact ID
	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// Whether custom analytics is enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Parameters for the custom analytics workload
	Parameters CameraCustomAnalyticsParameterArrayOutput `pulumi:"parameters"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewCameraCustomAnalytics registers a new resource with the given unique name, arguments, and options.
func NewCameraCustomAnalytics(ctx *pulumi.Context,
	name string, args *CameraCustomAnalyticsArgs, opts ...pulumi.ResourceOption) (*CameraCustomAnalytics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CameraCustomAnalytics
	err := ctx.RegisterResource("meraki:devices/cameraCustomAnalytics:CameraCustomAnalytics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCameraCustomAnalytics gets an existing CameraCustomAnalytics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCameraCustomAnalytics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CameraCustomAnalyticsState, opts ...pulumi.ResourceOption) (*CameraCustomAnalytics, error) {
	var resource CameraCustomAnalytics
	err := ctx.ReadResource("meraki:devices/cameraCustomAnalytics:CameraCustomAnalytics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CameraCustomAnalytics resources.
type cameraCustomAnalyticsState struct {
	// Custom analytics artifact ID
	ArtifactId *string `pulumi:"artifactId"`
	// Whether custom analytics is enabled
	Enabled *bool `pulumi:"enabled"`
	// Parameters for the custom analytics workload
	Parameters []CameraCustomAnalyticsParameter `pulumi:"parameters"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type CameraCustomAnalyticsState struct {
	// Custom analytics artifact ID
	ArtifactId pulumi.StringPtrInput
	// Whether custom analytics is enabled
	Enabled pulumi.BoolPtrInput
	// Parameters for the custom analytics workload
	Parameters CameraCustomAnalyticsParameterArrayInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (CameraCustomAnalyticsState) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraCustomAnalyticsState)(nil)).Elem()
}

type cameraCustomAnalyticsArgs struct {
	// Custom analytics artifact ID
	ArtifactId *string `pulumi:"artifactId"`
	// Whether custom analytics is enabled
	Enabled *bool `pulumi:"enabled"`
	// Parameters for the custom analytics workload
	Parameters []CameraCustomAnalyticsParameter `pulumi:"parameters"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a CameraCustomAnalytics resource.
type CameraCustomAnalyticsArgs struct {
	// Custom analytics artifact ID
	ArtifactId pulumi.StringPtrInput
	// Whether custom analytics is enabled
	Enabled pulumi.BoolPtrInput
	// Parameters for the custom analytics workload
	Parameters CameraCustomAnalyticsParameterArrayInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (CameraCustomAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraCustomAnalyticsArgs)(nil)).Elem()
}

type CameraCustomAnalyticsInput interface {
	pulumi.Input

	ToCameraCustomAnalyticsOutput() CameraCustomAnalyticsOutput
	ToCameraCustomAnalyticsOutputWithContext(ctx context.Context) CameraCustomAnalyticsOutput
}

func (*CameraCustomAnalytics) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraCustomAnalytics)(nil)).Elem()
}

func (i *CameraCustomAnalytics) ToCameraCustomAnalyticsOutput() CameraCustomAnalyticsOutput {
	return i.ToCameraCustomAnalyticsOutputWithContext(context.Background())
}

func (i *CameraCustomAnalytics) ToCameraCustomAnalyticsOutputWithContext(ctx context.Context) CameraCustomAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraCustomAnalyticsOutput)
}

// CameraCustomAnalyticsArrayInput is an input type that accepts CameraCustomAnalyticsArray and CameraCustomAnalyticsArrayOutput values.
// You can construct a concrete instance of `CameraCustomAnalyticsArrayInput` via:
//
//	CameraCustomAnalyticsArray{ CameraCustomAnalyticsArgs{...} }
type CameraCustomAnalyticsArrayInput interface {
	pulumi.Input

	ToCameraCustomAnalyticsArrayOutput() CameraCustomAnalyticsArrayOutput
	ToCameraCustomAnalyticsArrayOutputWithContext(context.Context) CameraCustomAnalyticsArrayOutput
}

type CameraCustomAnalyticsArray []CameraCustomAnalyticsInput

func (CameraCustomAnalyticsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraCustomAnalytics)(nil)).Elem()
}

func (i CameraCustomAnalyticsArray) ToCameraCustomAnalyticsArrayOutput() CameraCustomAnalyticsArrayOutput {
	return i.ToCameraCustomAnalyticsArrayOutputWithContext(context.Background())
}

func (i CameraCustomAnalyticsArray) ToCameraCustomAnalyticsArrayOutputWithContext(ctx context.Context) CameraCustomAnalyticsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraCustomAnalyticsArrayOutput)
}

// CameraCustomAnalyticsMapInput is an input type that accepts CameraCustomAnalyticsMap and CameraCustomAnalyticsMapOutput values.
// You can construct a concrete instance of `CameraCustomAnalyticsMapInput` via:
//
//	CameraCustomAnalyticsMap{ "key": CameraCustomAnalyticsArgs{...} }
type CameraCustomAnalyticsMapInput interface {
	pulumi.Input

	ToCameraCustomAnalyticsMapOutput() CameraCustomAnalyticsMapOutput
	ToCameraCustomAnalyticsMapOutputWithContext(context.Context) CameraCustomAnalyticsMapOutput
}

type CameraCustomAnalyticsMap map[string]CameraCustomAnalyticsInput

func (CameraCustomAnalyticsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraCustomAnalytics)(nil)).Elem()
}

func (i CameraCustomAnalyticsMap) ToCameraCustomAnalyticsMapOutput() CameraCustomAnalyticsMapOutput {
	return i.ToCameraCustomAnalyticsMapOutputWithContext(context.Background())
}

func (i CameraCustomAnalyticsMap) ToCameraCustomAnalyticsMapOutputWithContext(ctx context.Context) CameraCustomAnalyticsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraCustomAnalyticsMapOutput)
}

type CameraCustomAnalyticsOutput struct{ *pulumi.OutputState }

func (CameraCustomAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraCustomAnalytics)(nil)).Elem()
}

func (o CameraCustomAnalyticsOutput) ToCameraCustomAnalyticsOutput() CameraCustomAnalyticsOutput {
	return o
}

func (o CameraCustomAnalyticsOutput) ToCameraCustomAnalyticsOutputWithContext(ctx context.Context) CameraCustomAnalyticsOutput {
	return o
}

// Custom analytics artifact ID
func (o CameraCustomAnalyticsOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v *CameraCustomAnalytics) pulumi.StringOutput { return v.ArtifactId }).(pulumi.StringOutput)
}

// Whether custom analytics is enabled
func (o CameraCustomAnalyticsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CameraCustomAnalytics) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Parameters for the custom analytics workload
func (o CameraCustomAnalyticsOutput) Parameters() CameraCustomAnalyticsParameterArrayOutput {
	return o.ApplyT(func(v *CameraCustomAnalytics) CameraCustomAnalyticsParameterArrayOutput { return v.Parameters }).(CameraCustomAnalyticsParameterArrayOutput)
}

// serial path parameter.
func (o CameraCustomAnalyticsOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *CameraCustomAnalytics) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type CameraCustomAnalyticsArrayOutput struct{ *pulumi.OutputState }

func (CameraCustomAnalyticsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraCustomAnalytics)(nil)).Elem()
}

func (o CameraCustomAnalyticsArrayOutput) ToCameraCustomAnalyticsArrayOutput() CameraCustomAnalyticsArrayOutput {
	return o
}

func (o CameraCustomAnalyticsArrayOutput) ToCameraCustomAnalyticsArrayOutputWithContext(ctx context.Context) CameraCustomAnalyticsArrayOutput {
	return o
}

func (o CameraCustomAnalyticsArrayOutput) Index(i pulumi.IntInput) CameraCustomAnalyticsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CameraCustomAnalytics {
		return vs[0].([]*CameraCustomAnalytics)[vs[1].(int)]
	}).(CameraCustomAnalyticsOutput)
}

type CameraCustomAnalyticsMapOutput struct{ *pulumi.OutputState }

func (CameraCustomAnalyticsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraCustomAnalytics)(nil)).Elem()
}

func (o CameraCustomAnalyticsMapOutput) ToCameraCustomAnalyticsMapOutput() CameraCustomAnalyticsMapOutput {
	return o
}

func (o CameraCustomAnalyticsMapOutput) ToCameraCustomAnalyticsMapOutputWithContext(ctx context.Context) CameraCustomAnalyticsMapOutput {
	return o
}

func (o CameraCustomAnalyticsMapOutput) MapIndex(k pulumi.StringInput) CameraCustomAnalyticsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CameraCustomAnalytics {
		return vs[0].(map[string]*CameraCustomAnalytics)[vs[1].(string)]
	}).(CameraCustomAnalyticsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CameraCustomAnalyticsInput)(nil)).Elem(), &CameraCustomAnalytics{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraCustomAnalyticsArrayInput)(nil)).Elem(), CameraCustomAnalyticsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraCustomAnalyticsMapInput)(nil)).Elem(), CameraCustomAnalyticsMap{})
	pulumi.RegisterOutputType(CameraCustomAnalyticsOutput{})
	pulumi.RegisterOutputType(CameraCustomAnalyticsArrayOutput{})
	pulumi.RegisterOutputType(CameraCustomAnalyticsMapOutput{})
}
