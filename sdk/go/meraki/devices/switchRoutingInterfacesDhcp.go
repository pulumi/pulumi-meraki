// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewSwitchRoutingInterfacesDhcp(ctx, "example", &devices.SwitchRoutingInterfacesDhcpArgs{
//				BootFileName:       pulumi.String("home_boot_file"),
//				BootNextServer:     pulumi.String("1.2.3.4"),
//				BootOptionsEnabled: pulumi.Bool(true),
//				DhcpLeaseTime:      pulumi.String("1 day"),
//				DhcpMode:           pulumi.String("dhcpServer"),
//				DhcpOptions: devices.SwitchRoutingInterfacesDhcpDhcpOptionArray{
//					&devices.SwitchRoutingInterfacesDhcpDhcpOptionArgs{
//						Code:  pulumi.String("5"),
//						Type:  pulumi.String("text"),
//						Value: pulumi.String("five"),
//					},
//				},
//				DhcpRelayServerIps: pulumi.StringArray{
//					pulumi.String("1.2.3.4"),
//				},
//				DnsCustomNameservers: pulumi.StringArray{
//					pulumi.String("8.8.8.8, 8.8.4.4"),
//				},
//				DnsNameserversOption: pulumi.String("custom"),
//				FixedIpAssignments: devices.SwitchRoutingInterfacesDhcpFixedIpAssignmentArray{
//					&devices.SwitchRoutingInterfacesDhcpFixedIpAssignmentArgs{
//						Ip:   pulumi.String("192.168.1.12"),
//						Mac:  pulumi.String("22:33:44:55:66:77"),
//						Name: pulumi.String("Cisco Meraki valued client"),
//					},
//				},
//				InterfaceId: pulumi.String("string"),
//				ReservedIpRanges: devices.SwitchRoutingInterfacesDhcpReservedIpRangeArray{
//					&devices.SwitchRoutingInterfacesDhcpReservedIpRangeArgs{
//						Comment: pulumi.String("A reserved IP range"),
//						End:     pulumi.String("192.168.1.10"),
//						Start:   pulumi.String("192.168.1.1"),
//					},
//				},
//				Serial: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesSwitchRoutingInterfacesDhcpExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/switchRoutingInterfacesDhcp:SwitchRoutingInterfacesDhcp example "interface_id,serial"
// ```
type SwitchRoutingInterfacesDhcp struct {
	pulumi.CustomResourceState

	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringOutput `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringOutput `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolOutput `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringOutput `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringOutput `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchRoutingInterfacesDhcpDhcpOptionArrayOutput `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayOutput `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayOutput `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringOutput `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayOutput `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchRoutingInterfacesDhcpReservedIpRangeArrayOutput `pulumi:"reservedIpRanges"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewSwitchRoutingInterfacesDhcp registers a new resource with the given unique name, arguments, and options.
func NewSwitchRoutingInterfacesDhcp(ctx *pulumi.Context,
	name string, args *SwitchRoutingInterfacesDhcpArgs, opts ...pulumi.ResourceOption) (*SwitchRoutingInterfacesDhcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchRoutingInterfacesDhcp
	err := ctx.RegisterResource("meraki:devices/switchRoutingInterfacesDhcp:SwitchRoutingInterfacesDhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchRoutingInterfacesDhcp gets an existing SwitchRoutingInterfacesDhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchRoutingInterfacesDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchRoutingInterfacesDhcpState, opts ...pulumi.ResourceOption) (*SwitchRoutingInterfacesDhcp, error) {
	var resource SwitchRoutingInterfacesDhcp
	err := ctx.ReadResource("meraki:devices/switchRoutingInterfacesDhcp:SwitchRoutingInterfacesDhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchRoutingInterfacesDhcp resources.
type switchRoutingInterfacesDhcpState struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName *string `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer *string `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled *bool `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *string `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *string `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions []SwitchRoutingInterfacesDhcpDhcpOption `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps []string `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers []string `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption *string `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments []SwitchRoutingInterfacesDhcpFixedIpAssignment `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId *string `pulumi:"interfaceId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges []SwitchRoutingInterfacesDhcpReservedIpRange `pulumi:"reservedIpRanges"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type SwitchRoutingInterfacesDhcpState struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringPtrInput
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringPtrInput
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolPtrInput
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringPtrInput
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringPtrInput
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchRoutingInterfacesDhcpDhcpOptionArrayInput
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayInput
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayInput
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayInput
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchRoutingInterfacesDhcpReservedIpRangeArrayInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (SwitchRoutingInterfacesDhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchRoutingInterfacesDhcpState)(nil)).Elem()
}

type switchRoutingInterfacesDhcpArgs struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName *string `pulumi:"bootFileName"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer *string `pulumi:"bootNextServer"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled *bool `pulumi:"bootOptionsEnabled"`
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *string `pulumi:"dhcpLeaseTime"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *string `pulumi:"dhcpMode"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions []SwitchRoutingInterfacesDhcpDhcpOption `pulumi:"dhcpOptions"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps []string `pulumi:"dhcpRelayServerIps"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers []string `pulumi:"dnsCustomNameservers"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption *string `pulumi:"dnsNameserversOption"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments []SwitchRoutingInterfacesDhcpFixedIpAssignment `pulumi:"fixedIpAssignments"`
	// interfaceId path parameter. Interface ID
	InterfaceId string `pulumi:"interfaceId"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges []SwitchRoutingInterfacesDhcpReservedIpRange `pulumi:"reservedIpRanges"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a SwitchRoutingInterfacesDhcp resource.
type SwitchRoutingInterfacesDhcpArgs struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName pulumi.StringPtrInput
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer pulumi.StringPtrInput
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled pulumi.BoolPtrInput
	// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime pulumi.StringPtrInput
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode pulumi.StringPtrInput
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions SwitchRoutingInterfacesDhcpDhcpOptionArrayInput
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps pulumi.StringArrayInput
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DnsCustomNameservers pulumi.StringArrayInput
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DnsNameserversOption pulumi.StringPtrInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	FixedIpAssignments SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayInput
	// interfaceId path parameter. Interface ID
	InterfaceId pulumi.StringInput
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIpRanges SwitchRoutingInterfacesDhcpReservedIpRangeArrayInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (SwitchRoutingInterfacesDhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchRoutingInterfacesDhcpArgs)(nil)).Elem()
}

type SwitchRoutingInterfacesDhcpInput interface {
	pulumi.Input

	ToSwitchRoutingInterfacesDhcpOutput() SwitchRoutingInterfacesDhcpOutput
	ToSwitchRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpOutput
}

func (*SwitchRoutingInterfacesDhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (i *SwitchRoutingInterfacesDhcp) ToSwitchRoutingInterfacesDhcpOutput() SwitchRoutingInterfacesDhcpOutput {
	return i.ToSwitchRoutingInterfacesDhcpOutputWithContext(context.Background())
}

func (i *SwitchRoutingInterfacesDhcp) ToSwitchRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingInterfacesDhcpOutput)
}

// SwitchRoutingInterfacesDhcpArrayInput is an input type that accepts SwitchRoutingInterfacesDhcpArray and SwitchRoutingInterfacesDhcpArrayOutput values.
// You can construct a concrete instance of `SwitchRoutingInterfacesDhcpArrayInput` via:
//
//	SwitchRoutingInterfacesDhcpArray{ SwitchRoutingInterfacesDhcpArgs{...} }
type SwitchRoutingInterfacesDhcpArrayInput interface {
	pulumi.Input

	ToSwitchRoutingInterfacesDhcpArrayOutput() SwitchRoutingInterfacesDhcpArrayOutput
	ToSwitchRoutingInterfacesDhcpArrayOutputWithContext(context.Context) SwitchRoutingInterfacesDhcpArrayOutput
}

type SwitchRoutingInterfacesDhcpArray []SwitchRoutingInterfacesDhcpInput

func (SwitchRoutingInterfacesDhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (i SwitchRoutingInterfacesDhcpArray) ToSwitchRoutingInterfacesDhcpArrayOutput() SwitchRoutingInterfacesDhcpArrayOutput {
	return i.ToSwitchRoutingInterfacesDhcpArrayOutputWithContext(context.Background())
}

func (i SwitchRoutingInterfacesDhcpArray) ToSwitchRoutingInterfacesDhcpArrayOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingInterfacesDhcpArrayOutput)
}

// SwitchRoutingInterfacesDhcpMapInput is an input type that accepts SwitchRoutingInterfacesDhcpMap and SwitchRoutingInterfacesDhcpMapOutput values.
// You can construct a concrete instance of `SwitchRoutingInterfacesDhcpMapInput` via:
//
//	SwitchRoutingInterfacesDhcpMap{ "key": SwitchRoutingInterfacesDhcpArgs{...} }
type SwitchRoutingInterfacesDhcpMapInput interface {
	pulumi.Input

	ToSwitchRoutingInterfacesDhcpMapOutput() SwitchRoutingInterfacesDhcpMapOutput
	ToSwitchRoutingInterfacesDhcpMapOutputWithContext(context.Context) SwitchRoutingInterfacesDhcpMapOutput
}

type SwitchRoutingInterfacesDhcpMap map[string]SwitchRoutingInterfacesDhcpInput

func (SwitchRoutingInterfacesDhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (i SwitchRoutingInterfacesDhcpMap) ToSwitchRoutingInterfacesDhcpMapOutput() SwitchRoutingInterfacesDhcpMapOutput {
	return i.ToSwitchRoutingInterfacesDhcpMapOutputWithContext(context.Background())
}

func (i SwitchRoutingInterfacesDhcpMap) ToSwitchRoutingInterfacesDhcpMapOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchRoutingInterfacesDhcpMapOutput)
}

type SwitchRoutingInterfacesDhcpOutput struct{ *pulumi.OutputState }

func (SwitchRoutingInterfacesDhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchRoutingInterfacesDhcpOutput) ToSwitchRoutingInterfacesDhcpOutput() SwitchRoutingInterfacesDhcpOutput {
	return o
}

func (o SwitchRoutingInterfacesDhcpOutput) ToSwitchRoutingInterfacesDhcpOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpOutput {
	return o
}

// The PXE boot server file name for the DHCP server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) BootFileName() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.BootFileName }).(pulumi.StringOutput)
}

// The PXE boot server IP for the DHCP server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) BootNextServer() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.BootNextServer }).(pulumi.StringOutput)
}

// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) BootOptionsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.BoolOutput { return v.BootOptionsEnabled }).(pulumi.BoolOutput)
}

// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
func (o SwitchRoutingInterfacesDhcpOutput) DhcpLeaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.DhcpLeaseTime }).(pulumi.StringOutput)
}

// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
func (o SwitchRoutingInterfacesDhcpOutput) DhcpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.DhcpMode }).(pulumi.StringOutput)
}

// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) DhcpOptions() SwitchRoutingInterfacesDhcpDhcpOptionArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) SwitchRoutingInterfacesDhcpDhcpOptionArrayOutput {
		return v.DhcpOptions
	}).(SwitchRoutingInterfacesDhcpDhcpOptionArrayOutput)
}

// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) DhcpRelayServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringArrayOutput { return v.DhcpRelayServerIps }).(pulumi.StringArrayOutput)
}

// The DHCP name server IPs when DHCP name server option is 'custom'
func (o SwitchRoutingInterfacesDhcpOutput) DnsCustomNameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringArrayOutput { return v.DnsCustomNameservers }).(pulumi.StringArrayOutput)
}

// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
func (o SwitchRoutingInterfacesDhcpOutput) DnsNameserversOption() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.DnsNameserversOption }).(pulumi.StringOutput)
}

// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) FixedIpAssignments() SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayOutput {
		return v.FixedIpAssignments
	}).(SwitchRoutingInterfacesDhcpFixedIpAssignmentArrayOutput)
}

// interfaceId path parameter. Interface ID
func (o SwitchRoutingInterfacesDhcpOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
func (o SwitchRoutingInterfacesDhcpOutput) ReservedIpRanges() SwitchRoutingInterfacesDhcpReservedIpRangeArrayOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) SwitchRoutingInterfacesDhcpReservedIpRangeArrayOutput {
		return v.ReservedIpRanges
	}).(SwitchRoutingInterfacesDhcpReservedIpRangeArrayOutput)
}

// serial path parameter.
func (o SwitchRoutingInterfacesDhcpOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchRoutingInterfacesDhcp) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type SwitchRoutingInterfacesDhcpArrayOutput struct{ *pulumi.OutputState }

func (SwitchRoutingInterfacesDhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchRoutingInterfacesDhcpArrayOutput) ToSwitchRoutingInterfacesDhcpArrayOutput() SwitchRoutingInterfacesDhcpArrayOutput {
	return o
}

func (o SwitchRoutingInterfacesDhcpArrayOutput) ToSwitchRoutingInterfacesDhcpArrayOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpArrayOutput {
	return o
}

func (o SwitchRoutingInterfacesDhcpArrayOutput) Index(i pulumi.IntInput) SwitchRoutingInterfacesDhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchRoutingInterfacesDhcp {
		return vs[0].([]*SwitchRoutingInterfacesDhcp)[vs[1].(int)]
	}).(SwitchRoutingInterfacesDhcpOutput)
}

type SwitchRoutingInterfacesDhcpMapOutput struct{ *pulumi.OutputState }

func (SwitchRoutingInterfacesDhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchRoutingInterfacesDhcp)(nil)).Elem()
}

func (o SwitchRoutingInterfacesDhcpMapOutput) ToSwitchRoutingInterfacesDhcpMapOutput() SwitchRoutingInterfacesDhcpMapOutput {
	return o
}

func (o SwitchRoutingInterfacesDhcpMapOutput) ToSwitchRoutingInterfacesDhcpMapOutputWithContext(ctx context.Context) SwitchRoutingInterfacesDhcpMapOutput {
	return o
}

func (o SwitchRoutingInterfacesDhcpMapOutput) MapIndex(k pulumi.StringInput) SwitchRoutingInterfacesDhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchRoutingInterfacesDhcp {
		return vs[0].(map[string]*SwitchRoutingInterfacesDhcp)[vs[1].(string)]
	}).(SwitchRoutingInterfacesDhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingInterfacesDhcpInput)(nil)).Elem(), &SwitchRoutingInterfacesDhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingInterfacesDhcpArrayInput)(nil)).Elem(), SwitchRoutingInterfacesDhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchRoutingInterfacesDhcpMapInput)(nil)).Elem(), SwitchRoutingInterfacesDhcpMap{})
	pulumi.RegisterOutputType(SwitchRoutingInterfacesDhcpOutput{})
	pulumi.RegisterOutputType(SwitchRoutingInterfacesDhcpArrayOutput{})
	pulumi.RegisterOutputType(SwitchRoutingInterfacesDhcpMapOutput{})
}
