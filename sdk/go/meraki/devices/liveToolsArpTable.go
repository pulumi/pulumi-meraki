// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/liveToolsArpTable:LiveToolsArpTable example "arp_table_id,serial"
// ```
type LiveToolsArpTable struct {
	pulumi.CustomResourceState

	// Id of the ARP table request. Used to check the status of the request.
	ArpTableId pulumi.StringOutput `pulumi:"arpTableId"`
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsArpTableCallbackOutput `pulumi:"callback"`
	// The ARP table entries
	Entries LiveToolsArpTableEntryArrayOutput `pulumi:"entries"`
	// An error message for a failed execution
	Error pulumi.StringOutput `pulumi:"error"`
	// ARP table request parameters
	Request LiveToolsArpTableRequestOutput `pulumi:"request"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// Status of the ARP table request.
	Status pulumi.StringOutput `pulumi:"status"`
	// GET this url to check the status of your ARP table request.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewLiveToolsArpTable registers a new resource with the given unique name, arguments, and options.
func NewLiveToolsArpTable(ctx *pulumi.Context,
	name string, args *LiveToolsArpTableArgs, opts ...pulumi.ResourceOption) (*LiveToolsArpTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LiveToolsArpTable
	err := ctx.RegisterResource("meraki:devices/liveToolsArpTable:LiveToolsArpTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveToolsArpTable gets an existing LiveToolsArpTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveToolsArpTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveToolsArpTableState, opts ...pulumi.ResourceOption) (*LiveToolsArpTable, error) {
	var resource LiveToolsArpTable
	err := ctx.ReadResource("meraki:devices/liveToolsArpTable:LiveToolsArpTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveToolsArpTable resources.
type liveToolsArpTableState struct {
	// Id of the ARP table request. Used to check the status of the request.
	ArpTableId *string `pulumi:"arpTableId"`
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsArpTableCallback `pulumi:"callback"`
	// The ARP table entries
	Entries []LiveToolsArpTableEntry `pulumi:"entries"`
	// An error message for a failed execution
	Error *string `pulumi:"error"`
	// ARP table request parameters
	Request *LiveToolsArpTableRequest `pulumi:"request"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// Status of the ARP table request.
	Status *string `pulumi:"status"`
	// GET this url to check the status of your ARP table request.
	Url *string `pulumi:"url"`
}

type LiveToolsArpTableState struct {
	// Id of the ARP table request. Used to check the status of the request.
	ArpTableId pulumi.StringPtrInput
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsArpTableCallbackPtrInput
	// The ARP table entries
	Entries LiveToolsArpTableEntryArrayInput
	// An error message for a failed execution
	Error pulumi.StringPtrInput
	// ARP table request parameters
	Request LiveToolsArpTableRequestPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// Status of the ARP table request.
	Status pulumi.StringPtrInput
	// GET this url to check the status of your ARP table request.
	Url pulumi.StringPtrInput
}

func (LiveToolsArpTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsArpTableState)(nil)).Elem()
}

type liveToolsArpTableArgs struct {
	// Id of the ARP table request. Used to check the status of the request.
	ArpTableId *string `pulumi:"arpTableId"`
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsArpTableCallback `pulumi:"callback"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a LiveToolsArpTable resource.
type LiveToolsArpTableArgs struct {
	// Id of the ARP table request. Used to check the status of the request.
	ArpTableId pulumi.StringPtrInput
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsArpTableCallbackPtrInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (LiveToolsArpTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsArpTableArgs)(nil)).Elem()
}

type LiveToolsArpTableInput interface {
	pulumi.Input

	ToLiveToolsArpTableOutput() LiveToolsArpTableOutput
	ToLiveToolsArpTableOutputWithContext(ctx context.Context) LiveToolsArpTableOutput
}

func (*LiveToolsArpTable) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsArpTable)(nil)).Elem()
}

func (i *LiveToolsArpTable) ToLiveToolsArpTableOutput() LiveToolsArpTableOutput {
	return i.ToLiveToolsArpTableOutputWithContext(context.Background())
}

func (i *LiveToolsArpTable) ToLiveToolsArpTableOutputWithContext(ctx context.Context) LiveToolsArpTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsArpTableOutput)
}

// LiveToolsArpTableArrayInput is an input type that accepts LiveToolsArpTableArray and LiveToolsArpTableArrayOutput values.
// You can construct a concrete instance of `LiveToolsArpTableArrayInput` via:
//
//	LiveToolsArpTableArray{ LiveToolsArpTableArgs{...} }
type LiveToolsArpTableArrayInput interface {
	pulumi.Input

	ToLiveToolsArpTableArrayOutput() LiveToolsArpTableArrayOutput
	ToLiveToolsArpTableArrayOutputWithContext(context.Context) LiveToolsArpTableArrayOutput
}

type LiveToolsArpTableArray []LiveToolsArpTableInput

func (LiveToolsArpTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsArpTable)(nil)).Elem()
}

func (i LiveToolsArpTableArray) ToLiveToolsArpTableArrayOutput() LiveToolsArpTableArrayOutput {
	return i.ToLiveToolsArpTableArrayOutputWithContext(context.Background())
}

func (i LiveToolsArpTableArray) ToLiveToolsArpTableArrayOutputWithContext(ctx context.Context) LiveToolsArpTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsArpTableArrayOutput)
}

// LiveToolsArpTableMapInput is an input type that accepts LiveToolsArpTableMap and LiveToolsArpTableMapOutput values.
// You can construct a concrete instance of `LiveToolsArpTableMapInput` via:
//
//	LiveToolsArpTableMap{ "key": LiveToolsArpTableArgs{...} }
type LiveToolsArpTableMapInput interface {
	pulumi.Input

	ToLiveToolsArpTableMapOutput() LiveToolsArpTableMapOutput
	ToLiveToolsArpTableMapOutputWithContext(context.Context) LiveToolsArpTableMapOutput
}

type LiveToolsArpTableMap map[string]LiveToolsArpTableInput

func (LiveToolsArpTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsArpTable)(nil)).Elem()
}

func (i LiveToolsArpTableMap) ToLiveToolsArpTableMapOutput() LiveToolsArpTableMapOutput {
	return i.ToLiveToolsArpTableMapOutputWithContext(context.Background())
}

func (i LiveToolsArpTableMap) ToLiveToolsArpTableMapOutputWithContext(ctx context.Context) LiveToolsArpTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsArpTableMapOutput)
}

type LiveToolsArpTableOutput struct{ *pulumi.OutputState }

func (LiveToolsArpTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsArpTable)(nil)).Elem()
}

func (o LiveToolsArpTableOutput) ToLiveToolsArpTableOutput() LiveToolsArpTableOutput {
	return o
}

func (o LiveToolsArpTableOutput) ToLiveToolsArpTableOutputWithContext(ctx context.Context) LiveToolsArpTableOutput {
	return o
}

// Id of the ARP table request. Used to check the status of the request.
func (o LiveToolsArpTableOutput) ArpTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) pulumi.StringOutput { return v.ArpTableId }).(pulumi.StringOutput)
}

// Details for the callback. Please include either an httpServerId OR url and sharedSecret
func (o LiveToolsArpTableOutput) Callback() LiveToolsArpTableCallbackOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) LiveToolsArpTableCallbackOutput { return v.Callback }).(LiveToolsArpTableCallbackOutput)
}

// The ARP table entries
func (o LiveToolsArpTableOutput) Entries() LiveToolsArpTableEntryArrayOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) LiveToolsArpTableEntryArrayOutput { return v.Entries }).(LiveToolsArpTableEntryArrayOutput)
}

// An error message for a failed execution
func (o LiveToolsArpTableOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) pulumi.StringOutput { return v.Error }).(pulumi.StringOutput)
}

// ARP table request parameters
func (o LiveToolsArpTableOutput) Request() LiveToolsArpTableRequestOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) LiveToolsArpTableRequestOutput { return v.Request }).(LiveToolsArpTableRequestOutput)
}

// serial path parameter.
func (o LiveToolsArpTableOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// Status of the ARP table request.
func (o LiveToolsArpTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// GET this url to check the status of your ARP table request.
func (o LiveToolsArpTableOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsArpTable) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type LiveToolsArpTableArrayOutput struct{ *pulumi.OutputState }

func (LiveToolsArpTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsArpTable)(nil)).Elem()
}

func (o LiveToolsArpTableArrayOutput) ToLiveToolsArpTableArrayOutput() LiveToolsArpTableArrayOutput {
	return o
}

func (o LiveToolsArpTableArrayOutput) ToLiveToolsArpTableArrayOutputWithContext(ctx context.Context) LiveToolsArpTableArrayOutput {
	return o
}

func (o LiveToolsArpTableArrayOutput) Index(i pulumi.IntInput) LiveToolsArpTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveToolsArpTable {
		return vs[0].([]*LiveToolsArpTable)[vs[1].(int)]
	}).(LiveToolsArpTableOutput)
}

type LiveToolsArpTableMapOutput struct{ *pulumi.OutputState }

func (LiveToolsArpTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsArpTable)(nil)).Elem()
}

func (o LiveToolsArpTableMapOutput) ToLiveToolsArpTableMapOutput() LiveToolsArpTableMapOutput {
	return o
}

func (o LiveToolsArpTableMapOutput) ToLiveToolsArpTableMapOutputWithContext(ctx context.Context) LiveToolsArpTableMapOutput {
	return o
}

func (o LiveToolsArpTableMapOutput) MapIndex(k pulumi.StringInput) LiveToolsArpTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveToolsArpTable {
		return vs[0].(map[string]*LiveToolsArpTable)[vs[1].(string)]
	}).(LiveToolsArpTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsArpTableInput)(nil)).Elem(), &LiveToolsArpTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsArpTableArrayInput)(nil)).Elem(), LiveToolsArpTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsArpTableMapInput)(nil)).Elem(), LiveToolsArpTableMap{})
	pulumi.RegisterOutputType(LiveToolsArpTableOutput{})
	pulumi.RegisterOutputType(LiveToolsArpTableArrayOutput{})
	pulumi.RegisterOutputType(LiveToolsArpTableMapOutput{})
}
