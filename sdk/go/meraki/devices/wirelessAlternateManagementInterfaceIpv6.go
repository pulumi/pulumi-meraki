// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewWirelessAlternateManagementInterfaceIpv6(ctx, "example", &devices.WirelessAlternateManagementInterfaceIpv6Args{
//				Serial: pulumi.String("string"),
//				Parameters: &devices.WirelessAlternateManagementInterfaceIpv6ParametersArgs{
//					Addresses: devices.WirelessAlternateManagementInterfaceIpv6ParametersAddressArray{
//						&devices.WirelessAlternateManagementInterfaceIpv6ParametersAddressArgs{
//							Address:        pulumi.String("2001:db8:3c4d:15::1"),
//							AssignmentMode: pulumi.String("static"),
//							Gateway:        pulumi.String("fe80:db8:c15:c0:d0c::10ca:1d02"),
//							Nameservers: &devices.WirelessAlternateManagementInterfaceIpv6ParametersAddressNameserversArgs{
//								Addresses: pulumi.StringArray{
//									pulumi.String("2001:db8:3c4d:15::1"),
//									pulumi.String("2001:db8:3c4d:15::1"),
//								},
//							},
//							Prefix:   pulumi.String("2001:db8:3c4d:15::/64"),
//							Protocol: pulumi.String("ipv6"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesWirelessAlternateManagementInterfaceIpv6Example", example)
//			return nil
//		})
//	}
//
// ```
type WirelessAlternateManagementInterfaceIpv6 struct {
	pulumi.CustomResourceState

	Item       WirelessAlternateManagementInterfaceIpv6ItemOutput       `pulumi:"item"`
	Parameters WirelessAlternateManagementInterfaceIpv6ParametersOutput `pulumi:"parameters"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewWirelessAlternateManagementInterfaceIpv6 registers a new resource with the given unique name, arguments, and options.
func NewWirelessAlternateManagementInterfaceIpv6(ctx *pulumi.Context,
	name string, args *WirelessAlternateManagementInterfaceIpv6Args, opts ...pulumi.ResourceOption) (*WirelessAlternateManagementInterfaceIpv6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessAlternateManagementInterfaceIpv6
	err := ctx.RegisterResource("meraki:devices/wirelessAlternateManagementInterfaceIpv6:WirelessAlternateManagementInterfaceIpv6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessAlternateManagementInterfaceIpv6 gets an existing WirelessAlternateManagementInterfaceIpv6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessAlternateManagementInterfaceIpv6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessAlternateManagementInterfaceIpv6State, opts ...pulumi.ResourceOption) (*WirelessAlternateManagementInterfaceIpv6, error) {
	var resource WirelessAlternateManagementInterfaceIpv6
	err := ctx.ReadResource("meraki:devices/wirelessAlternateManagementInterfaceIpv6:WirelessAlternateManagementInterfaceIpv6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessAlternateManagementInterfaceIpv6 resources.
type wirelessAlternateManagementInterfaceIpv6State struct {
	Item       *WirelessAlternateManagementInterfaceIpv6Item       `pulumi:"item"`
	Parameters *WirelessAlternateManagementInterfaceIpv6Parameters `pulumi:"parameters"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type WirelessAlternateManagementInterfaceIpv6State struct {
	Item       WirelessAlternateManagementInterfaceIpv6ItemPtrInput
	Parameters WirelessAlternateManagementInterfaceIpv6ParametersPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (WirelessAlternateManagementInterfaceIpv6State) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessAlternateManagementInterfaceIpv6State)(nil)).Elem()
}

type wirelessAlternateManagementInterfaceIpv6Args struct {
	Parameters WirelessAlternateManagementInterfaceIpv6Parameters `pulumi:"parameters"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a WirelessAlternateManagementInterfaceIpv6 resource.
type WirelessAlternateManagementInterfaceIpv6Args struct {
	Parameters WirelessAlternateManagementInterfaceIpv6ParametersInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (WirelessAlternateManagementInterfaceIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessAlternateManagementInterfaceIpv6Args)(nil)).Elem()
}

type WirelessAlternateManagementInterfaceIpv6Input interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceIpv6Output() WirelessAlternateManagementInterfaceIpv6Output
	ToWirelessAlternateManagementInterfaceIpv6OutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6Output
}

func (*WirelessAlternateManagementInterfaceIpv6) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (i *WirelessAlternateManagementInterfaceIpv6) ToWirelessAlternateManagementInterfaceIpv6Output() WirelessAlternateManagementInterfaceIpv6Output {
	return i.ToWirelessAlternateManagementInterfaceIpv6OutputWithContext(context.Background())
}

func (i *WirelessAlternateManagementInterfaceIpv6) ToWirelessAlternateManagementInterfaceIpv6OutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceIpv6Output)
}

// WirelessAlternateManagementInterfaceIpv6ArrayInput is an input type that accepts WirelessAlternateManagementInterfaceIpv6Array and WirelessAlternateManagementInterfaceIpv6ArrayOutput values.
// You can construct a concrete instance of `WirelessAlternateManagementInterfaceIpv6ArrayInput` via:
//
//	WirelessAlternateManagementInterfaceIpv6Array{ WirelessAlternateManagementInterfaceIpv6Args{...} }
type WirelessAlternateManagementInterfaceIpv6ArrayInput interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceIpv6ArrayOutput() WirelessAlternateManagementInterfaceIpv6ArrayOutput
	ToWirelessAlternateManagementInterfaceIpv6ArrayOutputWithContext(context.Context) WirelessAlternateManagementInterfaceIpv6ArrayOutput
}

type WirelessAlternateManagementInterfaceIpv6Array []WirelessAlternateManagementInterfaceIpv6Input

func (WirelessAlternateManagementInterfaceIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (i WirelessAlternateManagementInterfaceIpv6Array) ToWirelessAlternateManagementInterfaceIpv6ArrayOutput() WirelessAlternateManagementInterfaceIpv6ArrayOutput {
	return i.ToWirelessAlternateManagementInterfaceIpv6ArrayOutputWithContext(context.Background())
}

func (i WirelessAlternateManagementInterfaceIpv6Array) ToWirelessAlternateManagementInterfaceIpv6ArrayOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceIpv6ArrayOutput)
}

// WirelessAlternateManagementInterfaceIpv6MapInput is an input type that accepts WirelessAlternateManagementInterfaceIpv6Map and WirelessAlternateManagementInterfaceIpv6MapOutput values.
// You can construct a concrete instance of `WirelessAlternateManagementInterfaceIpv6MapInput` via:
//
//	WirelessAlternateManagementInterfaceIpv6Map{ "key": WirelessAlternateManagementInterfaceIpv6Args{...} }
type WirelessAlternateManagementInterfaceIpv6MapInput interface {
	pulumi.Input

	ToWirelessAlternateManagementInterfaceIpv6MapOutput() WirelessAlternateManagementInterfaceIpv6MapOutput
	ToWirelessAlternateManagementInterfaceIpv6MapOutputWithContext(context.Context) WirelessAlternateManagementInterfaceIpv6MapOutput
}

type WirelessAlternateManagementInterfaceIpv6Map map[string]WirelessAlternateManagementInterfaceIpv6Input

func (WirelessAlternateManagementInterfaceIpv6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (i WirelessAlternateManagementInterfaceIpv6Map) ToWirelessAlternateManagementInterfaceIpv6MapOutput() WirelessAlternateManagementInterfaceIpv6MapOutput {
	return i.ToWirelessAlternateManagementInterfaceIpv6MapOutputWithContext(context.Background())
}

func (i WirelessAlternateManagementInterfaceIpv6Map) ToWirelessAlternateManagementInterfaceIpv6MapOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessAlternateManagementInterfaceIpv6MapOutput)
}

type WirelessAlternateManagementInterfaceIpv6Output struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceIpv6Output) ToWirelessAlternateManagementInterfaceIpv6Output() WirelessAlternateManagementInterfaceIpv6Output {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6Output) ToWirelessAlternateManagementInterfaceIpv6OutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6Output {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6Output) Item() WirelessAlternateManagementInterfaceIpv6ItemOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterfaceIpv6) WirelessAlternateManagementInterfaceIpv6ItemOutput {
		return v.Item
	}).(WirelessAlternateManagementInterfaceIpv6ItemOutput)
}

func (o WirelessAlternateManagementInterfaceIpv6Output) Parameters() WirelessAlternateManagementInterfaceIpv6ParametersOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterfaceIpv6) WirelessAlternateManagementInterfaceIpv6ParametersOutput {
		return v.Parameters
	}).(WirelessAlternateManagementInterfaceIpv6ParametersOutput)
}

// serial path parameter.
func (o WirelessAlternateManagementInterfaceIpv6Output) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessAlternateManagementInterfaceIpv6) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type WirelessAlternateManagementInterfaceIpv6ArrayOutput struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceIpv6ArrayOutput) ToWirelessAlternateManagementInterfaceIpv6ArrayOutput() WirelessAlternateManagementInterfaceIpv6ArrayOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6ArrayOutput) ToWirelessAlternateManagementInterfaceIpv6ArrayOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6ArrayOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6ArrayOutput) Index(i pulumi.IntInput) WirelessAlternateManagementInterfaceIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessAlternateManagementInterfaceIpv6 {
		return vs[0].([]*WirelessAlternateManagementInterfaceIpv6)[vs[1].(int)]
	}).(WirelessAlternateManagementInterfaceIpv6Output)
}

type WirelessAlternateManagementInterfaceIpv6MapOutput struct{ *pulumi.OutputState }

func (WirelessAlternateManagementInterfaceIpv6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessAlternateManagementInterfaceIpv6)(nil)).Elem()
}

func (o WirelessAlternateManagementInterfaceIpv6MapOutput) ToWirelessAlternateManagementInterfaceIpv6MapOutput() WirelessAlternateManagementInterfaceIpv6MapOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6MapOutput) ToWirelessAlternateManagementInterfaceIpv6MapOutputWithContext(ctx context.Context) WirelessAlternateManagementInterfaceIpv6MapOutput {
	return o
}

func (o WirelessAlternateManagementInterfaceIpv6MapOutput) MapIndex(k pulumi.StringInput) WirelessAlternateManagementInterfaceIpv6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessAlternateManagementInterfaceIpv6 {
		return vs[0].(map[string]*WirelessAlternateManagementInterfaceIpv6)[vs[1].(string)]
	}).(WirelessAlternateManagementInterfaceIpv6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceIpv6Input)(nil)).Elem(), &WirelessAlternateManagementInterfaceIpv6{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceIpv6ArrayInput)(nil)).Elem(), WirelessAlternateManagementInterfaceIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessAlternateManagementInterfaceIpv6MapInput)(nil)).Elem(), WirelessAlternateManagementInterfaceIpv6Map{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceIpv6Output{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceIpv6ArrayOutput{})
	pulumi.RegisterOutputType(WirelessAlternateManagementInterfaceIpv6MapOutput{})
}
