// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewCellularSims(ctx, "example", &devices.CellularSimsArgs{
//				Serial: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesCellularSimsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/cellularSims:CellularSims example "serial"
// ```
type CellularSims struct {
	pulumi.CustomResourceState

	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// SIM Failover settings.
	SimFailover CellularSimsSimFailoverOutput `pulumi:"simFailover"`
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims CellularSimsSimArrayOutput `pulumi:"sims"`
}

// NewCellularSims registers a new resource with the given unique name, arguments, and options.
func NewCellularSims(ctx *pulumi.Context,
	name string, args *CellularSimsArgs, opts ...pulumi.ResourceOption) (*CellularSims, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CellularSims
	err := ctx.RegisterResource("meraki:devices/cellularSims:CellularSims", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCellularSims gets an existing CellularSims resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCellularSims(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellularSimsState, opts ...pulumi.ResourceOption) (*CellularSims, error) {
	var resource CellularSims
	err := ctx.ReadResource("meraki:devices/cellularSims:CellularSims", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CellularSims resources.
type cellularSimsState struct {
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// SIM Failover settings.
	SimFailover *CellularSimsSimFailover `pulumi:"simFailover"`
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims []CellularSimsSim `pulumi:"sims"`
}

type CellularSimsState struct {
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// SIM Failover settings.
	SimFailover CellularSimsSimFailoverPtrInput
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims CellularSimsSimArrayInput
}

func (CellularSimsState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularSimsState)(nil)).Elem()
}

type cellularSimsArgs struct {
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// SIM Failover settings.
	SimFailover *CellularSimsSimFailover `pulumi:"simFailover"`
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims []CellularSimsSim `pulumi:"sims"`
}

// The set of arguments for constructing a CellularSims resource.
type CellularSimsArgs struct {
	// serial path parameter.
	Serial pulumi.StringInput
	// SIM Failover settings.
	SimFailover CellularSimsSimFailoverPtrInput
	// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
	Sims CellularSimsSimArrayInput
}

func (CellularSimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularSimsArgs)(nil)).Elem()
}

type CellularSimsInput interface {
	pulumi.Input

	ToCellularSimsOutput() CellularSimsOutput
	ToCellularSimsOutputWithContext(ctx context.Context) CellularSimsOutput
}

func (*CellularSims) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularSims)(nil)).Elem()
}

func (i *CellularSims) ToCellularSimsOutput() CellularSimsOutput {
	return i.ToCellularSimsOutputWithContext(context.Background())
}

func (i *CellularSims) ToCellularSimsOutputWithContext(ctx context.Context) CellularSimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularSimsOutput)
}

// CellularSimsArrayInput is an input type that accepts CellularSimsArray and CellularSimsArrayOutput values.
// You can construct a concrete instance of `CellularSimsArrayInput` via:
//
//	CellularSimsArray{ CellularSimsArgs{...} }
type CellularSimsArrayInput interface {
	pulumi.Input

	ToCellularSimsArrayOutput() CellularSimsArrayOutput
	ToCellularSimsArrayOutputWithContext(context.Context) CellularSimsArrayOutput
}

type CellularSimsArray []CellularSimsInput

func (CellularSimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularSims)(nil)).Elem()
}

func (i CellularSimsArray) ToCellularSimsArrayOutput() CellularSimsArrayOutput {
	return i.ToCellularSimsArrayOutputWithContext(context.Background())
}

func (i CellularSimsArray) ToCellularSimsArrayOutputWithContext(ctx context.Context) CellularSimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularSimsArrayOutput)
}

// CellularSimsMapInput is an input type that accepts CellularSimsMap and CellularSimsMapOutput values.
// You can construct a concrete instance of `CellularSimsMapInput` via:
//
//	CellularSimsMap{ "key": CellularSimsArgs{...} }
type CellularSimsMapInput interface {
	pulumi.Input

	ToCellularSimsMapOutput() CellularSimsMapOutput
	ToCellularSimsMapOutputWithContext(context.Context) CellularSimsMapOutput
}

type CellularSimsMap map[string]CellularSimsInput

func (CellularSimsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularSims)(nil)).Elem()
}

func (i CellularSimsMap) ToCellularSimsMapOutput() CellularSimsMapOutput {
	return i.ToCellularSimsMapOutputWithContext(context.Background())
}

func (i CellularSimsMap) ToCellularSimsMapOutputWithContext(ctx context.Context) CellularSimsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularSimsMapOutput)
}

type CellularSimsOutput struct{ *pulumi.OutputState }

func (CellularSimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularSims)(nil)).Elem()
}

func (o CellularSimsOutput) ToCellularSimsOutput() CellularSimsOutput {
	return o
}

func (o CellularSimsOutput) ToCellularSimsOutputWithContext(ctx context.Context) CellularSimsOutput {
	return o
}

// serial path parameter.
func (o CellularSimsOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularSims) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// SIM Failover settings.
func (o CellularSimsOutput) SimFailover() CellularSimsSimFailoverOutput {
	return o.ApplyT(func(v *CellularSims) CellularSimsSimFailoverOutput { return v.SimFailover }).(CellularSimsSimFailoverOutput)
}

// List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
func (o CellularSimsOutput) Sims() CellularSimsSimArrayOutput {
	return o.ApplyT(func(v *CellularSims) CellularSimsSimArrayOutput { return v.Sims }).(CellularSimsSimArrayOutput)
}

type CellularSimsArrayOutput struct{ *pulumi.OutputState }

func (CellularSimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularSims)(nil)).Elem()
}

func (o CellularSimsArrayOutput) ToCellularSimsArrayOutput() CellularSimsArrayOutput {
	return o
}

func (o CellularSimsArrayOutput) ToCellularSimsArrayOutputWithContext(ctx context.Context) CellularSimsArrayOutput {
	return o
}

func (o CellularSimsArrayOutput) Index(i pulumi.IntInput) CellularSimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CellularSims {
		return vs[0].([]*CellularSims)[vs[1].(int)]
	}).(CellularSimsOutput)
}

type CellularSimsMapOutput struct{ *pulumi.OutputState }

func (CellularSimsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularSims)(nil)).Elem()
}

func (o CellularSimsMapOutput) ToCellularSimsMapOutput() CellularSimsMapOutput {
	return o
}

func (o CellularSimsMapOutput) ToCellularSimsMapOutputWithContext(ctx context.Context) CellularSimsMapOutput {
	return o
}

func (o CellularSimsMapOutput) MapIndex(k pulumi.StringInput) CellularSimsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CellularSims {
		return vs[0].(map[string]*CellularSims)[vs[1].(string)]
	}).(CellularSimsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellularSimsInput)(nil)).Elem(), &CellularSims{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularSimsArrayInput)(nil)).Elem(), CellularSimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularSimsMapInput)(nil)).Elem(), CellularSimsMap{})
	pulumi.RegisterOutputType(CellularSimsOutput{})
	pulumi.RegisterOutputType(CellularSimsArrayOutput{})
	pulumi.RegisterOutputType(CellularSimsMapOutput{})
}
