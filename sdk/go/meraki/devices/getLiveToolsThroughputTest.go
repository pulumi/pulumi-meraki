// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.LookupLiveToolsThroughputTest(ctx, &devices.LookupLiveToolsThroughputTestArgs{
//				Serial:           "string",
//				ThroughputTestId: "string",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesLiveToolsThroughputTestExample", example.Item)
//			return nil
//		})
//	}
//
// ```
func LookupLiveToolsThroughputTest(ctx *pulumi.Context, args *LookupLiveToolsThroughputTestArgs, opts ...pulumi.InvokeOption) (*LookupLiveToolsThroughputTestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLiveToolsThroughputTestResult
	err := ctx.Invoke("meraki:devices/getLiveToolsThroughputTest:getLiveToolsThroughputTest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLiveToolsThroughputTest.
type LookupLiveToolsThroughputTestArgs struct {
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// throughputTestId path parameter. Throughput test ID
	ThroughputTestId string `pulumi:"throughputTestId"`
}

// A collection of values returned by getLiveToolsThroughputTest.
type LookupLiveToolsThroughputTestResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string                         `pulumi:"id"`
	Item GetLiveToolsThroughputTestItem `pulumi:"item"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// throughputTestId path parameter. Throughput test ID
	ThroughputTestId string `pulumi:"throughputTestId"`
}

func LookupLiveToolsThroughputTestOutput(ctx *pulumi.Context, args LookupLiveToolsThroughputTestOutputArgs, opts ...pulumi.InvokeOption) LookupLiveToolsThroughputTestResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLiveToolsThroughputTestResult, error) {
			args := v.(LookupLiveToolsThroughputTestArgs)
			r, err := LookupLiveToolsThroughputTest(ctx, &args, opts...)
			var s LookupLiveToolsThroughputTestResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLiveToolsThroughputTestResultOutput)
}

// A collection of arguments for invoking getLiveToolsThroughputTest.
type LookupLiveToolsThroughputTestOutputArgs struct {
	// serial path parameter.
	Serial pulumi.StringInput `pulumi:"serial"`
	// throughputTestId path parameter. Throughput test ID
	ThroughputTestId pulumi.StringInput `pulumi:"throughputTestId"`
}

func (LookupLiveToolsThroughputTestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsThroughputTestArgs)(nil)).Elem()
}

// A collection of values returned by getLiveToolsThroughputTest.
type LookupLiveToolsThroughputTestResultOutput struct{ *pulumi.OutputState }

func (LookupLiveToolsThroughputTestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsThroughputTestResult)(nil)).Elem()
}

func (o LookupLiveToolsThroughputTestResultOutput) ToLookupLiveToolsThroughputTestResultOutput() LookupLiveToolsThroughputTestResultOutput {
	return o
}

func (o LookupLiveToolsThroughputTestResultOutput) ToLookupLiveToolsThroughputTestResultOutputWithContext(ctx context.Context) LookupLiveToolsThroughputTestResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLiveToolsThroughputTestResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsThroughputTestResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLiveToolsThroughputTestResultOutput) Item() GetLiveToolsThroughputTestItemOutput {
	return o.ApplyT(func(v LookupLiveToolsThroughputTestResult) GetLiveToolsThroughputTestItem { return v.Item }).(GetLiveToolsThroughputTestItemOutput)
}

// serial path parameter.
func (o LookupLiveToolsThroughputTestResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsThroughputTestResult) string { return v.Serial }).(pulumi.StringOutput)
}

// throughputTestId path parameter. Throughput test ID
func (o LookupLiveToolsThroughputTestResultOutput) ThroughputTestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsThroughputTestResult) string { return v.ThroughputTestId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLiveToolsThroughputTestResultOutput{})
}
