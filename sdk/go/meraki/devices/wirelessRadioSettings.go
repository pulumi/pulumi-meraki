// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/wirelessRadioSettings:WirelessRadioSettings example "serial"
// ```
type WirelessRadioSettings struct {
	pulumi.CustomResourceState

	// Manual radio settings for 5 GHz.
	FiveGhzSettings WirelessRadioSettingsFiveGhzSettingsOutput `pulumi:"fiveGhzSettings"`
	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileId pulumi.StringOutput `pulumi:"rfProfileId"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// Manual radio settings for 2.4 GHz.
	TwoFourGhzSettings WirelessRadioSettingsTwoFourGhzSettingsOutput `pulumi:"twoFourGhzSettings"`
}

// NewWirelessRadioSettings registers a new resource with the given unique name, arguments, and options.
func NewWirelessRadioSettings(ctx *pulumi.Context,
	name string, args *WirelessRadioSettingsArgs, opts ...pulumi.ResourceOption) (*WirelessRadioSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WirelessRadioSettings
	err := ctx.RegisterResource("meraki:devices/wirelessRadioSettings:WirelessRadioSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelessRadioSettings gets an existing WirelessRadioSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelessRadioSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelessRadioSettingsState, opts ...pulumi.ResourceOption) (*WirelessRadioSettings, error) {
	var resource WirelessRadioSettings
	err := ctx.ReadResource("meraki:devices/wirelessRadioSettings:WirelessRadioSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelessRadioSettings resources.
type wirelessRadioSettingsState struct {
	// Manual radio settings for 5 GHz.
	FiveGhzSettings *WirelessRadioSettingsFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileId *string `pulumi:"rfProfileId"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// Manual radio settings for 2.4 GHz.
	TwoFourGhzSettings *WirelessRadioSettingsTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

type WirelessRadioSettingsState struct {
	// Manual radio settings for 5 GHz.
	FiveGhzSettings WirelessRadioSettingsFiveGhzSettingsPtrInput
	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileId pulumi.StringPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// Manual radio settings for 2.4 GHz.
	TwoFourGhzSettings WirelessRadioSettingsTwoFourGhzSettingsPtrInput
}

func (WirelessRadioSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRadioSettingsState)(nil)).Elem()
}

type wirelessRadioSettingsArgs struct {
	// Manual radio settings for 5 GHz.
	FiveGhzSettings *WirelessRadioSettingsFiveGhzSettings `pulumi:"fiveGhzSettings"`
	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileId *string `pulumi:"rfProfileId"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// Manual radio settings for 2.4 GHz.
	TwoFourGhzSettings *WirelessRadioSettingsTwoFourGhzSettings `pulumi:"twoFourGhzSettings"`
}

// The set of arguments for constructing a WirelessRadioSettings resource.
type WirelessRadioSettingsArgs struct {
	// Manual radio settings for 5 GHz.
	FiveGhzSettings WirelessRadioSettingsFiveGhzSettingsPtrInput
	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileId pulumi.StringPtrInput
	// serial path parameter.
	Serial pulumi.StringInput
	// Manual radio settings for 2.4 GHz.
	TwoFourGhzSettings WirelessRadioSettingsTwoFourGhzSettingsPtrInput
}

func (WirelessRadioSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelessRadioSettingsArgs)(nil)).Elem()
}

type WirelessRadioSettingsInput interface {
	pulumi.Input

	ToWirelessRadioSettingsOutput() WirelessRadioSettingsOutput
	ToWirelessRadioSettingsOutputWithContext(ctx context.Context) WirelessRadioSettingsOutput
}

func (*WirelessRadioSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRadioSettings)(nil)).Elem()
}

func (i *WirelessRadioSettings) ToWirelessRadioSettingsOutput() WirelessRadioSettingsOutput {
	return i.ToWirelessRadioSettingsOutputWithContext(context.Background())
}

func (i *WirelessRadioSettings) ToWirelessRadioSettingsOutputWithContext(ctx context.Context) WirelessRadioSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRadioSettingsOutput)
}

// WirelessRadioSettingsArrayInput is an input type that accepts WirelessRadioSettingsArray and WirelessRadioSettingsArrayOutput values.
// You can construct a concrete instance of `WirelessRadioSettingsArrayInput` via:
//
//	WirelessRadioSettingsArray{ WirelessRadioSettingsArgs{...} }
type WirelessRadioSettingsArrayInput interface {
	pulumi.Input

	ToWirelessRadioSettingsArrayOutput() WirelessRadioSettingsArrayOutput
	ToWirelessRadioSettingsArrayOutputWithContext(context.Context) WirelessRadioSettingsArrayOutput
}

type WirelessRadioSettingsArray []WirelessRadioSettingsInput

func (WirelessRadioSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRadioSettings)(nil)).Elem()
}

func (i WirelessRadioSettingsArray) ToWirelessRadioSettingsArrayOutput() WirelessRadioSettingsArrayOutput {
	return i.ToWirelessRadioSettingsArrayOutputWithContext(context.Background())
}

func (i WirelessRadioSettingsArray) ToWirelessRadioSettingsArrayOutputWithContext(ctx context.Context) WirelessRadioSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRadioSettingsArrayOutput)
}

// WirelessRadioSettingsMapInput is an input type that accepts WirelessRadioSettingsMap and WirelessRadioSettingsMapOutput values.
// You can construct a concrete instance of `WirelessRadioSettingsMapInput` via:
//
//	WirelessRadioSettingsMap{ "key": WirelessRadioSettingsArgs{...} }
type WirelessRadioSettingsMapInput interface {
	pulumi.Input

	ToWirelessRadioSettingsMapOutput() WirelessRadioSettingsMapOutput
	ToWirelessRadioSettingsMapOutputWithContext(context.Context) WirelessRadioSettingsMapOutput
}

type WirelessRadioSettingsMap map[string]WirelessRadioSettingsInput

func (WirelessRadioSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRadioSettings)(nil)).Elem()
}

func (i WirelessRadioSettingsMap) ToWirelessRadioSettingsMapOutput() WirelessRadioSettingsMapOutput {
	return i.ToWirelessRadioSettingsMapOutputWithContext(context.Background())
}

func (i WirelessRadioSettingsMap) ToWirelessRadioSettingsMapOutputWithContext(ctx context.Context) WirelessRadioSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelessRadioSettingsMapOutput)
}

type WirelessRadioSettingsOutput struct{ *pulumi.OutputState }

func (WirelessRadioSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelessRadioSettings)(nil)).Elem()
}

func (o WirelessRadioSettingsOutput) ToWirelessRadioSettingsOutput() WirelessRadioSettingsOutput {
	return o
}

func (o WirelessRadioSettingsOutput) ToWirelessRadioSettingsOutputWithContext(ctx context.Context) WirelessRadioSettingsOutput {
	return o
}

// Manual radio settings for 5 GHz.
func (o WirelessRadioSettingsOutput) FiveGhzSettings() WirelessRadioSettingsFiveGhzSettingsOutput {
	return o.ApplyT(func(v *WirelessRadioSettings) WirelessRadioSettingsFiveGhzSettingsOutput { return v.FiveGhzSettings }).(WirelessRadioSettingsFiveGhzSettingsOutput)
}

// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
func (o WirelessRadioSettingsOutput) RfProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRadioSettings) pulumi.StringOutput { return v.RfProfileId }).(pulumi.StringOutput)
}

// serial path parameter.
func (o WirelessRadioSettingsOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelessRadioSettings) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// Manual radio settings for 2.4 GHz.
func (o WirelessRadioSettingsOutput) TwoFourGhzSettings() WirelessRadioSettingsTwoFourGhzSettingsOutput {
	return o.ApplyT(func(v *WirelessRadioSettings) WirelessRadioSettingsTwoFourGhzSettingsOutput {
		return v.TwoFourGhzSettings
	}).(WirelessRadioSettingsTwoFourGhzSettingsOutput)
}

type WirelessRadioSettingsArrayOutput struct{ *pulumi.OutputState }

func (WirelessRadioSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelessRadioSettings)(nil)).Elem()
}

func (o WirelessRadioSettingsArrayOutput) ToWirelessRadioSettingsArrayOutput() WirelessRadioSettingsArrayOutput {
	return o
}

func (o WirelessRadioSettingsArrayOutput) ToWirelessRadioSettingsArrayOutputWithContext(ctx context.Context) WirelessRadioSettingsArrayOutput {
	return o
}

func (o WirelessRadioSettingsArrayOutput) Index(i pulumi.IntInput) WirelessRadioSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelessRadioSettings {
		return vs[0].([]*WirelessRadioSettings)[vs[1].(int)]
	}).(WirelessRadioSettingsOutput)
}

type WirelessRadioSettingsMapOutput struct{ *pulumi.OutputState }

func (WirelessRadioSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelessRadioSettings)(nil)).Elem()
}

func (o WirelessRadioSettingsMapOutput) ToWirelessRadioSettingsMapOutput() WirelessRadioSettingsMapOutput {
	return o
}

func (o WirelessRadioSettingsMapOutput) ToWirelessRadioSettingsMapOutputWithContext(ctx context.Context) WirelessRadioSettingsMapOutput {
	return o
}

func (o WirelessRadioSettingsMapOutput) MapIndex(k pulumi.StringInput) WirelessRadioSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelessRadioSettings {
		return vs[0].(map[string]*WirelessRadioSettings)[vs[1].(string)]
	}).(WirelessRadioSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRadioSettingsInput)(nil)).Elem(), &WirelessRadioSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRadioSettingsArrayInput)(nil)).Elem(), WirelessRadioSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelessRadioSettingsMapInput)(nil)).Elem(), WirelessRadioSettingsMap{})
	pulumi.RegisterOutputType(WirelessRadioSettingsOutput{})
	pulumi.RegisterOutputType(WirelessRadioSettingsArrayOutput{})
	pulumi.RegisterOutputType(WirelessRadioSettingsMapOutput{})
}
