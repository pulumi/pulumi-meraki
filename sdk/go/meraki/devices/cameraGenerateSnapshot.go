// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewCameraGenerateSnapshot(ctx, "example", &devices.CameraGenerateSnapshotArgs{
//				Serial: pulumi.String("string"),
//				Parameters: &devices.CameraGenerateSnapshotParametersArgs{
//					Fullframe: pulumi.Bool(false),
//					Timestamp: pulumi.String("2021-04-30T15:18:08Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesCameraGenerateSnapshotExample", example)
//			return nil
//		})
//	}
//
// ```
type CameraGenerateSnapshot struct {
	pulumi.CustomResourceState

	Parameters CameraGenerateSnapshotParametersOutput `pulumi:"parameters"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewCameraGenerateSnapshot registers a new resource with the given unique name, arguments, and options.
func NewCameraGenerateSnapshot(ctx *pulumi.Context,
	name string, args *CameraGenerateSnapshotArgs, opts ...pulumi.ResourceOption) (*CameraGenerateSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CameraGenerateSnapshot
	err := ctx.RegisterResource("meraki:devices/cameraGenerateSnapshot:CameraGenerateSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCameraGenerateSnapshot gets an existing CameraGenerateSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCameraGenerateSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CameraGenerateSnapshotState, opts ...pulumi.ResourceOption) (*CameraGenerateSnapshot, error) {
	var resource CameraGenerateSnapshot
	err := ctx.ReadResource("meraki:devices/cameraGenerateSnapshot:CameraGenerateSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CameraGenerateSnapshot resources.
type cameraGenerateSnapshotState struct {
	Parameters *CameraGenerateSnapshotParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type CameraGenerateSnapshotState struct {
	Parameters CameraGenerateSnapshotParametersPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (CameraGenerateSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraGenerateSnapshotState)(nil)).Elem()
}

type cameraGenerateSnapshotArgs struct {
	Parameters CameraGenerateSnapshotParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a CameraGenerateSnapshot resource.
type CameraGenerateSnapshotArgs struct {
	Parameters CameraGenerateSnapshotParametersInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (CameraGenerateSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraGenerateSnapshotArgs)(nil)).Elem()
}

type CameraGenerateSnapshotInput interface {
	pulumi.Input

	ToCameraGenerateSnapshotOutput() CameraGenerateSnapshotOutput
	ToCameraGenerateSnapshotOutputWithContext(ctx context.Context) CameraGenerateSnapshotOutput
}

func (*CameraGenerateSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraGenerateSnapshot)(nil)).Elem()
}

func (i *CameraGenerateSnapshot) ToCameraGenerateSnapshotOutput() CameraGenerateSnapshotOutput {
	return i.ToCameraGenerateSnapshotOutputWithContext(context.Background())
}

func (i *CameraGenerateSnapshot) ToCameraGenerateSnapshotOutputWithContext(ctx context.Context) CameraGenerateSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraGenerateSnapshotOutput)
}

// CameraGenerateSnapshotArrayInput is an input type that accepts CameraGenerateSnapshotArray and CameraGenerateSnapshotArrayOutput values.
// You can construct a concrete instance of `CameraGenerateSnapshotArrayInput` via:
//
//	CameraGenerateSnapshotArray{ CameraGenerateSnapshotArgs{...} }
type CameraGenerateSnapshotArrayInput interface {
	pulumi.Input

	ToCameraGenerateSnapshotArrayOutput() CameraGenerateSnapshotArrayOutput
	ToCameraGenerateSnapshotArrayOutputWithContext(context.Context) CameraGenerateSnapshotArrayOutput
}

type CameraGenerateSnapshotArray []CameraGenerateSnapshotInput

func (CameraGenerateSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraGenerateSnapshot)(nil)).Elem()
}

func (i CameraGenerateSnapshotArray) ToCameraGenerateSnapshotArrayOutput() CameraGenerateSnapshotArrayOutput {
	return i.ToCameraGenerateSnapshotArrayOutputWithContext(context.Background())
}

func (i CameraGenerateSnapshotArray) ToCameraGenerateSnapshotArrayOutputWithContext(ctx context.Context) CameraGenerateSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraGenerateSnapshotArrayOutput)
}

// CameraGenerateSnapshotMapInput is an input type that accepts CameraGenerateSnapshotMap and CameraGenerateSnapshotMapOutput values.
// You can construct a concrete instance of `CameraGenerateSnapshotMapInput` via:
//
//	CameraGenerateSnapshotMap{ "key": CameraGenerateSnapshotArgs{...} }
type CameraGenerateSnapshotMapInput interface {
	pulumi.Input

	ToCameraGenerateSnapshotMapOutput() CameraGenerateSnapshotMapOutput
	ToCameraGenerateSnapshotMapOutputWithContext(context.Context) CameraGenerateSnapshotMapOutput
}

type CameraGenerateSnapshotMap map[string]CameraGenerateSnapshotInput

func (CameraGenerateSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraGenerateSnapshot)(nil)).Elem()
}

func (i CameraGenerateSnapshotMap) ToCameraGenerateSnapshotMapOutput() CameraGenerateSnapshotMapOutput {
	return i.ToCameraGenerateSnapshotMapOutputWithContext(context.Background())
}

func (i CameraGenerateSnapshotMap) ToCameraGenerateSnapshotMapOutputWithContext(ctx context.Context) CameraGenerateSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraGenerateSnapshotMapOutput)
}

type CameraGenerateSnapshotOutput struct{ *pulumi.OutputState }

func (CameraGenerateSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraGenerateSnapshot)(nil)).Elem()
}

func (o CameraGenerateSnapshotOutput) ToCameraGenerateSnapshotOutput() CameraGenerateSnapshotOutput {
	return o
}

func (o CameraGenerateSnapshotOutput) ToCameraGenerateSnapshotOutputWithContext(ctx context.Context) CameraGenerateSnapshotOutput {
	return o
}

func (o CameraGenerateSnapshotOutput) Parameters() CameraGenerateSnapshotParametersOutput {
	return o.ApplyT(func(v *CameraGenerateSnapshot) CameraGenerateSnapshotParametersOutput { return v.Parameters }).(CameraGenerateSnapshotParametersOutput)
}

// serial path parameter.
func (o CameraGenerateSnapshotOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *CameraGenerateSnapshot) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type CameraGenerateSnapshotArrayOutput struct{ *pulumi.OutputState }

func (CameraGenerateSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraGenerateSnapshot)(nil)).Elem()
}

func (o CameraGenerateSnapshotArrayOutput) ToCameraGenerateSnapshotArrayOutput() CameraGenerateSnapshotArrayOutput {
	return o
}

func (o CameraGenerateSnapshotArrayOutput) ToCameraGenerateSnapshotArrayOutputWithContext(ctx context.Context) CameraGenerateSnapshotArrayOutput {
	return o
}

func (o CameraGenerateSnapshotArrayOutput) Index(i pulumi.IntInput) CameraGenerateSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CameraGenerateSnapshot {
		return vs[0].([]*CameraGenerateSnapshot)[vs[1].(int)]
	}).(CameraGenerateSnapshotOutput)
}

type CameraGenerateSnapshotMapOutput struct{ *pulumi.OutputState }

func (CameraGenerateSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraGenerateSnapshot)(nil)).Elem()
}

func (o CameraGenerateSnapshotMapOutput) ToCameraGenerateSnapshotMapOutput() CameraGenerateSnapshotMapOutput {
	return o
}

func (o CameraGenerateSnapshotMapOutput) ToCameraGenerateSnapshotMapOutputWithContext(ctx context.Context) CameraGenerateSnapshotMapOutput {
	return o
}

func (o CameraGenerateSnapshotMapOutput) MapIndex(k pulumi.StringInput) CameraGenerateSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CameraGenerateSnapshot {
		return vs[0].(map[string]*CameraGenerateSnapshot)[vs[1].(string)]
	}).(CameraGenerateSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CameraGenerateSnapshotInput)(nil)).Elem(), &CameraGenerateSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraGenerateSnapshotArrayInput)(nil)).Elem(), CameraGenerateSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraGenerateSnapshotMapInput)(nil)).Elem(), CameraGenerateSnapshotMap{})
	pulumi.RegisterOutputType(CameraGenerateSnapshotOutput{})
	pulumi.RegisterOutputType(CameraGenerateSnapshotArrayOutput{})
	pulumi.RegisterOutputType(CameraGenerateSnapshotMapOutput{})
}
