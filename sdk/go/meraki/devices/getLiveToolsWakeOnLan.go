// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.LookupLiveToolsWakeOnLan(ctx, &devices.LookupLiveToolsWakeOnLanArgs{
//				Serial:      "string",
//				WakeOnLanId: "string",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesLiveToolsWakeOnLanExample", example.Item)
//			return nil
//		})
//	}
//
// ```
func LookupLiveToolsWakeOnLan(ctx *pulumi.Context, args *LookupLiveToolsWakeOnLanArgs, opts ...pulumi.InvokeOption) (*LookupLiveToolsWakeOnLanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLiveToolsWakeOnLanResult
	err := ctx.Invoke("meraki:devices/getLiveToolsWakeOnLan:getLiveToolsWakeOnLan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLiveToolsWakeOnLan.
type LookupLiveToolsWakeOnLanArgs struct {
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// wakeOnLanId path parameter. Wake on lan ID
	WakeOnLanId string `pulumi:"wakeOnLanId"`
}

// A collection of values returned by getLiveToolsWakeOnLan.
type LookupLiveToolsWakeOnLanResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string                    `pulumi:"id"`
	Item GetLiveToolsWakeOnLanItem `pulumi:"item"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// wakeOnLanId path parameter. Wake on lan ID
	WakeOnLanId string `pulumi:"wakeOnLanId"`
}

func LookupLiveToolsWakeOnLanOutput(ctx *pulumi.Context, args LookupLiveToolsWakeOnLanOutputArgs, opts ...pulumi.InvokeOption) LookupLiveToolsWakeOnLanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLiveToolsWakeOnLanResult, error) {
			args := v.(LookupLiveToolsWakeOnLanArgs)
			r, err := LookupLiveToolsWakeOnLan(ctx, &args, opts...)
			var s LookupLiveToolsWakeOnLanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLiveToolsWakeOnLanResultOutput)
}

// A collection of arguments for invoking getLiveToolsWakeOnLan.
type LookupLiveToolsWakeOnLanOutputArgs struct {
	// serial path parameter.
	Serial pulumi.StringInput `pulumi:"serial"`
	// wakeOnLanId path parameter. Wake on lan ID
	WakeOnLanId pulumi.StringInput `pulumi:"wakeOnLanId"`
}

func (LookupLiveToolsWakeOnLanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsWakeOnLanArgs)(nil)).Elem()
}

// A collection of values returned by getLiveToolsWakeOnLan.
type LookupLiveToolsWakeOnLanResultOutput struct{ *pulumi.OutputState }

func (LookupLiveToolsWakeOnLanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsWakeOnLanResult)(nil)).Elem()
}

func (o LookupLiveToolsWakeOnLanResultOutput) ToLookupLiveToolsWakeOnLanResultOutput() LookupLiveToolsWakeOnLanResultOutput {
	return o
}

func (o LookupLiveToolsWakeOnLanResultOutput) ToLookupLiveToolsWakeOnLanResultOutputWithContext(ctx context.Context) LookupLiveToolsWakeOnLanResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLiveToolsWakeOnLanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsWakeOnLanResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLiveToolsWakeOnLanResultOutput) Item() GetLiveToolsWakeOnLanItemOutput {
	return o.ApplyT(func(v LookupLiveToolsWakeOnLanResult) GetLiveToolsWakeOnLanItem { return v.Item }).(GetLiveToolsWakeOnLanItemOutput)
}

// serial path parameter.
func (o LookupLiveToolsWakeOnLanResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsWakeOnLanResult) string { return v.Serial }).(pulumi.StringOutput)
}

// wakeOnLanId path parameter. Wake on lan ID
func (o LookupLiveToolsWakeOnLanResultOutput) WakeOnLanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsWakeOnLanResult) string { return v.WakeOnLanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLiveToolsWakeOnLanResultOutput{})
}
