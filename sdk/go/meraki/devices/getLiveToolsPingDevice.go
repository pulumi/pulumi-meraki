// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.LookupLiveToolsPingDevice(ctx, &devices.LookupLiveToolsPingDeviceArgs{
//				Id:     "string",
//				Serial: "string",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesLiveToolsPingDeviceExample", example.Item)
//			return nil
//		})
//	}
//
// ```
func LookupLiveToolsPingDevice(ctx *pulumi.Context, args *LookupLiveToolsPingDeviceArgs, opts ...pulumi.InvokeOption) (*LookupLiveToolsPingDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLiveToolsPingDeviceResult
	err := ctx.Invoke("meraki:devices/getLiveToolsPingDevice:getLiveToolsPingDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLiveToolsPingDevice.
type LookupLiveToolsPingDeviceArgs struct {
	// id path parameter.
	Id string `pulumi:"id"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// A collection of values returned by getLiveToolsPingDevice.
type LookupLiveToolsPingDeviceResult struct {
	// id path parameter.
	Id   string                     `pulumi:"id"`
	Item GetLiveToolsPingDeviceItem `pulumi:"item"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

func LookupLiveToolsPingDeviceOutput(ctx *pulumi.Context, args LookupLiveToolsPingDeviceOutputArgs, opts ...pulumi.InvokeOption) LookupLiveToolsPingDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLiveToolsPingDeviceResult, error) {
			args := v.(LookupLiveToolsPingDeviceArgs)
			r, err := LookupLiveToolsPingDevice(ctx, &args, opts...)
			var s LookupLiveToolsPingDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLiveToolsPingDeviceResultOutput)
}

// A collection of arguments for invoking getLiveToolsPingDevice.
type LookupLiveToolsPingDeviceOutputArgs struct {
	// id path parameter.
	Id pulumi.StringInput `pulumi:"id"`
	// serial path parameter.
	Serial pulumi.StringInput `pulumi:"serial"`
}

func (LookupLiveToolsPingDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsPingDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getLiveToolsPingDevice.
type LookupLiveToolsPingDeviceResultOutput struct{ *pulumi.OutputState }

func (LookupLiveToolsPingDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLiveToolsPingDeviceResult)(nil)).Elem()
}

func (o LookupLiveToolsPingDeviceResultOutput) ToLookupLiveToolsPingDeviceResultOutput() LookupLiveToolsPingDeviceResultOutput {
	return o
}

func (o LookupLiveToolsPingDeviceResultOutput) ToLookupLiveToolsPingDeviceResultOutputWithContext(ctx context.Context) LookupLiveToolsPingDeviceResultOutput {
	return o
}

// id path parameter.
func (o LookupLiveToolsPingDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsPingDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLiveToolsPingDeviceResultOutput) Item() GetLiveToolsPingDeviceItemOutput {
	return o.ApplyT(func(v LookupLiveToolsPingDeviceResult) GetLiveToolsPingDeviceItem { return v.Item }).(GetLiveToolsPingDeviceItemOutput)
}

// serial path parameter.
func (o LookupLiveToolsPingDeviceResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLiveToolsPingDeviceResult) string { return v.Serial }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLiveToolsPingDeviceResultOutput{})
}
