// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/managementInterface:ManagementInterface example "serial"
// ```
type ManagementInterface struct {
	pulumi.CustomResourceState

	// Dynamic DNS hostnames.
	DdnsHostnames ManagementInterfaceDdnsHostnamesOutput `pulumi:"ddnsHostnames"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// WAN 1 settings
	Wan1 ManagementInterfaceWan1Output `pulumi:"wan1"`
	// WAN 2 settings (only for MX devices)
	Wan2 ManagementInterfaceWan2Output `pulumi:"wan2"`
}

// NewManagementInterface registers a new resource with the given unique name, arguments, and options.
func NewManagementInterface(ctx *pulumi.Context,
	name string, args *ManagementInterfaceArgs, opts ...pulumi.ResourceOption) (*ManagementInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagementInterface
	err := ctx.RegisterResource("meraki:devices/managementInterface:ManagementInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementInterface gets an existing ManagementInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementInterfaceState, opts ...pulumi.ResourceOption) (*ManagementInterface, error) {
	var resource ManagementInterface
	err := ctx.ReadResource("meraki:devices/managementInterface:ManagementInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementInterface resources.
type managementInterfaceState struct {
	// Dynamic DNS hostnames.
	DdnsHostnames *ManagementInterfaceDdnsHostnames `pulumi:"ddnsHostnames"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// WAN 1 settings
	Wan1 *ManagementInterfaceWan1 `pulumi:"wan1"`
	// WAN 2 settings (only for MX devices)
	Wan2 *ManagementInterfaceWan2 `pulumi:"wan2"`
}

type ManagementInterfaceState struct {
	// Dynamic DNS hostnames.
	DdnsHostnames ManagementInterfaceDdnsHostnamesPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// WAN 1 settings
	Wan1 ManagementInterfaceWan1PtrInput
	// WAN 2 settings (only for MX devices)
	Wan2 ManagementInterfaceWan2PtrInput
}

func (ManagementInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementInterfaceState)(nil)).Elem()
}

type managementInterfaceArgs struct {
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// WAN 1 settings
	Wan1 *ManagementInterfaceWan1 `pulumi:"wan1"`
	// WAN 2 settings (only for MX devices)
	Wan2 *ManagementInterfaceWan2 `pulumi:"wan2"`
}

// The set of arguments for constructing a ManagementInterface resource.
type ManagementInterfaceArgs struct {
	// serial path parameter.
	Serial pulumi.StringInput
	// WAN 1 settings
	Wan1 ManagementInterfaceWan1PtrInput
	// WAN 2 settings (only for MX devices)
	Wan2 ManagementInterfaceWan2PtrInput
}

func (ManagementInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementInterfaceArgs)(nil)).Elem()
}

type ManagementInterfaceInput interface {
	pulumi.Input

	ToManagementInterfaceOutput() ManagementInterfaceOutput
	ToManagementInterfaceOutputWithContext(ctx context.Context) ManagementInterfaceOutput
}

func (*ManagementInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementInterface)(nil)).Elem()
}

func (i *ManagementInterface) ToManagementInterfaceOutput() ManagementInterfaceOutput {
	return i.ToManagementInterfaceOutputWithContext(context.Background())
}

func (i *ManagementInterface) ToManagementInterfaceOutputWithContext(ctx context.Context) ManagementInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementInterfaceOutput)
}

// ManagementInterfaceArrayInput is an input type that accepts ManagementInterfaceArray and ManagementInterfaceArrayOutput values.
// You can construct a concrete instance of `ManagementInterfaceArrayInput` via:
//
//	ManagementInterfaceArray{ ManagementInterfaceArgs{...} }
type ManagementInterfaceArrayInput interface {
	pulumi.Input

	ToManagementInterfaceArrayOutput() ManagementInterfaceArrayOutput
	ToManagementInterfaceArrayOutputWithContext(context.Context) ManagementInterfaceArrayOutput
}

type ManagementInterfaceArray []ManagementInterfaceInput

func (ManagementInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementInterface)(nil)).Elem()
}

func (i ManagementInterfaceArray) ToManagementInterfaceArrayOutput() ManagementInterfaceArrayOutput {
	return i.ToManagementInterfaceArrayOutputWithContext(context.Background())
}

func (i ManagementInterfaceArray) ToManagementInterfaceArrayOutputWithContext(ctx context.Context) ManagementInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementInterfaceArrayOutput)
}

// ManagementInterfaceMapInput is an input type that accepts ManagementInterfaceMap and ManagementInterfaceMapOutput values.
// You can construct a concrete instance of `ManagementInterfaceMapInput` via:
//
//	ManagementInterfaceMap{ "key": ManagementInterfaceArgs{...} }
type ManagementInterfaceMapInput interface {
	pulumi.Input

	ToManagementInterfaceMapOutput() ManagementInterfaceMapOutput
	ToManagementInterfaceMapOutputWithContext(context.Context) ManagementInterfaceMapOutput
}

type ManagementInterfaceMap map[string]ManagementInterfaceInput

func (ManagementInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementInterface)(nil)).Elem()
}

func (i ManagementInterfaceMap) ToManagementInterfaceMapOutput() ManagementInterfaceMapOutput {
	return i.ToManagementInterfaceMapOutputWithContext(context.Background())
}

func (i ManagementInterfaceMap) ToManagementInterfaceMapOutputWithContext(ctx context.Context) ManagementInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementInterfaceMapOutput)
}

type ManagementInterfaceOutput struct{ *pulumi.OutputState }

func (ManagementInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementInterface)(nil)).Elem()
}

func (o ManagementInterfaceOutput) ToManagementInterfaceOutput() ManagementInterfaceOutput {
	return o
}

func (o ManagementInterfaceOutput) ToManagementInterfaceOutputWithContext(ctx context.Context) ManagementInterfaceOutput {
	return o
}

// Dynamic DNS hostnames.
func (o ManagementInterfaceOutput) DdnsHostnames() ManagementInterfaceDdnsHostnamesOutput {
	return o.ApplyT(func(v *ManagementInterface) ManagementInterfaceDdnsHostnamesOutput { return v.DdnsHostnames }).(ManagementInterfaceDdnsHostnamesOutput)
}

// serial path parameter.
func (o ManagementInterfaceOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementInterface) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// WAN 1 settings
func (o ManagementInterfaceOutput) Wan1() ManagementInterfaceWan1Output {
	return o.ApplyT(func(v *ManagementInterface) ManagementInterfaceWan1Output { return v.Wan1 }).(ManagementInterfaceWan1Output)
}

// WAN 2 settings (only for MX devices)
func (o ManagementInterfaceOutput) Wan2() ManagementInterfaceWan2Output {
	return o.ApplyT(func(v *ManagementInterface) ManagementInterfaceWan2Output { return v.Wan2 }).(ManagementInterfaceWan2Output)
}

type ManagementInterfaceArrayOutput struct{ *pulumi.OutputState }

func (ManagementInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementInterface)(nil)).Elem()
}

func (o ManagementInterfaceArrayOutput) ToManagementInterfaceArrayOutput() ManagementInterfaceArrayOutput {
	return o
}

func (o ManagementInterfaceArrayOutput) ToManagementInterfaceArrayOutputWithContext(ctx context.Context) ManagementInterfaceArrayOutput {
	return o
}

func (o ManagementInterfaceArrayOutput) Index(i pulumi.IntInput) ManagementInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagementInterface {
		return vs[0].([]*ManagementInterface)[vs[1].(int)]
	}).(ManagementInterfaceOutput)
}

type ManagementInterfaceMapOutput struct{ *pulumi.OutputState }

func (ManagementInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementInterface)(nil)).Elem()
}

func (o ManagementInterfaceMapOutput) ToManagementInterfaceMapOutput() ManagementInterfaceMapOutput {
	return o
}

func (o ManagementInterfaceMapOutput) ToManagementInterfaceMapOutputWithContext(ctx context.Context) ManagementInterfaceMapOutput {
	return o
}

func (o ManagementInterfaceMapOutput) MapIndex(k pulumi.StringInput) ManagementInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagementInterface {
		return vs[0].(map[string]*ManagementInterface)[vs[1].(string)]
	}).(ManagementInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementInterfaceInput)(nil)).Elem(), &ManagementInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementInterfaceArrayInput)(nil)).Elem(), ManagementInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementInterfaceMapInput)(nil)).Elem(), ManagementInterfaceMap{})
	pulumi.RegisterOutputType(ManagementInterfaceOutput{})
	pulumi.RegisterOutputType(ManagementInterfaceArrayOutput{})
	pulumi.RegisterOutputType(ManagementInterfaceMapOutput{})
}
