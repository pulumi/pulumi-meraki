// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewSwitchPortsCycle(ctx, "example", &devices.SwitchPortsCycleArgs{
//				Serial: pulumi.String("string"),
//				Parameters: &devices.SwitchPortsCycleParametersArgs{
//					Ports: pulumi.StringArray{
//						pulumi.String("1"),
//						pulumi.String("2-5"),
//						pulumi.String("1_MA-MOD-8X10G_1"),
//						pulumi.String("1_MA-MOD-8X10G_2-1_MA-MOD-8X10G_8"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesSwitchPortsCycleExample", example)
//			return nil
//		})
//	}
//
// ```
type SwitchPortsCycle struct {
	pulumi.CustomResourceState

	Item       SwitchPortsCycleItemOutput       `pulumi:"item"`
	Parameters SwitchPortsCycleParametersOutput `pulumi:"parameters"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewSwitchPortsCycle registers a new resource with the given unique name, arguments, and options.
func NewSwitchPortsCycle(ctx *pulumi.Context,
	name string, args *SwitchPortsCycleArgs, opts ...pulumi.ResourceOption) (*SwitchPortsCycle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchPortsCycle
	err := ctx.RegisterResource("meraki:devices/switchPortsCycle:SwitchPortsCycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchPortsCycle gets an existing SwitchPortsCycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchPortsCycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchPortsCycleState, opts ...pulumi.ResourceOption) (*SwitchPortsCycle, error) {
	var resource SwitchPortsCycle
	err := ctx.ReadResource("meraki:devices/switchPortsCycle:SwitchPortsCycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchPortsCycle resources.
type switchPortsCycleState struct {
	Item       *SwitchPortsCycleItem       `pulumi:"item"`
	Parameters *SwitchPortsCycleParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type SwitchPortsCycleState struct {
	Item       SwitchPortsCycleItemPtrInput
	Parameters SwitchPortsCycleParametersPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (SwitchPortsCycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchPortsCycleState)(nil)).Elem()
}

type switchPortsCycleArgs struct {
	Parameters SwitchPortsCycleParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a SwitchPortsCycle resource.
type SwitchPortsCycleArgs struct {
	Parameters SwitchPortsCycleParametersInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (SwitchPortsCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchPortsCycleArgs)(nil)).Elem()
}

type SwitchPortsCycleInput interface {
	pulumi.Input

	ToSwitchPortsCycleOutput() SwitchPortsCycleOutput
	ToSwitchPortsCycleOutputWithContext(ctx context.Context) SwitchPortsCycleOutput
}

func (*SwitchPortsCycle) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchPortsCycle)(nil)).Elem()
}

func (i *SwitchPortsCycle) ToSwitchPortsCycleOutput() SwitchPortsCycleOutput {
	return i.ToSwitchPortsCycleOutputWithContext(context.Background())
}

func (i *SwitchPortsCycle) ToSwitchPortsCycleOutputWithContext(ctx context.Context) SwitchPortsCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortsCycleOutput)
}

// SwitchPortsCycleArrayInput is an input type that accepts SwitchPortsCycleArray and SwitchPortsCycleArrayOutput values.
// You can construct a concrete instance of `SwitchPortsCycleArrayInput` via:
//
//	SwitchPortsCycleArray{ SwitchPortsCycleArgs{...} }
type SwitchPortsCycleArrayInput interface {
	pulumi.Input

	ToSwitchPortsCycleArrayOutput() SwitchPortsCycleArrayOutput
	ToSwitchPortsCycleArrayOutputWithContext(context.Context) SwitchPortsCycleArrayOutput
}

type SwitchPortsCycleArray []SwitchPortsCycleInput

func (SwitchPortsCycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchPortsCycle)(nil)).Elem()
}

func (i SwitchPortsCycleArray) ToSwitchPortsCycleArrayOutput() SwitchPortsCycleArrayOutput {
	return i.ToSwitchPortsCycleArrayOutputWithContext(context.Background())
}

func (i SwitchPortsCycleArray) ToSwitchPortsCycleArrayOutputWithContext(ctx context.Context) SwitchPortsCycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortsCycleArrayOutput)
}

// SwitchPortsCycleMapInput is an input type that accepts SwitchPortsCycleMap and SwitchPortsCycleMapOutput values.
// You can construct a concrete instance of `SwitchPortsCycleMapInput` via:
//
//	SwitchPortsCycleMap{ "key": SwitchPortsCycleArgs{...} }
type SwitchPortsCycleMapInput interface {
	pulumi.Input

	ToSwitchPortsCycleMapOutput() SwitchPortsCycleMapOutput
	ToSwitchPortsCycleMapOutputWithContext(context.Context) SwitchPortsCycleMapOutput
}

type SwitchPortsCycleMap map[string]SwitchPortsCycleInput

func (SwitchPortsCycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchPortsCycle)(nil)).Elem()
}

func (i SwitchPortsCycleMap) ToSwitchPortsCycleMapOutput() SwitchPortsCycleMapOutput {
	return i.ToSwitchPortsCycleMapOutputWithContext(context.Background())
}

func (i SwitchPortsCycleMap) ToSwitchPortsCycleMapOutputWithContext(ctx context.Context) SwitchPortsCycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPortsCycleMapOutput)
}

type SwitchPortsCycleOutput struct{ *pulumi.OutputState }

func (SwitchPortsCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchPortsCycle)(nil)).Elem()
}

func (o SwitchPortsCycleOutput) ToSwitchPortsCycleOutput() SwitchPortsCycleOutput {
	return o
}

func (o SwitchPortsCycleOutput) ToSwitchPortsCycleOutputWithContext(ctx context.Context) SwitchPortsCycleOutput {
	return o
}

func (o SwitchPortsCycleOutput) Item() SwitchPortsCycleItemOutput {
	return o.ApplyT(func(v *SwitchPortsCycle) SwitchPortsCycleItemOutput { return v.Item }).(SwitchPortsCycleItemOutput)
}

func (o SwitchPortsCycleOutput) Parameters() SwitchPortsCycleParametersOutput {
	return o.ApplyT(func(v *SwitchPortsCycle) SwitchPortsCycleParametersOutput { return v.Parameters }).(SwitchPortsCycleParametersOutput)
}

// serial path parameter.
func (o SwitchPortsCycleOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchPortsCycle) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type SwitchPortsCycleArrayOutput struct{ *pulumi.OutputState }

func (SwitchPortsCycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchPortsCycle)(nil)).Elem()
}

func (o SwitchPortsCycleArrayOutput) ToSwitchPortsCycleArrayOutput() SwitchPortsCycleArrayOutput {
	return o
}

func (o SwitchPortsCycleArrayOutput) ToSwitchPortsCycleArrayOutputWithContext(ctx context.Context) SwitchPortsCycleArrayOutput {
	return o
}

func (o SwitchPortsCycleArrayOutput) Index(i pulumi.IntInput) SwitchPortsCycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchPortsCycle {
		return vs[0].([]*SwitchPortsCycle)[vs[1].(int)]
	}).(SwitchPortsCycleOutput)
}

type SwitchPortsCycleMapOutput struct{ *pulumi.OutputState }

func (SwitchPortsCycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchPortsCycle)(nil)).Elem()
}

func (o SwitchPortsCycleMapOutput) ToSwitchPortsCycleMapOutput() SwitchPortsCycleMapOutput {
	return o
}

func (o SwitchPortsCycleMapOutput) ToSwitchPortsCycleMapOutputWithContext(ctx context.Context) SwitchPortsCycleMapOutput {
	return o
}

func (o SwitchPortsCycleMapOutput) MapIndex(k pulumi.StringInput) SwitchPortsCycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchPortsCycle {
		return vs[0].(map[string]*SwitchPortsCycle)[vs[1].(string)]
	}).(SwitchPortsCycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortsCycleInput)(nil)).Elem(), &SwitchPortsCycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortsCycleArrayInput)(nil)).Elem(), SwitchPortsCycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPortsCycleMapInput)(nil)).Elem(), SwitchPortsCycleMap{})
	pulumi.RegisterOutputType(SwitchPortsCycleOutput{})
	pulumi.RegisterOutputType(SwitchPortsCycleArrayOutput{})
	pulumi.RegisterOutputType(SwitchPortsCycleMapOutput{})
}
