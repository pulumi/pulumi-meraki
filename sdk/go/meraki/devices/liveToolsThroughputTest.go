// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest example "serial,throughput_test_id"
// ```
type LiveToolsThroughputTest struct {
	pulumi.CustomResourceState

	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsThroughputTestCallbackOutput `pulumi:"callback"`
	// Description of the error.
	Error pulumi.StringOutput `pulumi:"error"`
	// The parameters of the throughput test request
	Request LiveToolsThroughputTestRequestOutput `pulumi:"request"`
	// Result of the throughput test request
	Result LiveToolsThroughputTestResultOutput `pulumi:"result"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// Status of the throughput test request
	Status pulumi.StringOutput `pulumi:"status"`
	// ID of throughput test job
	ThroughputTestId pulumi.StringOutput `pulumi:"throughputTestId"`
	// GET this url to check the status of your throughput test request
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewLiveToolsThroughputTest registers a new resource with the given unique name, arguments, and options.
func NewLiveToolsThroughputTest(ctx *pulumi.Context,
	name string, args *LiveToolsThroughputTestArgs, opts ...pulumi.ResourceOption) (*LiveToolsThroughputTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LiveToolsThroughputTest
	err := ctx.RegisterResource("meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveToolsThroughputTest gets an existing LiveToolsThroughputTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveToolsThroughputTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveToolsThroughputTestState, opts ...pulumi.ResourceOption) (*LiveToolsThroughputTest, error) {
	var resource LiveToolsThroughputTest
	err := ctx.ReadResource("meraki:devices/liveToolsThroughputTest:LiveToolsThroughputTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveToolsThroughputTest resources.
type liveToolsThroughputTestState struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsThroughputTestCallback `pulumi:"callback"`
	// Description of the error.
	Error *string `pulumi:"error"`
	// The parameters of the throughput test request
	Request *LiveToolsThroughputTestRequest `pulumi:"request"`
	// Result of the throughput test request
	Result *LiveToolsThroughputTestResult `pulumi:"result"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
	// Status of the throughput test request
	Status *string `pulumi:"status"`
	// ID of throughput test job
	ThroughputTestId *string `pulumi:"throughputTestId"`
	// GET this url to check the status of your throughput test request
	Url *string `pulumi:"url"`
}

type LiveToolsThroughputTestState struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsThroughputTestCallbackPtrInput
	// Description of the error.
	Error pulumi.StringPtrInput
	// The parameters of the throughput test request
	Request LiveToolsThroughputTestRequestPtrInput
	// Result of the throughput test request
	Result LiveToolsThroughputTestResultPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
	// Status of the throughput test request
	Status pulumi.StringPtrInput
	// ID of throughput test job
	ThroughputTestId pulumi.StringPtrInput
	// GET this url to check the status of your throughput test request
	Url pulumi.StringPtrInput
}

func (LiveToolsThroughputTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsThroughputTestState)(nil)).Elem()
}

type liveToolsThroughputTestArgs struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback *LiveToolsThroughputTestCallback `pulumi:"callback"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
	// ID of throughput test job
	ThroughputTestId *string `pulumi:"throughputTestId"`
}

// The set of arguments for constructing a LiveToolsThroughputTest resource.
type LiveToolsThroughputTestArgs struct {
	// Details for the callback. Please include either an httpServerId OR url and sharedSecret
	Callback LiveToolsThroughputTestCallbackPtrInput
	// serial path parameter.
	Serial pulumi.StringInput
	// ID of throughput test job
	ThroughputTestId pulumi.StringPtrInput
}

func (LiveToolsThroughputTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsThroughputTestArgs)(nil)).Elem()
}

type LiveToolsThroughputTestInput interface {
	pulumi.Input

	ToLiveToolsThroughputTestOutput() LiveToolsThroughputTestOutput
	ToLiveToolsThroughputTestOutputWithContext(ctx context.Context) LiveToolsThroughputTestOutput
}

func (*LiveToolsThroughputTest) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsThroughputTest)(nil)).Elem()
}

func (i *LiveToolsThroughputTest) ToLiveToolsThroughputTestOutput() LiveToolsThroughputTestOutput {
	return i.ToLiveToolsThroughputTestOutputWithContext(context.Background())
}

func (i *LiveToolsThroughputTest) ToLiveToolsThroughputTestOutputWithContext(ctx context.Context) LiveToolsThroughputTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsThroughputTestOutput)
}

// LiveToolsThroughputTestArrayInput is an input type that accepts LiveToolsThroughputTestArray and LiveToolsThroughputTestArrayOutput values.
// You can construct a concrete instance of `LiveToolsThroughputTestArrayInput` via:
//
//	LiveToolsThroughputTestArray{ LiveToolsThroughputTestArgs{...} }
type LiveToolsThroughputTestArrayInput interface {
	pulumi.Input

	ToLiveToolsThroughputTestArrayOutput() LiveToolsThroughputTestArrayOutput
	ToLiveToolsThroughputTestArrayOutputWithContext(context.Context) LiveToolsThroughputTestArrayOutput
}

type LiveToolsThroughputTestArray []LiveToolsThroughputTestInput

func (LiveToolsThroughputTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsThroughputTest)(nil)).Elem()
}

func (i LiveToolsThroughputTestArray) ToLiveToolsThroughputTestArrayOutput() LiveToolsThroughputTestArrayOutput {
	return i.ToLiveToolsThroughputTestArrayOutputWithContext(context.Background())
}

func (i LiveToolsThroughputTestArray) ToLiveToolsThroughputTestArrayOutputWithContext(ctx context.Context) LiveToolsThroughputTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsThroughputTestArrayOutput)
}

// LiveToolsThroughputTestMapInput is an input type that accepts LiveToolsThroughputTestMap and LiveToolsThroughputTestMapOutput values.
// You can construct a concrete instance of `LiveToolsThroughputTestMapInput` via:
//
//	LiveToolsThroughputTestMap{ "key": LiveToolsThroughputTestArgs{...} }
type LiveToolsThroughputTestMapInput interface {
	pulumi.Input

	ToLiveToolsThroughputTestMapOutput() LiveToolsThroughputTestMapOutput
	ToLiveToolsThroughputTestMapOutputWithContext(context.Context) LiveToolsThroughputTestMapOutput
}

type LiveToolsThroughputTestMap map[string]LiveToolsThroughputTestInput

func (LiveToolsThroughputTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsThroughputTest)(nil)).Elem()
}

func (i LiveToolsThroughputTestMap) ToLiveToolsThroughputTestMapOutput() LiveToolsThroughputTestMapOutput {
	return i.ToLiveToolsThroughputTestMapOutputWithContext(context.Background())
}

func (i LiveToolsThroughputTestMap) ToLiveToolsThroughputTestMapOutputWithContext(ctx context.Context) LiveToolsThroughputTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsThroughputTestMapOutput)
}

type LiveToolsThroughputTestOutput struct{ *pulumi.OutputState }

func (LiveToolsThroughputTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsThroughputTest)(nil)).Elem()
}

func (o LiveToolsThroughputTestOutput) ToLiveToolsThroughputTestOutput() LiveToolsThroughputTestOutput {
	return o
}

func (o LiveToolsThroughputTestOutput) ToLiveToolsThroughputTestOutputWithContext(ctx context.Context) LiveToolsThroughputTestOutput {
	return o
}

// Details for the callback. Please include either an httpServerId OR url and sharedSecret
func (o LiveToolsThroughputTestOutput) Callback() LiveToolsThroughputTestCallbackOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) LiveToolsThroughputTestCallbackOutput { return v.Callback }).(LiveToolsThroughputTestCallbackOutput)
}

// Description of the error.
func (o LiveToolsThroughputTestOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) pulumi.StringOutput { return v.Error }).(pulumi.StringOutput)
}

// The parameters of the throughput test request
func (o LiveToolsThroughputTestOutput) Request() LiveToolsThroughputTestRequestOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) LiveToolsThroughputTestRequestOutput { return v.Request }).(LiveToolsThroughputTestRequestOutput)
}

// Result of the throughput test request
func (o LiveToolsThroughputTestOutput) Result() LiveToolsThroughputTestResultOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) LiveToolsThroughputTestResultOutput { return v.Result }).(LiveToolsThroughputTestResultOutput)
}

// serial path parameter.
func (o LiveToolsThroughputTestOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// Status of the throughput test request
func (o LiveToolsThroughputTestOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// ID of throughput test job
func (o LiveToolsThroughputTestOutput) ThroughputTestId() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) pulumi.StringOutput { return v.ThroughputTestId }).(pulumi.StringOutput)
}

// GET this url to check the status of your throughput test request
func (o LiveToolsThroughputTestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsThroughputTest) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type LiveToolsThroughputTestArrayOutput struct{ *pulumi.OutputState }

func (LiveToolsThroughputTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsThroughputTest)(nil)).Elem()
}

func (o LiveToolsThroughputTestArrayOutput) ToLiveToolsThroughputTestArrayOutput() LiveToolsThroughputTestArrayOutput {
	return o
}

func (o LiveToolsThroughputTestArrayOutput) ToLiveToolsThroughputTestArrayOutputWithContext(ctx context.Context) LiveToolsThroughputTestArrayOutput {
	return o
}

func (o LiveToolsThroughputTestArrayOutput) Index(i pulumi.IntInput) LiveToolsThroughputTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveToolsThroughputTest {
		return vs[0].([]*LiveToolsThroughputTest)[vs[1].(int)]
	}).(LiveToolsThroughputTestOutput)
}

type LiveToolsThroughputTestMapOutput struct{ *pulumi.OutputState }

func (LiveToolsThroughputTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsThroughputTest)(nil)).Elem()
}

func (o LiveToolsThroughputTestMapOutput) ToLiveToolsThroughputTestMapOutput() LiveToolsThroughputTestMapOutput {
	return o
}

func (o LiveToolsThroughputTestMapOutput) ToLiveToolsThroughputTestMapOutputWithContext(ctx context.Context) LiveToolsThroughputTestMapOutput {
	return o
}

func (o LiveToolsThroughputTestMapOutput) MapIndex(k pulumi.StringInput) LiveToolsThroughputTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveToolsThroughputTest {
		return vs[0].(map[string]*LiveToolsThroughputTest)[vs[1].(string)]
	}).(LiveToolsThroughputTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsThroughputTestInput)(nil)).Elem(), &LiveToolsThroughputTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsThroughputTestArrayInput)(nil)).Elem(), LiveToolsThroughputTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsThroughputTestMapInput)(nil)).Elem(), LiveToolsThroughputTestMap{})
	pulumi.RegisterOutputType(LiveToolsThroughputTestOutput{})
	pulumi.RegisterOutputType(LiveToolsThroughputTestArrayOutput{})
	pulumi.RegisterOutputType(LiveToolsThroughputTestMapOutput{})
}
