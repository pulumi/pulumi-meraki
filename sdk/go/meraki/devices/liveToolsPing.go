// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package devices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/devices"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := devices.NewLiveToolsPing(ctx, "example", &devices.LiveToolsPingArgs{
//				Serial: pulumi.String("string"),
//				Parameters: &devices.LiveToolsPingParametersArgs{
//					Callback: &devices.LiveToolsPingParametersCallbackArgs{
//						HttpServer: &devices.LiveToolsPingParametersCallbackHttpServerArgs{
//							Id: pulumi.String("aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M="),
//						},
//						PayloadTemplate: &devices.LiveToolsPingParametersCallbackPayloadTemplateArgs{
//							Id: pulumi.String("wpt_2100"),
//						},
//						SharedSecret: pulumi.String("secret"),
//						Url:          pulumi.String("https://webhook.site/28efa24e-f830-4d9f-a12b-fbb9e5035031"),
//					},
//					Count:  pulumi.Int(2),
//					Target: pulumi.String("75.75.75.75"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiDevicesLiveToolsPingExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:devices/liveToolsPing:LiveToolsPing example "id,serial"
// ```
type LiveToolsPing struct {
	pulumi.CustomResourceState

	Item       LiveToolsPingItemOutput       `pulumi:"item"`
	Parameters LiveToolsPingParametersOutput `pulumi:"parameters"`
	// serial path parameter.
	Serial pulumi.StringOutput `pulumi:"serial"`
}

// NewLiveToolsPing registers a new resource with the given unique name, arguments, and options.
func NewLiveToolsPing(ctx *pulumi.Context,
	name string, args *LiveToolsPingArgs, opts ...pulumi.ResourceOption) (*LiveToolsPing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.Serial == nil {
		return nil, errors.New("invalid value for required argument 'Serial'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LiveToolsPing
	err := ctx.RegisterResource("meraki:devices/liveToolsPing:LiveToolsPing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveToolsPing gets an existing LiveToolsPing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveToolsPing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveToolsPingState, opts ...pulumi.ResourceOption) (*LiveToolsPing, error) {
	var resource LiveToolsPing
	err := ctx.ReadResource("meraki:devices/liveToolsPing:LiveToolsPing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveToolsPing resources.
type liveToolsPingState struct {
	Item       *LiveToolsPingItem       `pulumi:"item"`
	Parameters *LiveToolsPingParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial *string `pulumi:"serial"`
}

type LiveToolsPingState struct {
	Item       LiveToolsPingItemPtrInput
	Parameters LiveToolsPingParametersPtrInput
	// serial path parameter.
	Serial pulumi.StringPtrInput
}

func (LiveToolsPingState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsPingState)(nil)).Elem()
}

type liveToolsPingArgs struct {
	Parameters LiveToolsPingParameters `pulumi:"parameters"`
	// serial path parameter.
	Serial string `pulumi:"serial"`
}

// The set of arguments for constructing a LiveToolsPing resource.
type LiveToolsPingArgs struct {
	Parameters LiveToolsPingParametersInput
	// serial path parameter.
	Serial pulumi.StringInput
}

func (LiveToolsPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveToolsPingArgs)(nil)).Elem()
}

type LiveToolsPingInput interface {
	pulumi.Input

	ToLiveToolsPingOutput() LiveToolsPingOutput
	ToLiveToolsPingOutputWithContext(ctx context.Context) LiveToolsPingOutput
}

func (*LiveToolsPing) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsPing)(nil)).Elem()
}

func (i *LiveToolsPing) ToLiveToolsPingOutput() LiveToolsPingOutput {
	return i.ToLiveToolsPingOutputWithContext(context.Background())
}

func (i *LiveToolsPing) ToLiveToolsPingOutputWithContext(ctx context.Context) LiveToolsPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsPingOutput)
}

// LiveToolsPingArrayInput is an input type that accepts LiveToolsPingArray and LiveToolsPingArrayOutput values.
// You can construct a concrete instance of `LiveToolsPingArrayInput` via:
//
//	LiveToolsPingArray{ LiveToolsPingArgs{...} }
type LiveToolsPingArrayInput interface {
	pulumi.Input

	ToLiveToolsPingArrayOutput() LiveToolsPingArrayOutput
	ToLiveToolsPingArrayOutputWithContext(context.Context) LiveToolsPingArrayOutput
}

type LiveToolsPingArray []LiveToolsPingInput

func (LiveToolsPingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsPing)(nil)).Elem()
}

func (i LiveToolsPingArray) ToLiveToolsPingArrayOutput() LiveToolsPingArrayOutput {
	return i.ToLiveToolsPingArrayOutputWithContext(context.Background())
}

func (i LiveToolsPingArray) ToLiveToolsPingArrayOutputWithContext(ctx context.Context) LiveToolsPingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsPingArrayOutput)
}

// LiveToolsPingMapInput is an input type that accepts LiveToolsPingMap and LiveToolsPingMapOutput values.
// You can construct a concrete instance of `LiveToolsPingMapInput` via:
//
//	LiveToolsPingMap{ "key": LiveToolsPingArgs{...} }
type LiveToolsPingMapInput interface {
	pulumi.Input

	ToLiveToolsPingMapOutput() LiveToolsPingMapOutput
	ToLiveToolsPingMapOutputWithContext(context.Context) LiveToolsPingMapOutput
}

type LiveToolsPingMap map[string]LiveToolsPingInput

func (LiveToolsPingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsPing)(nil)).Elem()
}

func (i LiveToolsPingMap) ToLiveToolsPingMapOutput() LiveToolsPingMapOutput {
	return i.ToLiveToolsPingMapOutputWithContext(context.Background())
}

func (i LiveToolsPingMap) ToLiveToolsPingMapOutputWithContext(ctx context.Context) LiveToolsPingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveToolsPingMapOutput)
}

type LiveToolsPingOutput struct{ *pulumi.OutputState }

func (LiveToolsPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveToolsPing)(nil)).Elem()
}

func (o LiveToolsPingOutput) ToLiveToolsPingOutput() LiveToolsPingOutput {
	return o
}

func (o LiveToolsPingOutput) ToLiveToolsPingOutputWithContext(ctx context.Context) LiveToolsPingOutput {
	return o
}

func (o LiveToolsPingOutput) Item() LiveToolsPingItemOutput {
	return o.ApplyT(func(v *LiveToolsPing) LiveToolsPingItemOutput { return v.Item }).(LiveToolsPingItemOutput)
}

func (o LiveToolsPingOutput) Parameters() LiveToolsPingParametersOutput {
	return o.ApplyT(func(v *LiveToolsPing) LiveToolsPingParametersOutput { return v.Parameters }).(LiveToolsPingParametersOutput)
}

// serial path parameter.
func (o LiveToolsPingOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveToolsPing) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

type LiveToolsPingArrayOutput struct{ *pulumi.OutputState }

func (LiveToolsPingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveToolsPing)(nil)).Elem()
}

func (o LiveToolsPingArrayOutput) ToLiveToolsPingArrayOutput() LiveToolsPingArrayOutput {
	return o
}

func (o LiveToolsPingArrayOutput) ToLiveToolsPingArrayOutputWithContext(ctx context.Context) LiveToolsPingArrayOutput {
	return o
}

func (o LiveToolsPingArrayOutput) Index(i pulumi.IntInput) LiveToolsPingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveToolsPing {
		return vs[0].([]*LiveToolsPing)[vs[1].(int)]
	}).(LiveToolsPingOutput)
}

type LiveToolsPingMapOutput struct{ *pulumi.OutputState }

func (LiveToolsPingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveToolsPing)(nil)).Elem()
}

func (o LiveToolsPingMapOutput) ToLiveToolsPingMapOutput() LiveToolsPingMapOutput {
	return o
}

func (o LiveToolsPingMapOutput) ToLiveToolsPingMapOutputWithContext(ctx context.Context) LiveToolsPingMapOutput {
	return o
}

func (o LiveToolsPingMapOutput) MapIndex(k pulumi.StringInput) LiveToolsPingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveToolsPing {
		return vs[0].(map[string]*LiveToolsPing)[vs[1].(string)]
	}).(LiveToolsPingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsPingInput)(nil)).Elem(), &LiveToolsPing{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsPingArrayInput)(nil)).Elem(), LiveToolsPingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveToolsPingMapInput)(nil)).Elem(), LiveToolsPingMap{})
	pulumi.RegisterOutputType(LiveToolsPingOutput{})
	pulumi.RegisterOutputType(LiveToolsPingArrayOutput{})
	pulumi.RegisterOutputType(LiveToolsPingMapOutput{})
}
