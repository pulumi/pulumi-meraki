// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers example "organization_id"
// ```
type ApplianceVpnThirdPartyVpnpeers struct {
	pulumi.CustomResourceState

	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The list of VPN peers
	Peers ApplianceVpnThirdPartyVpnpeersPeerArrayOutput `pulumi:"peers"`
	// The list of VPN peers
	PeersResponses ApplianceVpnThirdPartyVpnpeersPeersResponseArrayOutput `pulumi:"peersResponses"`
}

// NewApplianceVpnThirdPartyVpnpeers registers a new resource with the given unique name, arguments, and options.
func NewApplianceVpnThirdPartyVpnpeers(ctx *pulumi.Context,
	name string, args *ApplianceVpnThirdPartyVpnpeersArgs, opts ...pulumi.ResourceOption) (*ApplianceVpnThirdPartyVpnpeers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplianceVpnThirdPartyVpnpeers
	err := ctx.RegisterResource("meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplianceVpnThirdPartyVpnpeers gets an existing ApplianceVpnThirdPartyVpnpeers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplianceVpnThirdPartyVpnpeers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplianceVpnThirdPartyVpnpeersState, opts ...pulumi.ResourceOption) (*ApplianceVpnThirdPartyVpnpeers, error) {
	var resource ApplianceVpnThirdPartyVpnpeers
	err := ctx.ReadResource("meraki:organizations/applianceVpnThirdPartyVpnpeers:ApplianceVpnThirdPartyVpnpeers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplianceVpnThirdPartyVpnpeers resources.
type applianceVpnThirdPartyVpnpeersState struct {
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The list of VPN peers
	Peers []ApplianceVpnThirdPartyVpnpeersPeer `pulumi:"peers"`
	// The list of VPN peers
	PeersResponses []ApplianceVpnThirdPartyVpnpeersPeersResponse `pulumi:"peersResponses"`
}

type ApplianceVpnThirdPartyVpnpeersState struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The list of VPN peers
	Peers ApplianceVpnThirdPartyVpnpeersPeerArrayInput
	// The list of VPN peers
	PeersResponses ApplianceVpnThirdPartyVpnpeersPeersResponseArrayInput
}

func (ApplianceVpnThirdPartyVpnpeersState) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVpnThirdPartyVpnpeersState)(nil)).Elem()
}

type applianceVpnThirdPartyVpnpeersArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The list of VPN peers
	Peers []ApplianceVpnThirdPartyVpnpeersPeer `pulumi:"peers"`
}

// The set of arguments for constructing a ApplianceVpnThirdPartyVpnpeers resource.
type ApplianceVpnThirdPartyVpnpeersArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The list of VPN peers
	Peers ApplianceVpnThirdPartyVpnpeersPeerArrayInput
}

func (ApplianceVpnThirdPartyVpnpeersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applianceVpnThirdPartyVpnpeersArgs)(nil)).Elem()
}

type ApplianceVpnThirdPartyVpnpeersInput interface {
	pulumi.Input

	ToApplianceVpnThirdPartyVpnpeersOutput() ApplianceVpnThirdPartyVpnpeersOutput
	ToApplianceVpnThirdPartyVpnpeersOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersOutput
}

func (*ApplianceVpnThirdPartyVpnpeers) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (i *ApplianceVpnThirdPartyVpnpeers) ToApplianceVpnThirdPartyVpnpeersOutput() ApplianceVpnThirdPartyVpnpeersOutput {
	return i.ToApplianceVpnThirdPartyVpnpeersOutputWithContext(context.Background())
}

func (i *ApplianceVpnThirdPartyVpnpeers) ToApplianceVpnThirdPartyVpnpeersOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnThirdPartyVpnpeersOutput)
}

// ApplianceVpnThirdPartyVpnpeersArrayInput is an input type that accepts ApplianceVpnThirdPartyVpnpeersArray and ApplianceVpnThirdPartyVpnpeersArrayOutput values.
// You can construct a concrete instance of `ApplianceVpnThirdPartyVpnpeersArrayInput` via:
//
//	ApplianceVpnThirdPartyVpnpeersArray{ ApplianceVpnThirdPartyVpnpeersArgs{...} }
type ApplianceVpnThirdPartyVpnpeersArrayInput interface {
	pulumi.Input

	ToApplianceVpnThirdPartyVpnpeersArrayOutput() ApplianceVpnThirdPartyVpnpeersArrayOutput
	ToApplianceVpnThirdPartyVpnpeersArrayOutputWithContext(context.Context) ApplianceVpnThirdPartyVpnpeersArrayOutput
}

type ApplianceVpnThirdPartyVpnpeersArray []ApplianceVpnThirdPartyVpnpeersInput

func (ApplianceVpnThirdPartyVpnpeersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (i ApplianceVpnThirdPartyVpnpeersArray) ToApplianceVpnThirdPartyVpnpeersArrayOutput() ApplianceVpnThirdPartyVpnpeersArrayOutput {
	return i.ToApplianceVpnThirdPartyVpnpeersArrayOutputWithContext(context.Background())
}

func (i ApplianceVpnThirdPartyVpnpeersArray) ToApplianceVpnThirdPartyVpnpeersArrayOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnThirdPartyVpnpeersArrayOutput)
}

// ApplianceVpnThirdPartyVpnpeersMapInput is an input type that accepts ApplianceVpnThirdPartyVpnpeersMap and ApplianceVpnThirdPartyVpnpeersMapOutput values.
// You can construct a concrete instance of `ApplianceVpnThirdPartyVpnpeersMapInput` via:
//
//	ApplianceVpnThirdPartyVpnpeersMap{ "key": ApplianceVpnThirdPartyVpnpeersArgs{...} }
type ApplianceVpnThirdPartyVpnpeersMapInput interface {
	pulumi.Input

	ToApplianceVpnThirdPartyVpnpeersMapOutput() ApplianceVpnThirdPartyVpnpeersMapOutput
	ToApplianceVpnThirdPartyVpnpeersMapOutputWithContext(context.Context) ApplianceVpnThirdPartyVpnpeersMapOutput
}

type ApplianceVpnThirdPartyVpnpeersMap map[string]ApplianceVpnThirdPartyVpnpeersInput

func (ApplianceVpnThirdPartyVpnpeersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (i ApplianceVpnThirdPartyVpnpeersMap) ToApplianceVpnThirdPartyVpnpeersMapOutput() ApplianceVpnThirdPartyVpnpeersMapOutput {
	return i.ToApplianceVpnThirdPartyVpnpeersMapOutputWithContext(context.Background())
}

func (i ApplianceVpnThirdPartyVpnpeersMap) ToApplianceVpnThirdPartyVpnpeersMapOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceVpnThirdPartyVpnpeersMapOutput)
}

type ApplianceVpnThirdPartyVpnpeersOutput struct{ *pulumi.OutputState }

func (ApplianceVpnThirdPartyVpnpeersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (o ApplianceVpnThirdPartyVpnpeersOutput) ToApplianceVpnThirdPartyVpnpeersOutput() ApplianceVpnThirdPartyVpnpeersOutput {
	return o
}

func (o ApplianceVpnThirdPartyVpnpeersOutput) ToApplianceVpnThirdPartyVpnpeersOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersOutput {
	return o
}

// organizationId path parameter. Organization ID
func (o ApplianceVpnThirdPartyVpnpeersOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplianceVpnThirdPartyVpnpeers) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The list of VPN peers
func (o ApplianceVpnThirdPartyVpnpeersOutput) Peers() ApplianceVpnThirdPartyVpnpeersPeerArrayOutput {
	return o.ApplyT(func(v *ApplianceVpnThirdPartyVpnpeers) ApplianceVpnThirdPartyVpnpeersPeerArrayOutput { return v.Peers }).(ApplianceVpnThirdPartyVpnpeersPeerArrayOutput)
}

// The list of VPN peers
func (o ApplianceVpnThirdPartyVpnpeersOutput) PeersResponses() ApplianceVpnThirdPartyVpnpeersPeersResponseArrayOutput {
	return o.ApplyT(func(v *ApplianceVpnThirdPartyVpnpeers) ApplianceVpnThirdPartyVpnpeersPeersResponseArrayOutput {
		return v.PeersResponses
	}).(ApplianceVpnThirdPartyVpnpeersPeersResponseArrayOutput)
}

type ApplianceVpnThirdPartyVpnpeersArrayOutput struct{ *pulumi.OutputState }

func (ApplianceVpnThirdPartyVpnpeersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (o ApplianceVpnThirdPartyVpnpeersArrayOutput) ToApplianceVpnThirdPartyVpnpeersArrayOutput() ApplianceVpnThirdPartyVpnpeersArrayOutput {
	return o
}

func (o ApplianceVpnThirdPartyVpnpeersArrayOutput) ToApplianceVpnThirdPartyVpnpeersArrayOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersArrayOutput {
	return o
}

func (o ApplianceVpnThirdPartyVpnpeersArrayOutput) Index(i pulumi.IntInput) ApplianceVpnThirdPartyVpnpeersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplianceVpnThirdPartyVpnpeers {
		return vs[0].([]*ApplianceVpnThirdPartyVpnpeers)[vs[1].(int)]
	}).(ApplianceVpnThirdPartyVpnpeersOutput)
}

type ApplianceVpnThirdPartyVpnpeersMapOutput struct{ *pulumi.OutputState }

func (ApplianceVpnThirdPartyVpnpeersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplianceVpnThirdPartyVpnpeers)(nil)).Elem()
}

func (o ApplianceVpnThirdPartyVpnpeersMapOutput) ToApplianceVpnThirdPartyVpnpeersMapOutput() ApplianceVpnThirdPartyVpnpeersMapOutput {
	return o
}

func (o ApplianceVpnThirdPartyVpnpeersMapOutput) ToApplianceVpnThirdPartyVpnpeersMapOutputWithContext(ctx context.Context) ApplianceVpnThirdPartyVpnpeersMapOutput {
	return o
}

func (o ApplianceVpnThirdPartyVpnpeersMapOutput) MapIndex(k pulumi.StringInput) ApplianceVpnThirdPartyVpnpeersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplianceVpnThirdPartyVpnpeers {
		return vs[0].(map[string]*ApplianceVpnThirdPartyVpnpeers)[vs[1].(string)]
	}).(ApplianceVpnThirdPartyVpnpeersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnThirdPartyVpnpeersInput)(nil)).Elem(), &ApplianceVpnThirdPartyVpnpeers{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnThirdPartyVpnpeersArrayInput)(nil)).Elem(), ApplianceVpnThirdPartyVpnpeersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceVpnThirdPartyVpnpeersMapInput)(nil)).Elem(), ApplianceVpnThirdPartyVpnpeersMap{})
	pulumi.RegisterOutputType(ApplianceVpnThirdPartyVpnpeersOutput{})
	pulumi.RegisterOutputType(ApplianceVpnThirdPartyVpnpeersArrayOutput{})
	pulumi.RegisterOutputType(ApplianceVpnThirdPartyVpnpeersMapOutput{})
}
