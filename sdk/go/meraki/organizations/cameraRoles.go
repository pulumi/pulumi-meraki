// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/cameraRoles:CameraRoles example "organization_id,role_id"
// ```
type CameraRoles struct {
	pulumi.CustomResourceState

	// Device tag on which this specified permission is applied.
	AppliedOnDevices CameraRolesAppliedOnDeviceArrayOutput `pulumi:"appliedOnDevices"`
	// Network tag on which this specified permission is applied.
	AppliedOnNetworks CameraRolesAppliedOnNetworkArrayOutput `pulumi:"appliedOnNetworks"`
	// Permissions to be applied org wide.
	AppliedOrgWides CameraRolesAppliedOrgWideArrayOutput `pulumi:"appliedOrgWides"`
	// The name of the new role. Must be unique. This parameter is required.
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// roleId path parameter. Role ID
	RoleId pulumi.StringPtrOutput `pulumi:"roleId"`
}

// NewCameraRoles registers a new resource with the given unique name, arguments, and options.
func NewCameraRoles(ctx *pulumi.Context,
	name string, args *CameraRolesArgs, opts ...pulumi.ResourceOption) (*CameraRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CameraRoles
	err := ctx.RegisterResource("meraki:organizations/cameraRoles:CameraRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCameraRoles gets an existing CameraRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCameraRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CameraRolesState, opts ...pulumi.ResourceOption) (*CameraRoles, error) {
	var resource CameraRoles
	err := ctx.ReadResource("meraki:organizations/cameraRoles:CameraRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CameraRoles resources.
type cameraRolesState struct {
	// Device tag on which this specified permission is applied.
	AppliedOnDevices []CameraRolesAppliedOnDevice `pulumi:"appliedOnDevices"`
	// Network tag on which this specified permission is applied.
	AppliedOnNetworks []CameraRolesAppliedOnNetwork `pulumi:"appliedOnNetworks"`
	// Permissions to be applied org wide.
	AppliedOrgWides []CameraRolesAppliedOrgWide `pulumi:"appliedOrgWides"`
	// The name of the new role. Must be unique. This parameter is required.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// roleId path parameter. Role ID
	RoleId *string `pulumi:"roleId"`
}

type CameraRolesState struct {
	// Device tag on which this specified permission is applied.
	AppliedOnDevices CameraRolesAppliedOnDeviceArrayInput
	// Network tag on which this specified permission is applied.
	AppliedOnNetworks CameraRolesAppliedOnNetworkArrayInput
	// Permissions to be applied org wide.
	AppliedOrgWides CameraRolesAppliedOrgWideArrayInput
	// The name of the new role. Must be unique. This parameter is required.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// roleId path parameter. Role ID
	RoleId pulumi.StringPtrInput
}

func (CameraRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraRolesState)(nil)).Elem()
}

type cameraRolesArgs struct {
	// Device tag on which this specified permission is applied.
	AppliedOnDevices []CameraRolesAppliedOnDevice `pulumi:"appliedOnDevices"`
	// Network tag on which this specified permission is applied.
	AppliedOnNetworks []CameraRolesAppliedOnNetwork `pulumi:"appliedOnNetworks"`
	// Permissions to be applied org wide.
	AppliedOrgWides []CameraRolesAppliedOrgWide `pulumi:"appliedOrgWides"`
	// The name of the new role. Must be unique. This parameter is required.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// roleId path parameter. Role ID
	RoleId *string `pulumi:"roleId"`
}

// The set of arguments for constructing a CameraRoles resource.
type CameraRolesArgs struct {
	// Device tag on which this specified permission is applied.
	AppliedOnDevices CameraRolesAppliedOnDeviceArrayInput
	// Network tag on which this specified permission is applied.
	AppliedOnNetworks CameraRolesAppliedOnNetworkArrayInput
	// Permissions to be applied org wide.
	AppliedOrgWides CameraRolesAppliedOrgWideArrayInput
	// The name of the new role. Must be unique. This parameter is required.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// roleId path parameter. Role ID
	RoleId pulumi.StringPtrInput
}

func (CameraRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cameraRolesArgs)(nil)).Elem()
}

type CameraRolesInput interface {
	pulumi.Input

	ToCameraRolesOutput() CameraRolesOutput
	ToCameraRolesOutputWithContext(ctx context.Context) CameraRolesOutput
}

func (*CameraRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraRoles)(nil)).Elem()
}

func (i *CameraRoles) ToCameraRolesOutput() CameraRolesOutput {
	return i.ToCameraRolesOutputWithContext(context.Background())
}

func (i *CameraRoles) ToCameraRolesOutputWithContext(ctx context.Context) CameraRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraRolesOutput)
}

// CameraRolesArrayInput is an input type that accepts CameraRolesArray and CameraRolesArrayOutput values.
// You can construct a concrete instance of `CameraRolesArrayInput` via:
//
//	CameraRolesArray{ CameraRolesArgs{...} }
type CameraRolesArrayInput interface {
	pulumi.Input

	ToCameraRolesArrayOutput() CameraRolesArrayOutput
	ToCameraRolesArrayOutputWithContext(context.Context) CameraRolesArrayOutput
}

type CameraRolesArray []CameraRolesInput

func (CameraRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraRoles)(nil)).Elem()
}

func (i CameraRolesArray) ToCameraRolesArrayOutput() CameraRolesArrayOutput {
	return i.ToCameraRolesArrayOutputWithContext(context.Background())
}

func (i CameraRolesArray) ToCameraRolesArrayOutputWithContext(ctx context.Context) CameraRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraRolesArrayOutput)
}

// CameraRolesMapInput is an input type that accepts CameraRolesMap and CameraRolesMapOutput values.
// You can construct a concrete instance of `CameraRolesMapInput` via:
//
//	CameraRolesMap{ "key": CameraRolesArgs{...} }
type CameraRolesMapInput interface {
	pulumi.Input

	ToCameraRolesMapOutput() CameraRolesMapOutput
	ToCameraRolesMapOutputWithContext(context.Context) CameraRolesMapOutput
}

type CameraRolesMap map[string]CameraRolesInput

func (CameraRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraRoles)(nil)).Elem()
}

func (i CameraRolesMap) ToCameraRolesMapOutput() CameraRolesMapOutput {
	return i.ToCameraRolesMapOutputWithContext(context.Background())
}

func (i CameraRolesMap) ToCameraRolesMapOutputWithContext(ctx context.Context) CameraRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CameraRolesMapOutput)
}

type CameraRolesOutput struct{ *pulumi.OutputState }

func (CameraRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CameraRoles)(nil)).Elem()
}

func (o CameraRolesOutput) ToCameraRolesOutput() CameraRolesOutput {
	return o
}

func (o CameraRolesOutput) ToCameraRolesOutputWithContext(ctx context.Context) CameraRolesOutput {
	return o
}

// Device tag on which this specified permission is applied.
func (o CameraRolesOutput) AppliedOnDevices() CameraRolesAppliedOnDeviceArrayOutput {
	return o.ApplyT(func(v *CameraRoles) CameraRolesAppliedOnDeviceArrayOutput { return v.AppliedOnDevices }).(CameraRolesAppliedOnDeviceArrayOutput)
}

// Network tag on which this specified permission is applied.
func (o CameraRolesOutput) AppliedOnNetworks() CameraRolesAppliedOnNetworkArrayOutput {
	return o.ApplyT(func(v *CameraRoles) CameraRolesAppliedOnNetworkArrayOutput { return v.AppliedOnNetworks }).(CameraRolesAppliedOnNetworkArrayOutput)
}

// Permissions to be applied org wide.
func (o CameraRolesOutput) AppliedOrgWides() CameraRolesAppliedOrgWideArrayOutput {
	return o.ApplyT(func(v *CameraRoles) CameraRolesAppliedOrgWideArrayOutput { return v.AppliedOrgWides }).(CameraRolesAppliedOrgWideArrayOutput)
}

// The name of the new role. Must be unique. This parameter is required.
func (o CameraRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CameraRoles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o CameraRolesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CameraRoles) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// roleId path parameter. Role ID
func (o CameraRolesOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CameraRoles) pulumi.StringPtrOutput { return v.RoleId }).(pulumi.StringPtrOutput)
}

type CameraRolesArrayOutput struct{ *pulumi.OutputState }

func (CameraRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CameraRoles)(nil)).Elem()
}

func (o CameraRolesArrayOutput) ToCameraRolesArrayOutput() CameraRolesArrayOutput {
	return o
}

func (o CameraRolesArrayOutput) ToCameraRolesArrayOutputWithContext(ctx context.Context) CameraRolesArrayOutput {
	return o
}

func (o CameraRolesArrayOutput) Index(i pulumi.IntInput) CameraRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CameraRoles {
		return vs[0].([]*CameraRoles)[vs[1].(int)]
	}).(CameraRolesOutput)
}

type CameraRolesMapOutput struct{ *pulumi.OutputState }

func (CameraRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CameraRoles)(nil)).Elem()
}

func (o CameraRolesMapOutput) ToCameraRolesMapOutput() CameraRolesMapOutput {
	return o
}

func (o CameraRolesMapOutput) ToCameraRolesMapOutputWithContext(ctx context.Context) CameraRolesMapOutput {
	return o
}

func (o CameraRolesMapOutput) MapIndex(k pulumi.StringInput) CameraRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CameraRoles {
		return vs[0].(map[string]*CameraRoles)[vs[1].(string)]
	}).(CameraRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CameraRolesInput)(nil)).Elem(), &CameraRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraRolesArrayInput)(nil)).Elem(), CameraRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CameraRolesMapInput)(nil)).Elem(), CameraRolesMap{})
	pulumi.RegisterOutputType(CameraRolesOutput{})
	pulumi.RegisterOutputType(CameraRolesArrayOutput{})
	pulumi.RegisterOutputType(CameraRolesMapOutput{})
}
