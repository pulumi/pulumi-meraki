// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewClone(ctx, "example", &organizations.CloneArgs{
//				OrganizationId: pulumi.String("string"),
//				Parameters: &organizations.CloneParametersArgs{
//					Name: pulumi.String("My organization"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsCloneExample", example)
//			return nil
//		})
//	}
//
// ```
type Clone struct {
	pulumi.CustomResourceState

	Item CloneItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput   `pulumi:"organizationId"`
	Parameters     CloneParametersOutput `pulumi:"parameters"`
}

// NewClone registers a new resource with the given unique name, arguments, and options.
func NewClone(ctx *pulumi.Context,
	name string, args *CloneArgs, opts ...pulumi.ResourceOption) (*Clone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Clone
	err := ctx.RegisterResource("meraki:organizations/clone:Clone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClone gets an existing Clone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloneState, opts ...pulumi.ResourceOption) (*Clone, error) {
	var resource Clone
	err := ctx.ReadResource("meraki:organizations/clone:Clone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Clone resources.
type cloneState struct {
	Item *CloneItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string          `pulumi:"organizationId"`
	Parameters     *CloneParameters `pulumi:"parameters"`
}

type CloneState struct {
	Item CloneItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     CloneParametersPtrInput
}

func (CloneState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneState)(nil)).Elem()
}

type cloneArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string          `pulumi:"organizationId"`
	Parameters     CloneParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a Clone resource.
type CloneArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     CloneParametersInput
}

func (CloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloneArgs)(nil)).Elem()
}

type CloneInput interface {
	pulumi.Input

	ToCloneOutput() CloneOutput
	ToCloneOutputWithContext(ctx context.Context) CloneOutput
}

func (*Clone) ElementType() reflect.Type {
	return reflect.TypeOf((**Clone)(nil)).Elem()
}

func (i *Clone) ToCloneOutput() CloneOutput {
	return i.ToCloneOutputWithContext(context.Background())
}

func (i *Clone) ToCloneOutputWithContext(ctx context.Context) CloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneOutput)
}

// CloneArrayInput is an input type that accepts CloneArray and CloneArrayOutput values.
// You can construct a concrete instance of `CloneArrayInput` via:
//
//	CloneArray{ CloneArgs{...} }
type CloneArrayInput interface {
	pulumi.Input

	ToCloneArrayOutput() CloneArrayOutput
	ToCloneArrayOutputWithContext(context.Context) CloneArrayOutput
}

type CloneArray []CloneInput

func (CloneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clone)(nil)).Elem()
}

func (i CloneArray) ToCloneArrayOutput() CloneArrayOutput {
	return i.ToCloneArrayOutputWithContext(context.Background())
}

func (i CloneArray) ToCloneArrayOutputWithContext(ctx context.Context) CloneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneArrayOutput)
}

// CloneMapInput is an input type that accepts CloneMap and CloneMapOutput values.
// You can construct a concrete instance of `CloneMapInput` via:
//
//	CloneMap{ "key": CloneArgs{...} }
type CloneMapInput interface {
	pulumi.Input

	ToCloneMapOutput() CloneMapOutput
	ToCloneMapOutputWithContext(context.Context) CloneMapOutput
}

type CloneMap map[string]CloneInput

func (CloneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clone)(nil)).Elem()
}

func (i CloneMap) ToCloneMapOutput() CloneMapOutput {
	return i.ToCloneMapOutputWithContext(context.Background())
}

func (i CloneMap) ToCloneMapOutputWithContext(ctx context.Context) CloneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloneMapOutput)
}

type CloneOutput struct{ *pulumi.OutputState }

func (CloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clone)(nil)).Elem()
}

func (o CloneOutput) ToCloneOutput() CloneOutput {
	return o
}

func (o CloneOutput) ToCloneOutputWithContext(ctx context.Context) CloneOutput {
	return o
}

func (o CloneOutput) Item() CloneItemOutput {
	return o.ApplyT(func(v *Clone) CloneItemOutput { return v.Item }).(CloneItemOutput)
}

// organizationId path parameter. Organization ID
func (o CloneOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clone) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o CloneOutput) Parameters() CloneParametersOutput {
	return o.ApplyT(func(v *Clone) CloneParametersOutput { return v.Parameters }).(CloneParametersOutput)
}

type CloneArrayOutput struct{ *pulumi.OutputState }

func (CloneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clone)(nil)).Elem()
}

func (o CloneArrayOutput) ToCloneArrayOutput() CloneArrayOutput {
	return o
}

func (o CloneArrayOutput) ToCloneArrayOutputWithContext(ctx context.Context) CloneArrayOutput {
	return o
}

func (o CloneArrayOutput) Index(i pulumi.IntInput) CloneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Clone {
		return vs[0].([]*Clone)[vs[1].(int)]
	}).(CloneOutput)
}

type CloneMapOutput struct{ *pulumi.OutputState }

func (CloneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clone)(nil)).Elem()
}

func (o CloneMapOutput) ToCloneMapOutput() CloneMapOutput {
	return o
}

func (o CloneMapOutput) ToCloneMapOutputWithContext(ctx context.Context) CloneMapOutput {
	return o
}

func (o CloneMapOutput) MapIndex(k pulumi.StringInput) CloneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Clone {
		return vs[0].(map[string]*Clone)[vs[1].(string)]
	}).(CloneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloneInput)(nil)).Elem(), &Clone{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloneArrayInput)(nil)).Elem(), CloneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloneMapInput)(nil)).Elem(), CloneMap{})
	pulumi.RegisterOutputType(CloneOutput{})
	pulumi.RegisterOutputType(CloneArrayOutput{})
	pulumi.RegisterOutputType(CloneMapOutput{})
}
