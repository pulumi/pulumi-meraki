// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewInventoryClaim(ctx, "example", &organizations.InventoryClaimArgs{
//				OrganizationId: pulumi.String("string"),
//				Parameters: &organizations.InventoryClaimParametersArgs{
//					Licenses: organizations.InventoryClaimParametersLicenseArray{
//						&organizations.InventoryClaimParametersLicenseArgs{
//							Key:  pulumi.String("Z2XXXXXXXXXX"),
//							Mode: pulumi.String("addDevices"),
//						},
//					},
//					Orders: pulumi.StringArray{
//						pulumi.String("4CXXXXXXX"),
//					},
//					Serials: pulumi.StringArray{
//						pulumi.String("Q234-ABCD-5678"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsInventoryClaimExample", example)
//			return nil
//		})
//	}
//
// ```
type InventoryClaim struct {
	pulumi.CustomResourceState

	Item InventoryClaimItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput            `pulumi:"organizationId"`
	Parameters     InventoryClaimParametersOutput `pulumi:"parameters"`
}

// NewInventoryClaim registers a new resource with the given unique name, arguments, and options.
func NewInventoryClaim(ctx *pulumi.Context,
	name string, args *InventoryClaimArgs, opts ...pulumi.ResourceOption) (*InventoryClaim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InventoryClaim
	err := ctx.RegisterResource("meraki:organizations/inventoryClaim:InventoryClaim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventoryClaim gets an existing InventoryClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventoryClaim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryClaimState, opts ...pulumi.ResourceOption) (*InventoryClaim, error) {
	var resource InventoryClaim
	err := ctx.ReadResource("meraki:organizations/inventoryClaim:InventoryClaim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InventoryClaim resources.
type inventoryClaimState struct {
	Item *InventoryClaimItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string                   `pulumi:"organizationId"`
	Parameters     *InventoryClaimParameters `pulumi:"parameters"`
}

type InventoryClaimState struct {
	Item InventoryClaimItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     InventoryClaimParametersPtrInput
}

func (InventoryClaimState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryClaimState)(nil)).Elem()
}

type inventoryClaimArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string                   `pulumi:"organizationId"`
	Parameters     InventoryClaimParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a InventoryClaim resource.
type InventoryClaimArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     InventoryClaimParametersInput
}

func (InventoryClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryClaimArgs)(nil)).Elem()
}

type InventoryClaimInput interface {
	pulumi.Input

	ToInventoryClaimOutput() InventoryClaimOutput
	ToInventoryClaimOutputWithContext(ctx context.Context) InventoryClaimOutput
}

func (*InventoryClaim) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryClaim)(nil)).Elem()
}

func (i *InventoryClaim) ToInventoryClaimOutput() InventoryClaimOutput {
	return i.ToInventoryClaimOutputWithContext(context.Background())
}

func (i *InventoryClaim) ToInventoryClaimOutputWithContext(ctx context.Context) InventoryClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryClaimOutput)
}

// InventoryClaimArrayInput is an input type that accepts InventoryClaimArray and InventoryClaimArrayOutput values.
// You can construct a concrete instance of `InventoryClaimArrayInput` via:
//
//	InventoryClaimArray{ InventoryClaimArgs{...} }
type InventoryClaimArrayInput interface {
	pulumi.Input

	ToInventoryClaimArrayOutput() InventoryClaimArrayOutput
	ToInventoryClaimArrayOutputWithContext(context.Context) InventoryClaimArrayOutput
}

type InventoryClaimArray []InventoryClaimInput

func (InventoryClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryClaim)(nil)).Elem()
}

func (i InventoryClaimArray) ToInventoryClaimArrayOutput() InventoryClaimArrayOutput {
	return i.ToInventoryClaimArrayOutputWithContext(context.Background())
}

func (i InventoryClaimArray) ToInventoryClaimArrayOutputWithContext(ctx context.Context) InventoryClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryClaimArrayOutput)
}

// InventoryClaimMapInput is an input type that accepts InventoryClaimMap and InventoryClaimMapOutput values.
// You can construct a concrete instance of `InventoryClaimMapInput` via:
//
//	InventoryClaimMap{ "key": InventoryClaimArgs{...} }
type InventoryClaimMapInput interface {
	pulumi.Input

	ToInventoryClaimMapOutput() InventoryClaimMapOutput
	ToInventoryClaimMapOutputWithContext(context.Context) InventoryClaimMapOutput
}

type InventoryClaimMap map[string]InventoryClaimInput

func (InventoryClaimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryClaim)(nil)).Elem()
}

func (i InventoryClaimMap) ToInventoryClaimMapOutput() InventoryClaimMapOutput {
	return i.ToInventoryClaimMapOutputWithContext(context.Background())
}

func (i InventoryClaimMap) ToInventoryClaimMapOutputWithContext(ctx context.Context) InventoryClaimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryClaimMapOutput)
}

type InventoryClaimOutput struct{ *pulumi.OutputState }

func (InventoryClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryClaim)(nil)).Elem()
}

func (o InventoryClaimOutput) ToInventoryClaimOutput() InventoryClaimOutput {
	return o
}

func (o InventoryClaimOutput) ToInventoryClaimOutputWithContext(ctx context.Context) InventoryClaimOutput {
	return o
}

func (o InventoryClaimOutput) Item() InventoryClaimItemOutput {
	return o.ApplyT(func(v *InventoryClaim) InventoryClaimItemOutput { return v.Item }).(InventoryClaimItemOutput)
}

// organizationId path parameter. Organization ID
func (o InventoryClaimOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryClaim) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o InventoryClaimOutput) Parameters() InventoryClaimParametersOutput {
	return o.ApplyT(func(v *InventoryClaim) InventoryClaimParametersOutput { return v.Parameters }).(InventoryClaimParametersOutput)
}

type InventoryClaimArrayOutput struct{ *pulumi.OutputState }

func (InventoryClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryClaim)(nil)).Elem()
}

func (o InventoryClaimArrayOutput) ToInventoryClaimArrayOutput() InventoryClaimArrayOutput {
	return o
}

func (o InventoryClaimArrayOutput) ToInventoryClaimArrayOutputWithContext(ctx context.Context) InventoryClaimArrayOutput {
	return o
}

func (o InventoryClaimArrayOutput) Index(i pulumi.IntInput) InventoryClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InventoryClaim {
		return vs[0].([]*InventoryClaim)[vs[1].(int)]
	}).(InventoryClaimOutput)
}

type InventoryClaimMapOutput struct{ *pulumi.OutputState }

func (InventoryClaimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryClaim)(nil)).Elem()
}

func (o InventoryClaimMapOutput) ToInventoryClaimMapOutput() InventoryClaimMapOutput {
	return o
}

func (o InventoryClaimMapOutput) ToInventoryClaimMapOutputWithContext(ctx context.Context) InventoryClaimMapOutput {
	return o
}

func (o InventoryClaimMapOutput) MapIndex(k pulumi.StringInput) InventoryClaimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InventoryClaim {
		return vs[0].(map[string]*InventoryClaim)[vs[1].(string)]
	}).(InventoryClaimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryClaimInput)(nil)).Elem(), &InventoryClaim{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryClaimArrayInput)(nil)).Elem(), InventoryClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryClaimMapInput)(nil)).Elem(), InventoryClaimMap{})
	pulumi.RegisterOutputType(InventoryClaimOutput{})
	pulumi.RegisterOutputType(InventoryClaimArrayOutput{})
	pulumi.RegisterOutputType(InventoryClaimMapOutput{})
}
