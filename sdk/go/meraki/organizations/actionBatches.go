// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/actionBatches:ActionBatches example "action_batch_id,organization_id"
// ```
type ActionBatches struct {
	pulumi.CustomResourceState

	// actionBatchId path parameter. Action batch ID
	ActionBatchId pulumi.StringOutput `pulumi:"actionBatchId"`
	// A set of changes made as part of this action (\n\nmore details\n\n)
	Actions ActionBatchesActionArrayOutput `pulumi:"actions"`
	// Information for callback used to send back results
	Callback ActionBatchesCallbackOutput `pulumi:"callback"`
	// Flag describing whether the action should be previewed before executing or not
	Confirmed pulumi.BoolOutput `pulumi:"confirmed"`
	// ID of the organization this action batch belongs to
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Status of action batch
	Status ActionBatchesStatusOutput `pulumi:"status"`
	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous pulumi.BoolOutput `pulumi:"synchronous"`
}

// NewActionBatches registers a new resource with the given unique name, arguments, and options.
func NewActionBatches(ctx *pulumi.Context,
	name string, args *ActionBatchesArgs, opts ...pulumi.ResourceOption) (*ActionBatches, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionBatches
	err := ctx.RegisterResource("meraki:organizations/actionBatches:ActionBatches", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionBatches gets an existing ActionBatches resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionBatches(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionBatchesState, opts ...pulumi.ResourceOption) (*ActionBatches, error) {
	var resource ActionBatches
	err := ctx.ReadResource("meraki:organizations/actionBatches:ActionBatches", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionBatches resources.
type actionBatchesState struct {
	// actionBatchId path parameter. Action batch ID
	ActionBatchId *string `pulumi:"actionBatchId"`
	// A set of changes made as part of this action (\n\nmore details\n\n)
	Actions []ActionBatchesAction `pulumi:"actions"`
	// Information for callback used to send back results
	Callback *ActionBatchesCallback `pulumi:"callback"`
	// Flag describing whether the action should be previewed before executing or not
	Confirmed *bool `pulumi:"confirmed"`
	// ID of the organization this action batch belongs to
	OrganizationId *string `pulumi:"organizationId"`
	// Status of action batch
	Status *ActionBatchesStatus `pulumi:"status"`
	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous *bool `pulumi:"synchronous"`
}

type ActionBatchesState struct {
	// actionBatchId path parameter. Action batch ID
	ActionBatchId pulumi.StringPtrInput
	// A set of changes made as part of this action (\n\nmore details\n\n)
	Actions ActionBatchesActionArrayInput
	// Information for callback used to send back results
	Callback ActionBatchesCallbackPtrInput
	// Flag describing whether the action should be previewed before executing or not
	Confirmed pulumi.BoolPtrInput
	// ID of the organization this action batch belongs to
	OrganizationId pulumi.StringPtrInput
	// Status of action batch
	Status ActionBatchesStatusPtrInput
	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous pulumi.BoolPtrInput
}

func (ActionBatchesState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionBatchesState)(nil)).Elem()
}

type actionBatchesArgs struct {
	// actionBatchId path parameter. Action batch ID
	ActionBatchId *string `pulumi:"actionBatchId"`
	// A set of changes made as part of this action (\n\nmore details\n\n)
	Actions []ActionBatchesAction `pulumi:"actions"`
	// Information for callback used to send back results
	Callback *ActionBatchesCallback `pulumi:"callback"`
	// Flag describing whether the action should be previewed before executing or not
	Confirmed *bool `pulumi:"confirmed"`
	// ID of the organization this action batch belongs to
	OrganizationId string `pulumi:"organizationId"`
	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous *bool `pulumi:"synchronous"`
}

// The set of arguments for constructing a ActionBatches resource.
type ActionBatchesArgs struct {
	// actionBatchId path parameter. Action batch ID
	ActionBatchId pulumi.StringPtrInput
	// A set of changes made as part of this action (\n\nmore details\n\n)
	Actions ActionBatchesActionArrayInput
	// Information for callback used to send back results
	Callback ActionBatchesCallbackPtrInput
	// Flag describing whether the action should be previewed before executing or not
	Confirmed pulumi.BoolPtrInput
	// ID of the organization this action batch belongs to
	OrganizationId pulumi.StringInput
	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous pulumi.BoolPtrInput
}

func (ActionBatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionBatchesArgs)(nil)).Elem()
}

type ActionBatchesInput interface {
	pulumi.Input

	ToActionBatchesOutput() ActionBatchesOutput
	ToActionBatchesOutputWithContext(ctx context.Context) ActionBatchesOutput
}

func (*ActionBatches) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionBatches)(nil)).Elem()
}

func (i *ActionBatches) ToActionBatchesOutput() ActionBatchesOutput {
	return i.ToActionBatchesOutputWithContext(context.Background())
}

func (i *ActionBatches) ToActionBatchesOutputWithContext(ctx context.Context) ActionBatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionBatchesOutput)
}

// ActionBatchesArrayInput is an input type that accepts ActionBatchesArray and ActionBatchesArrayOutput values.
// You can construct a concrete instance of `ActionBatchesArrayInput` via:
//
//	ActionBatchesArray{ ActionBatchesArgs{...} }
type ActionBatchesArrayInput interface {
	pulumi.Input

	ToActionBatchesArrayOutput() ActionBatchesArrayOutput
	ToActionBatchesArrayOutputWithContext(context.Context) ActionBatchesArrayOutput
}

type ActionBatchesArray []ActionBatchesInput

func (ActionBatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionBatches)(nil)).Elem()
}

func (i ActionBatchesArray) ToActionBatchesArrayOutput() ActionBatchesArrayOutput {
	return i.ToActionBatchesArrayOutputWithContext(context.Background())
}

func (i ActionBatchesArray) ToActionBatchesArrayOutputWithContext(ctx context.Context) ActionBatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionBatchesArrayOutput)
}

// ActionBatchesMapInput is an input type that accepts ActionBatchesMap and ActionBatchesMapOutput values.
// You can construct a concrete instance of `ActionBatchesMapInput` via:
//
//	ActionBatchesMap{ "key": ActionBatchesArgs{...} }
type ActionBatchesMapInput interface {
	pulumi.Input

	ToActionBatchesMapOutput() ActionBatchesMapOutput
	ToActionBatchesMapOutputWithContext(context.Context) ActionBatchesMapOutput
}

type ActionBatchesMap map[string]ActionBatchesInput

func (ActionBatchesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionBatches)(nil)).Elem()
}

func (i ActionBatchesMap) ToActionBatchesMapOutput() ActionBatchesMapOutput {
	return i.ToActionBatchesMapOutputWithContext(context.Background())
}

func (i ActionBatchesMap) ToActionBatchesMapOutputWithContext(ctx context.Context) ActionBatchesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionBatchesMapOutput)
}

type ActionBatchesOutput struct{ *pulumi.OutputState }

func (ActionBatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionBatches)(nil)).Elem()
}

func (o ActionBatchesOutput) ToActionBatchesOutput() ActionBatchesOutput {
	return o
}

func (o ActionBatchesOutput) ToActionBatchesOutputWithContext(ctx context.Context) ActionBatchesOutput {
	return o
}

// actionBatchId path parameter. Action batch ID
func (o ActionBatchesOutput) ActionBatchId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionBatches) pulumi.StringOutput { return v.ActionBatchId }).(pulumi.StringOutput)
}

// A set of changes made as part of this action (\n\nmore details\n\n)
func (o ActionBatchesOutput) Actions() ActionBatchesActionArrayOutput {
	return o.ApplyT(func(v *ActionBatches) ActionBatchesActionArrayOutput { return v.Actions }).(ActionBatchesActionArrayOutput)
}

// Information for callback used to send back results
func (o ActionBatchesOutput) Callback() ActionBatchesCallbackOutput {
	return o.ApplyT(func(v *ActionBatches) ActionBatchesCallbackOutput { return v.Callback }).(ActionBatchesCallbackOutput)
}

// Flag describing whether the action should be previewed before executing or not
func (o ActionBatchesOutput) Confirmed() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActionBatches) pulumi.BoolOutput { return v.Confirmed }).(pulumi.BoolOutput)
}

// ID of the organization this action batch belongs to
func (o ActionBatchesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionBatches) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Status of action batch
func (o ActionBatchesOutput) Status() ActionBatchesStatusOutput {
	return o.ApplyT(func(v *ActionBatches) ActionBatchesStatusOutput { return v.Status }).(ActionBatchesStatusOutput)
}

// Flag describing whether actions should run synchronously or asynchronously
func (o ActionBatchesOutput) Synchronous() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActionBatches) pulumi.BoolOutput { return v.Synchronous }).(pulumi.BoolOutput)
}

type ActionBatchesArrayOutput struct{ *pulumi.OutputState }

func (ActionBatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionBatches)(nil)).Elem()
}

func (o ActionBatchesArrayOutput) ToActionBatchesArrayOutput() ActionBatchesArrayOutput {
	return o
}

func (o ActionBatchesArrayOutput) ToActionBatchesArrayOutputWithContext(ctx context.Context) ActionBatchesArrayOutput {
	return o
}

func (o ActionBatchesArrayOutput) Index(i pulumi.IntInput) ActionBatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionBatches {
		return vs[0].([]*ActionBatches)[vs[1].(int)]
	}).(ActionBatchesOutput)
}

type ActionBatchesMapOutput struct{ *pulumi.OutputState }

func (ActionBatchesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionBatches)(nil)).Elem()
}

func (o ActionBatchesMapOutput) ToActionBatchesMapOutput() ActionBatchesMapOutput {
	return o
}

func (o ActionBatchesMapOutput) ToActionBatchesMapOutputWithContext(ctx context.Context) ActionBatchesMapOutput {
	return o
}

func (o ActionBatchesMapOutput) MapIndex(k pulumi.StringInput) ActionBatchesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionBatches {
		return vs[0].(map[string]*ActionBatches)[vs[1].(string)]
	}).(ActionBatchesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionBatchesInput)(nil)).Elem(), &ActionBatches{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionBatchesArrayInput)(nil)).Elem(), ActionBatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionBatchesMapInput)(nil)).Elem(), ActionBatchesMap{})
	pulumi.RegisterOutputType(ActionBatchesOutput{})
	pulumi.RegisterOutputType(ActionBatchesArrayOutput{})
	pulumi.RegisterOutputType(ActionBatchesMapOutput{})
}
