// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewUsers(ctx, "example", &organizations.UsersArgs{
//				OrganizationId: pulumi.String("string"),
//				UserId:         pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsUsersExample", example)
//			return nil
//		})
//	}
//
// ```
type Users struct {
	pulumi.CustomResourceState

	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// userId path parameter. User ID
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUsers registers a new resource with the given unique name, arguments, and options.
func NewUsers(ctx *pulumi.Context,
	name string, args *UsersArgs, opts ...pulumi.ResourceOption) (*Users, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Users
	err := ctx.RegisterResource("meraki:organizations/users:Users", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsers gets an existing Users resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsersState, opts ...pulumi.ResourceOption) (*Users, error) {
	var resource Users
	err := ctx.ReadResource("meraki:organizations/users:Users", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Users resources.
type usersState struct {
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// userId path parameter. User ID
	UserId *string `pulumi:"userId"`
}

type UsersState struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// userId path parameter. User ID
	UserId pulumi.StringPtrInput
}

func (UsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*usersState)(nil)).Elem()
}

type usersArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// userId path parameter. User ID
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a Users resource.
type UsersArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// userId path parameter. User ID
	UserId pulumi.StringInput
}

func (UsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usersArgs)(nil)).Elem()
}

type UsersInput interface {
	pulumi.Input

	ToUsersOutput() UsersOutput
	ToUsersOutputWithContext(ctx context.Context) UsersOutput
}

func (*Users) ElementType() reflect.Type {
	return reflect.TypeOf((**Users)(nil)).Elem()
}

func (i *Users) ToUsersOutput() UsersOutput {
	return i.ToUsersOutputWithContext(context.Background())
}

func (i *Users) ToUsersOutputWithContext(ctx context.Context) UsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersOutput)
}

// UsersArrayInput is an input type that accepts UsersArray and UsersArrayOutput values.
// You can construct a concrete instance of `UsersArrayInput` via:
//
//	UsersArray{ UsersArgs{...} }
type UsersArrayInput interface {
	pulumi.Input

	ToUsersArrayOutput() UsersArrayOutput
	ToUsersArrayOutputWithContext(context.Context) UsersArrayOutput
}

type UsersArray []UsersInput

func (UsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Users)(nil)).Elem()
}

func (i UsersArray) ToUsersArrayOutput() UsersArrayOutput {
	return i.ToUsersArrayOutputWithContext(context.Background())
}

func (i UsersArray) ToUsersArrayOutputWithContext(ctx context.Context) UsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersArrayOutput)
}

// UsersMapInput is an input type that accepts UsersMap and UsersMapOutput values.
// You can construct a concrete instance of `UsersMapInput` via:
//
//	UsersMap{ "key": UsersArgs{...} }
type UsersMapInput interface {
	pulumi.Input

	ToUsersMapOutput() UsersMapOutput
	ToUsersMapOutputWithContext(context.Context) UsersMapOutput
}

type UsersMap map[string]UsersInput

func (UsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Users)(nil)).Elem()
}

func (i UsersMap) ToUsersMapOutput() UsersMapOutput {
	return i.ToUsersMapOutputWithContext(context.Background())
}

func (i UsersMap) ToUsersMapOutputWithContext(ctx context.Context) UsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersMapOutput)
}

type UsersOutput struct{ *pulumi.OutputState }

func (UsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Users)(nil)).Elem()
}

func (o UsersOutput) ToUsersOutput() UsersOutput {
	return o
}

func (o UsersOutput) ToUsersOutputWithContext(ctx context.Context) UsersOutput {
	return o
}

// organizationId path parameter. Organization ID
func (o UsersOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Users) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// userId path parameter. User ID
func (o UsersOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Users) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UsersArrayOutput struct{ *pulumi.OutputState }

func (UsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Users)(nil)).Elem()
}

func (o UsersArrayOutput) ToUsersArrayOutput() UsersArrayOutput {
	return o
}

func (o UsersArrayOutput) ToUsersArrayOutputWithContext(ctx context.Context) UsersArrayOutput {
	return o
}

func (o UsersArrayOutput) Index(i pulumi.IntInput) UsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Users {
		return vs[0].([]*Users)[vs[1].(int)]
	}).(UsersOutput)
}

type UsersMapOutput struct{ *pulumi.OutputState }

func (UsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Users)(nil)).Elem()
}

func (o UsersMapOutput) ToUsersMapOutput() UsersMapOutput {
	return o
}

func (o UsersMapOutput) ToUsersMapOutputWithContext(ctx context.Context) UsersMapOutput {
	return o
}

func (o UsersMapOutput) MapIndex(k pulumi.StringInput) UsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Users {
		return vs[0].(map[string]*Users)[vs[1].(string)]
	}).(UsersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsersInput)(nil)).Elem(), &Users{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersArrayInput)(nil)).Elem(), UsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersMapInput)(nil)).Elem(), UsersMap{})
	pulumi.RegisterOutputType(UsersOutput{})
	pulumi.RegisterOutputType(UsersArrayOutput{})
	pulumi.RegisterOutputType(UsersMapOutput{})
}
