// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.LookupAlertsProfiles(ctx, &organizations.LookupAlertsProfilesArgs{
//				OrganizationId: "string",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsAlertsProfilesExample", example.Items)
//			return nil
//		})
//	}
//
// ```
func LookupAlertsProfiles(ctx *pulumi.Context, args *LookupAlertsProfilesArgs, opts ...pulumi.InvokeOption) (*LookupAlertsProfilesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlertsProfilesResult
	err := ctx.Invoke("meraki:organizations/getAlertsProfiles:getAlertsProfiles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlertsProfiles.
type LookupAlertsProfilesArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
}

// A collection of values returned by getAlertsProfiles.
type LookupAlertsProfilesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Array of ResponseOrganizationsGetOrganizationAlertsProfiles
	Items []GetAlertsProfilesItem `pulumi:"items"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
}

func LookupAlertsProfilesOutput(ctx *pulumi.Context, args LookupAlertsProfilesOutputArgs, opts ...pulumi.InvokeOption) LookupAlertsProfilesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlertsProfilesResult, error) {
			args := v.(LookupAlertsProfilesArgs)
			r, err := LookupAlertsProfiles(ctx, &args, opts...)
			var s LookupAlertsProfilesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAlertsProfilesResultOutput)
}

// A collection of arguments for invoking getAlertsProfiles.
type LookupAlertsProfilesOutputArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupAlertsProfilesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertsProfilesArgs)(nil)).Elem()
}

// A collection of values returned by getAlertsProfiles.
type LookupAlertsProfilesResultOutput struct{ *pulumi.OutputState }

func (LookupAlertsProfilesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertsProfilesResult)(nil)).Elem()
}

func (o LookupAlertsProfilesResultOutput) ToLookupAlertsProfilesResultOutput() LookupAlertsProfilesResultOutput {
	return o
}

func (o LookupAlertsProfilesResultOutput) ToLookupAlertsProfilesResultOutputWithContext(ctx context.Context) LookupAlertsProfilesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAlertsProfilesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertsProfilesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Array of ResponseOrganizationsGetOrganizationAlertsProfiles
func (o LookupAlertsProfilesResultOutput) Items() GetAlertsProfilesItemArrayOutput {
	return o.ApplyT(func(v LookupAlertsProfilesResult) []GetAlertsProfilesItem { return v.Items }).(GetAlertsProfilesItemArrayOutput)
}

// organizationId path parameter. Organization ID
func (o LookupAlertsProfilesResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertsProfilesResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlertsProfilesResultOutput{})
}
