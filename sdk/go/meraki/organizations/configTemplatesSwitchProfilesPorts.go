// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewConfigTemplatesSwitchProfilesPorts(ctx, "example", &organizations.ConfigTemplatesSwitchProfilesPortsArgs{
//				AccessPolicyNumber:      pulumi.Int(2),
//				AccessPolicyType:        pulumi.String("Sticky MAC allow list"),
//				AllowedVlans:            pulumi.String("1,3,5-10"),
//				ConfigTemplateId:        pulumi.String("string"),
//				DaiTrusted:              pulumi.Bool(false),
//				Enabled:                 pulumi.Bool(true),
//				FlexibleStackingEnabled: pulumi.Bool(true),
//				IsolationEnabled:        pulumi.Bool(false),
//				LinkNegotiation:         pulumi.String("Auto negotiate"),
//				MacAllowLists: pulumi.StringArray{
//					pulumi.String("34:56:fe:ce:8e:b0"),
//					pulumi.String("34:56:fe:ce:8e:b1"),
//				},
//				Name:           pulumi.String("My switch port"),
//				OrganizationId: pulumi.String("string"),
//				PoeEnabled:     pulumi.Bool(true),
//				PortId:         pulumi.String("string"),
//				PortScheduleId: pulumi.String("1234"),
//				Profile: &organizations.ConfigTemplatesSwitchProfilesPortsProfileArgs{
//					Enabled: pulumi.Bool(false),
//					Id:      pulumi.String("1284392014819"),
//					Iname:   pulumi.String("iname"),
//				},
//				ProfileId:   pulumi.String("string"),
//				RstpEnabled: pulumi.Bool(true),
//				StickyMacAllowLists: pulumi.StringArray{
//					pulumi.String("34:56:fe:ce:8e:b0"),
//					pulumi.String("34:56:fe:ce:8e:b1"),
//				},
//				StickyMacAllowListLimit: pulumi.Int(5),
//				StormControlEnabled:     pulumi.Bool(true),
//				StpGuard:                pulumi.String("disabled"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tag1"),
//					pulumi.String("tag2"),
//				},
//				Type:      pulumi.String("access"),
//				Udld:      pulumi.String("Alert only"),
//				Vlan:      pulumi.Int(10),
//				VoiceVlan: pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsConfigTemplatesSwitchProfilesPortsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts example "config_template_id,organization_id,port_id,profile_id"
// ```
type ConfigTemplatesSwitchProfilesPorts struct {
	pulumi.CustomResourceState

	// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber pulumi.IntOutput `pulumi:"accessPolicyNumber"`
	// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType pulumi.StringOutput `pulumi:"accessPolicyType"`
	// The VLANs allowed on the switch template port. Only applicable to trunk ports.
	AllowedVlans pulumi.StringOutput `pulumi:"allowedVlans"`
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringOutput `pulumi:"configTemplateId"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted pulumi.BoolOutput `pulumi:"daiTrusted"`
	// The status of the switch template port.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled pulumi.BoolOutput `pulumi:"flexibleStackingEnabled"`
	// The isolation status of the switch template port.
	IsolationEnabled pulumi.BoolOutput `pulumi:"isolationEnabled"`
	// The link speed for the switch template port.
	LinkNegotiation pulumi.StringOutput `pulumi:"linkNegotiation"`
	// Available link speeds for the switch template port.
	LinkNegotiationCapabilities pulumi.StringArrayOutput `pulumi:"linkNegotiationCapabilities"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowLists pulumi.StringArrayOutput `pulumi:"macAllowLists"`
	// Port mirror
	Mirror ConfigTemplatesSwitchProfilesPortsMirrorOutput `pulumi:"mirror"`
	// Expansion module
	Module ConfigTemplatesSwitchProfilesPortsModuleOutput `pulumi:"module"`
	// The name of the switch template port.
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The PoE status of the switch template port.
	PoeEnabled pulumi.BoolOutput `pulumi:"poeEnabled"`
	// The identifier of the switch template port.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleId pulumi.StringOutput `pulumi:"portScheduleId"`
	// Profile attributes
	Profile ConfigTemplatesSwitchProfilesPortsProfileOutput `pulumi:"profile"`
	// profileId path parameter. Profile ID
	ProfileId pulumi.StringOutput `pulumi:"profileId"`
	// The rapid spanning tree protocol status.
	RstpEnabled pulumi.BoolOutput `pulumi:"rstpEnabled"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit pulumi.IntOutput `pulumi:"stickyMacAllowListLimit"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowLists pulumi.StringArrayOutput `pulumi:"stickyMacAllowLists"`
	// The storm control status of the switch template port.
	StormControlEnabled pulumi.BoolOutput `pulumi:"stormControlEnabled"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard pulumi.StringOutput `pulumi:"stpGuard"`
	// The list of tags of the switch template port.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the switch template port ('trunk' or 'access').
	Type pulumi.StringOutput `pulumi:"type"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld pulumi.StringOutput `pulumi:"udld"`
	// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
	Vlan pulumi.IntOutput `pulumi:"vlan"`
	// The voice VLAN of the switch template port. Only applicable to access ports.
	VoiceVlan pulumi.IntOutput `pulumi:"voiceVlan"`
}

// NewConfigTemplatesSwitchProfilesPorts registers a new resource with the given unique name, arguments, and options.
func NewConfigTemplatesSwitchProfilesPorts(ctx *pulumi.Context,
	name string, args *ConfigTemplatesSwitchProfilesPortsArgs, opts ...pulumi.ResourceOption) (*ConfigTemplatesSwitchProfilesPorts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigTemplateId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	if args.ProfileId == nil {
		return nil, errors.New("invalid value for required argument 'ProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigTemplatesSwitchProfilesPorts
	err := ctx.RegisterResource("meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigTemplatesSwitchProfilesPorts gets an existing ConfigTemplatesSwitchProfilesPorts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigTemplatesSwitchProfilesPorts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigTemplatesSwitchProfilesPortsState, opts ...pulumi.ResourceOption) (*ConfigTemplatesSwitchProfilesPorts, error) {
	var resource ConfigTemplatesSwitchProfilesPorts
	err := ctx.ReadResource("meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigTemplatesSwitchProfilesPorts resources.
type configTemplatesSwitchProfilesPortsState struct {
	// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int `pulumi:"accessPolicyNumber"`
	// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *string `pulumi:"accessPolicyType"`
	// The VLANs allowed on the switch template port. Only applicable to trunk ports.
	AllowedVlans *string `pulumi:"allowedVlans"`
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId *string `pulumi:"configTemplateId"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `pulumi:"daiTrusted"`
	// The status of the switch template port.
	Enabled *bool `pulumi:"enabled"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `pulumi:"flexibleStackingEnabled"`
	// The isolation status of the switch template port.
	IsolationEnabled *bool `pulumi:"isolationEnabled"`
	// The link speed for the switch template port.
	LinkNegotiation *string `pulumi:"linkNegotiation"`
	// Available link speeds for the switch template port.
	LinkNegotiationCapabilities []string `pulumi:"linkNegotiationCapabilities"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowLists []string `pulumi:"macAllowLists"`
	// Port mirror
	Mirror *ConfigTemplatesSwitchProfilesPortsMirror `pulumi:"mirror"`
	// Expansion module
	Module *ConfigTemplatesSwitchProfilesPortsModule `pulumi:"module"`
	// The name of the switch template port.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The PoE status of the switch template port.
	PoeEnabled *bool `pulumi:"poeEnabled"`
	// The identifier of the switch template port.
	PortId *string `pulumi:"portId"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleId *string `pulumi:"portScheduleId"`
	// Profile attributes
	Profile *ConfigTemplatesSwitchProfilesPortsProfile `pulumi:"profile"`
	// profileId path parameter. Profile ID
	ProfileId *string `pulumi:"profileId"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `pulumi:"rstpEnabled"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int `pulumi:"stickyMacAllowListLimit"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowLists []string `pulumi:"stickyMacAllowLists"`
	// The storm control status of the switch template port.
	StormControlEnabled *bool `pulumi:"stormControlEnabled"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *string `pulumi:"stpGuard"`
	// The list of tags of the switch template port.
	Tags []string `pulumi:"tags"`
	// The type of the switch template port ('trunk' or 'access').
	Type *string `pulumi:"type"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *string `pulumi:"udld"`
	// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
	Vlan *int `pulumi:"vlan"`
	// The voice VLAN of the switch template port. Only applicable to access ports.
	VoiceVlan *int `pulumi:"voiceVlan"`
}

type ConfigTemplatesSwitchProfilesPortsState struct {
	// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber pulumi.IntPtrInput
	// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType pulumi.StringPtrInput
	// The VLANs allowed on the switch template port. Only applicable to trunk ports.
	AllowedVlans pulumi.StringPtrInput
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringPtrInput
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted pulumi.BoolPtrInput
	// The status of the switch template port.
	Enabled pulumi.BoolPtrInput
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled pulumi.BoolPtrInput
	// The isolation status of the switch template port.
	IsolationEnabled pulumi.BoolPtrInput
	// The link speed for the switch template port.
	LinkNegotiation pulumi.StringPtrInput
	// Available link speeds for the switch template port.
	LinkNegotiationCapabilities pulumi.StringArrayInput
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowLists pulumi.StringArrayInput
	// Port mirror
	Mirror ConfigTemplatesSwitchProfilesPortsMirrorPtrInput
	// Expansion module
	Module ConfigTemplatesSwitchProfilesPortsModulePtrInput
	// The name of the switch template port.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The PoE status of the switch template port.
	PoeEnabled pulumi.BoolPtrInput
	// The identifier of the switch template port.
	PortId pulumi.StringPtrInput
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleId pulumi.StringPtrInput
	// Profile attributes
	Profile ConfigTemplatesSwitchProfilesPortsProfilePtrInput
	// profileId path parameter. Profile ID
	ProfileId pulumi.StringPtrInput
	// The rapid spanning tree protocol status.
	RstpEnabled pulumi.BoolPtrInput
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit pulumi.IntPtrInput
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowLists pulumi.StringArrayInput
	// The storm control status of the switch template port.
	StormControlEnabled pulumi.BoolPtrInput
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard pulumi.StringPtrInput
	// The list of tags of the switch template port.
	Tags pulumi.StringArrayInput
	// The type of the switch template port ('trunk' or 'access').
	Type pulumi.StringPtrInput
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld pulumi.StringPtrInput
	// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
	Vlan pulumi.IntPtrInput
	// The voice VLAN of the switch template port. Only applicable to access ports.
	VoiceVlan pulumi.IntPtrInput
}

func (ConfigTemplatesSwitchProfilesPortsState) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplatesSwitchProfilesPortsState)(nil)).Elem()
}

type configTemplatesSwitchProfilesPortsArgs struct {
	// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int `pulumi:"accessPolicyNumber"`
	// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *string `pulumi:"accessPolicyType"`
	// The VLANs allowed on the switch template port. Only applicable to trunk ports.
	AllowedVlans *string `pulumi:"allowedVlans"`
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId string `pulumi:"configTemplateId"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `pulumi:"daiTrusted"`
	// The status of the switch template port.
	Enabled *bool `pulumi:"enabled"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `pulumi:"flexibleStackingEnabled"`
	// The isolation status of the switch template port.
	IsolationEnabled *bool `pulumi:"isolationEnabled"`
	// The link speed for the switch template port.
	LinkNegotiation *string `pulumi:"linkNegotiation"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowLists []string `pulumi:"macAllowLists"`
	// The name of the switch template port.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The PoE status of the switch template port.
	PoeEnabled *bool `pulumi:"poeEnabled"`
	// The identifier of the switch template port.
	PortId string `pulumi:"portId"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleId *string `pulumi:"portScheduleId"`
	// Profile attributes
	Profile *ConfigTemplatesSwitchProfilesPortsProfile `pulumi:"profile"`
	// profileId path parameter. Profile ID
	ProfileId string `pulumi:"profileId"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `pulumi:"rstpEnabled"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int `pulumi:"stickyMacAllowListLimit"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowLists []string `pulumi:"stickyMacAllowLists"`
	// The storm control status of the switch template port.
	StormControlEnabled *bool `pulumi:"stormControlEnabled"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *string `pulumi:"stpGuard"`
	// The list of tags of the switch template port.
	Tags []string `pulumi:"tags"`
	// The type of the switch template port ('trunk' or 'access').
	Type *string `pulumi:"type"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *string `pulumi:"udld"`
	// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
	Vlan *int `pulumi:"vlan"`
	// The voice VLAN of the switch template port. Only applicable to access ports.
	VoiceVlan *int `pulumi:"voiceVlan"`
}

// The set of arguments for constructing a ConfigTemplatesSwitchProfilesPorts resource.
type ConfigTemplatesSwitchProfilesPortsArgs struct {
	// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber pulumi.IntPtrInput
	// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType pulumi.StringPtrInput
	// The VLANs allowed on the switch template port. Only applicable to trunk ports.
	AllowedVlans pulumi.StringPtrInput
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringInput
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted pulumi.BoolPtrInput
	// The status of the switch template port.
	Enabled pulumi.BoolPtrInput
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled pulumi.BoolPtrInput
	// The isolation status of the switch template port.
	IsolationEnabled pulumi.BoolPtrInput
	// The link speed for the switch template port.
	LinkNegotiation pulumi.StringPtrInput
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowLists pulumi.StringArrayInput
	// The name of the switch template port.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The PoE status of the switch template port.
	PoeEnabled pulumi.BoolPtrInput
	// The identifier of the switch template port.
	PortId pulumi.StringInput
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleId pulumi.StringPtrInput
	// Profile attributes
	Profile ConfigTemplatesSwitchProfilesPortsProfilePtrInput
	// profileId path parameter. Profile ID
	ProfileId pulumi.StringInput
	// The rapid spanning tree protocol status.
	RstpEnabled pulumi.BoolPtrInput
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit pulumi.IntPtrInput
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowLists pulumi.StringArrayInput
	// The storm control status of the switch template port.
	StormControlEnabled pulumi.BoolPtrInput
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard pulumi.StringPtrInput
	// The list of tags of the switch template port.
	Tags pulumi.StringArrayInput
	// The type of the switch template port ('trunk' or 'access').
	Type pulumi.StringPtrInput
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld pulumi.StringPtrInput
	// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
	Vlan pulumi.IntPtrInput
	// The voice VLAN of the switch template port. Only applicable to access ports.
	VoiceVlan pulumi.IntPtrInput
}

func (ConfigTemplatesSwitchProfilesPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplatesSwitchProfilesPortsArgs)(nil)).Elem()
}

type ConfigTemplatesSwitchProfilesPortsInput interface {
	pulumi.Input

	ToConfigTemplatesSwitchProfilesPortsOutput() ConfigTemplatesSwitchProfilesPortsOutput
	ToConfigTemplatesSwitchProfilesPortsOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsOutput
}

func (*ConfigTemplatesSwitchProfilesPorts) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (i *ConfigTemplatesSwitchProfilesPorts) ToConfigTemplatesSwitchProfilesPortsOutput() ConfigTemplatesSwitchProfilesPortsOutput {
	return i.ToConfigTemplatesSwitchProfilesPortsOutputWithContext(context.Background())
}

func (i *ConfigTemplatesSwitchProfilesPorts) ToConfigTemplatesSwitchProfilesPortsOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesSwitchProfilesPortsOutput)
}

// ConfigTemplatesSwitchProfilesPortsArrayInput is an input type that accepts ConfigTemplatesSwitchProfilesPortsArray and ConfigTemplatesSwitchProfilesPortsArrayOutput values.
// You can construct a concrete instance of `ConfigTemplatesSwitchProfilesPortsArrayInput` via:
//
//	ConfigTemplatesSwitchProfilesPortsArray{ ConfigTemplatesSwitchProfilesPortsArgs{...} }
type ConfigTemplatesSwitchProfilesPortsArrayInput interface {
	pulumi.Input

	ToConfigTemplatesSwitchProfilesPortsArrayOutput() ConfigTemplatesSwitchProfilesPortsArrayOutput
	ToConfigTemplatesSwitchProfilesPortsArrayOutputWithContext(context.Context) ConfigTemplatesSwitchProfilesPortsArrayOutput
}

type ConfigTemplatesSwitchProfilesPortsArray []ConfigTemplatesSwitchProfilesPortsInput

func (ConfigTemplatesSwitchProfilesPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (i ConfigTemplatesSwitchProfilesPortsArray) ToConfigTemplatesSwitchProfilesPortsArrayOutput() ConfigTemplatesSwitchProfilesPortsArrayOutput {
	return i.ToConfigTemplatesSwitchProfilesPortsArrayOutputWithContext(context.Background())
}

func (i ConfigTemplatesSwitchProfilesPortsArray) ToConfigTemplatesSwitchProfilesPortsArrayOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesSwitchProfilesPortsArrayOutput)
}

// ConfigTemplatesSwitchProfilesPortsMapInput is an input type that accepts ConfigTemplatesSwitchProfilesPortsMap and ConfigTemplatesSwitchProfilesPortsMapOutput values.
// You can construct a concrete instance of `ConfigTemplatesSwitchProfilesPortsMapInput` via:
//
//	ConfigTemplatesSwitchProfilesPortsMap{ "key": ConfigTemplatesSwitchProfilesPortsArgs{...} }
type ConfigTemplatesSwitchProfilesPortsMapInput interface {
	pulumi.Input

	ToConfigTemplatesSwitchProfilesPortsMapOutput() ConfigTemplatesSwitchProfilesPortsMapOutput
	ToConfigTemplatesSwitchProfilesPortsMapOutputWithContext(context.Context) ConfigTemplatesSwitchProfilesPortsMapOutput
}

type ConfigTemplatesSwitchProfilesPortsMap map[string]ConfigTemplatesSwitchProfilesPortsInput

func (ConfigTemplatesSwitchProfilesPortsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (i ConfigTemplatesSwitchProfilesPortsMap) ToConfigTemplatesSwitchProfilesPortsMapOutput() ConfigTemplatesSwitchProfilesPortsMapOutput {
	return i.ToConfigTemplatesSwitchProfilesPortsMapOutputWithContext(context.Background())
}

func (i ConfigTemplatesSwitchProfilesPortsMap) ToConfigTemplatesSwitchProfilesPortsMapOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesSwitchProfilesPortsMapOutput)
}

type ConfigTemplatesSwitchProfilesPortsOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesSwitchProfilesPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (o ConfigTemplatesSwitchProfilesPortsOutput) ToConfigTemplatesSwitchProfilesPortsOutput() ConfigTemplatesSwitchProfilesPortsOutput {
	return o
}

func (o ConfigTemplatesSwitchProfilesPortsOutput) ToConfigTemplatesSwitchProfilesPortsOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsOutput {
	return o
}

// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
func (o ConfigTemplatesSwitchProfilesPortsOutput) AccessPolicyNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.IntOutput { return v.AccessPolicyNumber }).(pulumi.IntOutput)
}

// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
func (o ConfigTemplatesSwitchProfilesPortsOutput) AccessPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.AccessPolicyType }).(pulumi.StringOutput)
}

// The VLANs allowed on the switch template port. Only applicable to trunk ports.
func (o ConfigTemplatesSwitchProfilesPortsOutput) AllowedVlans() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.AllowedVlans }).(pulumi.StringOutput)
}

// configTemplateId path parameter. Config template ID
func (o ConfigTemplatesSwitchProfilesPortsOutput) ConfigTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.ConfigTemplateId }).(pulumi.StringOutput)
}

// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
func (o ConfigTemplatesSwitchProfilesPortsOutput) DaiTrusted() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.DaiTrusted }).(pulumi.BoolOutput)
}

// The status of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
func (o ConfigTemplatesSwitchProfilesPortsOutput) FlexibleStackingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.FlexibleStackingEnabled }).(pulumi.BoolOutput)
}

// The isolation status of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) IsolationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.IsolationEnabled }).(pulumi.BoolOutput)
}

// The link speed for the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) LinkNegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.LinkNegotiation }).(pulumi.StringOutput)
}

// Available link speeds for the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) LinkNegotiationCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringArrayOutput {
		return v.LinkNegotiationCapabilities
	}).(pulumi.StringArrayOutput)
}

// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
func (o ConfigTemplatesSwitchProfilesPortsOutput) MacAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringArrayOutput { return v.MacAllowLists }).(pulumi.StringArrayOutput)
}

// Port mirror
func (o ConfigTemplatesSwitchProfilesPortsOutput) Mirror() ConfigTemplatesSwitchProfilesPortsMirrorOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) ConfigTemplatesSwitchProfilesPortsMirrorOutput {
		return v.Mirror
	}).(ConfigTemplatesSwitchProfilesPortsMirrorOutput)
}

// Expansion module
func (o ConfigTemplatesSwitchProfilesPortsOutput) Module() ConfigTemplatesSwitchProfilesPortsModuleOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) ConfigTemplatesSwitchProfilesPortsModuleOutput {
		return v.Module
	}).(ConfigTemplatesSwitchProfilesPortsModuleOutput)
}

// The name of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o ConfigTemplatesSwitchProfilesPortsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The PoE status of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) PoeEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.PoeEnabled }).(pulumi.BoolOutput)
}

// The identifier of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// The ID of the port schedule. A value of null will clear the port schedule.
func (o ConfigTemplatesSwitchProfilesPortsOutput) PortScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.PortScheduleId }).(pulumi.StringOutput)
}

// Profile attributes
func (o ConfigTemplatesSwitchProfilesPortsOutput) Profile() ConfigTemplatesSwitchProfilesPortsProfileOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) ConfigTemplatesSwitchProfilesPortsProfileOutput {
		return v.Profile
	}).(ConfigTemplatesSwitchProfilesPortsProfileOutput)
}

// profileId path parameter. Profile ID
func (o ConfigTemplatesSwitchProfilesPortsOutput) ProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.ProfileId }).(pulumi.StringOutput)
}

// The rapid spanning tree protocol status.
func (o ConfigTemplatesSwitchProfilesPortsOutput) RstpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.RstpEnabled }).(pulumi.BoolOutput)
}

// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
func (o ConfigTemplatesSwitchProfilesPortsOutput) StickyMacAllowListLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.IntOutput { return v.StickyMacAllowListLimit }).(pulumi.IntOutput)
}

// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
func (o ConfigTemplatesSwitchProfilesPortsOutput) StickyMacAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringArrayOutput { return v.StickyMacAllowLists }).(pulumi.StringArrayOutput)
}

// The storm control status of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) StormControlEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.BoolOutput { return v.StormControlEnabled }).(pulumi.BoolOutput)
}

// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
func (o ConfigTemplatesSwitchProfilesPortsOutput) StpGuard() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.StpGuard }).(pulumi.StringOutput)
}

// The list of tags of the switch template port.
func (o ConfigTemplatesSwitchProfilesPortsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the switch template port ('trunk' or 'access').
func (o ConfigTemplatesSwitchProfilesPortsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
func (o ConfigTemplatesSwitchProfilesPortsOutput) Udld() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.StringOutput { return v.Udld }).(pulumi.StringOutput)
}

// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
func (o ConfigTemplatesSwitchProfilesPortsOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

// The voice VLAN of the switch template port. Only applicable to access ports.
func (o ConfigTemplatesSwitchProfilesPortsOutput) VoiceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v *ConfigTemplatesSwitchProfilesPorts) pulumi.IntOutput { return v.VoiceVlan }).(pulumi.IntOutput)
}

type ConfigTemplatesSwitchProfilesPortsArrayOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesSwitchProfilesPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (o ConfigTemplatesSwitchProfilesPortsArrayOutput) ToConfigTemplatesSwitchProfilesPortsArrayOutput() ConfigTemplatesSwitchProfilesPortsArrayOutput {
	return o
}

func (o ConfigTemplatesSwitchProfilesPortsArrayOutput) ToConfigTemplatesSwitchProfilesPortsArrayOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsArrayOutput {
	return o
}

func (o ConfigTemplatesSwitchProfilesPortsArrayOutput) Index(i pulumi.IntInput) ConfigTemplatesSwitchProfilesPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigTemplatesSwitchProfilesPorts {
		return vs[0].([]*ConfigTemplatesSwitchProfilesPorts)[vs[1].(int)]
	}).(ConfigTemplatesSwitchProfilesPortsOutput)
}

type ConfigTemplatesSwitchProfilesPortsMapOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesSwitchProfilesPortsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplatesSwitchProfilesPorts)(nil)).Elem()
}

func (o ConfigTemplatesSwitchProfilesPortsMapOutput) ToConfigTemplatesSwitchProfilesPortsMapOutput() ConfigTemplatesSwitchProfilesPortsMapOutput {
	return o
}

func (o ConfigTemplatesSwitchProfilesPortsMapOutput) ToConfigTemplatesSwitchProfilesPortsMapOutputWithContext(ctx context.Context) ConfigTemplatesSwitchProfilesPortsMapOutput {
	return o
}

func (o ConfigTemplatesSwitchProfilesPortsMapOutput) MapIndex(k pulumi.StringInput) ConfigTemplatesSwitchProfilesPortsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigTemplatesSwitchProfilesPorts {
		return vs[0].(map[string]*ConfigTemplatesSwitchProfilesPorts)[vs[1].(string)]
	}).(ConfigTemplatesSwitchProfilesPortsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesSwitchProfilesPortsInput)(nil)).Elem(), &ConfigTemplatesSwitchProfilesPorts{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesSwitchProfilesPortsArrayInput)(nil)).Elem(), ConfigTemplatesSwitchProfilesPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesSwitchProfilesPortsMapInput)(nil)).Elem(), ConfigTemplatesSwitchProfilesPortsMap{})
	pulumi.RegisterOutputType(ConfigTemplatesSwitchProfilesPortsOutput{})
	pulumi.RegisterOutputType(ConfigTemplatesSwitchProfilesPortsArrayOutput{})
	pulumi.RegisterOutputType(ConfigTemplatesSwitchProfilesPortsMapOutput{})
}
