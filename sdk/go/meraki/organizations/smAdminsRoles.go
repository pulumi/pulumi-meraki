// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewSmAdminsRoles(ctx, "example", &organizations.SmAdminsRolesArgs{
//				Name:           pulumi.String("sample name"),
//				OrganizationId: pulumi.String("string"),
//				Scope:          pulumi.String("all_tags"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tag"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsSmAdminsRolesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/smAdminsRoles:SmAdminsRoles example "organization_id,role_id"
// ```
type SmAdminsRoles struct {
	pulumi.CustomResourceState

	// The name of the limited access role
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The Id of the limited access role
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// The scope of the limited access role
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The tags of the limited access role
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSmAdminsRoles registers a new resource with the given unique name, arguments, and options.
func NewSmAdminsRoles(ctx *pulumi.Context,
	name string, args *SmAdminsRolesArgs, opts ...pulumi.ResourceOption) (*SmAdminsRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmAdminsRoles
	err := ctx.RegisterResource("meraki:organizations/smAdminsRoles:SmAdminsRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmAdminsRoles gets an existing SmAdminsRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmAdminsRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmAdminsRolesState, opts ...pulumi.ResourceOption) (*SmAdminsRoles, error) {
	var resource SmAdminsRoles
	err := ctx.ReadResource("meraki:organizations/smAdminsRoles:SmAdminsRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmAdminsRoles resources.
type smAdminsRolesState struct {
	// The name of the limited access role
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The Id of the limited access role
	RoleId *string `pulumi:"roleId"`
	// The scope of the limited access role
	Scope *string `pulumi:"scope"`
	// The tags of the limited access role
	Tags []string `pulumi:"tags"`
}

type SmAdminsRolesState struct {
	// The name of the limited access role
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The Id of the limited access role
	RoleId pulumi.StringPtrInput
	// The scope of the limited access role
	Scope pulumi.StringPtrInput
	// The tags of the limited access role
	Tags pulumi.StringArrayInput
}

func (SmAdminsRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*smAdminsRolesState)(nil)).Elem()
}

type smAdminsRolesArgs struct {
	// The name of the limited access role
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The Id of the limited access role
	RoleId *string `pulumi:"roleId"`
	// The scope of the limited access role
	Scope *string `pulumi:"scope"`
	// The tags of the limited access role
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SmAdminsRoles resource.
type SmAdminsRolesArgs struct {
	// The name of the limited access role
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The Id of the limited access role
	RoleId pulumi.StringPtrInput
	// The scope of the limited access role
	Scope pulumi.StringPtrInput
	// The tags of the limited access role
	Tags pulumi.StringArrayInput
}

func (SmAdminsRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smAdminsRolesArgs)(nil)).Elem()
}

type SmAdminsRolesInput interface {
	pulumi.Input

	ToSmAdminsRolesOutput() SmAdminsRolesOutput
	ToSmAdminsRolesOutputWithContext(ctx context.Context) SmAdminsRolesOutput
}

func (*SmAdminsRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**SmAdminsRoles)(nil)).Elem()
}

func (i *SmAdminsRoles) ToSmAdminsRolesOutput() SmAdminsRolesOutput {
	return i.ToSmAdminsRolesOutputWithContext(context.Background())
}

func (i *SmAdminsRoles) ToSmAdminsRolesOutputWithContext(ctx context.Context) SmAdminsRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmAdminsRolesOutput)
}

// SmAdminsRolesArrayInput is an input type that accepts SmAdminsRolesArray and SmAdminsRolesArrayOutput values.
// You can construct a concrete instance of `SmAdminsRolesArrayInput` via:
//
//	SmAdminsRolesArray{ SmAdminsRolesArgs{...} }
type SmAdminsRolesArrayInput interface {
	pulumi.Input

	ToSmAdminsRolesArrayOutput() SmAdminsRolesArrayOutput
	ToSmAdminsRolesArrayOutputWithContext(context.Context) SmAdminsRolesArrayOutput
}

type SmAdminsRolesArray []SmAdminsRolesInput

func (SmAdminsRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmAdminsRoles)(nil)).Elem()
}

func (i SmAdminsRolesArray) ToSmAdminsRolesArrayOutput() SmAdminsRolesArrayOutput {
	return i.ToSmAdminsRolesArrayOutputWithContext(context.Background())
}

func (i SmAdminsRolesArray) ToSmAdminsRolesArrayOutputWithContext(ctx context.Context) SmAdminsRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmAdminsRolesArrayOutput)
}

// SmAdminsRolesMapInput is an input type that accepts SmAdminsRolesMap and SmAdminsRolesMapOutput values.
// You can construct a concrete instance of `SmAdminsRolesMapInput` via:
//
//	SmAdminsRolesMap{ "key": SmAdminsRolesArgs{...} }
type SmAdminsRolesMapInput interface {
	pulumi.Input

	ToSmAdminsRolesMapOutput() SmAdminsRolesMapOutput
	ToSmAdminsRolesMapOutputWithContext(context.Context) SmAdminsRolesMapOutput
}

type SmAdminsRolesMap map[string]SmAdminsRolesInput

func (SmAdminsRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmAdminsRoles)(nil)).Elem()
}

func (i SmAdminsRolesMap) ToSmAdminsRolesMapOutput() SmAdminsRolesMapOutput {
	return i.ToSmAdminsRolesMapOutputWithContext(context.Background())
}

func (i SmAdminsRolesMap) ToSmAdminsRolesMapOutputWithContext(ctx context.Context) SmAdminsRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmAdminsRolesMapOutput)
}

type SmAdminsRolesOutput struct{ *pulumi.OutputState }

func (SmAdminsRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmAdminsRoles)(nil)).Elem()
}

func (o SmAdminsRolesOutput) ToSmAdminsRolesOutput() SmAdminsRolesOutput {
	return o
}

func (o SmAdminsRolesOutput) ToSmAdminsRolesOutputWithContext(ctx context.Context) SmAdminsRolesOutput {
	return o
}

// The name of the limited access role
func (o SmAdminsRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SmAdminsRoles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o SmAdminsRolesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmAdminsRoles) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The Id of the limited access role
func (o SmAdminsRolesOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmAdminsRoles) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// The scope of the limited access role
func (o SmAdminsRolesOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *SmAdminsRoles) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The tags of the limited access role
func (o SmAdminsRolesOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SmAdminsRoles) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type SmAdminsRolesArrayOutput struct{ *pulumi.OutputState }

func (SmAdminsRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmAdminsRoles)(nil)).Elem()
}

func (o SmAdminsRolesArrayOutput) ToSmAdminsRolesArrayOutput() SmAdminsRolesArrayOutput {
	return o
}

func (o SmAdminsRolesArrayOutput) ToSmAdminsRolesArrayOutputWithContext(ctx context.Context) SmAdminsRolesArrayOutput {
	return o
}

func (o SmAdminsRolesArrayOutput) Index(i pulumi.IntInput) SmAdminsRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmAdminsRoles {
		return vs[0].([]*SmAdminsRoles)[vs[1].(int)]
	}).(SmAdminsRolesOutput)
}

type SmAdminsRolesMapOutput struct{ *pulumi.OutputState }

func (SmAdminsRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmAdminsRoles)(nil)).Elem()
}

func (o SmAdminsRolesMapOutput) ToSmAdminsRolesMapOutput() SmAdminsRolesMapOutput {
	return o
}

func (o SmAdminsRolesMapOutput) ToSmAdminsRolesMapOutputWithContext(ctx context.Context) SmAdminsRolesMapOutput {
	return o
}

func (o SmAdminsRolesMapOutput) MapIndex(k pulumi.StringInput) SmAdminsRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmAdminsRoles {
		return vs[0].(map[string]*SmAdminsRoles)[vs[1].(string)]
	}).(SmAdminsRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmAdminsRolesInput)(nil)).Elem(), &SmAdminsRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmAdminsRolesArrayInput)(nil)).Elem(), SmAdminsRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmAdminsRolesMapInput)(nil)).Elem(), SmAdminsRolesMap{})
	pulumi.RegisterOutputType(SmAdminsRolesOutput{})
	pulumi.RegisterOutputType(SmAdminsRolesArrayOutput{})
	pulumi.RegisterOutputType(SmAdminsRolesMapOutput{})
}
