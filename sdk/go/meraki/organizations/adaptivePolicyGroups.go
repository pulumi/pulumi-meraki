// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewAdaptivePolicyGroups(ctx, "example", &organizations.AdaptivePolicyGroupsArgs{
//				Description:    pulumi.String("Group of XYZ Corp Employees"),
//				Name:           pulumi.String("Employee Group"),
//				OrganizationId: pulumi.String("string"),
//				PolicyObjects: organizations.AdaptivePolicyGroupsPolicyObjectArray{
//					&organizations.AdaptivePolicyGroupsPolicyObjectArgs{
//						Id:   pulumi.String("2345"),
//						Name: pulumi.String("Example Policy Object"),
//					},
//				},
//				Sgt: pulumi.Int(1000),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsAdaptivePolicyGroupsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups example "id,organization_id"
// ```
type AdaptivePolicyGroups struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the group (default: "")
	Description    pulumi.StringOutput `pulumi:"description"`
	GroupId        pulumi.StringOutput `pulumi:"groupId"`
	IsDefaultGroup pulumi.BoolOutput   `pulumi:"isDefaultGroup"`
	// Name of the group
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
	PolicyObjects      AdaptivePolicyGroupsPolicyObjectArrayOutput `pulumi:"policyObjects"`
	RequiredIpMappings pulumi.StringArrayOutput                    `pulumi:"requiredIpMappings"`
	// SGT value of the group
	Sgt       pulumi.IntOutput    `pulumi:"sgt"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAdaptivePolicyGroups registers a new resource with the given unique name, arguments, and options.
func NewAdaptivePolicyGroups(ctx *pulumi.Context,
	name string, args *AdaptivePolicyGroupsArgs, opts ...pulumi.ResourceOption) (*AdaptivePolicyGroups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdaptivePolicyGroups
	err := ctx.RegisterResource("meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdaptivePolicyGroups gets an existing AdaptivePolicyGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdaptivePolicyGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdaptivePolicyGroupsState, opts ...pulumi.ResourceOption) (*AdaptivePolicyGroups, error) {
	var resource AdaptivePolicyGroups
	err := ctx.ReadResource("meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdaptivePolicyGroups resources.
type adaptivePolicyGroupsState struct {
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the group (default: "")
	Description    *string `pulumi:"description"`
	GroupId        *string `pulumi:"groupId"`
	IsDefaultGroup *bool   `pulumi:"isDefaultGroup"`
	// Name of the group
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
	PolicyObjects      []AdaptivePolicyGroupsPolicyObject `pulumi:"policyObjects"`
	RequiredIpMappings []string                           `pulumi:"requiredIpMappings"`
	// SGT value of the group
	Sgt       *int    `pulumi:"sgt"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AdaptivePolicyGroupsState struct {
	CreatedAt pulumi.StringPtrInput
	// Description of the group (default: "")
	Description    pulumi.StringPtrInput
	GroupId        pulumi.StringPtrInput
	IsDefaultGroup pulumi.BoolPtrInput
	// Name of the group
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
	PolicyObjects      AdaptivePolicyGroupsPolicyObjectArrayInput
	RequiredIpMappings pulumi.StringArrayInput
	// SGT value of the group
	Sgt       pulumi.IntPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (AdaptivePolicyGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*adaptivePolicyGroupsState)(nil)).Elem()
}

type adaptivePolicyGroupsArgs struct {
	// Description of the group (default: "")
	Description *string `pulumi:"description"`
	// Name of the group
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
	PolicyObjects []AdaptivePolicyGroupsPolicyObject `pulumi:"policyObjects"`
	// SGT value of the group
	Sgt *int `pulumi:"sgt"`
}

// The set of arguments for constructing a AdaptivePolicyGroups resource.
type AdaptivePolicyGroupsArgs struct {
	// Description of the group (default: "")
	Description pulumi.StringPtrInput
	// Name of the group
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
	PolicyObjects AdaptivePolicyGroupsPolicyObjectArrayInput
	// SGT value of the group
	Sgt pulumi.IntPtrInput
}

func (AdaptivePolicyGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adaptivePolicyGroupsArgs)(nil)).Elem()
}

type AdaptivePolicyGroupsInput interface {
	pulumi.Input

	ToAdaptivePolicyGroupsOutput() AdaptivePolicyGroupsOutput
	ToAdaptivePolicyGroupsOutputWithContext(ctx context.Context) AdaptivePolicyGroupsOutput
}

func (*AdaptivePolicyGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**AdaptivePolicyGroups)(nil)).Elem()
}

func (i *AdaptivePolicyGroups) ToAdaptivePolicyGroupsOutput() AdaptivePolicyGroupsOutput {
	return i.ToAdaptivePolicyGroupsOutputWithContext(context.Background())
}

func (i *AdaptivePolicyGroups) ToAdaptivePolicyGroupsOutputWithContext(ctx context.Context) AdaptivePolicyGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdaptivePolicyGroupsOutput)
}

// AdaptivePolicyGroupsArrayInput is an input type that accepts AdaptivePolicyGroupsArray and AdaptivePolicyGroupsArrayOutput values.
// You can construct a concrete instance of `AdaptivePolicyGroupsArrayInput` via:
//
//	AdaptivePolicyGroupsArray{ AdaptivePolicyGroupsArgs{...} }
type AdaptivePolicyGroupsArrayInput interface {
	pulumi.Input

	ToAdaptivePolicyGroupsArrayOutput() AdaptivePolicyGroupsArrayOutput
	ToAdaptivePolicyGroupsArrayOutputWithContext(context.Context) AdaptivePolicyGroupsArrayOutput
}

type AdaptivePolicyGroupsArray []AdaptivePolicyGroupsInput

func (AdaptivePolicyGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdaptivePolicyGroups)(nil)).Elem()
}

func (i AdaptivePolicyGroupsArray) ToAdaptivePolicyGroupsArrayOutput() AdaptivePolicyGroupsArrayOutput {
	return i.ToAdaptivePolicyGroupsArrayOutputWithContext(context.Background())
}

func (i AdaptivePolicyGroupsArray) ToAdaptivePolicyGroupsArrayOutputWithContext(ctx context.Context) AdaptivePolicyGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdaptivePolicyGroupsArrayOutput)
}

// AdaptivePolicyGroupsMapInput is an input type that accepts AdaptivePolicyGroupsMap and AdaptivePolicyGroupsMapOutput values.
// You can construct a concrete instance of `AdaptivePolicyGroupsMapInput` via:
//
//	AdaptivePolicyGroupsMap{ "key": AdaptivePolicyGroupsArgs{...} }
type AdaptivePolicyGroupsMapInput interface {
	pulumi.Input

	ToAdaptivePolicyGroupsMapOutput() AdaptivePolicyGroupsMapOutput
	ToAdaptivePolicyGroupsMapOutputWithContext(context.Context) AdaptivePolicyGroupsMapOutput
}

type AdaptivePolicyGroupsMap map[string]AdaptivePolicyGroupsInput

func (AdaptivePolicyGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdaptivePolicyGroups)(nil)).Elem()
}

func (i AdaptivePolicyGroupsMap) ToAdaptivePolicyGroupsMapOutput() AdaptivePolicyGroupsMapOutput {
	return i.ToAdaptivePolicyGroupsMapOutputWithContext(context.Background())
}

func (i AdaptivePolicyGroupsMap) ToAdaptivePolicyGroupsMapOutputWithContext(ctx context.Context) AdaptivePolicyGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdaptivePolicyGroupsMapOutput)
}

type AdaptivePolicyGroupsOutput struct{ *pulumi.OutputState }

func (AdaptivePolicyGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdaptivePolicyGroups)(nil)).Elem()
}

func (o AdaptivePolicyGroupsOutput) ToAdaptivePolicyGroupsOutput() AdaptivePolicyGroupsOutput {
	return o
}

func (o AdaptivePolicyGroupsOutput) ToAdaptivePolicyGroupsOutputWithContext(ctx context.Context) AdaptivePolicyGroupsOutput {
	return o
}

func (o AdaptivePolicyGroupsOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the group (default: "")
func (o AdaptivePolicyGroupsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o AdaptivePolicyGroupsOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o AdaptivePolicyGroupsOutput) IsDefaultGroup() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.BoolOutput { return v.IsDefaultGroup }).(pulumi.BoolOutput)
}

// Name of the group
func (o AdaptivePolicyGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o AdaptivePolicyGroupsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
func (o AdaptivePolicyGroupsOutput) PolicyObjects() AdaptivePolicyGroupsPolicyObjectArrayOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) AdaptivePolicyGroupsPolicyObjectArrayOutput { return v.PolicyObjects }).(AdaptivePolicyGroupsPolicyObjectArrayOutput)
}

func (o AdaptivePolicyGroupsOutput) RequiredIpMappings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringArrayOutput { return v.RequiredIpMappings }).(pulumi.StringArrayOutput)
}

// SGT value of the group
func (o AdaptivePolicyGroupsOutput) Sgt() pulumi.IntOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.IntOutput { return v.Sgt }).(pulumi.IntOutput)
}

func (o AdaptivePolicyGroupsOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AdaptivePolicyGroups) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AdaptivePolicyGroupsArrayOutput struct{ *pulumi.OutputState }

func (AdaptivePolicyGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdaptivePolicyGroups)(nil)).Elem()
}

func (o AdaptivePolicyGroupsArrayOutput) ToAdaptivePolicyGroupsArrayOutput() AdaptivePolicyGroupsArrayOutput {
	return o
}

func (o AdaptivePolicyGroupsArrayOutput) ToAdaptivePolicyGroupsArrayOutputWithContext(ctx context.Context) AdaptivePolicyGroupsArrayOutput {
	return o
}

func (o AdaptivePolicyGroupsArrayOutput) Index(i pulumi.IntInput) AdaptivePolicyGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdaptivePolicyGroups {
		return vs[0].([]*AdaptivePolicyGroups)[vs[1].(int)]
	}).(AdaptivePolicyGroupsOutput)
}

type AdaptivePolicyGroupsMapOutput struct{ *pulumi.OutputState }

func (AdaptivePolicyGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdaptivePolicyGroups)(nil)).Elem()
}

func (o AdaptivePolicyGroupsMapOutput) ToAdaptivePolicyGroupsMapOutput() AdaptivePolicyGroupsMapOutput {
	return o
}

func (o AdaptivePolicyGroupsMapOutput) ToAdaptivePolicyGroupsMapOutputWithContext(ctx context.Context) AdaptivePolicyGroupsMapOutput {
	return o
}

func (o AdaptivePolicyGroupsMapOutput) MapIndex(k pulumi.StringInput) AdaptivePolicyGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdaptivePolicyGroups {
		return vs[0].(map[string]*AdaptivePolicyGroups)[vs[1].(string)]
	}).(AdaptivePolicyGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdaptivePolicyGroupsInput)(nil)).Elem(), &AdaptivePolicyGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdaptivePolicyGroupsArrayInput)(nil)).Elem(), AdaptivePolicyGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdaptivePolicyGroupsMapInput)(nil)).Elem(), AdaptivePolicyGroupsMap{})
	pulumi.RegisterOutputType(AdaptivePolicyGroupsOutput{})
	pulumi.RegisterOutputType(AdaptivePolicyGroupsArrayOutput{})
	pulumi.RegisterOutputType(AdaptivePolicyGroupsMapOutput{})
}
