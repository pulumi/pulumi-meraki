// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type NetworksCombine struct {
	pulumi.CustomResourceState

	Item NetworksCombineItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput             `pulumi:"organizationId"`
	Parameters     NetworksCombineParametersOutput `pulumi:"parameters"`
}

// NewNetworksCombine registers a new resource with the given unique name, arguments, and options.
func NewNetworksCombine(ctx *pulumi.Context,
	name string, args *NetworksCombineArgs, opts ...pulumi.ResourceOption) (*NetworksCombine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworksCombine
	err := ctx.RegisterResource("meraki:organizations/networksCombine:NetworksCombine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworksCombine gets an existing NetworksCombine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworksCombine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworksCombineState, opts ...pulumi.ResourceOption) (*NetworksCombine, error) {
	var resource NetworksCombine
	err := ctx.ReadResource("meraki:organizations/networksCombine:NetworksCombine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworksCombine resources.
type networksCombineState struct {
	Item *NetworksCombineItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string                    `pulumi:"organizationId"`
	Parameters     *NetworksCombineParameters `pulumi:"parameters"`
}

type NetworksCombineState struct {
	Item NetworksCombineItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     NetworksCombineParametersPtrInput
}

func (NetworksCombineState) ElementType() reflect.Type {
	return reflect.TypeOf((*networksCombineState)(nil)).Elem()
}

type networksCombineArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string                    `pulumi:"organizationId"`
	Parameters     NetworksCombineParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a NetworksCombine resource.
type NetworksCombineArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     NetworksCombineParametersInput
}

func (NetworksCombineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networksCombineArgs)(nil)).Elem()
}

type NetworksCombineInput interface {
	pulumi.Input

	ToNetworksCombineOutput() NetworksCombineOutput
	ToNetworksCombineOutputWithContext(ctx context.Context) NetworksCombineOutput
}

func (*NetworksCombine) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworksCombine)(nil)).Elem()
}

func (i *NetworksCombine) ToNetworksCombineOutput() NetworksCombineOutput {
	return i.ToNetworksCombineOutputWithContext(context.Background())
}

func (i *NetworksCombine) ToNetworksCombineOutputWithContext(ctx context.Context) NetworksCombineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworksCombineOutput)
}

// NetworksCombineArrayInput is an input type that accepts NetworksCombineArray and NetworksCombineArrayOutput values.
// You can construct a concrete instance of `NetworksCombineArrayInput` via:
//
//	NetworksCombineArray{ NetworksCombineArgs{...} }
type NetworksCombineArrayInput interface {
	pulumi.Input

	ToNetworksCombineArrayOutput() NetworksCombineArrayOutput
	ToNetworksCombineArrayOutputWithContext(context.Context) NetworksCombineArrayOutput
}

type NetworksCombineArray []NetworksCombineInput

func (NetworksCombineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworksCombine)(nil)).Elem()
}

func (i NetworksCombineArray) ToNetworksCombineArrayOutput() NetworksCombineArrayOutput {
	return i.ToNetworksCombineArrayOutputWithContext(context.Background())
}

func (i NetworksCombineArray) ToNetworksCombineArrayOutputWithContext(ctx context.Context) NetworksCombineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworksCombineArrayOutput)
}

// NetworksCombineMapInput is an input type that accepts NetworksCombineMap and NetworksCombineMapOutput values.
// You can construct a concrete instance of `NetworksCombineMapInput` via:
//
//	NetworksCombineMap{ "key": NetworksCombineArgs{...} }
type NetworksCombineMapInput interface {
	pulumi.Input

	ToNetworksCombineMapOutput() NetworksCombineMapOutput
	ToNetworksCombineMapOutputWithContext(context.Context) NetworksCombineMapOutput
}

type NetworksCombineMap map[string]NetworksCombineInput

func (NetworksCombineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworksCombine)(nil)).Elem()
}

func (i NetworksCombineMap) ToNetworksCombineMapOutput() NetworksCombineMapOutput {
	return i.ToNetworksCombineMapOutputWithContext(context.Background())
}

func (i NetworksCombineMap) ToNetworksCombineMapOutputWithContext(ctx context.Context) NetworksCombineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworksCombineMapOutput)
}

type NetworksCombineOutput struct{ *pulumi.OutputState }

func (NetworksCombineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworksCombine)(nil)).Elem()
}

func (o NetworksCombineOutput) ToNetworksCombineOutput() NetworksCombineOutput {
	return o
}

func (o NetworksCombineOutput) ToNetworksCombineOutputWithContext(ctx context.Context) NetworksCombineOutput {
	return o
}

func (o NetworksCombineOutput) Item() NetworksCombineItemOutput {
	return o.ApplyT(func(v *NetworksCombine) NetworksCombineItemOutput { return v.Item }).(NetworksCombineItemOutput)
}

// organizationId path parameter. Organization ID
func (o NetworksCombineOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworksCombine) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o NetworksCombineOutput) Parameters() NetworksCombineParametersOutput {
	return o.ApplyT(func(v *NetworksCombine) NetworksCombineParametersOutput { return v.Parameters }).(NetworksCombineParametersOutput)
}

type NetworksCombineArrayOutput struct{ *pulumi.OutputState }

func (NetworksCombineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworksCombine)(nil)).Elem()
}

func (o NetworksCombineArrayOutput) ToNetworksCombineArrayOutput() NetworksCombineArrayOutput {
	return o
}

func (o NetworksCombineArrayOutput) ToNetworksCombineArrayOutputWithContext(ctx context.Context) NetworksCombineArrayOutput {
	return o
}

func (o NetworksCombineArrayOutput) Index(i pulumi.IntInput) NetworksCombineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworksCombine {
		return vs[0].([]*NetworksCombine)[vs[1].(int)]
	}).(NetworksCombineOutput)
}

type NetworksCombineMapOutput struct{ *pulumi.OutputState }

func (NetworksCombineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworksCombine)(nil)).Elem()
}

func (o NetworksCombineMapOutput) ToNetworksCombineMapOutput() NetworksCombineMapOutput {
	return o
}

func (o NetworksCombineMapOutput) ToNetworksCombineMapOutputWithContext(ctx context.Context) NetworksCombineMapOutput {
	return o
}

func (o NetworksCombineMapOutput) MapIndex(k pulumi.StringInput) NetworksCombineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworksCombine {
		return vs[0].(map[string]*NetworksCombine)[vs[1].(string)]
	}).(NetworksCombineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworksCombineInput)(nil)).Elem(), &NetworksCombine{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworksCombineArrayInput)(nil)).Elem(), NetworksCombineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworksCombineMapInput)(nil)).Elem(), NetworksCombineMap{})
	pulumi.RegisterOutputType(NetworksCombineOutput{})
	pulumi.RegisterOutputType(NetworksCombineArrayOutput{})
	pulumi.RegisterOutputType(NetworksCombineMapOutput{})
}
