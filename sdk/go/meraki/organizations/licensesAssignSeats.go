// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type LicensesAssignSeats struct {
	pulumi.CustomResourceState

	Item LicensesAssignSeatsItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput                 `pulumi:"organizationId"`
	Parameters     LicensesAssignSeatsParametersOutput `pulumi:"parameters"`
}

// NewLicensesAssignSeats registers a new resource with the given unique name, arguments, and options.
func NewLicensesAssignSeats(ctx *pulumi.Context,
	name string, args *LicensesAssignSeatsArgs, opts ...pulumi.ResourceOption) (*LicensesAssignSeats, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicensesAssignSeats
	err := ctx.RegisterResource("meraki:organizations/licensesAssignSeats:LicensesAssignSeats", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicensesAssignSeats gets an existing LicensesAssignSeats resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicensesAssignSeats(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicensesAssignSeatsState, opts ...pulumi.ResourceOption) (*LicensesAssignSeats, error) {
	var resource LicensesAssignSeats
	err := ctx.ReadResource("meraki:organizations/licensesAssignSeats:LicensesAssignSeats", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicensesAssignSeats resources.
type licensesAssignSeatsState struct {
	Item *LicensesAssignSeatsItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string                        `pulumi:"organizationId"`
	Parameters     *LicensesAssignSeatsParameters `pulumi:"parameters"`
}

type LicensesAssignSeatsState struct {
	Item LicensesAssignSeatsItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     LicensesAssignSeatsParametersPtrInput
}

func (LicensesAssignSeatsState) ElementType() reflect.Type {
	return reflect.TypeOf((*licensesAssignSeatsState)(nil)).Elem()
}

type licensesAssignSeatsArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string                        `pulumi:"organizationId"`
	Parameters     LicensesAssignSeatsParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a LicensesAssignSeats resource.
type LicensesAssignSeatsArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     LicensesAssignSeatsParametersInput
}

func (LicensesAssignSeatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licensesAssignSeatsArgs)(nil)).Elem()
}

type LicensesAssignSeatsInput interface {
	pulumi.Input

	ToLicensesAssignSeatsOutput() LicensesAssignSeatsOutput
	ToLicensesAssignSeatsOutputWithContext(ctx context.Context) LicensesAssignSeatsOutput
}

func (*LicensesAssignSeats) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensesAssignSeats)(nil)).Elem()
}

func (i *LicensesAssignSeats) ToLicensesAssignSeatsOutput() LicensesAssignSeatsOutput {
	return i.ToLicensesAssignSeatsOutputWithContext(context.Background())
}

func (i *LicensesAssignSeats) ToLicensesAssignSeatsOutputWithContext(ctx context.Context) LicensesAssignSeatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesAssignSeatsOutput)
}

// LicensesAssignSeatsArrayInput is an input type that accepts LicensesAssignSeatsArray and LicensesAssignSeatsArrayOutput values.
// You can construct a concrete instance of `LicensesAssignSeatsArrayInput` via:
//
//	LicensesAssignSeatsArray{ LicensesAssignSeatsArgs{...} }
type LicensesAssignSeatsArrayInput interface {
	pulumi.Input

	ToLicensesAssignSeatsArrayOutput() LicensesAssignSeatsArrayOutput
	ToLicensesAssignSeatsArrayOutputWithContext(context.Context) LicensesAssignSeatsArrayOutput
}

type LicensesAssignSeatsArray []LicensesAssignSeatsInput

func (LicensesAssignSeatsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensesAssignSeats)(nil)).Elem()
}

func (i LicensesAssignSeatsArray) ToLicensesAssignSeatsArrayOutput() LicensesAssignSeatsArrayOutput {
	return i.ToLicensesAssignSeatsArrayOutputWithContext(context.Background())
}

func (i LicensesAssignSeatsArray) ToLicensesAssignSeatsArrayOutputWithContext(ctx context.Context) LicensesAssignSeatsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesAssignSeatsArrayOutput)
}

// LicensesAssignSeatsMapInput is an input type that accepts LicensesAssignSeatsMap and LicensesAssignSeatsMapOutput values.
// You can construct a concrete instance of `LicensesAssignSeatsMapInput` via:
//
//	LicensesAssignSeatsMap{ "key": LicensesAssignSeatsArgs{...} }
type LicensesAssignSeatsMapInput interface {
	pulumi.Input

	ToLicensesAssignSeatsMapOutput() LicensesAssignSeatsMapOutput
	ToLicensesAssignSeatsMapOutputWithContext(context.Context) LicensesAssignSeatsMapOutput
}

type LicensesAssignSeatsMap map[string]LicensesAssignSeatsInput

func (LicensesAssignSeatsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensesAssignSeats)(nil)).Elem()
}

func (i LicensesAssignSeatsMap) ToLicensesAssignSeatsMapOutput() LicensesAssignSeatsMapOutput {
	return i.ToLicensesAssignSeatsMapOutputWithContext(context.Background())
}

func (i LicensesAssignSeatsMap) ToLicensesAssignSeatsMapOutputWithContext(ctx context.Context) LicensesAssignSeatsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesAssignSeatsMapOutput)
}

type LicensesAssignSeatsOutput struct{ *pulumi.OutputState }

func (LicensesAssignSeatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensesAssignSeats)(nil)).Elem()
}

func (o LicensesAssignSeatsOutput) ToLicensesAssignSeatsOutput() LicensesAssignSeatsOutput {
	return o
}

func (o LicensesAssignSeatsOutput) ToLicensesAssignSeatsOutputWithContext(ctx context.Context) LicensesAssignSeatsOutput {
	return o
}

func (o LicensesAssignSeatsOutput) Item() LicensesAssignSeatsItemOutput {
	return o.ApplyT(func(v *LicensesAssignSeats) LicensesAssignSeatsItemOutput { return v.Item }).(LicensesAssignSeatsItemOutput)
}

// organizationId path parameter. Organization ID
func (o LicensesAssignSeatsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicensesAssignSeats) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LicensesAssignSeatsOutput) Parameters() LicensesAssignSeatsParametersOutput {
	return o.ApplyT(func(v *LicensesAssignSeats) LicensesAssignSeatsParametersOutput { return v.Parameters }).(LicensesAssignSeatsParametersOutput)
}

type LicensesAssignSeatsArrayOutput struct{ *pulumi.OutputState }

func (LicensesAssignSeatsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensesAssignSeats)(nil)).Elem()
}

func (o LicensesAssignSeatsArrayOutput) ToLicensesAssignSeatsArrayOutput() LicensesAssignSeatsArrayOutput {
	return o
}

func (o LicensesAssignSeatsArrayOutput) ToLicensesAssignSeatsArrayOutputWithContext(ctx context.Context) LicensesAssignSeatsArrayOutput {
	return o
}

func (o LicensesAssignSeatsArrayOutput) Index(i pulumi.IntInput) LicensesAssignSeatsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicensesAssignSeats {
		return vs[0].([]*LicensesAssignSeats)[vs[1].(int)]
	}).(LicensesAssignSeatsOutput)
}

type LicensesAssignSeatsMapOutput struct{ *pulumi.OutputState }

func (LicensesAssignSeatsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensesAssignSeats)(nil)).Elem()
}

func (o LicensesAssignSeatsMapOutput) ToLicensesAssignSeatsMapOutput() LicensesAssignSeatsMapOutput {
	return o
}

func (o LicensesAssignSeatsMapOutput) ToLicensesAssignSeatsMapOutputWithContext(ctx context.Context) LicensesAssignSeatsMapOutput {
	return o
}

func (o LicensesAssignSeatsMapOutput) MapIndex(k pulumi.StringInput) LicensesAssignSeatsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicensesAssignSeats {
		return vs[0].(map[string]*LicensesAssignSeats)[vs[1].(string)]
	}).(LicensesAssignSeatsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesAssignSeatsInput)(nil)).Elem(), &LicensesAssignSeats{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesAssignSeatsArrayInput)(nil)).Elem(), LicensesAssignSeatsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesAssignSeatsMapInput)(nil)).Elem(), LicensesAssignSeatsMap{})
	pulumi.RegisterOutputType(LicensesAssignSeatsOutput{})
	pulumi.RegisterOutputType(LicensesAssignSeatsArrayOutput{})
	pulumi.RegisterOutputType(LicensesAssignSeatsMapOutput{})
}
