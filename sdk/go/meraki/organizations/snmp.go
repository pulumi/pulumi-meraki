// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewSnmp(ctx, "example", &organizations.SnmpArgs{
//				OrganizationId: pulumi.String("string"),
//				PeerIps: pulumi.StringArray{
//					pulumi.String("123.123.123.1"),
//				},
//				V2cEnabled: pulumi.Bool(false),
//				V3AuthMode: pulumi.String("SHA"),
//				V3AuthPass: pulumi.String("password"),
//				V3Enabled:  pulumi.Bool(true),
//				V3PrivMode: pulumi.String("AES128"),
//				V3PrivPass: pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsSnmpExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/snmp:Snmp example "organization_id"
// ```
type Snmp struct {
	pulumi.CustomResourceState

	// The hostname of the SNMP server.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps pulumi.StringArrayOutput `pulumi:"peerIps"`
	// The port of the SNMP server.
	Port pulumi.IntOutput `pulumi:"port"`
	// The community string for SNMP version 2c, if enabled.
	V2CommunityString pulumi.StringOutput `pulumi:"v2CommunityString"`
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled pulumi.BoolOutput `pulumi:"v2cEnabled"`
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode pulumi.StringOutput `pulumi:"v3AuthMode"`
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass pulumi.StringOutput `pulumi:"v3AuthPass"`
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled pulumi.BoolOutput `pulumi:"v3Enabled"`
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode pulumi.StringOutput `pulumi:"v3PrivMode"`
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass pulumi.StringOutput `pulumi:"v3PrivPass"`
	// The user for SNMP version 3, if enabled.
	V3User pulumi.StringOutput `pulumi:"v3User"`
}

// NewSnmp registers a new resource with the given unique name, arguments, and options.
func NewSnmp(ctx *pulumi.Context,
	name string, args *SnmpArgs, opts ...pulumi.ResourceOption) (*Snmp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snmp
	err := ctx.RegisterResource("meraki:organizations/snmp:Snmp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmp gets an existing Snmp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpState, opts ...pulumi.ResourceOption) (*Snmp, error) {
	var resource Snmp
	err := ctx.ReadResource("meraki:organizations/snmp:Snmp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snmp resources.
type snmpState struct {
	// The hostname of the SNMP server.
	Hostname *string `pulumi:"hostname"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps []string `pulumi:"peerIps"`
	// The port of the SNMP server.
	Port *int `pulumi:"port"`
	// The community string for SNMP version 2c, if enabled.
	V2CommunityString *string `pulumi:"v2CommunityString"`
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled *bool `pulumi:"v2cEnabled"`
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode *string `pulumi:"v3AuthMode"`
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass *string `pulumi:"v3AuthPass"`
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled *bool `pulumi:"v3Enabled"`
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode *string `pulumi:"v3PrivMode"`
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass *string `pulumi:"v3PrivPass"`
	// The user for SNMP version 3, if enabled.
	V3User *string `pulumi:"v3User"`
}

type SnmpState struct {
	// The hostname of the SNMP server.
	Hostname pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps pulumi.StringArrayInput
	// The port of the SNMP server.
	Port pulumi.IntPtrInput
	// The community string for SNMP version 2c, if enabled.
	V2CommunityString pulumi.StringPtrInput
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled pulumi.BoolPtrInput
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode pulumi.StringPtrInput
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass pulumi.StringPtrInput
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled pulumi.BoolPtrInput
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode pulumi.StringPtrInput
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass pulumi.StringPtrInput
	// The user for SNMP version 3, if enabled.
	V3User pulumi.StringPtrInput
}

func (SnmpState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpState)(nil)).Elem()
}

type snmpArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps []string `pulumi:"peerIps"`
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled *bool `pulumi:"v2cEnabled"`
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode *string `pulumi:"v3AuthMode"`
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass *string `pulumi:"v3AuthPass"`
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled *bool `pulumi:"v3Enabled"`
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode *string `pulumi:"v3PrivMode"`
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass *string `pulumi:"v3PrivPass"`
}

// The set of arguments for constructing a Snmp resource.
type SnmpArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps pulumi.StringArrayInput
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled pulumi.BoolPtrInput
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode pulumi.StringPtrInput
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass pulumi.StringPtrInput
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled pulumi.BoolPtrInput
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode pulumi.StringPtrInput
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass pulumi.StringPtrInput
}

func (SnmpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpArgs)(nil)).Elem()
}

type SnmpInput interface {
	pulumi.Input

	ToSnmpOutput() SnmpOutput
	ToSnmpOutputWithContext(ctx context.Context) SnmpOutput
}

func (*Snmp) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmp)(nil)).Elem()
}

func (i *Snmp) ToSnmpOutput() SnmpOutput {
	return i.ToSnmpOutputWithContext(context.Background())
}

func (i *Snmp) ToSnmpOutputWithContext(ctx context.Context) SnmpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpOutput)
}

// SnmpArrayInput is an input type that accepts SnmpArray and SnmpArrayOutput values.
// You can construct a concrete instance of `SnmpArrayInput` via:
//
//	SnmpArray{ SnmpArgs{...} }
type SnmpArrayInput interface {
	pulumi.Input

	ToSnmpArrayOutput() SnmpArrayOutput
	ToSnmpArrayOutputWithContext(context.Context) SnmpArrayOutput
}

type SnmpArray []SnmpInput

func (SnmpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmp)(nil)).Elem()
}

func (i SnmpArray) ToSnmpArrayOutput() SnmpArrayOutput {
	return i.ToSnmpArrayOutputWithContext(context.Background())
}

func (i SnmpArray) ToSnmpArrayOutputWithContext(ctx context.Context) SnmpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpArrayOutput)
}

// SnmpMapInput is an input type that accepts SnmpMap and SnmpMapOutput values.
// You can construct a concrete instance of `SnmpMapInput` via:
//
//	SnmpMap{ "key": SnmpArgs{...} }
type SnmpMapInput interface {
	pulumi.Input

	ToSnmpMapOutput() SnmpMapOutput
	ToSnmpMapOutputWithContext(context.Context) SnmpMapOutput
}

type SnmpMap map[string]SnmpInput

func (SnmpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmp)(nil)).Elem()
}

func (i SnmpMap) ToSnmpMapOutput() SnmpMapOutput {
	return i.ToSnmpMapOutputWithContext(context.Background())
}

func (i SnmpMap) ToSnmpMapOutputWithContext(ctx context.Context) SnmpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpMapOutput)
}

type SnmpOutput struct{ *pulumi.OutputState }

func (SnmpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snmp)(nil)).Elem()
}

func (o SnmpOutput) ToSnmpOutput() SnmpOutput {
	return o
}

func (o SnmpOutput) ToSnmpOutputWithContext(ctx context.Context) SnmpOutput {
	return o
}

// The hostname of the SNMP server.
func (o SnmpOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o SnmpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The list of IPv4 addresses that are allowed to access the SNMP server.
func (o SnmpOutput) PeerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringArrayOutput { return v.PeerIps }).(pulumi.StringArrayOutput)
}

// The port of the SNMP server.
func (o SnmpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Snmp) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The community string for SNMP version 2c, if enabled.
func (o SnmpOutput) V2CommunityString() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V2CommunityString }).(pulumi.StringOutput)
}

// Boolean indicating whether SNMP version 2c is enabled for the organization.
func (o SnmpOutput) V2cEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snmp) pulumi.BoolOutput { return v.V2cEnabled }).(pulumi.BoolOutput)
}

// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
func (o SnmpOutput) V3AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V3AuthMode }).(pulumi.StringOutput)
}

// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
func (o SnmpOutput) V3AuthPass() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V3AuthPass }).(pulumi.StringOutput)
}

// Boolean indicating whether SNMP version 3 is enabled for the organization.
func (o SnmpOutput) V3Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Snmp) pulumi.BoolOutput { return v.V3Enabled }).(pulumi.BoolOutput)
}

// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
func (o SnmpOutput) V3PrivMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V3PrivMode }).(pulumi.StringOutput)
}

// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
func (o SnmpOutput) V3PrivPass() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V3PrivPass }).(pulumi.StringOutput)
}

// The user for SNMP version 3, if enabled.
func (o SnmpOutput) V3User() pulumi.StringOutput {
	return o.ApplyT(func(v *Snmp) pulumi.StringOutput { return v.V3User }).(pulumi.StringOutput)
}

type SnmpArrayOutput struct{ *pulumi.OutputState }

func (SnmpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snmp)(nil)).Elem()
}

func (o SnmpArrayOutput) ToSnmpArrayOutput() SnmpArrayOutput {
	return o
}

func (o SnmpArrayOutput) ToSnmpArrayOutputWithContext(ctx context.Context) SnmpArrayOutput {
	return o
}

func (o SnmpArrayOutput) Index(i pulumi.IntInput) SnmpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snmp {
		return vs[0].([]*Snmp)[vs[1].(int)]
	}).(SnmpOutput)
}

type SnmpMapOutput struct{ *pulumi.OutputState }

func (SnmpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snmp)(nil)).Elem()
}

func (o SnmpMapOutput) ToSnmpMapOutput() SnmpMapOutput {
	return o
}

func (o SnmpMapOutput) ToSnmpMapOutputWithContext(ctx context.Context) SnmpMapOutput {
	return o
}

func (o SnmpMapOutput) MapIndex(k pulumi.StringInput) SnmpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snmp {
		return vs[0].(map[string]*Snmp)[vs[1].(string)]
	}).(SnmpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpInput)(nil)).Elem(), &Snmp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpArrayInput)(nil)).Elem(), SnmpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpMapInput)(nil)).Elem(), SnmpMap{})
	pulumi.RegisterOutputType(SnmpOutput{})
	pulumi.RegisterOutputType(SnmpArrayOutput{})
	pulumi.RegisterOutputType(SnmpMapOutput{})
}
