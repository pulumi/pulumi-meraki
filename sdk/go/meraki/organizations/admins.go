// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewAdmins(ctx, "example", &organizations.AdminsArgs{
//				AuthenticationMethod: pulumi.String("Email"),
//				Email:                pulumi.String("miles@meraki.com"),
//				Name:                 pulumi.String("Miles Meraki"),
//				Networks: organizations.AdminsNetworkArray{
//					&organizations.AdminsNetworkArgs{
//						Access: pulumi.String("full"),
//						Id:     pulumi.String("N_24329156"),
//					},
//				},
//				OrgAccess:      pulumi.String("none"),
//				OrganizationId: pulumi.String("string"),
//				Tags: organizations.AdminsTagArray{
//					&organizations.AdminsTagArgs{
//						Access: pulumi.String("read-only"),
//						Tag:    pulumi.String("west"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsAdminsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/admins:Admins example "organization_id"
// ```
type Admins struct {
	pulumi.CustomResourceState

	// Status of the admin's account
	AccountStatus pulumi.StringOutput `pulumi:"accountStatus"`
	// adminId path parameter. Admin ID
	AdminId pulumi.StringPtrOutput `pulumi:"adminId"`
	// Admin's authentication method
	AuthenticationMethod pulumi.StringOutput `pulumi:"authenticationMethod"`
	// Admin's email address
	Email pulumi.StringOutput `pulumi:"email"`
	// Indicates whether the admin has an API key
	HasApiKey pulumi.BoolOutput `pulumi:"hasApiKey"`
	// Time when the admin was last active
	LastActive pulumi.StringOutput `pulumi:"lastActive"`
	// Admin's username
	Name pulumi.StringOutput `pulumi:"name"`
	// Admin network access information
	Networks AdminsNetworkArrayOutput `pulumi:"networks"`
	// Admin's level of access to the organization
	OrgAccess pulumi.StringOutput `pulumi:"orgAccess"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Admin tag information
	Tags AdminsTagArrayOutput `pulumi:"tags"`
	// Indicates whether two-factor authentication is enabled
	TwoFactorAuthEnabled pulumi.BoolOutput `pulumi:"twoFactorAuthEnabled"`
}

// NewAdmins registers a new resource with the given unique name, arguments, and options.
func NewAdmins(ctx *pulumi.Context,
	name string, args *AdminsArgs, opts ...pulumi.ResourceOption) (*Admins, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Admins
	err := ctx.RegisterResource("meraki:organizations/admins:Admins", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdmins gets an existing Admins resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdmins(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminsState, opts ...pulumi.ResourceOption) (*Admins, error) {
	var resource Admins
	err := ctx.ReadResource("meraki:organizations/admins:Admins", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Admins resources.
type adminsState struct {
	// Status of the admin's account
	AccountStatus *string `pulumi:"accountStatus"`
	// adminId path parameter. Admin ID
	AdminId *string `pulumi:"adminId"`
	// Admin's authentication method
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// Admin's email address
	Email *string `pulumi:"email"`
	// Indicates whether the admin has an API key
	HasApiKey *bool `pulumi:"hasApiKey"`
	// Time when the admin was last active
	LastActive *string `pulumi:"lastActive"`
	// Admin's username
	Name *string `pulumi:"name"`
	// Admin network access information
	Networks []AdminsNetwork `pulumi:"networks"`
	// Admin's level of access to the organization
	OrgAccess *string `pulumi:"orgAccess"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// Admin tag information
	Tags []AdminsTag `pulumi:"tags"`
	// Indicates whether two-factor authentication is enabled
	TwoFactorAuthEnabled *bool `pulumi:"twoFactorAuthEnabled"`
}

type AdminsState struct {
	// Status of the admin's account
	AccountStatus pulumi.StringPtrInput
	// adminId path parameter. Admin ID
	AdminId pulumi.StringPtrInput
	// Admin's authentication method
	AuthenticationMethod pulumi.StringPtrInput
	// Admin's email address
	Email pulumi.StringPtrInput
	// Indicates whether the admin has an API key
	HasApiKey pulumi.BoolPtrInput
	// Time when the admin was last active
	LastActive pulumi.StringPtrInput
	// Admin's username
	Name pulumi.StringPtrInput
	// Admin network access information
	Networks AdminsNetworkArrayInput
	// Admin's level of access to the organization
	OrgAccess pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// Admin tag information
	Tags AdminsTagArrayInput
	// Indicates whether two-factor authentication is enabled
	TwoFactorAuthEnabled pulumi.BoolPtrInput
}

func (AdminsState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminsState)(nil)).Elem()
}

type adminsArgs struct {
	// adminId path parameter. Admin ID
	AdminId *string `pulumi:"adminId"`
	// Admin's authentication method
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// Admin's email address
	Email *string `pulumi:"email"`
	// Admin's username
	Name *string `pulumi:"name"`
	// Admin network access information
	Networks []AdminsNetwork `pulumi:"networks"`
	// Admin's level of access to the organization
	OrgAccess *string `pulumi:"orgAccess"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// Admin tag information
	Tags []AdminsTag `pulumi:"tags"`
}

// The set of arguments for constructing a Admins resource.
type AdminsArgs struct {
	// adminId path parameter. Admin ID
	AdminId pulumi.StringPtrInput
	// Admin's authentication method
	AuthenticationMethod pulumi.StringPtrInput
	// Admin's email address
	Email pulumi.StringPtrInput
	// Admin's username
	Name pulumi.StringPtrInput
	// Admin network access information
	Networks AdminsNetworkArrayInput
	// Admin's level of access to the organization
	OrgAccess pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// Admin tag information
	Tags AdminsTagArrayInput
}

func (AdminsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminsArgs)(nil)).Elem()
}

type AdminsInput interface {
	pulumi.Input

	ToAdminsOutput() AdminsOutput
	ToAdminsOutputWithContext(ctx context.Context) AdminsOutput
}

func (*Admins) ElementType() reflect.Type {
	return reflect.TypeOf((**Admins)(nil)).Elem()
}

func (i *Admins) ToAdminsOutput() AdminsOutput {
	return i.ToAdminsOutputWithContext(context.Background())
}

func (i *Admins) ToAdminsOutputWithContext(ctx context.Context) AdminsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminsOutput)
}

// AdminsArrayInput is an input type that accepts AdminsArray and AdminsArrayOutput values.
// You can construct a concrete instance of `AdminsArrayInput` via:
//
//	AdminsArray{ AdminsArgs{...} }
type AdminsArrayInput interface {
	pulumi.Input

	ToAdminsArrayOutput() AdminsArrayOutput
	ToAdminsArrayOutputWithContext(context.Context) AdminsArrayOutput
}

type AdminsArray []AdminsInput

func (AdminsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Admins)(nil)).Elem()
}

func (i AdminsArray) ToAdminsArrayOutput() AdminsArrayOutput {
	return i.ToAdminsArrayOutputWithContext(context.Background())
}

func (i AdminsArray) ToAdminsArrayOutputWithContext(ctx context.Context) AdminsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminsArrayOutput)
}

// AdminsMapInput is an input type that accepts AdminsMap and AdminsMapOutput values.
// You can construct a concrete instance of `AdminsMapInput` via:
//
//	AdminsMap{ "key": AdminsArgs{...} }
type AdminsMapInput interface {
	pulumi.Input

	ToAdminsMapOutput() AdminsMapOutput
	ToAdminsMapOutputWithContext(context.Context) AdminsMapOutput
}

type AdminsMap map[string]AdminsInput

func (AdminsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Admins)(nil)).Elem()
}

func (i AdminsMap) ToAdminsMapOutput() AdminsMapOutput {
	return i.ToAdminsMapOutputWithContext(context.Background())
}

func (i AdminsMap) ToAdminsMapOutputWithContext(ctx context.Context) AdminsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminsMapOutput)
}

type AdminsOutput struct{ *pulumi.OutputState }

func (AdminsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Admins)(nil)).Elem()
}

func (o AdminsOutput) ToAdminsOutput() AdminsOutput {
	return o
}

func (o AdminsOutput) ToAdminsOutputWithContext(ctx context.Context) AdminsOutput {
	return o
}

// Status of the admin's account
func (o AdminsOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.AccountStatus }).(pulumi.StringOutput)
}

// adminId path parameter. Admin ID
func (o AdminsOutput) AdminId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringPtrOutput { return v.AdminId }).(pulumi.StringPtrOutput)
}

// Admin's authentication method
func (o AdminsOutput) AuthenticationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.AuthenticationMethod }).(pulumi.StringOutput)
}

// Admin's email address
func (o AdminsOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Indicates whether the admin has an API key
func (o AdminsOutput) HasApiKey() pulumi.BoolOutput {
	return o.ApplyT(func(v *Admins) pulumi.BoolOutput { return v.HasApiKey }).(pulumi.BoolOutput)
}

// Time when the admin was last active
func (o AdminsOutput) LastActive() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.LastActive }).(pulumi.StringOutput)
}

// Admin's username
func (o AdminsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Admin network access information
func (o AdminsOutput) Networks() AdminsNetworkArrayOutput {
	return o.ApplyT(func(v *Admins) AdminsNetworkArrayOutput { return v.Networks }).(AdminsNetworkArrayOutput)
}

// Admin's level of access to the organization
func (o AdminsOutput) OrgAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.OrgAccess }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o AdminsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Admins) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Admin tag information
func (o AdminsOutput) Tags() AdminsTagArrayOutput {
	return o.ApplyT(func(v *Admins) AdminsTagArrayOutput { return v.Tags }).(AdminsTagArrayOutput)
}

// Indicates whether two-factor authentication is enabled
func (o AdminsOutput) TwoFactorAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Admins) pulumi.BoolOutput { return v.TwoFactorAuthEnabled }).(pulumi.BoolOutput)
}

type AdminsArrayOutput struct{ *pulumi.OutputState }

func (AdminsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Admins)(nil)).Elem()
}

func (o AdminsArrayOutput) ToAdminsArrayOutput() AdminsArrayOutput {
	return o
}

func (o AdminsArrayOutput) ToAdminsArrayOutputWithContext(ctx context.Context) AdminsArrayOutput {
	return o
}

func (o AdminsArrayOutput) Index(i pulumi.IntInput) AdminsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Admins {
		return vs[0].([]*Admins)[vs[1].(int)]
	}).(AdminsOutput)
}

type AdminsMapOutput struct{ *pulumi.OutputState }

func (AdminsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Admins)(nil)).Elem()
}

func (o AdminsMapOutput) ToAdminsMapOutput() AdminsMapOutput {
	return o
}

func (o AdminsMapOutput) ToAdminsMapOutputWithContext(ctx context.Context) AdminsMapOutput {
	return o
}

func (o AdminsMapOutput) MapIndex(k pulumi.StringInput) AdminsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Admins {
		return vs[0].(map[string]*Admins)[vs[1].(string)]
	}).(AdminsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminsInput)(nil)).Elem(), &Admins{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminsArrayInput)(nil)).Elem(), AdminsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminsMapInput)(nil)).Elem(), AdminsMap{})
	pulumi.RegisterOutputType(AdminsOutput{})
	pulumi.RegisterOutputType(AdminsArrayOutput{})
	pulumi.RegisterOutputType(AdminsMapOutput{})
}
