// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewBrandingPolicies(ctx, "example", &organizations.BrandingPoliciesArgs{
//				AdminSettings: &organizations.BrandingPoliciesAdminSettingsArgs{
//					Applies_to: "All admins of networks...",
//					Values: pulumi.StringArray{
//						pulumi.String("N_1234"),
//						pulumi.String("L_5678"),
//					},
//				},
//				CustomLogo: &organizations.BrandingPoliciesCustomLogoArgs{
//					Enabled: pulumi.Bool(true),
//					Image: &organizations.BrandingPoliciesCustomLogoImageArgs{
//						Contents: pulumi.String("Hyperg26C8F4h8CvcoUqpA=="),
//						Format:   pulumi.String("jpg"),
//					},
//				},
//				Enabled: pulumi.Bool(true),
//				HelpSettings: &organizations.BrandingPoliciesHelpSettingsArgs{
//					Api_docs_subtab:                        "default or inherit",
//					Cases_subtab:                           "hide",
//					Cisco_meraki_product_documentation:     "show",
//					Community_subtab:                       "show",
//					Data_protection_requests_subtab:        "default or inherit",
//					Firewall_info_subtab:                   "hide",
//					Get_help_subtab:                        "default or inherit",
//					Get_help_subtab_knowledge_base_search:  "<h1>Some custom HTML content</h1>",
//					Hardware_replacements_subtab:           "hide",
//					Help_tab:                               "show",
//					Help_widget:                            "hide",
//					New_features_subtab:                    "show",
//					Sm_forums:                              "hide",
//					Support_contact_info:                   "show",
//					Universal_search_knowledge_base_search: "hide",
//				},
//				Name:           pulumi.String("My Branding Policy"),
//				OrganizationId: pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsBrandingPoliciesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/brandingPolicies:BrandingPolicies example "branding_policy_id,organization_id"
// ```
type BrandingPolicies struct {
	pulumi.CustomResourceState

	// Settings for describing which kinds of admins this policy applies to.
	AdminSettings BrandingPoliciesAdminSettingsOutput `pulumi:"adminSettings"`
	// brandingPolicyId path parameter. Branding policy ID
	BrandingPolicyId pulumi.StringPtrOutput `pulumi:"brandingPolicyId"`
	// Properties describing the custom logo attached to the branding policy.
	CustomLogo BrandingPoliciesCustomLogoOutput `pulumi:"customLogo"`
	// Boolean indicating whether this policy is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
	//   'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
	//   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
	//   Dashboard; see the documentation for each property to see the allowed values.
	HelpSettings BrandingPoliciesHelpSettingsOutput `pulumi:"helpSettings"`
	// Name of the Dashboard branding policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewBrandingPolicies registers a new resource with the given unique name, arguments, and options.
func NewBrandingPolicies(ctx *pulumi.Context,
	name string, args *BrandingPoliciesArgs, opts ...pulumi.ResourceOption) (*BrandingPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrandingPolicies
	err := ctx.RegisterResource("meraki:organizations/brandingPolicies:BrandingPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrandingPolicies gets an existing BrandingPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrandingPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrandingPoliciesState, opts ...pulumi.ResourceOption) (*BrandingPolicies, error) {
	var resource BrandingPolicies
	err := ctx.ReadResource("meraki:organizations/brandingPolicies:BrandingPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrandingPolicies resources.
type brandingPoliciesState struct {
	// Settings for describing which kinds of admins this policy applies to.
	AdminSettings *BrandingPoliciesAdminSettings `pulumi:"adminSettings"`
	// brandingPolicyId path parameter. Branding policy ID
	BrandingPolicyId *string `pulumi:"brandingPolicyId"`
	// Properties describing the custom logo attached to the branding policy.
	CustomLogo *BrandingPoliciesCustomLogo `pulumi:"customLogo"`
	// Boolean indicating whether this policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
	//   'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
	//   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
	//   Dashboard; see the documentation for each property to see the allowed values.
	HelpSettings *BrandingPoliciesHelpSettings `pulumi:"helpSettings"`
	// Name of the Dashboard branding policy.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
}

type BrandingPoliciesState struct {
	// Settings for describing which kinds of admins this policy applies to.
	AdminSettings BrandingPoliciesAdminSettingsPtrInput
	// brandingPolicyId path parameter. Branding policy ID
	BrandingPolicyId pulumi.StringPtrInput
	// Properties describing the custom logo attached to the branding policy.
	CustomLogo BrandingPoliciesCustomLogoPtrInput
	// Boolean indicating whether this policy is enabled.
	Enabled pulumi.BoolPtrInput
	// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
	//   'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
	//   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
	//   Dashboard; see the documentation for each property to see the allowed values.
	HelpSettings BrandingPoliciesHelpSettingsPtrInput
	// Name of the Dashboard branding policy.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
}

func (BrandingPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*brandingPoliciesState)(nil)).Elem()
}

type brandingPoliciesArgs struct {
	// Settings for describing which kinds of admins this policy applies to.
	AdminSettings *BrandingPoliciesAdminSettings `pulumi:"adminSettings"`
	// brandingPolicyId path parameter. Branding policy ID
	BrandingPolicyId *string `pulumi:"brandingPolicyId"`
	// Properties describing the custom logo attached to the branding policy.
	CustomLogo *BrandingPoliciesCustomLogo `pulumi:"customLogo"`
	// Boolean indicating whether this policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
	//   'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
	//   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
	//   Dashboard; see the documentation for each property to see the allowed values.
	HelpSettings *BrandingPoliciesHelpSettings `pulumi:"helpSettings"`
	// Name of the Dashboard branding policy.
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
}

// The set of arguments for constructing a BrandingPolicies resource.
type BrandingPoliciesArgs struct {
	// Settings for describing which kinds of admins this policy applies to.
	AdminSettings BrandingPoliciesAdminSettingsPtrInput
	// brandingPolicyId path parameter. Branding policy ID
	BrandingPolicyId pulumi.StringPtrInput
	// Properties describing the custom logo attached to the branding policy.
	CustomLogo BrandingPoliciesCustomLogoPtrInput
	// Boolean indicating whether this policy is enabled.
	Enabled pulumi.BoolPtrInput
	// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
	//   'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
	//   the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
	//   Dashboard; see the documentation for each property to see the allowed values.
	HelpSettings BrandingPoliciesHelpSettingsPtrInput
	// Name of the Dashboard branding policy.
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
}

func (BrandingPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*brandingPoliciesArgs)(nil)).Elem()
}

type BrandingPoliciesInput interface {
	pulumi.Input

	ToBrandingPoliciesOutput() BrandingPoliciesOutput
	ToBrandingPoliciesOutputWithContext(ctx context.Context) BrandingPoliciesOutput
}

func (*BrandingPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**BrandingPolicies)(nil)).Elem()
}

func (i *BrandingPolicies) ToBrandingPoliciesOutput() BrandingPoliciesOutput {
	return i.ToBrandingPoliciesOutputWithContext(context.Background())
}

func (i *BrandingPolicies) ToBrandingPoliciesOutputWithContext(ctx context.Context) BrandingPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandingPoliciesOutput)
}

// BrandingPoliciesArrayInput is an input type that accepts BrandingPoliciesArray and BrandingPoliciesArrayOutput values.
// You can construct a concrete instance of `BrandingPoliciesArrayInput` via:
//
//	BrandingPoliciesArray{ BrandingPoliciesArgs{...} }
type BrandingPoliciesArrayInput interface {
	pulumi.Input

	ToBrandingPoliciesArrayOutput() BrandingPoliciesArrayOutput
	ToBrandingPoliciesArrayOutputWithContext(context.Context) BrandingPoliciesArrayOutput
}

type BrandingPoliciesArray []BrandingPoliciesInput

func (BrandingPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrandingPolicies)(nil)).Elem()
}

func (i BrandingPoliciesArray) ToBrandingPoliciesArrayOutput() BrandingPoliciesArrayOutput {
	return i.ToBrandingPoliciesArrayOutputWithContext(context.Background())
}

func (i BrandingPoliciesArray) ToBrandingPoliciesArrayOutputWithContext(ctx context.Context) BrandingPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandingPoliciesArrayOutput)
}

// BrandingPoliciesMapInput is an input type that accepts BrandingPoliciesMap and BrandingPoliciesMapOutput values.
// You can construct a concrete instance of `BrandingPoliciesMapInput` via:
//
//	BrandingPoliciesMap{ "key": BrandingPoliciesArgs{...} }
type BrandingPoliciesMapInput interface {
	pulumi.Input

	ToBrandingPoliciesMapOutput() BrandingPoliciesMapOutput
	ToBrandingPoliciesMapOutputWithContext(context.Context) BrandingPoliciesMapOutput
}

type BrandingPoliciesMap map[string]BrandingPoliciesInput

func (BrandingPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrandingPolicies)(nil)).Elem()
}

func (i BrandingPoliciesMap) ToBrandingPoliciesMapOutput() BrandingPoliciesMapOutput {
	return i.ToBrandingPoliciesMapOutputWithContext(context.Background())
}

func (i BrandingPoliciesMap) ToBrandingPoliciesMapOutputWithContext(ctx context.Context) BrandingPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrandingPoliciesMapOutput)
}

type BrandingPoliciesOutput struct{ *pulumi.OutputState }

func (BrandingPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrandingPolicies)(nil)).Elem()
}

func (o BrandingPoliciesOutput) ToBrandingPoliciesOutput() BrandingPoliciesOutput {
	return o
}

func (o BrandingPoliciesOutput) ToBrandingPoliciesOutputWithContext(ctx context.Context) BrandingPoliciesOutput {
	return o
}

// Settings for describing which kinds of admins this policy applies to.
func (o BrandingPoliciesOutput) AdminSettings() BrandingPoliciesAdminSettingsOutput {
	return o.ApplyT(func(v *BrandingPolicies) BrandingPoliciesAdminSettingsOutput { return v.AdminSettings }).(BrandingPoliciesAdminSettingsOutput)
}

// brandingPolicyId path parameter. Branding policy ID
func (o BrandingPoliciesOutput) BrandingPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrandingPolicies) pulumi.StringPtrOutput { return v.BrandingPolicyId }).(pulumi.StringPtrOutput)
}

// Properties describing the custom logo attached to the branding policy.
func (o BrandingPoliciesOutput) CustomLogo() BrandingPoliciesCustomLogoOutput {
	return o.ApplyT(func(v *BrandingPolicies) BrandingPoliciesCustomLogoOutput { return v.CustomLogo }).(BrandingPoliciesCustomLogoOutput)
}

// Boolean indicating whether this policy is enabled.
func (o BrandingPoliciesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrandingPolicies) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Settings for describing the modifications to various Help page features. Each property in this object accepts one of
//
//	'default or inherit' (do not modify functionality), 'hide' (remove the section from Dashboard), or 'show' (always show
//	the section on Dashboard). Some properties in this object also accept custom HTML used to replace the section on
//	Dashboard; see the documentation for each property to see the allowed values.
func (o BrandingPoliciesOutput) HelpSettings() BrandingPoliciesHelpSettingsOutput {
	return o.ApplyT(func(v *BrandingPolicies) BrandingPoliciesHelpSettingsOutput { return v.HelpSettings }).(BrandingPoliciesHelpSettingsOutput)
}

// Name of the Dashboard branding policy.
func (o BrandingPoliciesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrandingPolicies) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o BrandingPoliciesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrandingPolicies) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

type BrandingPoliciesArrayOutput struct{ *pulumi.OutputState }

func (BrandingPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrandingPolicies)(nil)).Elem()
}

func (o BrandingPoliciesArrayOutput) ToBrandingPoliciesArrayOutput() BrandingPoliciesArrayOutput {
	return o
}

func (o BrandingPoliciesArrayOutput) ToBrandingPoliciesArrayOutputWithContext(ctx context.Context) BrandingPoliciesArrayOutput {
	return o
}

func (o BrandingPoliciesArrayOutput) Index(i pulumi.IntInput) BrandingPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrandingPolicies {
		return vs[0].([]*BrandingPolicies)[vs[1].(int)]
	}).(BrandingPoliciesOutput)
}

type BrandingPoliciesMapOutput struct{ *pulumi.OutputState }

func (BrandingPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrandingPolicies)(nil)).Elem()
}

func (o BrandingPoliciesMapOutput) ToBrandingPoliciesMapOutput() BrandingPoliciesMapOutput {
	return o
}

func (o BrandingPoliciesMapOutput) ToBrandingPoliciesMapOutputWithContext(ctx context.Context) BrandingPoliciesMapOutput {
	return o
}

func (o BrandingPoliciesMapOutput) MapIndex(k pulumi.StringInput) BrandingPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrandingPolicies {
		return vs[0].(map[string]*BrandingPolicies)[vs[1].(string)]
	}).(BrandingPoliciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrandingPoliciesInput)(nil)).Elem(), &BrandingPolicies{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrandingPoliciesArrayInput)(nil)).Elem(), BrandingPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrandingPoliciesMapInput)(nil)).Elem(), BrandingPoliciesMap{})
	pulumi.RegisterOutputType(BrandingPoliciesOutput{})
	pulumi.RegisterOutputType(BrandingPoliciesArrayOutput{})
	pulumi.RegisterOutputType(BrandingPoliciesMapOutput{})
}
