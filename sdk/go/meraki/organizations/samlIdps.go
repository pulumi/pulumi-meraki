// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewSamlIdps(ctx, "example", &organizations.SamlIdpsArgs{
//				OrganizationId:          pulumi.String("string"),
//				SloLogoutUrl:            pulumi.String("https://somewhere.com"),
//				X509certSha1Fingerprint: pulumi.String("00:11:22:33:44:55:66:77:88:99:00:11:22:33:44:55:66:77:88:99"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsSamlIdpsExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/samlIdps:SamlIdps example "idp_id,organization_id"
// ```
type SamlIdps struct {
	pulumi.CustomResourceState

	// URL that is consuming SAML Identity Provider (IdP)
	ConsumerUrl pulumi.StringOutput `pulumi:"consumerUrl"`
	// ID associated with the SAML Identity Provider (IdP)
	IdpId pulumi.StringOutput `pulumi:"idpId"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Dashboard will redirect users to this URL when they sign out.
	SloLogoutUrl pulumi.StringOutput `pulumi:"sloLogoutUrl"`
	// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
	X509certSha1Fingerprint pulumi.StringOutput `pulumi:"x509certSha1Fingerprint"`
}

// NewSamlIdps registers a new resource with the given unique name, arguments, and options.
func NewSamlIdps(ctx *pulumi.Context,
	name string, args *SamlIdpsArgs, opts ...pulumi.ResourceOption) (*SamlIdps, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SamlIdps
	err := ctx.RegisterResource("meraki:organizations/samlIdps:SamlIdps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlIdps gets an existing SamlIdps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlIdps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlIdpsState, opts ...pulumi.ResourceOption) (*SamlIdps, error) {
	var resource SamlIdps
	err := ctx.ReadResource("meraki:organizations/samlIdps:SamlIdps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlIdps resources.
type samlIdpsState struct {
	// URL that is consuming SAML Identity Provider (IdP)
	ConsumerUrl *string `pulumi:"consumerUrl"`
	// ID associated with the SAML Identity Provider (IdP)
	IdpId *string `pulumi:"idpId"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// Dashboard will redirect users to this URL when they sign out.
	SloLogoutUrl *string `pulumi:"sloLogoutUrl"`
	// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
	X509certSha1Fingerprint *string `pulumi:"x509certSha1Fingerprint"`
}

type SamlIdpsState struct {
	// URL that is consuming SAML Identity Provider (IdP)
	ConsumerUrl pulumi.StringPtrInput
	// ID associated with the SAML Identity Provider (IdP)
	IdpId pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// Dashboard will redirect users to this URL when they sign out.
	SloLogoutUrl pulumi.StringPtrInput
	// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
	X509certSha1Fingerprint pulumi.StringPtrInput
}

func (SamlIdpsState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlIdpsState)(nil)).Elem()
}

type samlIdpsArgs struct {
	// ID associated with the SAML Identity Provider (IdP)
	IdpId *string `pulumi:"idpId"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// Dashboard will redirect users to this URL when they sign out.
	SloLogoutUrl *string `pulumi:"sloLogoutUrl"`
	// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
	X509certSha1Fingerprint *string `pulumi:"x509certSha1Fingerprint"`
}

// The set of arguments for constructing a SamlIdps resource.
type SamlIdpsArgs struct {
	// ID associated with the SAML Identity Provider (IdP)
	IdpId pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// Dashboard will redirect users to this URL when they sign out.
	SloLogoutUrl pulumi.StringPtrInput
	// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
	X509certSha1Fingerprint pulumi.StringPtrInput
}

func (SamlIdpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlIdpsArgs)(nil)).Elem()
}

type SamlIdpsInput interface {
	pulumi.Input

	ToSamlIdpsOutput() SamlIdpsOutput
	ToSamlIdpsOutputWithContext(ctx context.Context) SamlIdpsOutput
}

func (*SamlIdps) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlIdps)(nil)).Elem()
}

func (i *SamlIdps) ToSamlIdpsOutput() SamlIdpsOutput {
	return i.ToSamlIdpsOutputWithContext(context.Background())
}

func (i *SamlIdps) ToSamlIdpsOutputWithContext(ctx context.Context) SamlIdpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpsOutput)
}

// SamlIdpsArrayInput is an input type that accepts SamlIdpsArray and SamlIdpsArrayOutput values.
// You can construct a concrete instance of `SamlIdpsArrayInput` via:
//
//	SamlIdpsArray{ SamlIdpsArgs{...} }
type SamlIdpsArrayInput interface {
	pulumi.Input

	ToSamlIdpsArrayOutput() SamlIdpsArrayOutput
	ToSamlIdpsArrayOutputWithContext(context.Context) SamlIdpsArrayOutput
}

type SamlIdpsArray []SamlIdpsInput

func (SamlIdpsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlIdps)(nil)).Elem()
}

func (i SamlIdpsArray) ToSamlIdpsArrayOutput() SamlIdpsArrayOutput {
	return i.ToSamlIdpsArrayOutputWithContext(context.Background())
}

func (i SamlIdpsArray) ToSamlIdpsArrayOutputWithContext(ctx context.Context) SamlIdpsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpsArrayOutput)
}

// SamlIdpsMapInput is an input type that accepts SamlIdpsMap and SamlIdpsMapOutput values.
// You can construct a concrete instance of `SamlIdpsMapInput` via:
//
//	SamlIdpsMap{ "key": SamlIdpsArgs{...} }
type SamlIdpsMapInput interface {
	pulumi.Input

	ToSamlIdpsMapOutput() SamlIdpsMapOutput
	ToSamlIdpsMapOutputWithContext(context.Context) SamlIdpsMapOutput
}

type SamlIdpsMap map[string]SamlIdpsInput

func (SamlIdpsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlIdps)(nil)).Elem()
}

func (i SamlIdpsMap) ToSamlIdpsMapOutput() SamlIdpsMapOutput {
	return i.ToSamlIdpsMapOutputWithContext(context.Background())
}

func (i SamlIdpsMap) ToSamlIdpsMapOutputWithContext(ctx context.Context) SamlIdpsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlIdpsMapOutput)
}

type SamlIdpsOutput struct{ *pulumi.OutputState }

func (SamlIdpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlIdps)(nil)).Elem()
}

func (o SamlIdpsOutput) ToSamlIdpsOutput() SamlIdpsOutput {
	return o
}

func (o SamlIdpsOutput) ToSamlIdpsOutputWithContext(ctx context.Context) SamlIdpsOutput {
	return o
}

// URL that is consuming SAML Identity Provider (IdP)
func (o SamlIdpsOutput) ConsumerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlIdps) pulumi.StringOutput { return v.ConsumerUrl }).(pulumi.StringOutput)
}

// ID associated with the SAML Identity Provider (IdP)
func (o SamlIdpsOutput) IdpId() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlIdps) pulumi.StringOutput { return v.IdpId }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o SamlIdpsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlIdps) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Dashboard will redirect users to this URL when they sign out.
func (o SamlIdpsOutput) SloLogoutUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlIdps) pulumi.StringOutput { return v.SloLogoutUrl }).(pulumi.StringOutput)
}

// Fingerprint (SHA1) of the SAML certificate provided by your Identity Provider (IdP). This will be used for encryption / validation.
func (o SamlIdpsOutput) X509certSha1Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SamlIdps) pulumi.StringOutput { return v.X509certSha1Fingerprint }).(pulumi.StringOutput)
}

type SamlIdpsArrayOutput struct{ *pulumi.OutputState }

func (SamlIdpsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlIdps)(nil)).Elem()
}

func (o SamlIdpsArrayOutput) ToSamlIdpsArrayOutput() SamlIdpsArrayOutput {
	return o
}

func (o SamlIdpsArrayOutput) ToSamlIdpsArrayOutputWithContext(ctx context.Context) SamlIdpsArrayOutput {
	return o
}

func (o SamlIdpsArrayOutput) Index(i pulumi.IntInput) SamlIdpsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamlIdps {
		return vs[0].([]*SamlIdps)[vs[1].(int)]
	}).(SamlIdpsOutput)
}

type SamlIdpsMapOutput struct{ *pulumi.OutputState }

func (SamlIdpsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlIdps)(nil)).Elem()
}

func (o SamlIdpsMapOutput) ToSamlIdpsMapOutput() SamlIdpsMapOutput {
	return o
}

func (o SamlIdpsMapOutput) ToSamlIdpsMapOutputWithContext(ctx context.Context) SamlIdpsMapOutput {
	return o
}

func (o SamlIdpsMapOutput) MapIndex(k pulumi.StringInput) SamlIdpsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamlIdps {
		return vs[0].(map[string]*SamlIdps)[vs[1].(string)]
	}).(SamlIdpsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpsInput)(nil)).Elem(), &SamlIdps{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpsArrayInput)(nil)).Elem(), SamlIdpsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlIdpsMapInput)(nil)).Elem(), SamlIdpsMap{})
	pulumi.RegisterOutputType(SamlIdpsOutput{})
	pulumi.RegisterOutputType(SamlIdpsArrayOutput{})
	pulumi.RegisterOutputType(SamlIdpsMapOutput{})
}
