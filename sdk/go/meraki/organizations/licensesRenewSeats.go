// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewLicensesRenewSeats(ctx, "example", &organizations.LicensesRenewSeatsArgs{
//				OrganizationId: pulumi.String("string"),
//				Parameters: &organizations.LicensesRenewSeatsParametersArgs{
//					License_id_to_renew: "123",
//					Unused_license_id:   "1234",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsLicensesRenewSeatsExample", example)
//			return nil
//		})
//	}
//
// ```
type LicensesRenewSeats struct {
	pulumi.CustomResourceState

	Item LicensesRenewSeatsItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput                `pulumi:"organizationId"`
	Parameters     LicensesRenewSeatsParametersOutput `pulumi:"parameters"`
}

// NewLicensesRenewSeats registers a new resource with the given unique name, arguments, and options.
func NewLicensesRenewSeats(ctx *pulumi.Context,
	name string, args *LicensesRenewSeatsArgs, opts ...pulumi.ResourceOption) (*LicensesRenewSeats, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicensesRenewSeats
	err := ctx.RegisterResource("meraki:organizations/licensesRenewSeats:LicensesRenewSeats", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicensesRenewSeats gets an existing LicensesRenewSeats resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicensesRenewSeats(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicensesRenewSeatsState, opts ...pulumi.ResourceOption) (*LicensesRenewSeats, error) {
	var resource LicensesRenewSeats
	err := ctx.ReadResource("meraki:organizations/licensesRenewSeats:LicensesRenewSeats", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicensesRenewSeats resources.
type licensesRenewSeatsState struct {
	Item *LicensesRenewSeatsItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string                       `pulumi:"organizationId"`
	Parameters     *LicensesRenewSeatsParameters `pulumi:"parameters"`
}

type LicensesRenewSeatsState struct {
	Item LicensesRenewSeatsItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     LicensesRenewSeatsParametersPtrInput
}

func (LicensesRenewSeatsState) ElementType() reflect.Type {
	return reflect.TypeOf((*licensesRenewSeatsState)(nil)).Elem()
}

type licensesRenewSeatsArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string                       `pulumi:"organizationId"`
	Parameters     LicensesRenewSeatsParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a LicensesRenewSeats resource.
type LicensesRenewSeatsArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     LicensesRenewSeatsParametersInput
}

func (LicensesRenewSeatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licensesRenewSeatsArgs)(nil)).Elem()
}

type LicensesRenewSeatsInput interface {
	pulumi.Input

	ToLicensesRenewSeatsOutput() LicensesRenewSeatsOutput
	ToLicensesRenewSeatsOutputWithContext(ctx context.Context) LicensesRenewSeatsOutput
}

func (*LicensesRenewSeats) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensesRenewSeats)(nil)).Elem()
}

func (i *LicensesRenewSeats) ToLicensesRenewSeatsOutput() LicensesRenewSeatsOutput {
	return i.ToLicensesRenewSeatsOutputWithContext(context.Background())
}

func (i *LicensesRenewSeats) ToLicensesRenewSeatsOutputWithContext(ctx context.Context) LicensesRenewSeatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesRenewSeatsOutput)
}

// LicensesRenewSeatsArrayInput is an input type that accepts LicensesRenewSeatsArray and LicensesRenewSeatsArrayOutput values.
// You can construct a concrete instance of `LicensesRenewSeatsArrayInput` via:
//
//	LicensesRenewSeatsArray{ LicensesRenewSeatsArgs{...} }
type LicensesRenewSeatsArrayInput interface {
	pulumi.Input

	ToLicensesRenewSeatsArrayOutput() LicensesRenewSeatsArrayOutput
	ToLicensesRenewSeatsArrayOutputWithContext(context.Context) LicensesRenewSeatsArrayOutput
}

type LicensesRenewSeatsArray []LicensesRenewSeatsInput

func (LicensesRenewSeatsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensesRenewSeats)(nil)).Elem()
}

func (i LicensesRenewSeatsArray) ToLicensesRenewSeatsArrayOutput() LicensesRenewSeatsArrayOutput {
	return i.ToLicensesRenewSeatsArrayOutputWithContext(context.Background())
}

func (i LicensesRenewSeatsArray) ToLicensesRenewSeatsArrayOutputWithContext(ctx context.Context) LicensesRenewSeatsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesRenewSeatsArrayOutput)
}

// LicensesRenewSeatsMapInput is an input type that accepts LicensesRenewSeatsMap and LicensesRenewSeatsMapOutput values.
// You can construct a concrete instance of `LicensesRenewSeatsMapInput` via:
//
//	LicensesRenewSeatsMap{ "key": LicensesRenewSeatsArgs{...} }
type LicensesRenewSeatsMapInput interface {
	pulumi.Input

	ToLicensesRenewSeatsMapOutput() LicensesRenewSeatsMapOutput
	ToLicensesRenewSeatsMapOutputWithContext(context.Context) LicensesRenewSeatsMapOutput
}

type LicensesRenewSeatsMap map[string]LicensesRenewSeatsInput

func (LicensesRenewSeatsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensesRenewSeats)(nil)).Elem()
}

func (i LicensesRenewSeatsMap) ToLicensesRenewSeatsMapOutput() LicensesRenewSeatsMapOutput {
	return i.ToLicensesRenewSeatsMapOutputWithContext(context.Background())
}

func (i LicensesRenewSeatsMap) ToLicensesRenewSeatsMapOutputWithContext(ctx context.Context) LicensesRenewSeatsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensesRenewSeatsMapOutput)
}

type LicensesRenewSeatsOutput struct{ *pulumi.OutputState }

func (LicensesRenewSeatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensesRenewSeats)(nil)).Elem()
}

func (o LicensesRenewSeatsOutput) ToLicensesRenewSeatsOutput() LicensesRenewSeatsOutput {
	return o
}

func (o LicensesRenewSeatsOutput) ToLicensesRenewSeatsOutputWithContext(ctx context.Context) LicensesRenewSeatsOutput {
	return o
}

func (o LicensesRenewSeatsOutput) Item() LicensesRenewSeatsItemOutput {
	return o.ApplyT(func(v *LicensesRenewSeats) LicensesRenewSeatsItemOutput { return v.Item }).(LicensesRenewSeatsItemOutput)
}

// organizationId path parameter. Organization ID
func (o LicensesRenewSeatsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicensesRenewSeats) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LicensesRenewSeatsOutput) Parameters() LicensesRenewSeatsParametersOutput {
	return o.ApplyT(func(v *LicensesRenewSeats) LicensesRenewSeatsParametersOutput { return v.Parameters }).(LicensesRenewSeatsParametersOutput)
}

type LicensesRenewSeatsArrayOutput struct{ *pulumi.OutputState }

func (LicensesRenewSeatsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensesRenewSeats)(nil)).Elem()
}

func (o LicensesRenewSeatsArrayOutput) ToLicensesRenewSeatsArrayOutput() LicensesRenewSeatsArrayOutput {
	return o
}

func (o LicensesRenewSeatsArrayOutput) ToLicensesRenewSeatsArrayOutputWithContext(ctx context.Context) LicensesRenewSeatsArrayOutput {
	return o
}

func (o LicensesRenewSeatsArrayOutput) Index(i pulumi.IntInput) LicensesRenewSeatsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicensesRenewSeats {
		return vs[0].([]*LicensesRenewSeats)[vs[1].(int)]
	}).(LicensesRenewSeatsOutput)
}

type LicensesRenewSeatsMapOutput struct{ *pulumi.OutputState }

func (LicensesRenewSeatsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensesRenewSeats)(nil)).Elem()
}

func (o LicensesRenewSeatsMapOutput) ToLicensesRenewSeatsMapOutput() LicensesRenewSeatsMapOutput {
	return o
}

func (o LicensesRenewSeatsMapOutput) ToLicensesRenewSeatsMapOutputWithContext(ctx context.Context) LicensesRenewSeatsMapOutput {
	return o
}

func (o LicensesRenewSeatsMapOutput) MapIndex(k pulumi.StringInput) LicensesRenewSeatsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicensesRenewSeats {
		return vs[0].(map[string]*LicensesRenewSeats)[vs[1].(string)]
	}).(LicensesRenewSeatsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesRenewSeatsInput)(nil)).Elem(), &LicensesRenewSeats{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesRenewSeatsArrayInput)(nil)).Elem(), LicensesRenewSeatsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensesRenewSeatsMapInput)(nil)).Elem(), LicensesRenewSeatsMap{})
	pulumi.RegisterOutputType(LicensesRenewSeatsOutput{})
	pulumi.RegisterOutputType(LicensesRenewSeatsArrayOutput{})
	pulumi.RegisterOutputType(LicensesRenewSeatsMapOutput{})
}
