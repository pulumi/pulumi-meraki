// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewInventoryRelease(ctx, "example", &organizations.InventoryReleaseArgs{
//				OrganizationId: pulumi.String("string"),
//				Parameters: &organizations.InventoryReleaseParametersArgs{
//					Serials: pulumi.StringArray{
//						pulumi.String("Q234-ABCD-5678"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsInventoryReleaseExample", example)
//			return nil
//		})
//	}
//
// ```
type InventoryRelease struct {
	pulumi.CustomResourceState

	Item InventoryReleaseItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput              `pulumi:"organizationId"`
	Parameters     InventoryReleaseParametersOutput `pulumi:"parameters"`
}

// NewInventoryRelease registers a new resource with the given unique name, arguments, and options.
func NewInventoryRelease(ctx *pulumi.Context,
	name string, args *InventoryReleaseArgs, opts ...pulumi.ResourceOption) (*InventoryRelease, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InventoryRelease
	err := ctx.RegisterResource("meraki:organizations/inventoryRelease:InventoryRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventoryRelease gets an existing InventoryRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventoryRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryReleaseState, opts ...pulumi.ResourceOption) (*InventoryRelease, error) {
	var resource InventoryRelease
	err := ctx.ReadResource("meraki:organizations/inventoryRelease:InventoryRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InventoryRelease resources.
type inventoryReleaseState struct {
	Item *InventoryReleaseItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string                     `pulumi:"organizationId"`
	Parameters     *InventoryReleaseParameters `pulumi:"parameters"`
}

type InventoryReleaseState struct {
	Item InventoryReleaseItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     InventoryReleaseParametersPtrInput
}

func (InventoryReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryReleaseState)(nil)).Elem()
}

type inventoryReleaseArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string                     `pulumi:"organizationId"`
	Parameters     InventoryReleaseParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a InventoryRelease resource.
type InventoryReleaseArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     InventoryReleaseParametersInput
}

func (InventoryReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryReleaseArgs)(nil)).Elem()
}

type InventoryReleaseInput interface {
	pulumi.Input

	ToInventoryReleaseOutput() InventoryReleaseOutput
	ToInventoryReleaseOutputWithContext(ctx context.Context) InventoryReleaseOutput
}

func (*InventoryRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryRelease)(nil)).Elem()
}

func (i *InventoryRelease) ToInventoryReleaseOutput() InventoryReleaseOutput {
	return i.ToInventoryReleaseOutputWithContext(context.Background())
}

func (i *InventoryRelease) ToInventoryReleaseOutputWithContext(ctx context.Context) InventoryReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryReleaseOutput)
}

// InventoryReleaseArrayInput is an input type that accepts InventoryReleaseArray and InventoryReleaseArrayOutput values.
// You can construct a concrete instance of `InventoryReleaseArrayInput` via:
//
//	InventoryReleaseArray{ InventoryReleaseArgs{...} }
type InventoryReleaseArrayInput interface {
	pulumi.Input

	ToInventoryReleaseArrayOutput() InventoryReleaseArrayOutput
	ToInventoryReleaseArrayOutputWithContext(context.Context) InventoryReleaseArrayOutput
}

type InventoryReleaseArray []InventoryReleaseInput

func (InventoryReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryRelease)(nil)).Elem()
}

func (i InventoryReleaseArray) ToInventoryReleaseArrayOutput() InventoryReleaseArrayOutput {
	return i.ToInventoryReleaseArrayOutputWithContext(context.Background())
}

func (i InventoryReleaseArray) ToInventoryReleaseArrayOutputWithContext(ctx context.Context) InventoryReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryReleaseArrayOutput)
}

// InventoryReleaseMapInput is an input type that accepts InventoryReleaseMap and InventoryReleaseMapOutput values.
// You can construct a concrete instance of `InventoryReleaseMapInput` via:
//
//	InventoryReleaseMap{ "key": InventoryReleaseArgs{...} }
type InventoryReleaseMapInput interface {
	pulumi.Input

	ToInventoryReleaseMapOutput() InventoryReleaseMapOutput
	ToInventoryReleaseMapOutputWithContext(context.Context) InventoryReleaseMapOutput
}

type InventoryReleaseMap map[string]InventoryReleaseInput

func (InventoryReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryRelease)(nil)).Elem()
}

func (i InventoryReleaseMap) ToInventoryReleaseMapOutput() InventoryReleaseMapOutput {
	return i.ToInventoryReleaseMapOutputWithContext(context.Background())
}

func (i InventoryReleaseMap) ToInventoryReleaseMapOutputWithContext(ctx context.Context) InventoryReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryReleaseMapOutput)
}

type InventoryReleaseOutput struct{ *pulumi.OutputState }

func (InventoryReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryRelease)(nil)).Elem()
}

func (o InventoryReleaseOutput) ToInventoryReleaseOutput() InventoryReleaseOutput {
	return o
}

func (o InventoryReleaseOutput) ToInventoryReleaseOutputWithContext(ctx context.Context) InventoryReleaseOutput {
	return o
}

func (o InventoryReleaseOutput) Item() InventoryReleaseItemOutput {
	return o.ApplyT(func(v *InventoryRelease) InventoryReleaseItemOutput { return v.Item }).(InventoryReleaseItemOutput)
}

// organizationId path parameter. Organization ID
func (o InventoryReleaseOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryRelease) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o InventoryReleaseOutput) Parameters() InventoryReleaseParametersOutput {
	return o.ApplyT(func(v *InventoryRelease) InventoryReleaseParametersOutput { return v.Parameters }).(InventoryReleaseParametersOutput)
}

type InventoryReleaseArrayOutput struct{ *pulumi.OutputState }

func (InventoryReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryRelease)(nil)).Elem()
}

func (o InventoryReleaseArrayOutput) ToInventoryReleaseArrayOutput() InventoryReleaseArrayOutput {
	return o
}

func (o InventoryReleaseArrayOutput) ToInventoryReleaseArrayOutputWithContext(ctx context.Context) InventoryReleaseArrayOutput {
	return o
}

func (o InventoryReleaseArrayOutput) Index(i pulumi.IntInput) InventoryReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InventoryRelease {
		return vs[0].([]*InventoryRelease)[vs[1].(int)]
	}).(InventoryReleaseOutput)
}

type InventoryReleaseMapOutput struct{ *pulumi.OutputState }

func (InventoryReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryRelease)(nil)).Elem()
}

func (o InventoryReleaseMapOutput) ToInventoryReleaseMapOutput() InventoryReleaseMapOutput {
	return o
}

func (o InventoryReleaseMapOutput) ToInventoryReleaseMapOutputWithContext(ctx context.Context) InventoryReleaseMapOutput {
	return o
}

func (o InventoryReleaseMapOutput) MapIndex(k pulumi.StringInput) InventoryReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InventoryRelease {
		return vs[0].(map[string]*InventoryRelease)[vs[1].(string)]
	}).(InventoryReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryReleaseInput)(nil)).Elem(), &InventoryRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryReleaseArrayInput)(nil)).Elem(), InventoryReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryReleaseMapInput)(nil)).Elem(), InventoryReleaseMap{})
	pulumi.RegisterOutputType(InventoryReleaseOutput{})
	pulumi.RegisterOutputType(InventoryReleaseArrayOutput{})
	pulumi.RegisterOutputType(InventoryReleaseMapOutput{})
}
