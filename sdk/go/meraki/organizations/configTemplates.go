// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewConfigTemplates(ctx, "example", &organizations.ConfigTemplatesArgs{
//				Name:           pulumi.String("My config template"),
//				OrganizationId: pulumi.String("string"),
//				TimeZone:       pulumi.String("America/Los_Angeles"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsConfigTemplatesExample", example)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import meraki:organizations/configTemplates:ConfigTemplates example "config_template_id,organization_id"
// ```
type ConfigTemplates struct {
	pulumi.CustomResourceState

	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringPtrOutput `pulumi:"configTemplateId"`
	// The name of the configuration template
	Name pulumi.StringOutput `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The product types of the configuration template
	ProductTypes pulumi.StringArrayOutput `pulumi:"productTypes"`
	// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewConfigTemplates registers a new resource with the given unique name, arguments, and options.
func NewConfigTemplates(ctx *pulumi.Context,
	name string, args *ConfigTemplatesArgs, opts ...pulumi.ResourceOption) (*ConfigTemplates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigTemplates
	err := ctx.RegisterResource("meraki:organizations/configTemplates:ConfigTemplates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigTemplates gets an existing ConfigTemplates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigTemplates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigTemplatesState, opts ...pulumi.ResourceOption) (*ConfigTemplates, error) {
	var resource ConfigTemplates
	err := ctx.ReadResource("meraki:organizations/configTemplates:ConfigTemplates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigTemplates resources.
type configTemplatesState struct {
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId *string `pulumi:"configTemplateId"`
	// The name of the configuration template
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId *string `pulumi:"organizationId"`
	// The product types of the configuration template
	ProductTypes []string `pulumi:"productTypes"`
	// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
	TimeZone *string `pulumi:"timeZone"`
}

type ConfigTemplatesState struct {
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringPtrInput
	// The name of the configuration template
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	// The product types of the configuration template
	ProductTypes pulumi.StringArrayInput
	// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
	TimeZone pulumi.StringPtrInput
}

func (ConfigTemplatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplatesState)(nil)).Elem()
}

type configTemplatesArgs struct {
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId *string `pulumi:"configTemplateId"`
	// The name of the configuration template
	Name *string `pulumi:"name"`
	// organizationId path parameter. Organization ID
	OrganizationId string `pulumi:"organizationId"`
	// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a ConfigTemplates resource.
type ConfigTemplatesArgs struct {
	// configTemplateId path parameter. Config template ID
	ConfigTemplateId pulumi.StringPtrInput
	// The name of the configuration template
	Name pulumi.StringPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
	TimeZone pulumi.StringPtrInput
}

func (ConfigTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplatesArgs)(nil)).Elem()
}

type ConfigTemplatesInput interface {
	pulumi.Input

	ToConfigTemplatesOutput() ConfigTemplatesOutput
	ToConfigTemplatesOutputWithContext(ctx context.Context) ConfigTemplatesOutput
}

func (*ConfigTemplates) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplates)(nil)).Elem()
}

func (i *ConfigTemplates) ToConfigTemplatesOutput() ConfigTemplatesOutput {
	return i.ToConfigTemplatesOutputWithContext(context.Background())
}

func (i *ConfigTemplates) ToConfigTemplatesOutputWithContext(ctx context.Context) ConfigTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesOutput)
}

// ConfigTemplatesArrayInput is an input type that accepts ConfigTemplatesArray and ConfigTemplatesArrayOutput values.
// You can construct a concrete instance of `ConfigTemplatesArrayInput` via:
//
//	ConfigTemplatesArray{ ConfigTemplatesArgs{...} }
type ConfigTemplatesArrayInput interface {
	pulumi.Input

	ToConfigTemplatesArrayOutput() ConfigTemplatesArrayOutput
	ToConfigTemplatesArrayOutputWithContext(context.Context) ConfigTemplatesArrayOutput
}

type ConfigTemplatesArray []ConfigTemplatesInput

func (ConfigTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplates)(nil)).Elem()
}

func (i ConfigTemplatesArray) ToConfigTemplatesArrayOutput() ConfigTemplatesArrayOutput {
	return i.ToConfigTemplatesArrayOutputWithContext(context.Background())
}

func (i ConfigTemplatesArray) ToConfigTemplatesArrayOutputWithContext(ctx context.Context) ConfigTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesArrayOutput)
}

// ConfigTemplatesMapInput is an input type that accepts ConfigTemplatesMap and ConfigTemplatesMapOutput values.
// You can construct a concrete instance of `ConfigTemplatesMapInput` via:
//
//	ConfigTemplatesMap{ "key": ConfigTemplatesArgs{...} }
type ConfigTemplatesMapInput interface {
	pulumi.Input

	ToConfigTemplatesMapOutput() ConfigTemplatesMapOutput
	ToConfigTemplatesMapOutputWithContext(context.Context) ConfigTemplatesMapOutput
}

type ConfigTemplatesMap map[string]ConfigTemplatesInput

func (ConfigTemplatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplates)(nil)).Elem()
}

func (i ConfigTemplatesMap) ToConfigTemplatesMapOutput() ConfigTemplatesMapOutput {
	return i.ToConfigTemplatesMapOutputWithContext(context.Background())
}

func (i ConfigTemplatesMap) ToConfigTemplatesMapOutputWithContext(ctx context.Context) ConfigTemplatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplatesMapOutput)
}

type ConfigTemplatesOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplates)(nil)).Elem()
}

func (o ConfigTemplatesOutput) ToConfigTemplatesOutput() ConfigTemplatesOutput {
	return o
}

func (o ConfigTemplatesOutput) ToConfigTemplatesOutputWithContext(ctx context.Context) ConfigTemplatesOutput {
	return o
}

// configTemplateId path parameter. Config template ID
func (o ConfigTemplatesOutput) ConfigTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigTemplates) pulumi.StringPtrOutput { return v.ConfigTemplateId }).(pulumi.StringPtrOutput)
}

// The name of the configuration template
func (o ConfigTemplatesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplates) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// organizationId path parameter. Organization ID
func (o ConfigTemplatesOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplates) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The product types of the configuration template
func (o ConfigTemplatesOutput) ProductTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplates) pulumi.StringArrayOutput { return v.ProductTypes }).(pulumi.StringArrayOutput)
}

// The timezone of the configuration template. For a list of allowed timezones, please see the 'TZ' column in the table in \n\nthis article\n\n. Not applicable if copying from existing network or template
func (o ConfigTemplatesOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplates) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

type ConfigTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplates)(nil)).Elem()
}

func (o ConfigTemplatesArrayOutput) ToConfigTemplatesArrayOutput() ConfigTemplatesArrayOutput {
	return o
}

func (o ConfigTemplatesArrayOutput) ToConfigTemplatesArrayOutputWithContext(ctx context.Context) ConfigTemplatesArrayOutput {
	return o
}

func (o ConfigTemplatesArrayOutput) Index(i pulumi.IntInput) ConfigTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigTemplates {
		return vs[0].([]*ConfigTemplates)[vs[1].(int)]
	}).(ConfigTemplatesOutput)
}

type ConfigTemplatesMapOutput struct{ *pulumi.OutputState }

func (ConfigTemplatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplates)(nil)).Elem()
}

func (o ConfigTemplatesMapOutput) ToConfigTemplatesMapOutput() ConfigTemplatesMapOutput {
	return o
}

func (o ConfigTemplatesMapOutput) ToConfigTemplatesMapOutputWithContext(ctx context.Context) ConfigTemplatesMapOutput {
	return o
}

func (o ConfigTemplatesMapOutput) MapIndex(k pulumi.StringInput) ConfigTemplatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigTemplates {
		return vs[0].(map[string]*ConfigTemplates)[vs[1].(string)]
	}).(ConfigTemplatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesInput)(nil)).Elem(), &ConfigTemplates{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesArrayInput)(nil)).Elem(), ConfigTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplatesMapInput)(nil)).Elem(), ConfigTemplatesMap{})
	pulumi.RegisterOutputType(ConfigTemplatesOutput{})
	pulumi.RegisterOutputType(ConfigTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ConfigTemplatesMapOutput{})
}
