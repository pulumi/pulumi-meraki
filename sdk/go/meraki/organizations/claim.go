// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/organizations"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := organizations.NewClaim(ctx, "example", &organizations.ClaimArgs{
//				OrganizationId: pulumi.String("string"),
//				Parameters: &organizations.ClaimParametersArgs{
//					Licenses: organizations.ClaimParametersLicenseArray{
//						&organizations.ClaimParametersLicenseArgs{
//							Key:  pulumi.String("Z2XXXXXXXXXX"),
//							Mode: pulumi.String("addDevices"),
//						},
//					},
//					Orders: pulumi.StringArray{
//						pulumi.String("4CXXXXXXX"),
//					},
//					Serials: pulumi.StringArray{
//						pulumi.String("Q234-ABCD-5678"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("merakiOrganizationsClaimExample", example)
//			return nil
//		})
//	}
//
// ```
type Claim struct {
	pulumi.CustomResourceState

	Item ClaimItemOutput `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringOutput   `pulumi:"organizationId"`
	Parameters     ClaimParametersOutput `pulumi:"parameters"`
}

// NewClaim registers a new resource with the given unique name, arguments, and options.
func NewClaim(ctx *pulumi.Context,
	name string, args *ClaimArgs, opts ...pulumi.ResourceOption) (*Claim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Claim
	err := ctx.RegisterResource("meraki:organizations/claim:Claim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClaim gets an existing Claim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClaim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClaimState, opts ...pulumi.ResourceOption) (*Claim, error) {
	var resource Claim
	err := ctx.ReadResource("meraki:organizations/claim:Claim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Claim resources.
type claimState struct {
	Item *ClaimItem `pulumi:"item"`
	// organizationId path parameter. Organization ID
	OrganizationId *string          `pulumi:"organizationId"`
	Parameters     *ClaimParameters `pulumi:"parameters"`
}

type ClaimState struct {
	Item ClaimItemPtrInput
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringPtrInput
	Parameters     ClaimParametersPtrInput
}

func (ClaimState) ElementType() reflect.Type {
	return reflect.TypeOf((*claimState)(nil)).Elem()
}

type claimArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId string          `pulumi:"organizationId"`
	Parameters     ClaimParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a Claim resource.
type ClaimArgs struct {
	// organizationId path parameter. Organization ID
	OrganizationId pulumi.StringInput
	Parameters     ClaimParametersInput
}

func (ClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*claimArgs)(nil)).Elem()
}

type ClaimInput interface {
	pulumi.Input

	ToClaimOutput() ClaimOutput
	ToClaimOutputWithContext(ctx context.Context) ClaimOutput
}

func (*Claim) ElementType() reflect.Type {
	return reflect.TypeOf((**Claim)(nil)).Elem()
}

func (i *Claim) ToClaimOutput() ClaimOutput {
	return i.ToClaimOutputWithContext(context.Background())
}

func (i *Claim) ToClaimOutputWithContext(ctx context.Context) ClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimOutput)
}

// ClaimArrayInput is an input type that accepts ClaimArray and ClaimArrayOutput values.
// You can construct a concrete instance of `ClaimArrayInput` via:
//
//	ClaimArray{ ClaimArgs{...} }
type ClaimArrayInput interface {
	pulumi.Input

	ToClaimArrayOutput() ClaimArrayOutput
	ToClaimArrayOutputWithContext(context.Context) ClaimArrayOutput
}

type ClaimArray []ClaimInput

func (ClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Claim)(nil)).Elem()
}

func (i ClaimArray) ToClaimArrayOutput() ClaimArrayOutput {
	return i.ToClaimArrayOutputWithContext(context.Background())
}

func (i ClaimArray) ToClaimArrayOutputWithContext(ctx context.Context) ClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimArrayOutput)
}

// ClaimMapInput is an input type that accepts ClaimMap and ClaimMapOutput values.
// You can construct a concrete instance of `ClaimMapInput` via:
//
//	ClaimMap{ "key": ClaimArgs{...} }
type ClaimMapInput interface {
	pulumi.Input

	ToClaimMapOutput() ClaimMapOutput
	ToClaimMapOutputWithContext(context.Context) ClaimMapOutput
}

type ClaimMap map[string]ClaimInput

func (ClaimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Claim)(nil)).Elem()
}

func (i ClaimMap) ToClaimMapOutput() ClaimMapOutput {
	return i.ToClaimMapOutputWithContext(context.Background())
}

func (i ClaimMap) ToClaimMapOutputWithContext(ctx context.Context) ClaimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClaimMapOutput)
}

type ClaimOutput struct{ *pulumi.OutputState }

func (ClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Claim)(nil)).Elem()
}

func (o ClaimOutput) ToClaimOutput() ClaimOutput {
	return o
}

func (o ClaimOutput) ToClaimOutputWithContext(ctx context.Context) ClaimOutput {
	return o
}

func (o ClaimOutput) Item() ClaimItemOutput {
	return o.ApplyT(func(v *Claim) ClaimItemOutput { return v.Item }).(ClaimItemOutput)
}

// organizationId path parameter. Organization ID
func (o ClaimOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Claim) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o ClaimOutput) Parameters() ClaimParametersOutput {
	return o.ApplyT(func(v *Claim) ClaimParametersOutput { return v.Parameters }).(ClaimParametersOutput)
}

type ClaimArrayOutput struct{ *pulumi.OutputState }

func (ClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Claim)(nil)).Elem()
}

func (o ClaimArrayOutput) ToClaimArrayOutput() ClaimArrayOutput {
	return o
}

func (o ClaimArrayOutput) ToClaimArrayOutputWithContext(ctx context.Context) ClaimArrayOutput {
	return o
}

func (o ClaimArrayOutput) Index(i pulumi.IntInput) ClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Claim {
		return vs[0].([]*Claim)[vs[1].(int)]
	}).(ClaimOutput)
}

type ClaimMapOutput struct{ *pulumi.OutputState }

func (ClaimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Claim)(nil)).Elem()
}

func (o ClaimMapOutput) ToClaimMapOutput() ClaimMapOutput {
	return o
}

func (o ClaimMapOutput) ToClaimMapOutputWithContext(ctx context.Context) ClaimMapOutput {
	return o
}

func (o ClaimMapOutput) MapIndex(k pulumi.StringInput) ClaimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Claim {
		return vs[0].(map[string]*Claim)[vs[1].(string)]
	}).(ClaimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimInput)(nil)).Elem(), &Claim{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimArrayInput)(nil)).Elem(), ClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClaimMapInput)(nil)).Elem(), ClaimMap{})
	pulumi.RegisterOutputType(ClaimOutput{})
	pulumi.RegisterOutputType(ClaimArrayOutput{})
	pulumi.RegisterOutputType(ClaimMapOutput{})
}
