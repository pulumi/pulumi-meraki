// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package administered

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
type LicensingSubscriptionSubscriptionsClaim struct {
	pulumi.CustomResourceState

	Item       LicensingSubscriptionSubscriptionsClaimItemOutput       `pulumi:"item"`
	Parameters LicensingSubscriptionSubscriptionsClaimParametersOutput `pulumi:"parameters"`
	// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
}

// NewLicensingSubscriptionSubscriptionsClaim registers a new resource with the given unique name, arguments, and options.
func NewLicensingSubscriptionSubscriptionsClaim(ctx *pulumi.Context,
	name string, args *LicensingSubscriptionSubscriptionsClaimArgs, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsClaim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicensingSubscriptionSubscriptionsClaim
	err := ctx.RegisterResource("meraki:administered/licensingSubscriptionSubscriptionsClaim:LicensingSubscriptionSubscriptionsClaim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicensingSubscriptionSubscriptionsClaim gets an existing LicensingSubscriptionSubscriptionsClaim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicensingSubscriptionSubscriptionsClaim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicensingSubscriptionSubscriptionsClaimState, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsClaim, error) {
	var resource LicensingSubscriptionSubscriptionsClaim
	err := ctx.ReadResource("meraki:administered/licensingSubscriptionSubscriptionsClaim:LicensingSubscriptionSubscriptionsClaim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicensingSubscriptionSubscriptionsClaim resources.
type licensingSubscriptionSubscriptionsClaimState struct {
	Item       *LicensingSubscriptionSubscriptionsClaimItem       `pulumi:"item"`
	Parameters *LicensingSubscriptionSubscriptionsClaimParameters `pulumi:"parameters"`
	// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
	Validate *bool `pulumi:"validate"`
}

type LicensingSubscriptionSubscriptionsClaimState struct {
	Item       LicensingSubscriptionSubscriptionsClaimItemPtrInput
	Parameters LicensingSubscriptionSubscriptionsClaimParametersPtrInput
	// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
	Validate pulumi.BoolPtrInput
}

func (LicensingSubscriptionSubscriptionsClaimState) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsClaimState)(nil)).Elem()
}

type licensingSubscriptionSubscriptionsClaimArgs struct {
	Parameters LicensingSubscriptionSubscriptionsClaimParameters `pulumi:"parameters"`
	// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
	Validate *bool `pulumi:"validate"`
}

// The set of arguments for constructing a LicensingSubscriptionSubscriptionsClaim resource.
type LicensingSubscriptionSubscriptionsClaimArgs struct {
	Parameters LicensingSubscriptionSubscriptionsClaimParametersInput
	// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
	Validate pulumi.BoolPtrInput
}

func (LicensingSubscriptionSubscriptionsClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsClaimArgs)(nil)).Elem()
}

type LicensingSubscriptionSubscriptionsClaimInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimOutput() LicensingSubscriptionSubscriptionsClaimOutput
	ToLicensingSubscriptionSubscriptionsClaimOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimOutput
}

func (*LicensingSubscriptionSubscriptionsClaim) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (i *LicensingSubscriptionSubscriptionsClaim) ToLicensingSubscriptionSubscriptionsClaimOutput() LicensingSubscriptionSubscriptionsClaimOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimOutputWithContext(context.Background())
}

func (i *LicensingSubscriptionSubscriptionsClaim) ToLicensingSubscriptionSubscriptionsClaimOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimOutput)
}

// LicensingSubscriptionSubscriptionsClaimArrayInput is an input type that accepts LicensingSubscriptionSubscriptionsClaimArray and LicensingSubscriptionSubscriptionsClaimArrayOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsClaimArrayInput` via:
//
//	LicensingSubscriptionSubscriptionsClaimArray{ LicensingSubscriptionSubscriptionsClaimArgs{...} }
type LicensingSubscriptionSubscriptionsClaimArrayInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimArrayOutput() LicensingSubscriptionSubscriptionsClaimArrayOutput
	ToLicensingSubscriptionSubscriptionsClaimArrayOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsClaimArrayOutput
}

type LicensingSubscriptionSubscriptionsClaimArray []LicensingSubscriptionSubscriptionsClaimInput

func (LicensingSubscriptionSubscriptionsClaimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsClaimArray) ToLicensingSubscriptionSubscriptionsClaimArrayOutput() LicensingSubscriptionSubscriptionsClaimArrayOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimArrayOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsClaimArray) ToLicensingSubscriptionSubscriptionsClaimArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimArrayOutput)
}

// LicensingSubscriptionSubscriptionsClaimMapInput is an input type that accepts LicensingSubscriptionSubscriptionsClaimMap and LicensingSubscriptionSubscriptionsClaimMapOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsClaimMapInput` via:
//
//	LicensingSubscriptionSubscriptionsClaimMap{ "key": LicensingSubscriptionSubscriptionsClaimArgs{...} }
type LicensingSubscriptionSubscriptionsClaimMapInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimMapOutput() LicensingSubscriptionSubscriptionsClaimMapOutput
	ToLicensingSubscriptionSubscriptionsClaimMapOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsClaimMapOutput
}

type LicensingSubscriptionSubscriptionsClaimMap map[string]LicensingSubscriptionSubscriptionsClaimInput

func (LicensingSubscriptionSubscriptionsClaimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsClaimMap) ToLicensingSubscriptionSubscriptionsClaimMapOutput() LicensingSubscriptionSubscriptionsClaimMapOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimMapOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsClaimMap) ToLicensingSubscriptionSubscriptionsClaimMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimMapOutput)
}

type LicensingSubscriptionSubscriptionsClaimOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimOutput) ToLicensingSubscriptionSubscriptionsClaimOutput() LicensingSubscriptionSubscriptionsClaimOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimOutput) ToLicensingSubscriptionSubscriptionsClaimOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimOutput) Item() LicensingSubscriptionSubscriptionsClaimItemOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsClaim) LicensingSubscriptionSubscriptionsClaimItemOutput {
		return v.Item
	}).(LicensingSubscriptionSubscriptionsClaimItemOutput)
}

func (o LicensingSubscriptionSubscriptionsClaimOutput) Parameters() LicensingSubscriptionSubscriptionsClaimParametersOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsClaim) LicensingSubscriptionSubscriptionsClaimParametersOutput {
		return v.Parameters
	}).(LicensingSubscriptionSubscriptionsClaimParametersOutput)
}

// validate query parameter. Check if the provided claim key is valid and can be claimed into the organization.
func (o LicensingSubscriptionSubscriptionsClaimOutput) Validate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsClaim) pulumi.BoolPtrOutput { return v.Validate }).(pulumi.BoolPtrOutput)
}

type LicensingSubscriptionSubscriptionsClaimArrayOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimArrayOutput) ToLicensingSubscriptionSubscriptionsClaimArrayOutput() LicensingSubscriptionSubscriptionsClaimArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimArrayOutput) ToLicensingSubscriptionSubscriptionsClaimArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimArrayOutput) Index(i pulumi.IntInput) LicensingSubscriptionSubscriptionsClaimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsClaim {
		return vs[0].([]*LicensingSubscriptionSubscriptionsClaim)[vs[1].(int)]
	}).(LicensingSubscriptionSubscriptionsClaimOutput)
}

type LicensingSubscriptionSubscriptionsClaimMapOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsClaim)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimMapOutput) ToLicensingSubscriptionSubscriptionsClaimMapOutput() LicensingSubscriptionSubscriptionsClaimMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimMapOutput) ToLicensingSubscriptionSubscriptionsClaimMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimMapOutput) MapIndex(k pulumi.StringInput) LicensingSubscriptionSubscriptionsClaimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsClaim {
		return vs[0].(map[string]*LicensingSubscriptionSubscriptionsClaim)[vs[1].(string)]
	}).(LicensingSubscriptionSubscriptionsClaimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimInput)(nil)).Elem(), &LicensingSubscriptionSubscriptionsClaim{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimArrayInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsClaimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimMapInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsClaimMap{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimArrayOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimMapOutput{})
}
