// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package administered

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
//
// ## Example Usage
type LicensingSubscriptionSubscriptionsBind struct {
	pulumi.CustomResourceState

	Item       LicensingSubscriptionSubscriptionsBindItemOutput       `pulumi:"item"`
	Parameters LicensingSubscriptionSubscriptionsBindParametersOutput `pulumi:"parameters"`
	// subscriptionId path parameter. Subscription ID
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
	Validate pulumi.BoolPtrOutput `pulumi:"validate"`
}

// NewLicensingSubscriptionSubscriptionsBind registers a new resource with the given unique name, arguments, and options.
func NewLicensingSubscriptionSubscriptionsBind(ctx *pulumi.Context,
	name string, args *LicensingSubscriptionSubscriptionsBindArgs, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsBind, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicensingSubscriptionSubscriptionsBind
	err := ctx.RegisterResource("meraki:administered/licensingSubscriptionSubscriptionsBind:LicensingSubscriptionSubscriptionsBind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicensingSubscriptionSubscriptionsBind gets an existing LicensingSubscriptionSubscriptionsBind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicensingSubscriptionSubscriptionsBind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicensingSubscriptionSubscriptionsBindState, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsBind, error) {
	var resource LicensingSubscriptionSubscriptionsBind
	err := ctx.ReadResource("meraki:administered/licensingSubscriptionSubscriptionsBind:LicensingSubscriptionSubscriptionsBind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicensingSubscriptionSubscriptionsBind resources.
type licensingSubscriptionSubscriptionsBindState struct {
	Item       *LicensingSubscriptionSubscriptionsBindItem       `pulumi:"item"`
	Parameters *LicensingSubscriptionSubscriptionsBindParameters `pulumi:"parameters"`
	// subscriptionId path parameter. Subscription ID
	SubscriptionId *string `pulumi:"subscriptionId"`
	// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
	Validate *bool `pulumi:"validate"`
}

type LicensingSubscriptionSubscriptionsBindState struct {
	Item       LicensingSubscriptionSubscriptionsBindItemPtrInput
	Parameters LicensingSubscriptionSubscriptionsBindParametersPtrInput
	// subscriptionId path parameter. Subscription ID
	SubscriptionId pulumi.StringPtrInput
	// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
	Validate pulumi.BoolPtrInput
}

func (LicensingSubscriptionSubscriptionsBindState) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsBindState)(nil)).Elem()
}

type licensingSubscriptionSubscriptionsBindArgs struct {
	Parameters LicensingSubscriptionSubscriptionsBindParameters `pulumi:"parameters"`
	// subscriptionId path parameter. Subscription ID
	SubscriptionId string `pulumi:"subscriptionId"`
	// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
	Validate *bool `pulumi:"validate"`
}

// The set of arguments for constructing a LicensingSubscriptionSubscriptionsBind resource.
type LicensingSubscriptionSubscriptionsBindArgs struct {
	Parameters LicensingSubscriptionSubscriptionsBindParametersInput
	// subscriptionId path parameter. Subscription ID
	SubscriptionId pulumi.StringInput
	// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
	Validate pulumi.BoolPtrInput
}

func (LicensingSubscriptionSubscriptionsBindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsBindArgs)(nil)).Elem()
}

type LicensingSubscriptionSubscriptionsBindInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsBindOutput() LicensingSubscriptionSubscriptionsBindOutput
	ToLicensingSubscriptionSubscriptionsBindOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindOutput
}

func (*LicensingSubscriptionSubscriptionsBind) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (i *LicensingSubscriptionSubscriptionsBind) ToLicensingSubscriptionSubscriptionsBindOutput() LicensingSubscriptionSubscriptionsBindOutput {
	return i.ToLicensingSubscriptionSubscriptionsBindOutputWithContext(context.Background())
}

func (i *LicensingSubscriptionSubscriptionsBind) ToLicensingSubscriptionSubscriptionsBindOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsBindOutput)
}

// LicensingSubscriptionSubscriptionsBindArrayInput is an input type that accepts LicensingSubscriptionSubscriptionsBindArray and LicensingSubscriptionSubscriptionsBindArrayOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsBindArrayInput` via:
//
//	LicensingSubscriptionSubscriptionsBindArray{ LicensingSubscriptionSubscriptionsBindArgs{...} }
type LicensingSubscriptionSubscriptionsBindArrayInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsBindArrayOutput() LicensingSubscriptionSubscriptionsBindArrayOutput
	ToLicensingSubscriptionSubscriptionsBindArrayOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsBindArrayOutput
}

type LicensingSubscriptionSubscriptionsBindArray []LicensingSubscriptionSubscriptionsBindInput

func (LicensingSubscriptionSubscriptionsBindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsBindArray) ToLicensingSubscriptionSubscriptionsBindArrayOutput() LicensingSubscriptionSubscriptionsBindArrayOutput {
	return i.ToLicensingSubscriptionSubscriptionsBindArrayOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsBindArray) ToLicensingSubscriptionSubscriptionsBindArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsBindArrayOutput)
}

// LicensingSubscriptionSubscriptionsBindMapInput is an input type that accepts LicensingSubscriptionSubscriptionsBindMap and LicensingSubscriptionSubscriptionsBindMapOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsBindMapInput` via:
//
//	LicensingSubscriptionSubscriptionsBindMap{ "key": LicensingSubscriptionSubscriptionsBindArgs{...} }
type LicensingSubscriptionSubscriptionsBindMapInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsBindMapOutput() LicensingSubscriptionSubscriptionsBindMapOutput
	ToLicensingSubscriptionSubscriptionsBindMapOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsBindMapOutput
}

type LicensingSubscriptionSubscriptionsBindMap map[string]LicensingSubscriptionSubscriptionsBindInput

func (LicensingSubscriptionSubscriptionsBindMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsBindMap) ToLicensingSubscriptionSubscriptionsBindMapOutput() LicensingSubscriptionSubscriptionsBindMapOutput {
	return i.ToLicensingSubscriptionSubscriptionsBindMapOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsBindMap) ToLicensingSubscriptionSubscriptionsBindMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsBindMapOutput)
}

type LicensingSubscriptionSubscriptionsBindOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsBindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsBindOutput) ToLicensingSubscriptionSubscriptionsBindOutput() LicensingSubscriptionSubscriptionsBindOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindOutput) ToLicensingSubscriptionSubscriptionsBindOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindOutput) Item() LicensingSubscriptionSubscriptionsBindItemOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsBind) LicensingSubscriptionSubscriptionsBindItemOutput {
		return v.Item
	}).(LicensingSubscriptionSubscriptionsBindItemOutput)
}

func (o LicensingSubscriptionSubscriptionsBindOutput) Parameters() LicensingSubscriptionSubscriptionsBindParametersOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsBind) LicensingSubscriptionSubscriptionsBindParametersOutput {
		return v.Parameters
	}).(LicensingSubscriptionSubscriptionsBindParametersOutput)
}

// subscriptionId path parameter. Subscription ID
func (o LicensingSubscriptionSubscriptionsBindOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsBind) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// validate query parameter. Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results.
func (o LicensingSubscriptionSubscriptionsBindOutput) Validate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsBind) pulumi.BoolPtrOutput { return v.Validate }).(pulumi.BoolPtrOutput)
}

type LicensingSubscriptionSubscriptionsBindArrayOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsBindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsBindArrayOutput) ToLicensingSubscriptionSubscriptionsBindArrayOutput() LicensingSubscriptionSubscriptionsBindArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindArrayOutput) ToLicensingSubscriptionSubscriptionsBindArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindArrayOutput) Index(i pulumi.IntInput) LicensingSubscriptionSubscriptionsBindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsBind {
		return vs[0].([]*LicensingSubscriptionSubscriptionsBind)[vs[1].(int)]
	}).(LicensingSubscriptionSubscriptionsBindOutput)
}

type LicensingSubscriptionSubscriptionsBindMapOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsBindMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsBind)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsBindMapOutput) ToLicensingSubscriptionSubscriptionsBindMapOutput() LicensingSubscriptionSubscriptionsBindMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindMapOutput) ToLicensingSubscriptionSubscriptionsBindMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsBindMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsBindMapOutput) MapIndex(k pulumi.StringInput) LicensingSubscriptionSubscriptionsBindOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsBind {
		return vs[0].(map[string]*LicensingSubscriptionSubscriptionsBind)[vs[1].(string)]
	}).(LicensingSubscriptionSubscriptionsBindOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsBindInput)(nil)).Elem(), &LicensingSubscriptionSubscriptionsBind{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsBindArrayInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsBindArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsBindMapInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsBindMap{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsBindOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsBindArrayOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsBindMapOutput{})
}
