// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package administered

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-meraki/sdk/go/meraki/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ~>Warning: This resource does not represent a real-world entity in Meraki Dashboard, therefore changing or deleting this resource on its own has no immediate effect. Instead, it is a task part of a Meraki Dashboard workflow. It is executed in Meraki without any additional verification. It does not check if it was executed before or if a similar configuration or action
// already existed previously.
type LicensingSubscriptionSubscriptionsClaimKeyValidate struct {
	pulumi.CustomResourceState

	Item       LicensingSubscriptionSubscriptionsClaimKeyValidateItemOutput       `pulumi:"item"`
	Parameters LicensingSubscriptionSubscriptionsClaimKeyValidateParametersOutput `pulumi:"parameters"`
}

// NewLicensingSubscriptionSubscriptionsClaimKeyValidate registers a new resource with the given unique name, arguments, and options.
func NewLicensingSubscriptionSubscriptionsClaimKeyValidate(ctx *pulumi.Context,
	name string, args *LicensingSubscriptionSubscriptionsClaimKeyValidateArgs, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsClaimKeyValidate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LicensingSubscriptionSubscriptionsClaimKeyValidate
	err := ctx.RegisterResource("meraki:administered/licensingSubscriptionSubscriptionsClaimKeyValidate:LicensingSubscriptionSubscriptionsClaimKeyValidate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicensingSubscriptionSubscriptionsClaimKeyValidate gets an existing LicensingSubscriptionSubscriptionsClaimKeyValidate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicensingSubscriptionSubscriptionsClaimKeyValidate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicensingSubscriptionSubscriptionsClaimKeyValidateState, opts ...pulumi.ResourceOption) (*LicensingSubscriptionSubscriptionsClaimKeyValidate, error) {
	var resource LicensingSubscriptionSubscriptionsClaimKeyValidate
	err := ctx.ReadResource("meraki:administered/licensingSubscriptionSubscriptionsClaimKeyValidate:LicensingSubscriptionSubscriptionsClaimKeyValidate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicensingSubscriptionSubscriptionsClaimKeyValidate resources.
type licensingSubscriptionSubscriptionsClaimKeyValidateState struct {
	Item       *LicensingSubscriptionSubscriptionsClaimKeyValidateItem       `pulumi:"item"`
	Parameters *LicensingSubscriptionSubscriptionsClaimKeyValidateParameters `pulumi:"parameters"`
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateState struct {
	Item       LicensingSubscriptionSubscriptionsClaimKeyValidateItemPtrInput
	Parameters LicensingSubscriptionSubscriptionsClaimKeyValidateParametersPtrInput
}

func (LicensingSubscriptionSubscriptionsClaimKeyValidateState) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsClaimKeyValidateState)(nil)).Elem()
}

type licensingSubscriptionSubscriptionsClaimKeyValidateArgs struct {
	Parameters LicensingSubscriptionSubscriptionsClaimKeyValidateParameters `pulumi:"parameters"`
}

// The set of arguments for constructing a LicensingSubscriptionSubscriptionsClaimKeyValidate resource.
type LicensingSubscriptionSubscriptionsClaimKeyValidateArgs struct {
	Parameters LicensingSubscriptionSubscriptionsClaimKeyValidateParametersInput
}

func (LicensingSubscriptionSubscriptionsClaimKeyValidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licensingSubscriptionSubscriptionsClaimKeyValidateArgs)(nil)).Elem()
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateOutput
	ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateOutput
}

func (*LicensingSubscriptionSubscriptionsClaimKeyValidate) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (i *LicensingSubscriptionSubscriptionsClaimKeyValidate) ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutputWithContext(context.Background())
}

func (i *LicensingSubscriptionSubscriptionsClaimKeyValidate) ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimKeyValidateOutput)
}

// LicensingSubscriptionSubscriptionsClaimKeyValidateArrayInput is an input type that accepts LicensingSubscriptionSubscriptionsClaimKeyValidateArray and LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsClaimKeyValidateArrayInput` via:
//
//	LicensingSubscriptionSubscriptionsClaimKeyValidateArray{ LicensingSubscriptionSubscriptionsClaimKeyValidateArgs{...} }
type LicensingSubscriptionSubscriptionsClaimKeyValidateArrayInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput
	ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateArray []LicensingSubscriptionSubscriptionsClaimKeyValidateInput

func (LicensingSubscriptionSubscriptionsClaimKeyValidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsClaimKeyValidateArray) ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsClaimKeyValidateArray) ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput)
}

// LicensingSubscriptionSubscriptionsClaimKeyValidateMapInput is an input type that accepts LicensingSubscriptionSubscriptionsClaimKeyValidateMap and LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput values.
// You can construct a concrete instance of `LicensingSubscriptionSubscriptionsClaimKeyValidateMapInput` via:
//
//	LicensingSubscriptionSubscriptionsClaimKeyValidateMap{ "key": LicensingSubscriptionSubscriptionsClaimKeyValidateArgs{...} }
type LicensingSubscriptionSubscriptionsClaimKeyValidateMapInput interface {
	pulumi.Input

	ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput
	ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutputWithContext(context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateMap map[string]LicensingSubscriptionSubscriptionsClaimKeyValidateInput

func (LicensingSubscriptionSubscriptionsClaimKeyValidateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (i LicensingSubscriptionSubscriptionsClaimKeyValidateMap) ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput {
	return i.ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutputWithContext(context.Background())
}

func (i LicensingSubscriptionSubscriptionsClaimKeyValidateMap) ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput)
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimKeyValidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateOutput) Item() LicensingSubscriptionSubscriptionsClaimKeyValidateItemOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsClaimKeyValidate) LicensingSubscriptionSubscriptionsClaimKeyValidateItemOutput {
		return v.Item
	}).(LicensingSubscriptionSubscriptionsClaimKeyValidateItemOutput)
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateOutput) Parameters() LicensingSubscriptionSubscriptionsClaimKeyValidateParametersOutput {
	return o.ApplyT(func(v *LicensingSubscriptionSubscriptionsClaimKeyValidate) LicensingSubscriptionSubscriptionsClaimKeyValidateParametersOutput {
		return v.Parameters
	}).(LicensingSubscriptionSubscriptionsClaimKeyValidateParametersOutput)
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput) Index(i pulumi.IntInput) LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsClaimKeyValidate {
		return vs[0].([]*LicensingSubscriptionSubscriptionsClaimKeyValidate)[vs[1].(int)]
	}).(LicensingSubscriptionSubscriptionsClaimKeyValidateOutput)
}

type LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput struct{ *pulumi.OutputState }

func (LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicensingSubscriptionSubscriptionsClaimKeyValidate)(nil)).Elem()
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput() LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput) ToLicensingSubscriptionSubscriptionsClaimKeyValidateMapOutputWithContext(ctx context.Context) LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput {
	return o
}

func (o LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput) MapIndex(k pulumi.StringInput) LicensingSubscriptionSubscriptionsClaimKeyValidateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicensingSubscriptionSubscriptionsClaimKeyValidate {
		return vs[0].(map[string]*LicensingSubscriptionSubscriptionsClaimKeyValidate)[vs[1].(string)]
	}).(LicensingSubscriptionSubscriptionsClaimKeyValidateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimKeyValidateInput)(nil)).Elem(), &LicensingSubscriptionSubscriptionsClaimKeyValidate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimKeyValidateArrayInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsClaimKeyValidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicensingSubscriptionSubscriptionsClaimKeyValidateMapInput)(nil)).Elem(), LicensingSubscriptionSubscriptionsClaimKeyValidateMap{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimKeyValidateOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimKeyValidateArrayOutput{})
	pulumi.RegisterOutputType(LicensingSubscriptionSubscriptionsClaimKeyValidateMapOutput{})
}
