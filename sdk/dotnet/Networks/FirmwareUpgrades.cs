// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.FirmwareUpgrades("example", new()
    ///     {
    ///         NetworkId = "string",
    ///         Products = new Meraki.Networks.Inputs.FirmwareUpgradesProductsArgs
    ///         {
    ///             Appliance = new Meraki.Networks.Inputs.FirmwareUpgradesProductsApplianceArgs
    ///             {
    ///                 NextUpgrade = new Meraki.Networks.Inputs.FirmwareUpgradesProductsApplianceNextUpgradeArgs
    ///                 {
    ///                     Time = "2019-03-17T17:22:52Z",
    ///                     ToVersion = new Meraki.Networks.Inputs.FirmwareUpgradesProductsApplianceNextUpgradeToVersionArgs
    ///                     {
    ///                         Id = "1001",
    ///                     },
    ///                 },
    ///                 ParticipateInNextBetaRelease = false,
    ///             },
    ///             Camera = new Meraki.Networks.Inputs.FirmwareUpgradesProductsCameraArgs
    ///             {
    ///                 NextUpgrade = new Meraki.Networks.Inputs.FirmwareUpgradesProductsCameraNextUpgradeArgs
    ///                 {
    ///                     Time = "2019-03-17T17:22:52Z",
    ///                     ToVersion = new Meraki.Networks.Inputs.FirmwareUpgradesProductsCameraNextUpgradeToVersionArgs
    ///                     {
    ///                         Id = "1003",
    ///                     },
    ///                 },
    ///                 ParticipateInNextBetaRelease = false,
    ///             },
    ///             Cellular_gateway = 
    ///             {
    ///                 { "nextUpgrade", 
    ///                 {
    ///                     { "time", "2019-03-17T17:22:52Z" },
    ///                     { "toVersion", 
    ///                     {
    ///                         { "id", "1004" },
    ///                     } },
    ///                 } },
    ///                 { "participateInNextBetaRelease", false },
    ///             },
    ///             Sensor = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSensorArgs
    ///             {
    ///                 NextUpgrade = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSensorNextUpgradeArgs
    ///                 {
    ///                     Time = "2019-03-17T17:22:52Z",
    ///                     ToVersion = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSensorNextUpgradeToVersionArgs
    ///                     {
    ///                         Id = "1005",
    ///                     },
    ///                 },
    ///                 ParticipateInNextBetaRelease = false,
    ///             },
    ///             Switch = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSwitchArgs
    ///             {
    ///                 NextUpgrade = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSwitchNextUpgradeArgs
    ///                 {
    ///                     Time = "2019-03-17T17:22:52Z",
    ///                     ToVersion = new Meraki.Networks.Inputs.FirmwareUpgradesProductsSwitchNextUpgradeToVersionArgs
    ///                     {
    ///                         Id = "1002",
    ///                     },
    ///                 },
    ///                 ParticipateInNextBetaRelease = false,
    ///             },
    ///             Switch_catalyst = 
    ///             {
    ///                 { "nextUpgrade", 
    ///                 {
    ///                     { "time", "2019-03-17T17:22:52Z" },
    ///                     { "toVersion", 
    ///                     {
    ///                         { "id", "1234" },
    ///                     } },
    ///                 } },
    ///                 { "participateInNextBetaRelease", false },
    ///             },
    ///             Wireless = new Meraki.Networks.Inputs.FirmwareUpgradesProductsWirelessArgs
    ///             {
    ///                 NextUpgrade = new Meraki.Networks.Inputs.FirmwareUpgradesProductsWirelessNextUpgradeArgs
    ///                 {
    ///                     Time = "2019-03-17T17:22:52Z",
    ///                     ToVersion = new Meraki.Networks.Inputs.FirmwareUpgradesProductsWirelessNextUpgradeToVersionArgs
    ///                     {
    ///                         Id = "1000",
    ///                     },
    ///                 },
    ///                 ParticipateInNextBetaRelease = false,
    ///             },
    ///         },
    ///         Timezone = "America/Los_Angeles",
    ///         UpgradeWindow = new Meraki.Networks.Inputs.FirmwareUpgradesUpgradeWindowArgs
    ///         {
    ///             Day_of_week = "sun",
    ///             Hour_of_day = "4:00",
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksFirmwareUpgradesExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/firmwareUpgrades:FirmwareUpgrades example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/firmwareUpgrades:FirmwareUpgrades")]
    public partial class FirmwareUpgrades : global::Pulumi.CustomResource
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The network devices to be updated
        /// </summary>
        [Output("products")]
        public Output<Outputs.FirmwareUpgradesProducts> Products { get; private set; } = null!;

        /// <summary>
        /// The timezone for the network
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// Upgrade window for devices in network
        /// </summary>
        [Output("upgradeWindow")]
        public Output<Outputs.FirmwareUpgradesUpgradeWindow> UpgradeWindow { get; private set; } = null!;


        /// <summary>
        /// Create a FirmwareUpgrades resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirmwareUpgrades(string name, FirmwareUpgradesArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/firmwareUpgrades:FirmwareUpgrades", name, args ?? new FirmwareUpgradesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirmwareUpgrades(string name, Input<string> id, FirmwareUpgradesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/firmwareUpgrades:FirmwareUpgrades", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirmwareUpgrades resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirmwareUpgrades Get(string name, Input<string> id, FirmwareUpgradesState? state = null, CustomResourceOptions? options = null)
        {
            return new FirmwareUpgrades(name, id, state, options);
        }
    }

    public sealed class FirmwareUpgradesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The network devices to be updated
        /// </summary>
        [Input("products")]
        public Input<Inputs.FirmwareUpgradesProductsArgs>? Products { get; set; }

        /// <summary>
        /// The timezone for the network
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Upgrade window for devices in network
        /// </summary>
        [Input("upgradeWindow")]
        public Input<Inputs.FirmwareUpgradesUpgradeWindowArgs>? UpgradeWindow { get; set; }

        public FirmwareUpgradesArgs()
        {
        }
        public static new FirmwareUpgradesArgs Empty => new FirmwareUpgradesArgs();
    }

    public sealed class FirmwareUpgradesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The network devices to be updated
        /// </summary>
        [Input("products")]
        public Input<Inputs.FirmwareUpgradesProductsGetArgs>? Products { get; set; }

        /// <summary>
        /// The timezone for the network
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Upgrade window for devices in network
        /// </summary>
        [Input("upgradeWindow")]
        public Input<Inputs.FirmwareUpgradesUpgradeWindowGetArgs>? UpgradeWindow { get; set; }

        public FirmwareUpgradesState()
        {
        }
        public static new FirmwareUpgradesState Empty => new FirmwareUpgradesState();
    }
}
