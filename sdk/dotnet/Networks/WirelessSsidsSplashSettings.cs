// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.WirelessSsidsSplashSettings("example", new()
    ///     {
    ///         AllowSimultaneousLogins = false,
    ///         Billing = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsBillingArgs
    ///         {
    ///             Free_access = 
    ///             {
    ///                 { "durationInMinutes", 120 },
    ///                 { "enabled", true },
    ///             },
    ///             Prepaid_access_fast_login_enabled = true,
    ///             Reply_to_email_address = "user@email.com",
    ///         },
    ///         BlockAllTrafficBeforeSignOn = false,
    ///         ControllerDisconnectionBehavior = "default",
    ///         GuestSponsorship = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsGuestSponsorshipArgs
    ///         {
    ///             Duration_in_minutes = 30,
    ///             Guest_can_request_timeframe = false,
    ///         },
    ///         NetworkId = "string",
    ///         Number = "string",
    ///         RedirectUrl = "https://example.com",
    ///         SentryEnrollment = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSentryEnrollmentArgs
    ///         {
    ///             Enforced_systems = new[]
    ///             {
    ///                 "iOS",
    ///             },
    ///             Strength = "focused",
    ///             Systems_manager_network = 
    ///             {
    ///                 { "id", "N_1234" },
    ///             },
    ///         },
    ///         SplashImage = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashImageArgs
    ///         {
    ///             Extension = "jpg",
    ///             Image = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashImageImageArgs
    ///             {
    ///                 Contents = "Q2lzY28gTWVyYWtp",
    ///                 Format = "jpg",
    ///             },
    ///             Md5 = "542cccac8d7dedee0f185311d154d194",
    ///         },
    ///         SplashLogo = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashLogoArgs
    ///         {
    ///             Extension = "jpg",
    ///             Image = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashLogoImageArgs
    ///             {
    ///                 Contents = "Q2lzY28gTWVyYWtp",
    ///                 Format = "jpg",
    ///             },
    ///             Md5 = "abcd1234",
    ///         },
    ///         SplashPrepaidFront = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontArgs
    ///         {
    ///             Extension = "jpg",
    ///             Image = new Meraki.Networks.Inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontImageArgs
    ///             {
    ///                 Contents = "Q2lzY28gTWVyYWtp",
    ///                 Format = "jpg",
    ///             },
    ///             Md5 = "542cccac8d7dedee0f185311d154d194",
    ///         },
    ///         SplashTimeout = 1440,
    ///         SplashUrl = "https://www.custom_splash_url.com",
    ///         ThemeId = "c3ddcb4f16785ee747ab5ffc10867d6c8ea704be",
    ///         UseRedirectUrl = true,
    ///         UseSplashUrl = true,
    ///         WelcomeMessage = "Welcome!",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksWirelessSsidsSplashSettingsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings example "network_id,number"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings")]
    public partial class WirelessSsidsSplashSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not to allow simultaneous logins from different devices.
        /// </summary>
        [Output("allowSimultaneousLogins")]
        public Output<bool> AllowSimultaneousLogins { get; private set; } = null!;

        /// <summary>
        /// Details associated with billing splash
        /// </summary>
        [Output("billing")]
        public Output<Outputs.WirelessSsidsSplashSettingsBilling> Billing { get; private set; } = null!;

        /// <summary>
        /// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
        /// </summary>
        [Output("blockAllTrafficBeforeSignOn")]
        public Output<bool> BlockAllTrafficBeforeSignOn { get; private set; } = null!;

        /// <summary>
        /// How login attempts should be handled when the controller is unreachable.
        /// </summary>
        [Output("controllerDisconnectionBehavior")]
        public Output<string> ControllerDisconnectionBehavior { get; private set; } = null!;

        /// <summary>
        /// Details associated with guest sponsored splash
        /// </summary>
        [Output("guestSponsorship")]
        public Output<Outputs.WirelessSsidsSplashSettingsGuestSponsorship> GuestSponsorship { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Output("number")]
        public Output<string> Number { get; private set; } = null!;

        /// <summary>
        /// The custom redirect URL where the users will go after the splash page.
        /// </summary>
        [Output("redirectUrl")]
        public Output<string> RedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Self-registration for splash with Meraki authentication.
        /// </summary>
        [Output("selfRegistration")]
        public Output<Outputs.WirelessSsidsSplashSettingsSelfRegistration> SelfRegistration { get; private set; } = null!;

        /// <summary>
        /// Systems Manager sentry enrollment splash settings.
        /// </summary>
        [Output("sentryEnrollment")]
        public Output<Outputs.WirelessSsidsSplashSettingsSentryEnrollment> SentryEnrollment { get; private set; } = null!;

        /// <summary>
        /// The image used in the splash page.
        /// </summary>
        [Output("splashImage")]
        public Output<Outputs.WirelessSsidsSplashSettingsSplashImage> SplashImage { get; private set; } = null!;

        /// <summary>
        /// The logo used in the splash page.
        /// </summary>
        [Output("splashLogo")]
        public Output<Outputs.WirelessSsidsSplashSettingsSplashLogo> SplashLogo { get; private set; } = null!;

        /// <summary>
        /// The type of splash page for this SSID
        /// </summary>
        [Output("splashPage")]
        public Output<string> SplashPage { get; private set; } = null!;

        /// <summary>
        /// The prepaid front image used in the splash page.
        /// </summary>
        [Output("splashPrepaidFront")]
        public Output<Outputs.WirelessSsidsSplashSettingsSplashPrepaidFront> SplashPrepaidFront { get; private set; } = null!;

        /// <summary>
        /// Splash timeout in minutes.
        /// </summary>
        [Output("splashTimeout")]
        public Output<int> SplashTimeout { get; private set; } = null!;

        /// <summary>
        /// The custom splash URL of the click-through splash page.
        /// </summary>
        [Output("splashUrl")]
        public Output<string> SplashUrl { get; private set; } = null!;

        /// <summary>
        /// SSID number
        /// </summary>
        [Output("ssidNumber")]
        public Output<int> SsidNumber { get; private set; } = null!;

        /// <summary>
        /// The id of the selected splash theme.
        /// </summary>
        [Output("themeId")]
        public Output<string> ThemeId { get; private set; } = null!;

        /// <summary>
        /// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
        /// </summary>
        [Output("useRedirectUrl")]
        public Output<bool> UseRedirectUrl { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating whether the users will be redirected to the custom splash url
        /// </summary>
        [Output("useSplashUrl")]
        public Output<bool> UseSplashUrl { get; private set; } = null!;

        /// <summary>
        /// The welcome message for the users on the splash page.
        /// </summary>
        [Output("welcomeMessage")]
        public Output<string> WelcomeMessage { get; private set; } = null!;


        /// <summary>
        /// Create a WirelessSsidsSplashSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelessSsidsSplashSettings(string name, WirelessSsidsSplashSettingsArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, args ?? new WirelessSsidsSplashSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelessSsidsSplashSettings(string name, Input<string> id, WirelessSsidsSplashSettingsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsSplashSettings:WirelessSsidsSplashSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelessSsidsSplashSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelessSsidsSplashSettings Get(string name, Input<string> id, WirelessSsidsSplashSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelessSsidsSplashSettings(name, id, state, options);
        }
    }

    public sealed class WirelessSsidsSplashSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to allow simultaneous logins from different devices.
        /// </summary>
        [Input("allowSimultaneousLogins")]
        public Input<bool>? AllowSimultaneousLogins { get; set; }

        /// <summary>
        /// Details associated with billing splash
        /// </summary>
        [Input("billing")]
        public Input<Inputs.WirelessSsidsSplashSettingsBillingArgs>? Billing { get; set; }

        /// <summary>
        /// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
        /// </summary>
        [Input("blockAllTrafficBeforeSignOn")]
        public Input<bool>? BlockAllTrafficBeforeSignOn { get; set; }

        /// <summary>
        /// How login attempts should be handled when the controller is unreachable.
        /// </summary>
        [Input("controllerDisconnectionBehavior")]
        public Input<string>? ControllerDisconnectionBehavior { get; set; }

        /// <summary>
        /// Details associated with guest sponsored splash
        /// </summary>
        [Input("guestSponsorship")]
        public Input<Inputs.WirelessSsidsSplashSettingsGuestSponsorshipArgs>? GuestSponsorship { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number", required: true)]
        public Input<string> Number { get; set; } = null!;

        /// <summary>
        /// The custom redirect URL where the users will go after the splash page.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Systems Manager sentry enrollment splash settings.
        /// </summary>
        [Input("sentryEnrollment")]
        public Input<Inputs.WirelessSsidsSplashSettingsSentryEnrollmentArgs>? SentryEnrollment { get; set; }

        /// <summary>
        /// The image used in the splash page.
        /// </summary>
        [Input("splashImage")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashImageArgs>? SplashImage { get; set; }

        /// <summary>
        /// The logo used in the splash page.
        /// </summary>
        [Input("splashLogo")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashLogoArgs>? SplashLogo { get; set; }

        /// <summary>
        /// The prepaid front image used in the splash page.
        /// </summary>
        [Input("splashPrepaidFront")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontArgs>? SplashPrepaidFront { get; set; }

        /// <summary>
        /// Splash timeout in minutes.
        /// </summary>
        [Input("splashTimeout")]
        public Input<int>? SplashTimeout { get; set; }

        /// <summary>
        /// The custom splash URL of the click-through splash page.
        /// </summary>
        [Input("splashUrl")]
        public Input<string>? SplashUrl { get; set; }

        /// <summary>
        /// The id of the selected splash theme.
        /// </summary>
        [Input("themeId")]
        public Input<string>? ThemeId { get; set; }

        /// <summary>
        /// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
        /// </summary>
        [Input("useRedirectUrl")]
        public Input<bool>? UseRedirectUrl { get; set; }

        /// <summary>
        /// Boolean indicating whether the users will be redirected to the custom splash url
        /// </summary>
        [Input("useSplashUrl")]
        public Input<bool>? UseSplashUrl { get; set; }

        /// <summary>
        /// The welcome message for the users on the splash page.
        /// </summary>
        [Input("welcomeMessage")]
        public Input<string>? WelcomeMessage { get; set; }

        public WirelessSsidsSplashSettingsArgs()
        {
        }
        public static new WirelessSsidsSplashSettingsArgs Empty => new WirelessSsidsSplashSettingsArgs();
    }

    public sealed class WirelessSsidsSplashSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not to allow simultaneous logins from different devices.
        /// </summary>
        [Input("allowSimultaneousLogins")]
        public Input<bool>? AllowSimultaneousLogins { get; set; }

        /// <summary>
        /// Details associated with billing splash
        /// </summary>
        [Input("billing")]
        public Input<Inputs.WirelessSsidsSplashSettingsBillingGetArgs>? Billing { get; set; }

        /// <summary>
        /// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
        /// </summary>
        [Input("blockAllTrafficBeforeSignOn")]
        public Input<bool>? BlockAllTrafficBeforeSignOn { get; set; }

        /// <summary>
        /// How login attempts should be handled when the controller is unreachable.
        /// </summary>
        [Input("controllerDisconnectionBehavior")]
        public Input<string>? ControllerDisconnectionBehavior { get; set; }

        /// <summary>
        /// Details associated with guest sponsored splash
        /// </summary>
        [Input("guestSponsorship")]
        public Input<Inputs.WirelessSsidsSplashSettingsGuestSponsorshipGetArgs>? GuestSponsorship { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number")]
        public Input<string>? Number { get; set; }

        /// <summary>
        /// The custom redirect URL where the users will go after the splash page.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        /// <summary>
        /// Self-registration for splash with Meraki authentication.
        /// </summary>
        [Input("selfRegistration")]
        public Input<Inputs.WirelessSsidsSplashSettingsSelfRegistrationGetArgs>? SelfRegistration { get; set; }

        /// <summary>
        /// Systems Manager sentry enrollment splash settings.
        /// </summary>
        [Input("sentryEnrollment")]
        public Input<Inputs.WirelessSsidsSplashSettingsSentryEnrollmentGetArgs>? SentryEnrollment { get; set; }

        /// <summary>
        /// The image used in the splash page.
        /// </summary>
        [Input("splashImage")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashImageGetArgs>? SplashImage { get; set; }

        /// <summary>
        /// The logo used in the splash page.
        /// </summary>
        [Input("splashLogo")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashLogoGetArgs>? SplashLogo { get; set; }

        /// <summary>
        /// The type of splash page for this SSID
        /// </summary>
        [Input("splashPage")]
        public Input<string>? SplashPage { get; set; }

        /// <summary>
        /// The prepaid front image used in the splash page.
        /// </summary>
        [Input("splashPrepaidFront")]
        public Input<Inputs.WirelessSsidsSplashSettingsSplashPrepaidFrontGetArgs>? SplashPrepaidFront { get; set; }

        /// <summary>
        /// Splash timeout in minutes.
        /// </summary>
        [Input("splashTimeout")]
        public Input<int>? SplashTimeout { get; set; }

        /// <summary>
        /// The custom splash URL of the click-through splash page.
        /// </summary>
        [Input("splashUrl")]
        public Input<string>? SplashUrl { get; set; }

        /// <summary>
        /// SSID number
        /// </summary>
        [Input("ssidNumber")]
        public Input<int>? SsidNumber { get; set; }

        /// <summary>
        /// The id of the selected splash theme.
        /// </summary>
        [Input("themeId")]
        public Input<string>? ThemeId { get; set; }

        /// <summary>
        /// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page.
        /// </summary>
        [Input("useRedirectUrl")]
        public Input<bool>? UseRedirectUrl { get; set; }

        /// <summary>
        /// Boolean indicating whether the users will be redirected to the custom splash url
        /// </summary>
        [Input("useSplashUrl")]
        public Input<bool>? UseSplashUrl { get; set; }

        /// <summary>
        /// The welcome message for the users on the splash page.
        /// </summary>
        [Input("welcomeMessage")]
        public Input<string>? WelcomeMessage { get; set; }

        public WirelessSsidsSplashSettingsState()
        {
        }
        public static new WirelessSsidsSplashSettingsState Empty => new WirelessSsidsSplashSettingsState();
    }
}
