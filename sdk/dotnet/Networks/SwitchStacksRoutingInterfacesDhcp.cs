// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.SwitchStacksRoutingInterfacesDhcp("example", new()
    ///     {
    ///         BootFileName = "home_boot_file",
    ///         BootNextServer = "1.2.3.4",
    ///         BootOptionsEnabled = true,
    ///         DhcpLeaseTime = "1 day",
    ///         DhcpMode = "dhcpServer",
    ///         DhcpOptions = new[]
    ///         {
    ///             new Meraki.Networks.Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs
    ///             {
    ///                 Code = "5",
    ///                 Type = "text",
    ///                 Value = "five",
    ///             },
    ///         },
    ///         DhcpRelayServerIps = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         DnsCustomNameservers = new[]
    ///         {
    ///             "8.8.8.8, 8.8.4.4",
    ///         },
    ///         DnsNameserversOption = "custom",
    ///         FixedIpAssignments = new[]
    ///         {
    ///             new Meraki.Networks.Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs
    ///             {
    ///                 Ip = "192.168.1.12",
    ///                 Mac = "22:33:44:55:66:77",
    ///                 Name = "Cisco Meraki valued client",
    ///             },
    ///         },
    ///         InterfaceId = "string",
    ///         NetworkId = "string",
    ///         ReservedIpRanges = new[]
    ///         {
    ///             new Meraki.Networks.Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs
    ///             {
    ///                 Comment = "A reserved IP range",
    ///                 End = "192.168.1.10",
    ///                 Start = "192.168.1.1",
    ///             },
    ///         },
    ///         SwitchStackId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksSwitchStacksRoutingInterfacesDhcpExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp example "interface_id,network_id,switch_stack_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp")]
    public partial class SwitchStacksRoutingInterfacesDhcp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The PXE boot server file name for the DHCP server running on the switch stack interface
        /// </summary>
        [Output("bootFileName")]
        public Output<string> BootFileName { get; private set; } = null!;

        /// <summary>
        /// The PXE boot server IP for the DHCP server running on the switch stack interface
        /// </summary>
        [Output("bootNextServer")]
        public Output<string> BootNextServer { get; private set; } = null!;

        /// <summary>
        /// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        /// </summary>
        [Output("bootOptionsEnabled")]
        public Output<bool> BootOptionsEnabled { get; private set; } = null!;

        /// <summary>
        /// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        /// </summary>
        [Output("dhcpLeaseTime")]
        public Output<string> DhcpLeaseTime { get; private set; } = null!;

        /// <summary>
        /// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        /// </summary>
        [Output("dhcpMode")]
        public Output<string> DhcpMode { get; private set; } = null!;

        /// <summary>
        /// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        /// </summary>
        [Output("dhcpOptions")]
        public Output<ImmutableArray<Outputs.SwitchStacksRoutingInterfacesDhcpDhcpOption>> DhcpOptions { get; private set; } = null!;

        /// <summary>
        /// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        /// </summary>
        [Output("dhcpRelayServerIps")]
        public Output<ImmutableArray<string>> DhcpRelayServerIps { get; private set; } = null!;

        /// <summary>
        /// The DHCP name server IPs when DHCP name server option is 'custom'
        /// </summary>
        [Output("dnsCustomNameservers")]
        public Output<ImmutableArray<string>> DnsCustomNameservers { get; private set; } = null!;

        /// <summary>
        /// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        /// </summary>
        [Output("dnsNameserversOption")]
        public Output<string> DnsNameserversOption { get; private set; } = null!;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        [Output("fixedIpAssignments")]
        public Output<ImmutableArray<Outputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignment>> FixedIpAssignments { get; private set; } = null!;

        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        [Output("interfaceId")]
        public Output<string> InterfaceId { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        [Output("reservedIpRanges")]
        public Output<ImmutableArray<Outputs.SwitchStacksRoutingInterfacesDhcpReservedIpRange>> ReservedIpRanges { get; private set; } = null!;

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Output("switchStackId")]
        public Output<string> SwitchStackId { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchStacksRoutingInterfacesDhcp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchStacksRoutingInterfacesDhcp(string name, SwitchStacksRoutingInterfacesDhcpArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, args ?? new SwitchStacksRoutingInterfacesDhcpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchStacksRoutingInterfacesDhcp(string name, Input<string> id, SwitchStacksRoutingInterfacesDhcpState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/switchStacksRoutingInterfacesDhcp:SwitchStacksRoutingInterfacesDhcp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchStacksRoutingInterfacesDhcp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchStacksRoutingInterfacesDhcp Get(string name, Input<string> id, SwitchStacksRoutingInterfacesDhcpState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchStacksRoutingInterfacesDhcp(name, id, state, options);
        }
    }

    public sealed class SwitchStacksRoutingInterfacesDhcpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The PXE boot server file name for the DHCP server running on the switch stack interface
        /// </summary>
        [Input("bootFileName")]
        public Input<string>? BootFileName { get; set; }

        /// <summary>
        /// The PXE boot server IP for the DHCP server running on the switch stack interface
        /// </summary>
        [Input("bootNextServer")]
        public Input<string>? BootNextServer { get; set; }

        /// <summary>
        /// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        /// </summary>
        [Input("bootOptionsEnabled")]
        public Input<bool>? BootOptionsEnabled { get; set; }

        /// <summary>
        /// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        /// </summary>
        [Input("dhcpLeaseTime")]
        public Input<string>? DhcpLeaseTime { get; set; }

        /// <summary>
        /// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        /// </summary>
        [Input("dhcpMode")]
        public Input<string>? DhcpMode { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs>? _dhcpOptions;

        /// <summary>
        /// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpRelayServerIps")]
        private InputList<string>? _dhcpRelayServerIps;

        /// <summary>
        /// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        /// </summary>
        public InputList<string> DhcpRelayServerIps
        {
            get => _dhcpRelayServerIps ?? (_dhcpRelayServerIps = new InputList<string>());
            set => _dhcpRelayServerIps = value;
        }

        [Input("dnsCustomNameservers")]
        private InputList<string>? _dnsCustomNameservers;

        /// <summary>
        /// The DHCP name server IPs when DHCP name server option is 'custom'
        /// </summary>
        public InputList<string> DnsCustomNameservers
        {
            get => _dnsCustomNameservers ?? (_dnsCustomNameservers = new InputList<string>());
            set => _dnsCustomNameservers = value;
        }

        /// <summary>
        /// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        /// </summary>
        [Input("dnsNameserversOption")]
        public Input<string>? DnsNameserversOption { get; set; }

        [Input("fixedIpAssignments")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs>? _fixedIpAssignments;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs> FixedIpAssignments
        {
            get => _fixedIpAssignments ?? (_fixedIpAssignments = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentArgs>());
            set => _fixedIpAssignments = value;
        }

        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("reservedIpRanges")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs>? _reservedIpRanges;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeArgs>());
            set => _reservedIpRanges = value;
        }

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId", required: true)]
        public Input<string> SwitchStackId { get; set; } = null!;

        public SwitchStacksRoutingInterfacesDhcpArgs()
        {
        }
        public static new SwitchStacksRoutingInterfacesDhcpArgs Empty => new SwitchStacksRoutingInterfacesDhcpArgs();
    }

    public sealed class SwitchStacksRoutingInterfacesDhcpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The PXE boot server file name for the DHCP server running on the switch stack interface
        /// </summary>
        [Input("bootFileName")]
        public Input<string>? BootFileName { get; set; }

        /// <summary>
        /// The PXE boot server IP for the DHCP server running on the switch stack interface
        /// </summary>
        [Input("bootNextServer")]
        public Input<string>? BootNextServer { get; set; }

        /// <summary>
        /// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        /// </summary>
        [Input("bootOptionsEnabled")]
        public Input<bool>? BootOptionsEnabled { get; set; }

        /// <summary>
        /// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        /// </summary>
        [Input("dhcpLeaseTime")]
        public Input<string>? DhcpLeaseTime { get; set; }

        /// <summary>
        /// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        /// </summary>
        [Input("dhcpMode")]
        public Input<string>? DhcpMode { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionGetArgs>? _dhcpOptions;

        /// <summary>
        /// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionGetArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpDhcpOptionGetArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpRelayServerIps")]
        private InputList<string>? _dhcpRelayServerIps;

        /// <summary>
        /// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        /// </summary>
        public InputList<string> DhcpRelayServerIps
        {
            get => _dhcpRelayServerIps ?? (_dhcpRelayServerIps = new InputList<string>());
            set => _dhcpRelayServerIps = value;
        }

        [Input("dnsCustomNameservers")]
        private InputList<string>? _dnsCustomNameservers;

        /// <summary>
        /// The DHCP name server IPs when DHCP name server option is 'custom'
        /// </summary>
        public InputList<string> DnsCustomNameservers
        {
            get => _dnsCustomNameservers ?? (_dnsCustomNameservers = new InputList<string>());
            set => _dnsCustomNameservers = value;
        }

        /// <summary>
        /// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        /// </summary>
        [Input("dnsNameserversOption")]
        public Input<string>? DnsNameserversOption { get; set; }

        [Input("fixedIpAssignments")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentGetArgs>? _fixedIpAssignments;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentGetArgs> FixedIpAssignments
        {
            get => _fixedIpAssignments ?? (_fixedIpAssignments = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpFixedIpAssignmentGetArgs>());
            set => _fixedIpAssignments = value;
        }

        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        [Input("interfaceId")]
        public Input<string>? InterfaceId { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("reservedIpRanges")]
        private InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeGetArgs>? _reservedIpRanges;

        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeGetArgs> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<Inputs.SwitchStacksRoutingInterfacesDhcpReservedIpRangeGetArgs>());
            set => _reservedIpRanges = value;
        }

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId")]
        public Input<string>? SwitchStackId { get; set; }

        public SwitchStacksRoutingInterfacesDhcpState()
        {
        }
        public static new SwitchStacksRoutingInterfacesDhcpState Empty => new SwitchStacksRoutingInterfacesDhcpState();
    }
}
