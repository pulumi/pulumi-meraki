// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetSwitchStacksRoutingInterfacesDhcp
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSwitchStacksRoutingInterfacesDhcp.Invoke(new()
        ///     {
        ///         InterfaceId = "string",
        ///         NetworkId = "string",
        ///         SwitchStackId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSwitchStacksRoutingInterfacesDhcpExample"] = example.Apply(getSwitchStacksRoutingInterfacesDhcpResult =&gt; getSwitchStacksRoutingInterfacesDhcpResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSwitchStacksRoutingInterfacesDhcpResult> InvokeAsync(GetSwitchStacksRoutingInterfacesDhcpArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSwitchStacksRoutingInterfacesDhcpResult>("meraki:networks/getSwitchStacksRoutingInterfacesDhcp:getSwitchStacksRoutingInterfacesDhcp", args ?? new GetSwitchStacksRoutingInterfacesDhcpArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSwitchStacksRoutingInterfacesDhcp.Invoke(new()
        ///     {
        ///         InterfaceId = "string",
        ///         NetworkId = "string",
        ///         SwitchStackId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSwitchStacksRoutingInterfacesDhcpExample"] = example.Apply(getSwitchStacksRoutingInterfacesDhcpResult =&gt; getSwitchStacksRoutingInterfacesDhcpResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSwitchStacksRoutingInterfacesDhcpResult> Invoke(GetSwitchStacksRoutingInterfacesDhcpInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSwitchStacksRoutingInterfacesDhcpResult>("meraki:networks/getSwitchStacksRoutingInterfacesDhcp:getSwitchStacksRoutingInterfacesDhcp", args ?? new GetSwitchStacksRoutingInterfacesDhcpInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSwitchStacksRoutingInterfacesDhcp.Invoke(new()
        ///     {
        ///         InterfaceId = "string",
        ///         NetworkId = "string",
        ///         SwitchStackId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSwitchStacksRoutingInterfacesDhcpExample"] = example.Apply(getSwitchStacksRoutingInterfacesDhcpResult =&gt; getSwitchStacksRoutingInterfacesDhcpResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSwitchStacksRoutingInterfacesDhcpResult> Invoke(GetSwitchStacksRoutingInterfacesDhcpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSwitchStacksRoutingInterfacesDhcpResult>("meraki:networks/getSwitchStacksRoutingInterfacesDhcp:getSwitchStacksRoutingInterfacesDhcp", args ?? new GetSwitchStacksRoutingInterfacesDhcpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSwitchStacksRoutingInterfacesDhcpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId", required: true)]
        public string SwitchStackId { get; set; } = null!;

        public GetSwitchStacksRoutingInterfacesDhcpArgs()
        {
        }
        public static new GetSwitchStacksRoutingInterfacesDhcpArgs Empty => new GetSwitchStacksRoutingInterfacesDhcpArgs();
    }

    public sealed class GetSwitchStacksRoutingInterfacesDhcpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId", required: true)]
        public Input<string> SwitchStackId { get; set; } = null!;

        public GetSwitchStacksRoutingInterfacesDhcpInvokeArgs()
        {
        }
        public static new GetSwitchStacksRoutingInterfacesDhcpInvokeArgs Empty => new GetSwitchStacksRoutingInterfacesDhcpInvokeArgs();
    }


    [OutputType]
    public sealed class GetSwitchStacksRoutingInterfacesDhcpResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// interfaceId path parameter. Interface ID
        /// </summary>
        public readonly string InterfaceId;
        public readonly Outputs.GetSwitchStacksRoutingInterfacesDhcpItemResult Item;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        public readonly string SwitchStackId;

        [OutputConstructor]
        private GetSwitchStacksRoutingInterfacesDhcpResult(
            string id,

            string interfaceId,

            Outputs.GetSwitchStacksRoutingInterfacesDhcpItemResult item,

            string networkId,

            string switchStackId)
        {
            Id = id;
            InterfaceId = interfaceId;
            Item = item;
            NetworkId = networkId;
            SwitchStackId = switchStackId;
        }
    }
}
