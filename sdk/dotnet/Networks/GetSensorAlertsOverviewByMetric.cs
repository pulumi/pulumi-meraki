// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetSensorAlertsOverviewByMetric
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSensorAlertsOverviewByMetric.Invoke(new()
        ///     {
        ///         Interval = 1,
        ///         NetworkId = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSensorAlertsOverviewByMetricExample"] = example.Apply(getSensorAlertsOverviewByMetricResult =&gt; getSensorAlertsOverviewByMetricResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSensorAlertsOverviewByMetricResult> InvokeAsync(GetSensorAlertsOverviewByMetricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSensorAlertsOverviewByMetricResult>("meraki:networks/getSensorAlertsOverviewByMetric:getSensorAlertsOverviewByMetric", args ?? new GetSensorAlertsOverviewByMetricArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSensorAlertsOverviewByMetric.Invoke(new()
        ///     {
        ///         Interval = 1,
        ///         NetworkId = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSensorAlertsOverviewByMetricExample"] = example.Apply(getSensorAlertsOverviewByMetricResult =&gt; getSensorAlertsOverviewByMetricResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSensorAlertsOverviewByMetricResult> Invoke(GetSensorAlertsOverviewByMetricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensorAlertsOverviewByMetricResult>("meraki:networks/getSensorAlertsOverviewByMetric:getSensorAlertsOverviewByMetric", args ?? new GetSensorAlertsOverviewByMetricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSensorAlertsOverviewByMetricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// interval query parameter. The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
        /// </summary>
        [Input("interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
        /// </summary>
        [Input("t0")]
        public string? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        [Input("t1")]
        public string? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
        /// </summary>
        [Input("timespan")]
        public double? Timespan { get; set; }

        public GetSensorAlertsOverviewByMetricArgs()
        {
        }
        public static new GetSensorAlertsOverviewByMetricArgs Empty => new GetSensorAlertsOverviewByMetricArgs();
    }

    public sealed class GetSensorAlertsOverviewByMetricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// interval query parameter. The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
        /// </summary>
        [Input("t0")]
        public Input<string>? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        [Input("t1")]
        public Input<string>? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
        /// </summary>
        [Input("timespan")]
        public Input<double>? Timespan { get; set; }

        public GetSensorAlertsOverviewByMetricInvokeArgs()
        {
        }
        public static new GetSensorAlertsOverviewByMetricInvokeArgs Empty => new GetSensorAlertsOverviewByMetricInvokeArgs();
    }


    [OutputType]
    public sealed class GetSensorAlertsOverviewByMetricResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// interval query parameter. The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// Array of ResponseSensorGetNetworkSensorAlertsOverviewByMetric
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSensorAlertsOverviewByMetricItemResult> Items;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
        /// </summary>
        public readonly string? T0;
        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        public readonly string? T1;
        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.
        /// </summary>
        public readonly double? Timespan;

        [OutputConstructor]
        private GetSensorAlertsOverviewByMetricResult(
            string id,

            int? interval,

            ImmutableArray<Outputs.GetSensorAlertsOverviewByMetricItemResult> items,

            string networkId,

            string? t0,

            string? t1,

            double? timespan)
        {
            Id = id;
            Interval = interval;
            Items = items;
            NetworkId = networkId;
            T0 = t0;
            T1 = t1;
            Timespan = timespan;
        }
    }
}
