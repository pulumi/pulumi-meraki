// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.SwitchStacksRoutingStaticRoutes("example", new()
    ///     {
    ///         AdvertiseViaOspfEnabled = false,
    ///         Name = "My route",
    ///         NetworkId = "string",
    ///         NextHopIp = "1.2.3.4",
    ///         PreferOverOspfRoutesEnabled = false,
    ///         Subnet = "192.168.1.0/24",
    ///         SwitchStackId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksSwitchStacksRoutingStaticRoutesExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes example "network_id,static_route_id,switch_stack_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes")]
    public partial class SwitchStacksRoutingStaticRoutes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Option to advertise static routes via OSPF
        /// </summary>
        [Output("advertiseViaOspfEnabled")]
        public Output<bool> AdvertiseViaOspfEnabled { get; private set; } = null!;

        /// <summary>
        /// The name or description of the layer 3 static route
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the router to which traffic for this destination network should be sent
        /// </summary>
        [Output("nextHopIp")]
        public Output<string> NextHopIp { get; private set; } = null!;

        /// <summary>
        /// Option to prefer static routes over OSPF routes
        /// </summary>
        [Output("preferOverOspfRoutesEnabled")]
        public Output<bool> PreferOverOspfRoutesEnabled { get; private set; } = null!;

        /// <summary>
        /// The identifier of a layer 3 static route
        /// </summary>
        [Output("staticRouteId")]
        public Output<string> StaticRouteId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Output("switchStackId")]
        public Output<string> SwitchStackId { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchStacksRoutingStaticRoutes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchStacksRoutingStaticRoutes(string name, SwitchStacksRoutingStaticRoutesArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes", name, args ?? new SwitchStacksRoutingStaticRoutesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchStacksRoutingStaticRoutes(string name, Input<string> id, SwitchStacksRoutingStaticRoutesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/switchStacksRoutingStaticRoutes:SwitchStacksRoutingStaticRoutes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchStacksRoutingStaticRoutes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchStacksRoutingStaticRoutes Get(string name, Input<string> id, SwitchStacksRoutingStaticRoutesState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchStacksRoutingStaticRoutes(name, id, state, options);
        }
    }

    public sealed class SwitchStacksRoutingStaticRoutesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Option to advertise static routes via OSPF
        /// </summary>
        [Input("advertiseViaOspfEnabled")]
        public Input<bool>? AdvertiseViaOspfEnabled { get; set; }

        /// <summary>
        /// The name or description of the layer 3 static route
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The IP address of the router to which traffic for this destination network should be sent
        /// </summary>
        [Input("nextHopIp")]
        public Input<string>? NextHopIp { get; set; }

        /// <summary>
        /// Option to prefer static routes over OSPF routes
        /// </summary>
        [Input("preferOverOspfRoutesEnabled")]
        public Input<bool>? PreferOverOspfRoutesEnabled { get; set; }

        /// <summary>
        /// The identifier of a layer 3 static route
        /// </summary>
        [Input("staticRouteId")]
        public Input<string>? StaticRouteId { get; set; }

        /// <summary>
        /// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId", required: true)]
        public Input<string> SwitchStackId { get; set; } = null!;

        public SwitchStacksRoutingStaticRoutesArgs()
        {
        }
        public static new SwitchStacksRoutingStaticRoutesArgs Empty => new SwitchStacksRoutingStaticRoutesArgs();
    }

    public sealed class SwitchStacksRoutingStaticRoutesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Option to advertise static routes via OSPF
        /// </summary>
        [Input("advertiseViaOspfEnabled")]
        public Input<bool>? AdvertiseViaOspfEnabled { get; set; }

        /// <summary>
        /// The name or description of the layer 3 static route
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The IP address of the router to which traffic for this destination network should be sent
        /// </summary>
        [Input("nextHopIp")]
        public Input<string>? NextHopIp { get; set; }

        /// <summary>
        /// Option to prefer static routes over OSPF routes
        /// </summary>
        [Input("preferOverOspfRoutesEnabled")]
        public Input<bool>? PreferOverOspfRoutesEnabled { get; set; }

        /// <summary>
        /// The identifier of a layer 3 static route
        /// </summary>
        [Input("staticRouteId")]
        public Input<string>? StaticRouteId { get; set; }

        /// <summary>
        /// The IP address of the subnetwork specified in CIDR notation (ex. 1.2.3.0/24)
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// switchStackId path parameter. Switch stack ID
        /// </summary>
        [Input("switchStackId")]
        public Input<string>? SwitchStackId { get; set; }

        public SwitchStacksRoutingStaticRoutesState()
        {
        }
        public static new SwitchStacksRoutingStaticRoutesState Empty => new SwitchStacksRoutingStaticRoutesState();
    }
}
