// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20 example "network_id,number"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20")]
    public partial class WirelessSsidsHotspot20 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of domain names
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Whether or not Hotspot 2.0 for this SSID is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// An array of MCC/MNC pairs
        /// </summary>
        [Output("mccMncs")]
        public Output<ImmutableArray<Outputs.WirelessSsidsHotspot20MccMnc>> MccMncs { get; private set; } = null!;

        /// <summary>
        /// An array of NAI realms
        /// </summary>
        [Output("naiRealms")]
        public Output<ImmutableArray<Outputs.WirelessSsidsHotspot20NaiRealm>> NaiRealms { get; private set; } = null!;

        /// <summary>
        /// The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
        /// </summary>
        [Output("networkAccessType")]
        public Output<string> NetworkAccessType { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Output("number")]
        public Output<string> Number { get; private set; } = null!;

        /// <summary>
        /// Operator settings for this SSID
        /// </summary>
        [Output("operator")]
        public Output<Outputs.WirelessSsidsHotspot20Operator> Operator { get; private set; } = null!;

        /// <summary>
        /// An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
        /// </summary>
        [Output("roamConsortOis")]
        public Output<ImmutableArray<string>> RoamConsortOis { get; private set; } = null!;

        /// <summary>
        /// Venue settings for this SSID
        /// </summary>
        [Output("venue")]
        public Output<Outputs.WirelessSsidsHotspot20Venue> Venue { get; private set; } = null!;


        /// <summary>
        /// Create a WirelessSsidsHotspot20 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelessSsidsHotspot20(string name, WirelessSsidsHotspot20Args args, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20", name, args ?? new WirelessSsidsHotspot20Args(), MakeResourceOptions(options, ""))
        {
        }

        private WirelessSsidsHotspot20(string name, Input<string> id, WirelessSsidsHotspot20State? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsHotspot20:WirelessSsidsHotspot20", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelessSsidsHotspot20 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelessSsidsHotspot20 Get(string name, Input<string> id, WirelessSsidsHotspot20State? state = null, CustomResourceOptions? options = null)
        {
            return new WirelessSsidsHotspot20(name, id, state, options);
        }
    }

    public sealed class WirelessSsidsHotspot20Args : global::Pulumi.ResourceArgs
    {
        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// An array of domain names
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Whether or not Hotspot 2.0 for this SSID is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("mccMncs")]
        private InputList<Inputs.WirelessSsidsHotspot20MccMncArgs>? _mccMncs;

        /// <summary>
        /// An array of MCC/MNC pairs
        /// </summary>
        public InputList<Inputs.WirelessSsidsHotspot20MccMncArgs> MccMncs
        {
            get => _mccMncs ?? (_mccMncs = new InputList<Inputs.WirelessSsidsHotspot20MccMncArgs>());
            set => _mccMncs = value;
        }

        [Input("naiRealms")]
        private InputList<Inputs.WirelessSsidsHotspot20NaiRealmArgs>? _naiRealms;

        /// <summary>
        /// An array of NAI realms
        /// </summary>
        public InputList<Inputs.WirelessSsidsHotspot20NaiRealmArgs> NaiRealms
        {
            get => _naiRealms ?? (_naiRealms = new InputList<Inputs.WirelessSsidsHotspot20NaiRealmArgs>());
            set => _naiRealms = value;
        }

        /// <summary>
        /// The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
        /// </summary>
        [Input("networkAccessType")]
        public Input<string>? NetworkAccessType { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number", required: true)]
        public Input<string> Number { get; set; } = null!;

        /// <summary>
        /// Operator settings for this SSID
        /// </summary>
        [Input("operator")]
        public Input<Inputs.WirelessSsidsHotspot20OperatorArgs>? Operator { get; set; }

        [Input("roamConsortOis")]
        private InputList<string>? _roamConsortOis;

        /// <summary>
        /// An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
        /// </summary>
        public InputList<string> RoamConsortOis
        {
            get => _roamConsortOis ?? (_roamConsortOis = new InputList<string>());
            set => _roamConsortOis = value;
        }

        /// <summary>
        /// Venue settings for this SSID
        /// </summary>
        [Input("venue")]
        public Input<Inputs.WirelessSsidsHotspot20VenueArgs>? Venue { get; set; }

        public WirelessSsidsHotspot20Args()
        {
        }
        public static new WirelessSsidsHotspot20Args Empty => new WirelessSsidsHotspot20Args();
    }

    public sealed class WirelessSsidsHotspot20State : global::Pulumi.ResourceArgs
    {
        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// An array of domain names
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Whether or not Hotspot 2.0 for this SSID is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("mccMncs")]
        private InputList<Inputs.WirelessSsidsHotspot20MccMncGetArgs>? _mccMncs;

        /// <summary>
        /// An array of MCC/MNC pairs
        /// </summary>
        public InputList<Inputs.WirelessSsidsHotspot20MccMncGetArgs> MccMncs
        {
            get => _mccMncs ?? (_mccMncs = new InputList<Inputs.WirelessSsidsHotspot20MccMncGetArgs>());
            set => _mccMncs = value;
        }

        [Input("naiRealms")]
        private InputList<Inputs.WirelessSsidsHotspot20NaiRealmGetArgs>? _naiRealms;

        /// <summary>
        /// An array of NAI realms
        /// </summary>
        public InputList<Inputs.WirelessSsidsHotspot20NaiRealmGetArgs> NaiRealms
        {
            get => _naiRealms ?? (_naiRealms = new InputList<Inputs.WirelessSsidsHotspot20NaiRealmGetArgs>());
            set => _naiRealms = value;
        }

        /// <summary>
        /// The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
        /// </summary>
        [Input("networkAccessType")]
        public Input<string>? NetworkAccessType { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number")]
        public Input<string>? Number { get; set; }

        /// <summary>
        /// Operator settings for this SSID
        /// </summary>
        [Input("operator")]
        public Input<Inputs.WirelessSsidsHotspot20OperatorGetArgs>? Operator { get; set; }

        [Input("roamConsortOis")]
        private InputList<string>? _roamConsortOis;

        /// <summary>
        /// An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
        /// </summary>
        public InputList<string> RoamConsortOis
        {
            get => _roamConsortOis ?? (_roamConsortOis = new InputList<string>());
            set => _roamConsortOis = value;
        }

        /// <summary>
        /// Venue settings for this SSID
        /// </summary>
        [Input("venue")]
        public Input<Inputs.WirelessSsidsHotspot20VenueGetArgs>? Venue { get; set; }

        public WirelessSsidsHotspot20State()
        {
        }
        public static new WirelessSsidsHotspot20State Empty => new WirelessSsidsHotspot20State();
    }
}
