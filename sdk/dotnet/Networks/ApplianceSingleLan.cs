// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.ApplianceSingleLan("example", new()
    ///     {
    ///         ApplianceIp = "string",
    ///         Ipv6 = new Meraki.Networks.Inputs.ApplianceSingleLanIpv6Args
    ///         {
    ///             Enabled = false,
    ///             Prefix_assignments = new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "autonomous", false },
    ///                     { "origin", 
    ///                     {
    ///                         { "interfaces", new[]
    ///                         {
    ///                             "string",
    ///                         } },
    ///                         { "type", "string" },
    ///                     } },
    ///                     { "staticApplianceIp6", "string" },
    ///                     { "staticPrefix", "string" },
    ///                 },
    ///             },
    ///         },
    ///         MandatoryDhcp = new Meraki.Networks.Inputs.ApplianceSingleLanMandatoryDhcpArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///         NetworkId = "string",
    ///         Subnet = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksApplianceSingleLanExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/applianceSingleLan:ApplianceSingleLan example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/applianceSingleLan:ApplianceSingleLan")]
    public partial class ApplianceSingleLan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The local IP of the appliance on the single LAN
        /// </summary>
        [Output("applianceIp")]
        public Output<string> ApplianceIp { get; private set; } = null!;

        /// <summary>
        /// IPv6 configuration on the single LAN
        /// </summary>
        [Output("ipv6")]
        public Output<Outputs.ApplianceSingleLanIpv6> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Output("mandatoryDhcp")]
        public Output<Outputs.ApplianceSingleLanMandatoryDhcp> MandatoryDhcp { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The subnet of the single LAN
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceSingleLan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceSingleLan(string name, ApplianceSingleLanArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceSingleLan:ApplianceSingleLan", name, args ?? new ApplianceSingleLanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceSingleLan(string name, Input<string> id, ApplianceSingleLanState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceSingleLan:ApplianceSingleLan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceSingleLan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceSingleLan Get(string name, Input<string> id, ApplianceSingleLanState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplianceSingleLan(name, id, state, options);
        }
    }

    public sealed class ApplianceSingleLanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The local IP of the appliance on the single LAN
        /// </summary>
        [Input("applianceIp")]
        public Input<string>? ApplianceIp { get; set; }

        /// <summary>
        /// IPv6 configuration on the single LAN
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.ApplianceSingleLanIpv6Args>? Ipv6 { get; set; }

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Input("mandatoryDhcp")]
        public Input<Inputs.ApplianceSingleLanMandatoryDhcpArgs>? MandatoryDhcp { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The subnet of the single LAN
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        public ApplianceSingleLanArgs()
        {
        }
        public static new ApplianceSingleLanArgs Empty => new ApplianceSingleLanArgs();
    }

    public sealed class ApplianceSingleLanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The local IP of the appliance on the single LAN
        /// </summary>
        [Input("applianceIp")]
        public Input<string>? ApplianceIp { get; set; }

        /// <summary>
        /// IPv6 configuration on the single LAN
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.ApplianceSingleLanIpv6GetArgs>? Ipv6 { get; set; }

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this single LAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Input("mandatoryDhcp")]
        public Input<Inputs.ApplianceSingleLanMandatoryDhcpGetArgs>? MandatoryDhcp { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The subnet of the single LAN
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        public ApplianceSingleLanState()
        {
        }
        public static new ApplianceSingleLanState Empty => new ApplianceSingleLanState();
    }
}
