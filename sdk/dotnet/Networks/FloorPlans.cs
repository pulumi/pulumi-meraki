// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.FloorPlans("example", new()
    ///     {
    ///         BottomLeftCorner = new Meraki.Networks.Inputs.FloorPlansBottomLeftCornerArgs
    ///         {
    ///             Lat = 37.770040510499996,
    ///             Lng = -122.38714009525,
    ///         },
    ///         BottomRightCorner = new Meraki.Networks.Inputs.FloorPlansBottomRightCornerArgs
    ///         {
    ///             Lat = 37.770040510499996,
    ///             Lng = -122.38714009525,
    ///         },
    ///         Center = new Meraki.Networks.Inputs.FloorPlansCenterArgs
    ///         {
    ///             Lat = 37.770040510499996,
    ///             Lng = -122.38714009525,
    ///         },
    ///         ImageContents = "2a9edd3f4ffd80130c647d13eacb59f3",
    ///         Name = "HQ Floor Plan",
    ///         NetworkId = "string",
    ///         TopLeftCorner = new Meraki.Networks.Inputs.FloorPlansTopLeftCornerArgs
    ///         {
    ///             Lat = 37.770040510499996,
    ///             Lng = -122.38714009525,
    ///         },
    ///         TopRightCorner = new Meraki.Networks.Inputs.FloorPlansTopRightCornerArgs
    ///         {
    ///             Lat = 37.770040510499996,
    ///             Lng = -122.38714009525,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksFloorPlansExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/floorPlans:FloorPlans example "floor_plan_id,network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/floorPlans:FloorPlans")]
    public partial class FloorPlans : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The longitude and latitude of the bottom left corner of your floor plan.
        /// </summary>
        [Output("bottomLeftCorner")]
        public Output<Outputs.FloorPlansBottomLeftCorner> BottomLeftCorner { get; private set; } = null!;

        /// <summary>
        /// The longitude and latitude of the bottom right corner of your floor plan.
        /// </summary>
        [Output("bottomRightCorner")]
        public Output<Outputs.FloorPlansBottomRightCorner> BottomRightCorner { get; private set; } = null!;

        /// <summary>
        /// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
        /// </summary>
        [Output("center")]
        public Output<Outputs.FloorPlansCenter> Center { get; private set; } = null!;

        /// <summary>
        /// List of devices for the floorplan
        /// </summary>
        [Output("devices")]
        public Output<ImmutableArray<Outputs.FloorPlansDevice>> Devices { get; private set; } = null!;

        /// <summary>
        /// Floor plan ID
        /// </summary>
        [Output("floorPlanId")]
        public Output<string> FloorPlanId { get; private set; } = null!;

        /// <summary>
        /// The height of your floor plan.
        /// </summary>
        [Output("height")]
        public Output<double> Height { get; private set; } = null!;

        /// <summary>
        /// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
        /// </summary>
        [Output("imageContents")]
        public Output<string> ImageContents { get; private set; } = null!;

        /// <summary>
        /// The format type of the image.
        /// </summary>
        [Output("imageExtension")]
        public Output<string> ImageExtension { get; private set; } = null!;

        /// <summary>
        /// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
        /// </summary>
        [Output("imageMd5")]
        public Output<string> ImageMd5 { get; private set; } = null!;

        /// <summary>
        /// The url link for the floor plan image.
        /// </summary>
        [Output("imageUrl")]
        public Output<string> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// The time the image url link will expire.
        /// </summary>
        [Output("imageUrlExpiresAt")]
        public Output<string> ImageUrlExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The name of your floor plan.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The longitude and latitude of the top left corner of your floor plan.
        /// </summary>
        [Output("topLeftCorner")]
        public Output<Outputs.FloorPlansTopLeftCorner> TopLeftCorner { get; private set; } = null!;

        /// <summary>
        /// The longitude and latitude of the top right corner of your floor plan.
        /// </summary>
        [Output("topRightCorner")]
        public Output<Outputs.FloorPlansTopRightCorner> TopRightCorner { get; private set; } = null!;

        /// <summary>
        /// The width of your floor plan.
        /// </summary>
        [Output("width")]
        public Output<double> Width { get; private set; } = null!;


        /// <summary>
        /// Create a FloorPlans resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FloorPlans(string name, FloorPlansArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/floorPlans:FloorPlans", name, args ?? new FloorPlansArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FloorPlans(string name, Input<string> id, FloorPlansState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/floorPlans:FloorPlans", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FloorPlans resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FloorPlans Get(string name, Input<string> id, FloorPlansState? state = null, CustomResourceOptions? options = null)
        {
            return new FloorPlans(name, id, state, options);
        }
    }

    public sealed class FloorPlansArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The longitude and latitude of the bottom left corner of your floor plan.
        /// </summary>
        [Input("bottomLeftCorner")]
        public Input<Inputs.FloorPlansBottomLeftCornerArgs>? BottomLeftCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the bottom right corner of your floor plan.
        /// </summary>
        [Input("bottomRightCorner")]
        public Input<Inputs.FloorPlansBottomRightCornerArgs>? BottomRightCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
        /// </summary>
        [Input("center")]
        public Input<Inputs.FloorPlansCenterArgs>? Center { get; set; }

        /// <summary>
        /// Floor plan ID
        /// </summary>
        [Input("floorPlanId")]
        public Input<string>? FloorPlanId { get; set; }

        /// <summary>
        /// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
        /// </summary>
        [Input("imageContents")]
        public Input<string>? ImageContents { get; set; }

        /// <summary>
        /// The name of your floor plan.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The longitude and latitude of the top left corner of your floor plan.
        /// </summary>
        [Input("topLeftCorner")]
        public Input<Inputs.FloorPlansTopLeftCornerArgs>? TopLeftCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the top right corner of your floor plan.
        /// </summary>
        [Input("topRightCorner")]
        public Input<Inputs.FloorPlansTopRightCornerArgs>? TopRightCorner { get; set; }

        public FloorPlansArgs()
        {
        }
        public static new FloorPlansArgs Empty => new FloorPlansArgs();
    }

    public sealed class FloorPlansState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The longitude and latitude of the bottom left corner of your floor plan.
        /// </summary>
        [Input("bottomLeftCorner")]
        public Input<Inputs.FloorPlansBottomLeftCornerGetArgs>? BottomLeftCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the bottom right corner of your floor plan.
        /// </summary>
        [Input("bottomRightCorner")]
        public Input<Inputs.FloorPlansBottomRightCornerGetArgs>? BottomRightCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
        /// </summary>
        [Input("center")]
        public Input<Inputs.FloorPlansCenterGetArgs>? Center { get; set; }

        [Input("devices")]
        private InputList<Inputs.FloorPlansDeviceGetArgs>? _devices;

        /// <summary>
        /// List of devices for the floorplan
        /// </summary>
        public InputList<Inputs.FloorPlansDeviceGetArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.FloorPlansDeviceGetArgs>());
            set => _devices = value;
        }

        /// <summary>
        /// Floor plan ID
        /// </summary>
        [Input("floorPlanId")]
        public Input<string>? FloorPlanId { get; set; }

        /// <summary>
        /// The height of your floor plan.
        /// </summary>
        [Input("height")]
        public Input<double>? Height { get; set; }

        /// <summary>
        /// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
        /// </summary>
        [Input("imageContents")]
        public Input<string>? ImageContents { get; set; }

        /// <summary>
        /// The format type of the image.
        /// </summary>
        [Input("imageExtension")]
        public Input<string>? ImageExtension { get; set; }

        /// <summary>
        /// The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
        /// </summary>
        [Input("imageMd5")]
        public Input<string>? ImageMd5 { get; set; }

        /// <summary>
        /// The url link for the floor plan image.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The time the image url link will expire.
        /// </summary>
        [Input("imageUrlExpiresAt")]
        public Input<string>? ImageUrlExpiresAt { get; set; }

        /// <summary>
        /// The name of your floor plan.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The longitude and latitude of the top left corner of your floor plan.
        /// </summary>
        [Input("topLeftCorner")]
        public Input<Inputs.FloorPlansTopLeftCornerGetArgs>? TopLeftCorner { get; set; }

        /// <summary>
        /// The longitude and latitude of the top right corner of your floor plan.
        /// </summary>
        [Input("topRightCorner")]
        public Input<Inputs.FloorPlansTopRightCornerGetArgs>? TopRightCorner { get; set; }

        /// <summary>
        /// The width of your floor plan.
        /// </summary>
        [Input("width")]
        public Input<double>? Width { get; set; }

        public FloorPlansState()
        {
        }
        public static new FloorPlansState Empty => new FloorPlansState();
    }
}
