// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.SmTargetGroups("example", new()
    ///     {
    ///         Name = "Target group name",
    ///         NetworkId = "string",
    ///         Scope = "withAny, tag1, tag2",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksSmTargetGroupsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/smTargetGroups:SmTargetGroups example "network_id,target_group_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/smTargetGroups:SmTargetGroups")]
    public partial class SmTargetGroups : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of this target group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The scope of the target group.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The tags of the target group.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// targetGroupId path parameter. Target group ID
        /// </summary>
        [Output("targetGroupId")]
        public Output<string?> TargetGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a SmTargetGroups resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SmTargetGroups(string name, SmTargetGroupsArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/smTargetGroups:SmTargetGroups", name, args ?? new SmTargetGroupsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SmTargetGroups(string name, Input<string> id, SmTargetGroupsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/smTargetGroups:SmTargetGroups", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SmTargetGroups resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SmTargetGroups Get(string name, Input<string> id, SmTargetGroupsState? state = null, CustomResourceOptions? options = null)
        {
            return new SmTargetGroups(name, id, state, options);
        }
    }

    public sealed class SmTargetGroupsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of this target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The scope of the target group.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// targetGroupId path parameter. Target group ID
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        public SmTargetGroupsArgs()
        {
        }
        public static new SmTargetGroupsArgs Empty => new SmTargetGroupsArgs();
    }

    public sealed class SmTargetGroupsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of this target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The scope of the target group.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the target group.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// targetGroupId path parameter. Target group ID
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        public SmTargetGroupsState()
        {
        }
        public static new SmTargetGroupsState Empty => new SmTargetGroupsState();
    }
}
