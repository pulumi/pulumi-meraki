// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetEvents
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetEvents.Invoke(new()
        ///     {
        ///         ClientIp = "string",
        ///         ClientMac = "string",
        ///         ClientName = "string",
        ///         DeviceMac = "string",
        ///         DeviceName = "string",
        ///         DeviceSerial = "string",
        ///         EndingBefore = "string",
        ///         ExcludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         IncludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductType = "string",
        ///         SmDeviceMac = "string",
        ///         SmDeviceName = "string",
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksEventsExample"] = example.Apply(getEventsResult =&gt; getEventsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEventsResult> InvokeAsync(GetEventsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventsResult>("meraki:networks/getEvents:getEvents", args ?? new GetEventsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetEvents.Invoke(new()
        ///     {
        ///         ClientIp = "string",
        ///         ClientMac = "string",
        ///         ClientName = "string",
        ///         DeviceMac = "string",
        ///         DeviceName = "string",
        ///         DeviceSerial = "string",
        ///         EndingBefore = "string",
        ///         ExcludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         IncludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductType = "string",
        ///         SmDeviceMac = "string",
        ///         SmDeviceName = "string",
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksEventsExample"] = example.Apply(getEventsResult =&gt; getEventsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventsResult> Invoke(GetEventsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventsResult>("meraki:networks/getEvents:getEvents", args ?? new GetEventsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetEvents.Invoke(new()
        ///     {
        ///         ClientIp = "string",
        ///         ClientMac = "string",
        ///         ClientName = "string",
        ///         DeviceMac = "string",
        ///         DeviceName = "string",
        ///         DeviceSerial = "string",
        ///         EndingBefore = "string",
        ///         ExcludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         IncludedEventTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductType = "string",
        ///         SmDeviceMac = "string",
        ///         SmDeviceName = "string",
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksEventsExample"] = example.Apply(getEventsResult =&gt; getEventsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEventsResult> Invoke(GetEventsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventsResult>("meraki:networks/getEvents:getEvents", args ?? new GetEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        /// </summary>
        [Input("clientIp")]
        public string? ClientIp { get; set; }

        /// <summary>
        /// clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        /// </summary>
        [Input("clientMac")]
        public string? ClientMac { get; set; }

        /// <summary>
        /// clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
        /// </summary>
        [Input("clientName")]
        public string? ClientName { get; set; }

        /// <summary>
        /// deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceMac")]
        public string? DeviceMac { get; set; }

        /// <summary>
        /// deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceName")]
        public string? DeviceName { get; set; }

        /// <summary>
        /// deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceSerial")]
        public string? DeviceSerial { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        [Input("excludedEventTypes")]
        private List<string>? _excludedEventTypes;

        /// <summary>
        /// excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
        /// </summary>
        public List<string> ExcludedEventTypes
        {
            get => _excludedEventTypes ?? (_excludedEventTypes = new List<string>());
            set => _excludedEventTypes = value;
        }

        [Input("includedEventTypes")]
        private List<string>? _includedEventTypes;

        /// <summary>
        /// includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
        /// </summary>
        public List<string> IncludedEventTypes
        {
            get => _includedEventTypes ?? (_includedEventTypes = new List<string>());
            set => _includedEventTypes = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        /// <summary>
        /// productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
        /// </summary>
        [Input("productType")]
        public string? ProductType { get; set; }

        /// <summary>
        /// smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        [Input("smDeviceMac")]
        public string? SmDeviceMac { get; set; }

        /// <summary>
        /// smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        [Input("smDeviceName")]
        public string? SmDeviceName { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        public GetEventsArgs()
        {
        }
        public static new GetEventsArgs Empty => new GetEventsArgs();
    }

    public sealed class GetEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        /// </summary>
        [Input("clientIp")]
        public Input<string>? ClientIp { get; set; }

        /// <summary>
        /// clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        /// </summary>
        [Input("clientMac")]
        public Input<string>? ClientMac { get; set; }

        /// <summary>
        /// clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
        /// </summary>
        [Input("clientName")]
        public Input<string>? ClientName { get; set; }

        /// <summary>
        /// deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceMac")]
        public Input<string>? DeviceMac { get; set; }

        /// <summary>
        /// deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceName")]
        public Input<string>? DeviceName { get; set; }

        /// <summary>
        /// deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
        /// </summary>
        [Input("deviceSerial")]
        public Input<string>? DeviceSerial { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        [Input("excludedEventTypes")]
        private InputList<string>? _excludedEventTypes;

        /// <summary>
        /// excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
        /// </summary>
        public InputList<string> ExcludedEventTypes
        {
            get => _excludedEventTypes ?? (_excludedEventTypes = new InputList<string>());
            set => _excludedEventTypes = value;
        }

        [Input("includedEventTypes")]
        private InputList<string>? _includedEventTypes;

        /// <summary>
        /// includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
        /// </summary>
        public InputList<string> IncludedEventTypes
        {
            get => _includedEventTypes ?? (_includedEventTypes = new InputList<string>());
            set => _includedEventTypes = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        /// <summary>
        /// productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
        /// </summary>
        [Input("productType")]
        public Input<string>? ProductType { get; set; }

        /// <summary>
        /// smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        [Input("smDeviceMac")]
        public Input<string>? SmDeviceMac { get; set; }

        /// <summary>
        /// smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        [Input("smDeviceName")]
        public Input<string>? SmDeviceName { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        public GetEventsInvokeArgs()
        {
        }
        public static new GetEventsInvokeArgs Empty => new GetEventsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventsResult
    {
        /// <summary>
        /// clientIp query parameter. The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
        /// </summary>
        public readonly string? ClientIp;
        /// <summary>
        /// clientMac query parameter. The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
        /// </summary>
        public readonly string? ClientMac;
        /// <summary>
        /// clientName query parameter. The name, or partial name, of the client which the list of events will be filtered with
        /// </summary>
        public readonly string? ClientName;
        /// <summary>
        /// deviceMac query parameter. The MAC address of the Meraki device which the list of events will be filtered with
        /// </summary>
        public readonly string? DeviceMac;
        /// <summary>
        /// deviceName query parameter. The name of the Meraki device which the list of events will be filtered with
        /// </summary>
        public readonly string? DeviceName;
        /// <summary>
        /// deviceSerial query parameter. The serial of the Meraki device which the list of events will be filtered with
        /// </summary>
        public readonly string? DeviceSerial;
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// excludedEventTypes query parameter. A list of event types. The returned events will be filtered to exclude events with these types.
        /// </summary>
        public readonly ImmutableArray<string> ExcludedEventTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// includedEventTypes query parameter. A list of event types. The returned events will be filtered to only include events with these types.
        /// </summary>
        public readonly ImmutableArray<string> IncludedEventTypes;
        public readonly Outputs.GetEventsItemResult Item;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 10.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// productType query parameter. The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
        /// </summary>
        public readonly string? ProductType;
        /// <summary>
        /// smDeviceMac query parameter. The MAC address of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        public readonly string? SmDeviceMac;
        /// <summary>
        /// smDeviceName query parameter. The name of the Systems Manager device which the list of events will be filtered with
        /// </summary>
        public readonly string? SmDeviceName;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;

        [OutputConstructor]
        private GetEventsResult(
            string? clientIp,

            string? clientMac,

            string? clientName,

            string? deviceMac,

            string? deviceName,

            string? deviceSerial,

            string? endingBefore,

            ImmutableArray<string> excludedEventTypes,

            string id,

            ImmutableArray<string> includedEventTypes,

            Outputs.GetEventsItemResult item,

            string networkId,

            int? perPage,

            string? productType,

            string? smDeviceMac,

            string? smDeviceName,

            string? startingAfter)
        {
            ClientIp = clientIp;
            ClientMac = clientMac;
            ClientName = clientName;
            DeviceMac = deviceMac;
            DeviceName = deviceName;
            DeviceSerial = deviceSerial;
            EndingBefore = endingBefore;
            ExcludedEventTypes = excludedEventTypes;
            Id = id;
            IncludedEventTypes = includedEventTypes;
            Item = item;
            NetworkId = networkId;
            PerPage = perPage;
            ProductType = productType;
            SmDeviceMac = smDeviceMac;
            SmDeviceName = smDeviceName;
            StartingAfter = startingAfter;
        }
    }
}
