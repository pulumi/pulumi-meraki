// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn")]
    public partial class ApplianceVpnSiteToSiteVpn : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of VPN hubs, in order of preference.
        /// </summary>
        [Output("hubs")]
        public Output<ImmutableArray<Outputs.ApplianceVpnSiteToSiteVpnHub>> Hubs { get; private set; } = null!;

        /// <summary>
        /// The site-to-site VPN mode.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The list of subnets and their VPN presence.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<Outputs.ApplianceVpnSiteToSiteVpnSubnet>> Subnets { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceVpnSiteToSiteVpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceVpnSiteToSiteVpn(string name, ApplianceVpnSiteToSiteVpnArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn", name, args ?? new ApplianceVpnSiteToSiteVpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceVpnSiteToSiteVpn(string name, Input<string> id, ApplianceVpnSiteToSiteVpnState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceVpnSiteToSiteVpn:ApplianceVpnSiteToSiteVpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceVpnSiteToSiteVpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceVpnSiteToSiteVpn Get(string name, Input<string> id, ApplianceVpnSiteToSiteVpnState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplianceVpnSiteToSiteVpn(name, id, state, options);
        }
    }

    public sealed class ApplianceVpnSiteToSiteVpnArgs : global::Pulumi.ResourceArgs
    {
        [Input("hubs")]
        private InputList<Inputs.ApplianceVpnSiteToSiteVpnHubArgs>? _hubs;

        /// <summary>
        /// The list of VPN hubs, in order of preference.
        /// </summary>
        public InputList<Inputs.ApplianceVpnSiteToSiteVpnHubArgs> Hubs
        {
            get => _hubs ?? (_hubs = new InputList<Inputs.ApplianceVpnSiteToSiteVpnHubArgs>());
            set => _hubs = value;
        }

        /// <summary>
        /// The site-to-site VPN mode.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("subnets")]
        private InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetArgs>? _subnets;

        /// <summary>
        /// The list of subnets and their VPN presence.
        /// </summary>
        public InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetArgs>());
            set => _subnets = value;
        }

        public ApplianceVpnSiteToSiteVpnArgs()
        {
        }
        public static new ApplianceVpnSiteToSiteVpnArgs Empty => new ApplianceVpnSiteToSiteVpnArgs();
    }

    public sealed class ApplianceVpnSiteToSiteVpnState : global::Pulumi.ResourceArgs
    {
        [Input("hubs")]
        private InputList<Inputs.ApplianceVpnSiteToSiteVpnHubGetArgs>? _hubs;

        /// <summary>
        /// The list of VPN hubs, in order of preference.
        /// </summary>
        public InputList<Inputs.ApplianceVpnSiteToSiteVpnHubGetArgs> Hubs
        {
            get => _hubs ?? (_hubs = new InputList<Inputs.ApplianceVpnSiteToSiteVpnHubGetArgs>());
            set => _hubs = value;
        }

        /// <summary>
        /// The site-to-site VPN mode.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("subnets")]
        private InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetGetArgs>? _subnets;

        /// <summary>
        /// The list of subnets and their VPN presence.
        /// </summary>
        public InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetGetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.ApplianceVpnSiteToSiteVpnSubnetGetArgs>());
            set => _subnets = value;
        }

        public ApplianceVpnSiteToSiteVpnState()
        {
        }
        public static new ApplianceVpnSiteToSiteVpnState Empty => new ApplianceVpnSiteToSiteVpnState();
    }
}
