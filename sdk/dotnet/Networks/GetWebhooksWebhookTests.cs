// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetWebhooksWebhookTests
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetWebhooksWebhookTests.Invoke(new()
        ///     {
        ///         NetworkId = "string",
        ///         WebhookTestId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksWebhooksWebhookTestsExample"] = example.Apply(getWebhooksWebhookTestsResult =&gt; getWebhooksWebhookTestsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetWebhooksWebhookTestsResult> InvokeAsync(GetWebhooksWebhookTestsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebhooksWebhookTestsResult>("meraki:networks/getWebhooksWebhookTests:getWebhooksWebhookTests", args ?? new GetWebhooksWebhookTestsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetWebhooksWebhookTests.Invoke(new()
        ///     {
        ///         NetworkId = "string",
        ///         WebhookTestId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksWebhooksWebhookTestsExample"] = example.Apply(getWebhooksWebhookTestsResult =&gt; getWebhooksWebhookTestsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetWebhooksWebhookTestsResult> Invoke(GetWebhooksWebhookTestsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebhooksWebhookTestsResult>("meraki:networks/getWebhooksWebhookTests:getWebhooksWebhookTests", args ?? new GetWebhooksWebhookTestsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetWebhooksWebhookTests.Invoke(new()
        ///     {
        ///         NetworkId = "string",
        ///         WebhookTestId = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksWebhooksWebhookTestsExample"] = example.Apply(getWebhooksWebhookTestsResult =&gt; getWebhooksWebhookTestsResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetWebhooksWebhookTestsResult> Invoke(GetWebhooksWebhookTestsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebhooksWebhookTestsResult>("meraki:networks/getWebhooksWebhookTests:getWebhooksWebhookTests", args ?? new GetWebhooksWebhookTestsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebhooksWebhookTestsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// webhookTestId path parameter. Webhook test ID
        /// </summary>
        [Input("webhookTestId", required: true)]
        public string WebhookTestId { get; set; } = null!;

        public GetWebhooksWebhookTestsArgs()
        {
        }
        public static new GetWebhooksWebhookTestsArgs Empty => new GetWebhooksWebhookTestsArgs();
    }

    public sealed class GetWebhooksWebhookTestsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// webhookTestId path parameter. Webhook test ID
        /// </summary>
        [Input("webhookTestId", required: true)]
        public Input<string> WebhookTestId { get; set; } = null!;

        public GetWebhooksWebhookTestsInvokeArgs()
        {
        }
        public static new GetWebhooksWebhookTestsInvokeArgs Empty => new GetWebhooksWebhookTestsInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebhooksWebhookTestsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetWebhooksWebhookTestsItemResult Item;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// webhookTestId path parameter. Webhook test ID
        /// </summary>
        public readonly string WebhookTestId;

        [OutputConstructor]
        private GetWebhooksWebhookTestsResult(
            string id,

            Outputs.GetWebhooksWebhookTestsItemResult item,

            string networkId,

            string webhookTestId)
        {
            Id = id;
            Item = item;
            NetworkId = networkId;
            WebhookTestId = webhookTestId;
        }
    }
}
