// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetApplianceFirewallFirewalledServices
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetApplianceFirewallFirewalledServices.Invoke(new()
        ///     {
        ///         NetworkId = "string",
        ///         Service = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksApplianceFirewallFirewalledServicesExample"] = example.Apply(getApplianceFirewallFirewalledServicesResult =&gt; getApplianceFirewallFirewalledServicesResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplianceFirewallFirewalledServicesResult> InvokeAsync(GetApplianceFirewallFirewalledServicesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplianceFirewallFirewalledServicesResult>("meraki:networks/getApplianceFirewallFirewalledServices:getApplianceFirewallFirewalledServices", args ?? new GetApplianceFirewallFirewalledServicesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetApplianceFirewallFirewalledServices.Invoke(new()
        ///     {
        ///         NetworkId = "string",
        ///         Service = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksApplianceFirewallFirewalledServicesExample"] = example.Apply(getApplianceFirewallFirewalledServicesResult =&gt; getApplianceFirewallFirewalledServicesResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplianceFirewallFirewalledServicesResult> Invoke(GetApplianceFirewallFirewalledServicesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplianceFirewallFirewalledServicesResult>("meraki:networks/getApplianceFirewallFirewalledServices:getApplianceFirewallFirewalledServices", args ?? new GetApplianceFirewallFirewalledServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplianceFirewallFirewalledServicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// service path parameter.
        /// </summary>
        [Input("service", required: true)]
        public string Service { get; set; } = null!;

        public GetApplianceFirewallFirewalledServicesArgs()
        {
        }
        public static new GetApplianceFirewallFirewalledServicesArgs Empty => new GetApplianceFirewallFirewalledServicesArgs();
    }

    public sealed class GetApplianceFirewallFirewalledServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// service path parameter.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public GetApplianceFirewallFirewalledServicesInvokeArgs()
        {
        }
        public static new GetApplianceFirewallFirewalledServicesInvokeArgs Empty => new GetApplianceFirewallFirewalledServicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplianceFirewallFirewalledServicesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetApplianceFirewallFirewalledServicesItemResult Item;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// service path parameter.
        /// </summary>
        public readonly string Service;

        [OutputConstructor]
        private GetApplianceFirewallFirewalledServicesResult(
            string id,

            Outputs.GetApplianceFirewallFirewalledServicesItemResult item,

            string networkId,

            string service)
        {
            Id = id;
            Item = item;
            NetworkId = networkId;
            Service = service;
        }
    }
}
