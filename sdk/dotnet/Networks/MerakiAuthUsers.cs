// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/merakiAuthUsers:MerakiAuthUsers example "meraki_auth_user_id,network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/merakiAuthUsers:MerakiAuthUsers")]
    public partial class MerakiAuthUsers : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authorization type for user.
        /// </summary>
        [Output("accountType")]
        public Output<string> AccountType { get; private set; } = null!;

        /// <summary>
        /// User authorization info
        /// </summary>
        [Output("authorizations")]
        public Output<ImmutableArray<Outputs.MerakiAuthUsersAuthorization>> Authorizations { get; private set; } = null!;

        /// <summary>
        /// Creation time of the user
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Email address of the user
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// Whether or not Meraki should email the password to user. Default is false.
        /// </summary>
        [Output("emailPasswordToUser")]
        public Output<bool> EmailPasswordToUser { get; private set; } = null!;

        /// <summary>
        /// Whether or not the user is a Dashboard administrator
        /// </summary>
        [Output("isAdmin")]
        public Output<bool> IsAdmin { get; private set; } = null!;

        /// <summary>
        /// merakiAuthUserId path parameter. Meraki auth user ID
        /// </summary>
        [Output("merakiAuthUserId")]
        public Output<string?> MerakiAuthUserId { get; private set; } = null!;

        /// <summary>
        /// Name of the user
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The password for this user account. Only required If the user is not a Dashboard administrator.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;


        /// <summary>
        /// Create a MerakiAuthUsers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MerakiAuthUsers(string name, MerakiAuthUsersArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/merakiAuthUsers:MerakiAuthUsers", name, args ?? new MerakiAuthUsersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MerakiAuthUsers(string name, Input<string> id, MerakiAuthUsersState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/merakiAuthUsers:MerakiAuthUsers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MerakiAuthUsers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MerakiAuthUsers Get(string name, Input<string> id, MerakiAuthUsersState? state = null, CustomResourceOptions? options = null)
        {
            return new MerakiAuthUsers(name, id, state, options);
        }
    }

    public sealed class MerakiAuthUsersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization type for user.
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        [Input("authorizations")]
        private InputList<Inputs.MerakiAuthUsersAuthorizationArgs>? _authorizations;

        /// <summary>
        /// User authorization info
        /// </summary>
        public InputList<Inputs.MerakiAuthUsersAuthorizationArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.MerakiAuthUsersAuthorizationArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// Email address of the user
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Whether or not Meraki should email the password to user. Default is false.
        /// </summary>
        [Input("emailPasswordToUser")]
        public Input<bool>? EmailPasswordToUser { get; set; }

        /// <summary>
        /// Whether or not the user is a Dashboard administrator
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        /// <summary>
        /// merakiAuthUserId path parameter. Meraki auth user ID
        /// </summary>
        [Input("merakiAuthUserId")]
        public Input<string>? MerakiAuthUserId { get; set; }

        /// <summary>
        /// Name of the user
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for this user account. Only required If the user is not a Dashboard administrator.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public MerakiAuthUsersArgs()
        {
        }
        public static new MerakiAuthUsersArgs Empty => new MerakiAuthUsersArgs();
    }

    public sealed class MerakiAuthUsersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authorization type for user.
        /// </summary>
        [Input("accountType")]
        public Input<string>? AccountType { get; set; }

        [Input("authorizations")]
        private InputList<Inputs.MerakiAuthUsersAuthorizationGetArgs>? _authorizations;

        /// <summary>
        /// User authorization info
        /// </summary>
        public InputList<Inputs.MerakiAuthUsersAuthorizationGetArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.MerakiAuthUsersAuthorizationGetArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// Creation time of the user
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Email address of the user
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Whether or not Meraki should email the password to user. Default is false.
        /// </summary>
        [Input("emailPasswordToUser")]
        public Input<bool>? EmailPasswordToUser { get; set; }

        /// <summary>
        /// Whether or not the user is a Dashboard administrator
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        /// <summary>
        /// merakiAuthUserId path parameter. Meraki auth user ID
        /// </summary>
        [Input("merakiAuthUserId")]
        public Input<string>? MerakiAuthUserId { get; set; }

        /// <summary>
        /// Name of the user
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for this user account. Only required If the user is not a Dashboard administrator.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public MerakiAuthUsersState()
        {
        }
        public static new MerakiAuthUsersState Empty => new MerakiAuthUsersState();
    }
}
