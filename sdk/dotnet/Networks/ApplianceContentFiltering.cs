// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.ApplianceContentFiltering("example", new()
    ///     {
    ///         AllowedUrlPatterns = new[]
    ///         {
    ///             "http://www.example.org",
    ///             "http://help.com.au",
    ///         },
    ///         BlockedUrlCategories = new[]
    ///         {
    ///             "meraki:contentFiltering/category/1",
    ///             "meraki:contentFiltering/category/7",
    ///         },
    ///         BlockedUrlPatterns = new[]
    ///         {
    ///             "http://www.example.com",
    ///             "http://www.betting.com",
    ///         },
    ///         NetworkId = "string",
    ///         UrlCategoryListSize = "topSites",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksApplianceContentFilteringExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/applianceContentFiltering:ApplianceContentFiltering example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/applianceContentFiltering:ApplianceContentFiltering")]
    public partial class ApplianceContentFiltering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of URL patterns that are allowed
        /// </summary>
        [Output("allowedUrlPatterns")]
        public Output<ImmutableArray<string>> AllowedUrlPatterns { get; private set; } = null!;

        /// <summary>
        /// A list of URL categories to block
        /// </summary>
        [Output("blockedUrlCategories")]
        public Output<ImmutableArray<string>> BlockedUrlCategories { get; private set; } = null!;

        [Output("blockedUrlCategoriesResponses")]
        public Output<ImmutableArray<Outputs.ApplianceContentFilteringBlockedUrlCategoriesResponse>> BlockedUrlCategoriesResponses { get; private set; } = null!;

        /// <summary>
        /// A list of URL patterns that are blocked
        /// </summary>
        [Output("blockedUrlPatterns")]
        public Output<ImmutableArray<string>> BlockedUrlPatterns { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// URL category list size which is either 'topSites' or 'fullList'
        /// </summary>
        [Output("urlCategoryListSize")]
        public Output<string?> UrlCategoryListSize { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceContentFiltering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceContentFiltering(string name, ApplianceContentFilteringArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceContentFiltering:ApplianceContentFiltering", name, args ?? new ApplianceContentFilteringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceContentFiltering(string name, Input<string> id, ApplianceContentFilteringState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceContentFiltering:ApplianceContentFiltering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceContentFiltering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceContentFiltering Get(string name, Input<string> id, ApplianceContentFilteringState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplianceContentFiltering(name, id, state, options);
        }
    }

    public sealed class ApplianceContentFilteringArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedUrlPatterns")]
        private InputList<string>? _allowedUrlPatterns;

        /// <summary>
        /// A list of URL patterns that are allowed
        /// </summary>
        public InputList<string> AllowedUrlPatterns
        {
            get => _allowedUrlPatterns ?? (_allowedUrlPatterns = new InputList<string>());
            set => _allowedUrlPatterns = value;
        }

        [Input("blockedUrlCategories")]
        private InputList<string>? _blockedUrlCategories;

        /// <summary>
        /// A list of URL categories to block
        /// </summary>
        public InputList<string> BlockedUrlCategories
        {
            get => _blockedUrlCategories ?? (_blockedUrlCategories = new InputList<string>());
            set => _blockedUrlCategories = value;
        }

        [Input("blockedUrlPatterns")]
        private InputList<string>? _blockedUrlPatterns;

        /// <summary>
        /// A list of URL patterns that are blocked
        /// </summary>
        public InputList<string> BlockedUrlPatterns
        {
            get => _blockedUrlPatterns ?? (_blockedUrlPatterns = new InputList<string>());
            set => _blockedUrlPatterns = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// URL category list size which is either 'topSites' or 'fullList'
        /// </summary>
        [Input("urlCategoryListSize")]
        public Input<string>? UrlCategoryListSize { get; set; }

        public ApplianceContentFilteringArgs()
        {
        }
        public static new ApplianceContentFilteringArgs Empty => new ApplianceContentFilteringArgs();
    }

    public sealed class ApplianceContentFilteringState : global::Pulumi.ResourceArgs
    {
        [Input("allowedUrlPatterns")]
        private InputList<string>? _allowedUrlPatterns;

        /// <summary>
        /// A list of URL patterns that are allowed
        /// </summary>
        public InputList<string> AllowedUrlPatterns
        {
            get => _allowedUrlPatterns ?? (_allowedUrlPatterns = new InputList<string>());
            set => _allowedUrlPatterns = value;
        }

        [Input("blockedUrlCategories")]
        private InputList<string>? _blockedUrlCategories;

        /// <summary>
        /// A list of URL categories to block
        /// </summary>
        public InputList<string> BlockedUrlCategories
        {
            get => _blockedUrlCategories ?? (_blockedUrlCategories = new InputList<string>());
            set => _blockedUrlCategories = value;
        }

        [Input("blockedUrlCategoriesResponses")]
        private InputList<Inputs.ApplianceContentFilteringBlockedUrlCategoriesResponseGetArgs>? _blockedUrlCategoriesResponses;
        public InputList<Inputs.ApplianceContentFilteringBlockedUrlCategoriesResponseGetArgs> BlockedUrlCategoriesResponses
        {
            get => _blockedUrlCategoriesResponses ?? (_blockedUrlCategoriesResponses = new InputList<Inputs.ApplianceContentFilteringBlockedUrlCategoriesResponseGetArgs>());
            set => _blockedUrlCategoriesResponses = value;
        }

        [Input("blockedUrlPatterns")]
        private InputList<string>? _blockedUrlPatterns;

        /// <summary>
        /// A list of URL patterns that are blocked
        /// </summary>
        public InputList<string> BlockedUrlPatterns
        {
            get => _blockedUrlPatterns ?? (_blockedUrlPatterns = new InputList<string>());
            set => _blockedUrlPatterns = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// URL category list size which is either 'topSites' or 'fullList'
        /// </summary>
        [Input("urlCategoryListSize")]
        public Input<string>? UrlCategoryListSize { get; set; }

        public ApplianceContentFilteringState()
        {
        }
        public static new ApplianceContentFilteringState Empty => new ApplianceContentFilteringState();
    }
}
