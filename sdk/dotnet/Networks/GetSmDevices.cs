// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetSmDevices
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSmDevices.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         Fields = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Ids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         Scopes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         SystemTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Uuids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         WifiMacs = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSmDevicesExample"] = example.Apply(getSmDevicesResult =&gt; getSmDevicesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSmDevicesResult> InvokeAsync(GetSmDevicesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSmDevicesResult>("meraki:networks/getSmDevices:getSmDevices", args ?? new GetSmDevicesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSmDevices.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         Fields = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Ids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         Scopes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         SystemTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Uuids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         WifiMacs = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSmDevicesExample"] = example.Apply(getSmDevicesResult =&gt; getSmDevicesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSmDevicesResult> Invoke(GetSmDevicesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSmDevicesResult>("meraki:networks/getSmDevices:getSmDevices", args ?? new GetSmDevicesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetSmDevices.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         Fields = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Ids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         Scopes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         SystemTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Uuids = new[]
        ///         {
        ///             "string",
        ///         },
        ///         WifiMacs = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksSmDevicesExample"] = example.Apply(getSmDevicesResult =&gt; getSmDevicesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSmDevicesResult> Invoke(GetSmDevicesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSmDevicesResult>("meraki:networks/getSmDevices:getSmDevices", args ?? new GetSmDevicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSmDevicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// fields query parameter. Additional fields that will be displayed for each device.
        /// The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
        /// systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
        /// ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
        /// simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
        /// isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
        /// hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// ids query parameter. Filter devices by id(s).
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("scopes")]
        private List<string>? _scopes;

        /// <summary>
        /// scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
        /// </summary>
        public List<string> Scopes
        {
            get => _scopes ?? (_scopes = new List<string>());
            set => _scopes = value;
        }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Filter devices by serial(s).
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        [Input("systemTypes")]
        private List<string>? _systemTypes;

        /// <summary>
        /// systemTypes query parameter. Filter devices by system type(s).
        /// </summary>
        public List<string> SystemTypes
        {
            get => _systemTypes ?? (_systemTypes = new List<string>());
            set => _systemTypes = value;
        }

        [Input("uuids")]
        private List<string>? _uuids;

        /// <summary>
        /// uuids query parameter. Filter devices by uuid(s).
        /// </summary>
        public List<string> Uuids
        {
            get => _uuids ?? (_uuids = new List<string>());
            set => _uuids = value;
        }

        [Input("wifiMacs")]
        private List<string>? _wifiMacs;

        /// <summary>
        /// wifiMacs query parameter. Filter devices by wifi mac(s).
        /// </summary>
        public List<string> WifiMacs
        {
            get => _wifiMacs ?? (_wifiMacs = new List<string>());
            set => _wifiMacs = value;
        }

        public GetSmDevicesArgs()
        {
        }
        public static new GetSmDevicesArgs Empty => new GetSmDevicesArgs();
    }

    public sealed class GetSmDevicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        [Input("fields")]
        private InputList<string>? _fields;

        /// <summary>
        /// fields query parameter. Additional fields that will be displayed for each device.
        /// The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
        /// systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
        /// ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
        /// simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
        /// isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
        /// hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
        /// </summary>
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// ids query parameter. Filter devices by id(s).
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Filter devices by serial(s).
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        [Input("systemTypes")]
        private InputList<string>? _systemTypes;

        /// <summary>
        /// systemTypes query parameter. Filter devices by system type(s).
        /// </summary>
        public InputList<string> SystemTypes
        {
            get => _systemTypes ?? (_systemTypes = new InputList<string>());
            set => _systemTypes = value;
        }

        [Input("uuids")]
        private InputList<string>? _uuids;

        /// <summary>
        /// uuids query parameter. Filter devices by uuid(s).
        /// </summary>
        public InputList<string> Uuids
        {
            get => _uuids ?? (_uuids = new InputList<string>());
            set => _uuids = value;
        }

        [Input("wifiMacs")]
        private InputList<string>? _wifiMacs;

        /// <summary>
        /// wifiMacs query parameter. Filter devices by wifi mac(s).
        /// </summary>
        public InputList<string> WifiMacs
        {
            get => _wifiMacs ?? (_wifiMacs = new InputList<string>());
            set => _wifiMacs = value;
        }

        public GetSmDevicesInvokeArgs()
        {
        }
        public static new GetSmDevicesInvokeArgs Empty => new GetSmDevicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSmDevicesResult
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// fields query parameter. Additional fields that will be displayed for each device.
        /// The default fields are: id, name, tags, ssid, wifiMac, osName, systemModel, uuid, and serialNumber. The additional fields are: ip,
        /// systemType, availableDeviceCapacity, kioskAppName, biosVersion, lastConnected, missingAppsCount, userSuppliedAddress, location, lastUser,
        /// ownerEmail, ownerUsername, osBuild, publicIp, phoneNumber, diskInfoJson, deviceCapacity, isManaged, hadMdm, isSupervised, meid, imei, iccid,
        /// simCarrierNetwork, cellularDataUsed, isHotspotEnabled, createdAt, batteryEstCharge, quarantined, avName, avRunning, asName, fwName,
        /// isRooted, loginRequired, screenLockEnabled, screenLockDelay, autoLoginDisabled, autoTags, hasMdm, hasDesktopAgent, diskEncryptionEnabled,
        /// hardwareEncryptionCaps, passCodeLock, usesHardwareKeystore, androidSecurityPatchVersion, cellular, and url.
        /// </summary>
        public readonly ImmutableArray<string> Fields;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ids query parameter. Filter devices by id(s).
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// Array of ResponseSmGetNetworkSmDevices
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSmDevicesItemResult> Items;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// scope query parameter. Specify a scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// serials query parameter. Filter devices by serial(s).
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;
        /// <summary>
        /// systemTypes query parameter. Filter devices by system type(s).
        /// </summary>
        public readonly ImmutableArray<string> SystemTypes;
        /// <summary>
        /// uuids query parameter. Filter devices by uuid(s).
        /// </summary>
        public readonly ImmutableArray<string> Uuids;
        /// <summary>
        /// wifiMacs query parameter. Filter devices by wifi mac(s).
        /// </summary>
        public readonly ImmutableArray<string> WifiMacs;

        [OutputConstructor]
        private GetSmDevicesResult(
            string? endingBefore,

            ImmutableArray<string> fields,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetSmDevicesItemResult> items,

            string networkId,

            int? perPage,

            ImmutableArray<string> scopes,

            ImmutableArray<string> serials,

            string? startingAfter,

            ImmutableArray<string> systemTypes,

            ImmutableArray<string> uuids,

            ImmutableArray<string> wifiMacs)
        {
            EndingBefore = endingBefore;
            Fields = fields;
            Id = id;
            Ids = ids;
            Items = items;
            NetworkId = networkId;
            PerPage = perPage;
            Scopes = scopes;
            Serials = serials;
            StartingAfter = startingAfter;
            SystemTypes = systemTypes;
            Uuids = uuids;
            WifiMacs = wifiMacs;
        }
    }
}
