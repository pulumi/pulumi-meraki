// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.WirelessSettings("example", new()
    ///     {
    ///         Ipv6BridgeEnabled = false,
    ///         LedLightsOn = false,
    ///         LocationAnalyticsEnabled = false,
    ///         MeshingEnabled = true,
    ///         NamedVlans = new Meraki.Networks.Inputs.WirelessSettingsNamedVlansArgs
    ///         {
    ///             Pool_dhcp_monitoring = 
    ///             {
    ///                 { "duration", 5 },
    ///                 { "enabled", true },
    ///             },
    ///         },
    ///         NetworkId = "string",
    ///         Upgradestrategy = "minimizeUpgradeTime",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksWirelessSettingsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/wirelessSettings:WirelessSettings example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/wirelessSettings:WirelessSettings")]
    public partial class WirelessSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
        /// </summary>
        [Output("ipv6BridgeEnabled")]
        public Output<bool> Ipv6BridgeEnabled { get; private set; } = null!;

        /// <summary>
        /// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
        /// </summary>
        [Output("ledLightsOn")]
        public Output<bool> LedLightsOn { get; private set; } = null!;

        /// <summary>
        /// Toggle for enabling or disabling location analytics for your network
        /// </summary>
        [Output("locationAnalyticsEnabled")]
        public Output<bool> LocationAnalyticsEnabled { get; private set; } = null!;

        /// <summary>
        /// Toggle for enabling or disabling meshing in a network
        /// </summary>
        [Output("meshingEnabled")]
        public Output<bool> MeshingEnabled { get; private set; } = null!;

        /// <summary>
        /// Named VLAN settings for wireless networks.
        /// </summary>
        [Output("namedVlans")]
        public Output<Outputs.WirelessSettingsNamedVlans> NamedVlans { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Regulatory domain information for this network.
        /// </summary>
        [Output("regulatoryDomain")]
        public Output<Outputs.WirelessSettingsRegulatoryDomain> RegulatoryDomain { get; private set; } = null!;

        /// <summary>
        /// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
        /// </summary>
        [Output("upgradestrategy")]
        public Output<string> Upgradestrategy { get; private set; } = null!;


        /// <summary>
        /// Create a WirelessSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelessSettings(string name, WirelessSettingsArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSettings:WirelessSettings", name, args ?? new WirelessSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelessSettings(string name, Input<string> id, WirelessSettingsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSettings:WirelessSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelessSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelessSettings Get(string name, Input<string> id, WirelessSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelessSettings(name, id, state, options);
        }
    }

    public sealed class WirelessSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
        /// </summary>
        [Input("ipv6BridgeEnabled")]
        public Input<bool>? Ipv6BridgeEnabled { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
        /// </summary>
        [Input("ledLightsOn")]
        public Input<bool>? LedLightsOn { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling location analytics for your network
        /// </summary>
        [Input("locationAnalyticsEnabled")]
        public Input<bool>? LocationAnalyticsEnabled { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling meshing in a network
        /// </summary>
        [Input("meshingEnabled")]
        public Input<bool>? MeshingEnabled { get; set; }

        /// <summary>
        /// Named VLAN settings for wireless networks.
        /// </summary>
        [Input("namedVlans")]
        public Input<Inputs.WirelessSettingsNamedVlansArgs>? NamedVlans { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
        /// </summary>
        [Input("upgradestrategy")]
        public Input<string>? Upgradestrategy { get; set; }

        public WirelessSettingsArgs()
        {
        }
        public static new WirelessSettingsArgs Empty => new WirelessSettingsArgs();
    }

    public sealed class WirelessSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
        /// </summary>
        [Input("ipv6BridgeEnabled")]
        public Input<bool>? Ipv6BridgeEnabled { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
        /// </summary>
        [Input("ledLightsOn")]
        public Input<bool>? LedLightsOn { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling location analytics for your network
        /// </summary>
        [Input("locationAnalyticsEnabled")]
        public Input<bool>? LocationAnalyticsEnabled { get; set; }

        /// <summary>
        /// Toggle for enabling or disabling meshing in a network
        /// </summary>
        [Input("meshingEnabled")]
        public Input<bool>? MeshingEnabled { get; set; }

        /// <summary>
        /// Named VLAN settings for wireless networks.
        /// </summary>
        [Input("namedVlans")]
        public Input<Inputs.WirelessSettingsNamedVlansGetArgs>? NamedVlans { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Regulatory domain information for this network.
        /// </summary>
        [Input("regulatoryDomain")]
        public Input<Inputs.WirelessSettingsRegulatoryDomainGetArgs>? RegulatoryDomain { get; set; }

        /// <summary>
        /// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
        /// </summary>
        [Input("upgradestrategy")]
        public Input<string>? Upgradestrategy { get; set; }

        public WirelessSettingsState()
        {
        }
        public static new WirelessSettingsState Empty => new WirelessSettingsState();
    }
}
