// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetVlanProfilesAssignmentsByDevice
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetVlanProfilesAssignmentsByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StackIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksVlanProfilesAssignmentsByDeviceExample"] = example.Apply(getVlanProfilesAssignmentsByDeviceResult =&gt; getVlanProfilesAssignmentsByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVlanProfilesAssignmentsByDeviceResult> InvokeAsync(GetVlanProfilesAssignmentsByDeviceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVlanProfilesAssignmentsByDeviceResult>("meraki:networks/getVlanProfilesAssignmentsByDevice:getVlanProfilesAssignmentsByDevice", args ?? new GetVlanProfilesAssignmentsByDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetVlanProfilesAssignmentsByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StackIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksVlanProfilesAssignmentsByDeviceExample"] = example.Apply(getVlanProfilesAssignmentsByDeviceResult =&gt; getVlanProfilesAssignmentsByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanProfilesAssignmentsByDeviceResult> Invoke(GetVlanProfilesAssignmentsByDeviceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanProfilesAssignmentsByDeviceResult>("meraki:networks/getVlanProfilesAssignmentsByDevice:getVlanProfilesAssignmentsByDevice", args ?? new GetVlanProfilesAssignmentsByDeviceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetVlanProfilesAssignmentsByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         NetworkId = "string",
        ///         PerPage = 1,
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StackIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksVlanProfilesAssignmentsByDeviceExample"] = example.Apply(getVlanProfilesAssignmentsByDeviceResult =&gt; getVlanProfilesAssignmentsByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanProfilesAssignmentsByDeviceResult> Invoke(GetVlanProfilesAssignmentsByDeviceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanProfilesAssignmentsByDeviceResult>("meraki:networks/getVlanProfilesAssignmentsByDevice:getVlanProfilesAssignmentsByDevice", args ?? new GetVlanProfilesAssignmentsByDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVlanProfilesAssignmentsByDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("productTypes")]
        private List<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product types.
        /// </summary>
        public List<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new List<string>());
            set => _productTypes = value;
        }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        [Input("stackIds")]
        private List<string>? _stackIds;

        /// <summary>
        /// stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
        /// </summary>
        public List<string> StackIds
        {
            get => _stackIds ?? (_stackIds = new List<string>());
            set => _stackIds = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        public GetVlanProfilesAssignmentsByDeviceArgs()
        {
        }
        public static new GetVlanProfilesAssignmentsByDeviceArgs Empty => new GetVlanProfilesAssignmentsByDeviceArgs();
    }

    public sealed class GetVlanProfilesAssignmentsByDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("productTypes")]
        private InputList<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product types.
        /// </summary>
        public InputList<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new InputList<string>());
            set => _productTypes = value;
        }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        [Input("stackIds")]
        private InputList<string>? _stackIds;

        /// <summary>
        /// stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
        /// </summary>
        public InputList<string> StackIds
        {
            get => _stackIds ?? (_stackIds = new InputList<string>());
            set => _stackIds = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        public GetVlanProfilesAssignmentsByDeviceInvokeArgs()
        {
        }
        public static new GetVlanProfilesAssignmentsByDeviceInvokeArgs Empty => new GetVlanProfilesAssignmentsByDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVlanProfilesAssignmentsByDeviceResult
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseNetworksGetNetworkVlanProfilesAssignmentsByDevice
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVlanProfilesAssignmentsByDeviceItemResult> Items;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product types.
        /// </summary>
        public readonly ImmutableArray<string> ProductTypes;
        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// stackIds query parameter. Optional parameter to filter devices by Switch Stack ids.
        /// </summary>
        public readonly ImmutableArray<string> StackIds;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;

        [OutputConstructor]
        private GetVlanProfilesAssignmentsByDeviceResult(
            string? endingBefore,

            string id,

            ImmutableArray<Outputs.GetVlanProfilesAssignmentsByDeviceItemResult> items,

            string networkId,

            int? perPage,

            ImmutableArray<string> productTypes,

            ImmutableArray<string> serials,

            ImmutableArray<string> stackIds,

            string? startingAfter)
        {
            EndingBefore = endingBefore;
            Id = id;
            Items = items;
            NetworkId = networkId;
            PerPage = perPage;
            ProductTypes = productTypes;
            Serials = serials;
            StackIds = stackIds;
            StartingAfter = startingAfter;
        }
    }
}
