// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks.Inputs
{

    public sealed class ApplianceVpnBgpNeighborArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.
        /// </summary>
        [Input("allowTransit")]
        public Input<bool>? AllowTransit { get; set; }

        /// <summary>
        /// Authentication settings between BGP peers.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.ApplianceVpnBgpNeighborAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// The eBGP hold timer in seconds for each neighbor. The eBGP hold timer must be an integer between 12 and 240.
        /// </summary>
        [Input("ebgpHoldTimer")]
        public Input<int>? EbgpHoldTimer { get; set; }

        /// <summary>
        /// Configure this if the neighbor is not adjacent. The eBGP multi-hop must be an integer between 1 and 255.
        /// </summary>
        [Input("ebgpMultihop")]
        public Input<int>? EbgpMultihop { get; set; }

        /// <summary>
        /// The IPv4 address of the neighbor
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Information regarding IPv6 address of the neighbor, Required if *ip* is not present.
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.ApplianceVpnBgpNeighborIpv6Args>? Ipv6 { get; set; }

        /// <summary>
        /// The IPv4 address of the remote BGP peer that will establish a TCP session with the local MX.
        /// </summary>
        [Input("nextHopIp")]
        public Input<string>? NextHopIp { get; set; }

        /// <summary>
        /// The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.
        /// </summary>
        [Input("receiveLimit")]
        public Input<int>? ReceiveLimit { get; set; }

        /// <summary>
        /// Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.
        /// </summary>
        [Input("remoteAsNumber")]
        public Input<int>? RemoteAsNumber { get; set; }

        /// <summary>
        /// The output interface for peering with the remote BGP peer. Valid values are: 'wan1', 'wan2' or 'vlan{VLAN ID}'(e.g. 'vlan123').
        /// </summary>
        [Input("sourceInterface")]
        public Input<string>? SourceInterface { get; set; }

        /// <summary>
        /// Settings for BGP TTL security to protect BGP peering sessions from forged IP attacks.
        /// </summary>
        [Input("ttlSecurity")]
        public Input<Inputs.ApplianceVpnBgpNeighborTtlSecurityArgs>? TtlSecurity { get; set; }

        public ApplianceVpnBgpNeighborArgs()
        {
        }
        public static new ApplianceVpnBgpNeighborArgs Empty => new ApplianceVpnBgpNeighborArgs();
    }
}
