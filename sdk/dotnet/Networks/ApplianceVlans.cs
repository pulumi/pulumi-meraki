// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/applianceVlans:ApplianceVlans example "network_id,vlan_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/applianceVlans:ApplianceVlans")]
    public partial class ApplianceVlans : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The local IP of the appliance on the VLAN
        /// </summary>
        [Output("applianceIp")]
        public Output<string> ApplianceIp { get; private set; } = null!;

        /// <summary>
        /// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
        /// </summary>
        [Output("cidr")]
        public Output<string?> Cidr { get; private set; } = null!;

        /// <summary>
        /// DHCP boot option for boot filename
        /// </summary>
        [Output("dhcpBootFilename")]
        public Output<string> DhcpBootFilename { get; private set; } = null!;

        /// <summary>
        /// DHCP boot option to direct boot clients to the server to load the boot file from
        /// </summary>
        [Output("dhcpBootNextServer")]
        public Output<string> DhcpBootNextServer { get; private set; } = null!;

        /// <summary>
        /// Use DHCP boot options specified in other properties
        /// </summary>
        [Output("dhcpBootOptionsEnabled")]
        public Output<bool> DhcpBootOptionsEnabled { get; private set; } = null!;

        /// <summary>
        /// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
        /// </summary>
        [Output("dhcpHandling")]
        public Output<string> DhcpHandling { get; private set; } = null!;

        /// <summary>
        /// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
        /// </summary>
        [Output("dhcpLeaseTime")]
        public Output<string> DhcpLeaseTime { get; private set; } = null!;

        /// <summary>
        /// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
        /// </summary>
        [Output("dhcpOptions")]
        public Output<ImmutableArray<Outputs.ApplianceVlansDhcpOption>> DhcpOptions { get; private set; } = null!;

        /// <summary>
        /// The IPs of the DHCP servers that DHCP requests should be relayed to
        /// </summary>
        [Output("dhcpRelayServerIps")]
        public Output<ImmutableArray<string>> DhcpRelayServerIps { get; private set; } = null!;

        /// <summary>
        /// The DNS nameservers used for DHCP responses, either "upstream*dns", "google*dns", "opendns", or a newline seperated string of IP addresses or domain names
        /// </summary>
        [Output("dnsNameservers")]
        public Output<string> DnsNameservers { get; private set; } = null!;

        /// <summary>
        /// The id of the desired group policy to apply to the VLAN
        /// </summary>
        [Output("groupPolicyId")]
        public Output<string> GroupPolicyId { get; private set; } = null!;

        /// <summary>
        /// The interface ID of the VLAN
        /// </summary>
        [Output("interfaceId")]
        public Output<string> InterfaceId { get; private set; } = null!;

        /// <summary>
        /// IPv6 configuration on the VLAN
        /// </summary>
        [Output("ipv6")]
        public Output<Outputs.ApplianceVlansIpv6> Ipv6 { get; private set; } = null!;

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Output("mandatoryDhcp")]
        public Output<Outputs.ApplianceVlansMandatoryDhcp> MandatoryDhcp { get; private set; } = null!;

        /// <summary>
        /// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
        /// </summary>
        [Output("mask")]
        public Output<int> Mask { get; private set; } = null!;

        /// <summary>
        /// The name of the VLAN
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The DHCP reserved IP ranges on the VLAN
        /// </summary>
        [Output("reservedIpRanges")]
        public Output<ImmutableArray<Outputs.ApplianceVlansReservedIpRange>> ReservedIpRanges { get; private set; } = null!;

        /// <summary>
        /// The subnet of the VLAN
        /// </summary>
        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        /// <summary>
        /// Type of subnetting of the VLAN. Applicable only for template network.
        /// </summary>
        [Output("templateVlanType")]
        public Output<string> TemplateVlanType { get; private set; } = null!;

        /// <summary>
        /// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
        /// </summary>
        [Output("vpnNatSubnet")]
        public Output<string> VpnNatSubnet { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceVlans resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceVlans(string name, ApplianceVlansArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceVlans:ApplianceVlans", name, args ?? new ApplianceVlansArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceVlans(string name, Input<string> id, ApplianceVlansState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceVlans:ApplianceVlans", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceVlans resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceVlans Get(string name, Input<string> id, ApplianceVlansState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplianceVlans(name, id, state, options);
        }
    }

    public sealed class ApplianceVlansArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The local IP of the appliance on the VLAN
        /// </summary>
        [Input("applianceIp")]
        public Input<string>? ApplianceIp { get; set; }

        /// <summary>
        /// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// DHCP boot option for boot filename
        /// </summary>
        [Input("dhcpBootFilename")]
        public Input<string>? DhcpBootFilename { get; set; }

        /// <summary>
        /// DHCP boot option to direct boot clients to the server to load the boot file from
        /// </summary>
        [Input("dhcpBootNextServer")]
        public Input<string>? DhcpBootNextServer { get; set; }

        /// <summary>
        /// Use DHCP boot options specified in other properties
        /// </summary>
        [Input("dhcpBootOptionsEnabled")]
        public Input<bool>? DhcpBootOptionsEnabled { get; set; }

        /// <summary>
        /// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
        /// </summary>
        [Input("dhcpHandling")]
        public Input<string>? DhcpHandling { get; set; }

        /// <summary>
        /// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
        /// </summary>
        [Input("dhcpLeaseTime")]
        public Input<string>? DhcpLeaseTime { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.ApplianceVlansDhcpOptionArgs>? _dhcpOptions;

        /// <summary>
        /// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
        /// </summary>
        public InputList<Inputs.ApplianceVlansDhcpOptionArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.ApplianceVlansDhcpOptionArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpRelayServerIps")]
        private InputList<string>? _dhcpRelayServerIps;

        /// <summary>
        /// The IPs of the DHCP servers that DHCP requests should be relayed to
        /// </summary>
        public InputList<string> DhcpRelayServerIps
        {
            get => _dhcpRelayServerIps ?? (_dhcpRelayServerIps = new InputList<string>());
            set => _dhcpRelayServerIps = value;
        }

        /// <summary>
        /// The DNS nameservers used for DHCP responses, either "upstream*dns", "google*dns", "opendns", or a newline seperated string of IP addresses or domain names
        /// </summary>
        [Input("dnsNameservers")]
        public Input<string>? DnsNameservers { get; set; }

        /// <summary>
        /// The id of the desired group policy to apply to the VLAN
        /// </summary>
        [Input("groupPolicyId")]
        public Input<string>? GroupPolicyId { get; set; }

        /// <summary>
        /// IPv6 configuration on the VLAN
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.ApplianceVlansIpv6Args>? Ipv6 { get; set; }

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Input("mandatoryDhcp")]
        public Input<Inputs.ApplianceVlansMandatoryDhcpArgs>? MandatoryDhcp { get; set; }

        /// <summary>
        /// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
        /// </summary>
        [Input("mask")]
        public Input<int>? Mask { get; set; }

        /// <summary>
        /// The name of the VLAN
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        [Input("reservedIpRanges")]
        private InputList<Inputs.ApplianceVlansReservedIpRangeArgs>? _reservedIpRanges;

        /// <summary>
        /// The DHCP reserved IP ranges on the VLAN
        /// </summary>
        public InputList<Inputs.ApplianceVlansReservedIpRangeArgs> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<Inputs.ApplianceVlansReservedIpRangeArgs>());
            set => _reservedIpRanges = value;
        }

        /// <summary>
        /// The subnet of the VLAN
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// Type of subnetting of the VLAN. Applicable only for template network.
        /// </summary>
        [Input("templateVlanType")]
        public Input<string>? TemplateVlanType { get; set; }

        /// <summary>
        /// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
        /// </summary>
        [Input("vpnNatSubnet")]
        public Input<string>? VpnNatSubnet { get; set; }

        public ApplianceVlansArgs()
        {
        }
        public static new ApplianceVlansArgs Empty => new ApplianceVlansArgs();
    }

    public sealed class ApplianceVlansState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The local IP of the appliance on the VLAN
        /// </summary>
        [Input("applianceIp")]
        public Input<string>? ApplianceIp { get; set; }

        /// <summary>
        /// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// DHCP boot option for boot filename
        /// </summary>
        [Input("dhcpBootFilename")]
        public Input<string>? DhcpBootFilename { get; set; }

        /// <summary>
        /// DHCP boot option to direct boot clients to the server to load the boot file from
        /// </summary>
        [Input("dhcpBootNextServer")]
        public Input<string>? DhcpBootNextServer { get; set; }

        /// <summary>
        /// Use DHCP boot options specified in other properties
        /// </summary>
        [Input("dhcpBootOptionsEnabled")]
        public Input<bool>? DhcpBootOptionsEnabled { get; set; }

        /// <summary>
        /// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
        /// </summary>
        [Input("dhcpHandling")]
        public Input<string>? DhcpHandling { get; set; }

        /// <summary>
        /// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
        /// </summary>
        [Input("dhcpLeaseTime")]
        public Input<string>? DhcpLeaseTime { get; set; }

        [Input("dhcpOptions")]
        private InputList<Inputs.ApplianceVlansDhcpOptionGetArgs>? _dhcpOptions;

        /// <summary>
        /// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
        /// </summary>
        public InputList<Inputs.ApplianceVlansDhcpOptionGetArgs> DhcpOptions
        {
            get => _dhcpOptions ?? (_dhcpOptions = new InputList<Inputs.ApplianceVlansDhcpOptionGetArgs>());
            set => _dhcpOptions = value;
        }

        [Input("dhcpRelayServerIps")]
        private InputList<string>? _dhcpRelayServerIps;

        /// <summary>
        /// The IPs of the DHCP servers that DHCP requests should be relayed to
        /// </summary>
        public InputList<string> DhcpRelayServerIps
        {
            get => _dhcpRelayServerIps ?? (_dhcpRelayServerIps = new InputList<string>());
            set => _dhcpRelayServerIps = value;
        }

        /// <summary>
        /// The DNS nameservers used for DHCP responses, either "upstream*dns", "google*dns", "opendns", or a newline seperated string of IP addresses or domain names
        /// </summary>
        [Input("dnsNameservers")]
        public Input<string>? DnsNameservers { get; set; }

        /// <summary>
        /// The id of the desired group policy to apply to the VLAN
        /// </summary>
        [Input("groupPolicyId")]
        public Input<string>? GroupPolicyId { get; set; }

        /// <summary>
        /// The interface ID of the VLAN
        /// </summary>
        [Input("interfaceId")]
        public Input<string>? InterfaceId { get; set; }

        /// <summary>
        /// IPv6 configuration on the VLAN
        /// </summary>
        [Input("ipv6")]
        public Input<Inputs.ApplianceVlansIpv6GetArgs>? Ipv6 { get; set; }

        /// <summary>
        /// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
        /// </summary>
        [Input("mandatoryDhcp")]
        public Input<Inputs.ApplianceVlansMandatoryDhcpGetArgs>? MandatoryDhcp { get; set; }

        /// <summary>
        /// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
        /// </summary>
        [Input("mask")]
        public Input<int>? Mask { get; set; }

        /// <summary>
        /// The name of the VLAN
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("reservedIpRanges")]
        private InputList<Inputs.ApplianceVlansReservedIpRangeGetArgs>? _reservedIpRanges;

        /// <summary>
        /// The DHCP reserved IP ranges on the VLAN
        /// </summary>
        public InputList<Inputs.ApplianceVlansReservedIpRangeGetArgs> ReservedIpRanges
        {
            get => _reservedIpRanges ?? (_reservedIpRanges = new InputList<Inputs.ApplianceVlansReservedIpRangeGetArgs>());
            set => _reservedIpRanges = value;
        }

        /// <summary>
        /// The subnet of the VLAN
        /// </summary>
        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        /// <summary>
        /// Type of subnetting of the VLAN. Applicable only for template network.
        /// </summary>
        [Input("templateVlanType")]
        public Input<string>? TemplateVlanType { get; set; }

        /// <summary>
        /// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
        /// </summary>
        [Input("vpnNatSubnet")]
        public Input<string>? VpnNatSubnet { get; set; }

        public ApplianceVlansState()
        {
        }
        public static new ApplianceVlansState Empty => new ApplianceVlansState();
    }
}
