// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/wirelessSsidsTrafficShapingRules:WirelessSsidsTrafficShapingRules example "network_id,number"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/wirelessSsidsTrafficShapingRules:WirelessSsidsTrafficShapingRules")]
    public partial class WirelessSsidsTrafficShapingRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.
        /// </summary>
        [Output("defaultRulesEnabled")]
        public Output<bool> DefaultRulesEnabled { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Output("number")]
        public Output<string> Number { get; private set; } = null!;

        /// <summary>
        /// An array of traffic shaping rules. Rules are applied in the order that
        /// they are specified in. An empty list (or null) means no rules. Note that
        /// you are allowed a maximum of 8 rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.WirelessSsidsTrafficShapingRulesRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Whether traffic shaping rules are applied to clients on your SSID.
        /// </summary>
        [Output("trafficShapingEnabled")]
        public Output<bool> TrafficShapingEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a WirelessSsidsTrafficShapingRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelessSsidsTrafficShapingRules(string name, WirelessSsidsTrafficShapingRulesArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsTrafficShapingRules:WirelessSsidsTrafficShapingRules", name, args ?? new WirelessSsidsTrafficShapingRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelessSsidsTrafficShapingRules(string name, Input<string> id, WirelessSsidsTrafficShapingRulesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsidsTrafficShapingRules:WirelessSsidsTrafficShapingRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelessSsidsTrafficShapingRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelessSsidsTrafficShapingRules Get(string name, Input<string> id, WirelessSsidsTrafficShapingRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelessSsidsTrafficShapingRules(name, id, state, options);
        }
    }

    public sealed class WirelessSsidsTrafficShapingRulesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.
        /// </summary>
        [Input("defaultRulesEnabled")]
        public Input<bool>? DefaultRulesEnabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number", required: true)]
        public Input<string> Number { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleArgs>? _rules;

        /// <summary>
        /// An array of traffic shaping rules. Rules are applied in the order that
        /// they are specified in. An empty list (or null) means no rules. Note that
        /// you are allowed a maximum of 8 rules.
        /// </summary>
        public InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Whether traffic shaping rules are applied to clients on your SSID.
        /// </summary>
        [Input("trafficShapingEnabled")]
        public Input<bool>? TrafficShapingEnabled { get; set; }

        public WirelessSsidsTrafficShapingRulesArgs()
        {
        }
        public static new WirelessSsidsTrafficShapingRulesArgs Empty => new WirelessSsidsTrafficShapingRulesArgs();
    }

    public sealed class WirelessSsidsTrafficShapingRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.
        /// </summary>
        [Input("defaultRulesEnabled")]
        public Input<bool>? DefaultRulesEnabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// number path parameter.
        /// </summary>
        [Input("number")]
        public Input<string>? Number { get; set; }

        [Input("rules")]
        private InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleGetArgs>? _rules;

        /// <summary>
        /// An array of traffic shaping rules. Rules are applied in the order that
        /// they are specified in. An empty list (or null) means no rules. Note that
        /// you are allowed a maximum of 8 rules.
        /// </summary>
        public InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WirelessSsidsTrafficShapingRulesRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Whether traffic shaping rules are applied to clients on your SSID.
        /// </summary>
        [Input("trafficShapingEnabled")]
        public Input<bool>? TrafficShapingEnabled { get; set; }

        public WirelessSsidsTrafficShapingRulesState()
        {
        }
        public static new WirelessSsidsTrafficShapingRulesState Empty => new WirelessSsidsTrafficShapingRulesState();
    }
}
