// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/switchAccessPolicies:SwitchAccessPolicies example "access_policy_number,network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/switchAccessPolicies:SwitchAccessPolicies")]
    public partial class SwitchAccessPolicies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// accessPolicyNumber path parameter. Access policy number
        /// </summary>
        [Output("accessPolicyNumber")]
        public Output<string> AccessPolicyNumber { get; private set; } = null!;

        /// <summary>
        /// Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
        /// </summary>
        [Output("accessPolicyType")]
        public Output<string> AccessPolicyType { get; private set; } = null!;

        /// <summary>
        /// Counts associated with the access policy
        /// </summary>
        [Output("counts")]
        public Output<Outputs.SwitchAccessPoliciesCounts> Counts { get; private set; } = null!;

        /// <summary>
        /// 802.1x Settings
        /// </summary>
        [Output("dot1x")]
        public Output<Outputs.SwitchAccessPoliciesDot1x> Dot1x { get; private set; } = null!;

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Output("guestPortBouncing")]
        public Output<bool> GuestPortBouncing { get; private set; } = null!;

        /// <summary>
        /// ID for the guest VLAN allow unauthorized devices access to limited network resources
        /// </summary>
        [Output("guestVlanId")]
        public Output<int?> GuestVlanId { get; private set; } = null!;

        /// <summary>
        /// Choose the Host Mode for the access policy.
        /// </summary>
        [Output("hostMode")]
        public Output<string> HostMode { get; private set; } = null!;

        /// <summary>
        /// Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
        /// </summary>
        [Output("increaseAccessSpeed")]
        public Output<bool> IncreaseAccessSpeed { get; private set; } = null!;

        /// <summary>
        /// Name of the access policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Object for RADIUS Settings
        /// </summary>
        [Output("radius")]
        public Output<Outputs.SwitchAccessPoliciesRadius> Radius { get; private set; } = null!;

        /// <summary>
        /// Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
        /// </summary>
        [Output("radiusAccountingEnabled")]
        public Output<bool> RadiusAccountingEnabled { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        [Output("radiusAccountingServers")]
        public Output<ImmutableArray<Outputs.SwitchAccessPoliciesRadiusAccountingServer>> RadiusAccountingServers { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        [Output("radiusAccountingServersResponses")]
        public Output<ImmutableArray<Outputs.SwitchAccessPoliciesRadiusAccountingServersResponse>> RadiusAccountingServersResponses { get; private set; } = null!;

        /// <summary>
        /// Change of authentication for RADIUS re-authentication and disconnection
        /// </summary>
        [Output("radiusCoaSupportEnabled")]
        public Output<bool> RadiusCoaSupportEnabled { get; private set; } = null!;

        /// <summary>
        /// Acceptable values are *""* for None, or *"11"* for Group Policies ACL
        /// </summary>
        [Output("radiusGroupAttribute")]
        public Output<string> RadiusGroupAttribute { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        [Output("radiusServers")]
        public Output<ImmutableArray<Outputs.SwitchAccessPoliciesRadiusServer>> RadiusServers { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        [Output("radiusServersResponses")]
        public Output<ImmutableArray<Outputs.SwitchAccessPoliciesRadiusServersResponse>> RadiusServersResponses { get; private set; } = null!;

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Output("radiusTestingEnabled")]
        public Output<bool> RadiusTestingEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
        /// </summary>
        [Output("urlRedirectWalledGardenEnabled")]
        public Output<bool> UrlRedirectWalledGardenEnabled { get; private set; } = null!;

        /// <summary>
        /// IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
        /// </summary>
        [Output("urlRedirectWalledGardenRanges")]
        public Output<ImmutableArray<string>> UrlRedirectWalledGardenRanges { get; private set; } = null!;

        /// <summary>
        /// CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
        /// </summary>
        [Output("voiceVlanClients")]
        public Output<bool> VoiceVlanClients { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchAccessPolicies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchAccessPolicies(string name, SwitchAccessPoliciesArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/switchAccessPolicies:SwitchAccessPolicies", name, args ?? new SwitchAccessPoliciesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchAccessPolicies(string name, Input<string> id, SwitchAccessPoliciesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/switchAccessPolicies:SwitchAccessPolicies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchAccessPolicies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchAccessPolicies Get(string name, Input<string> id, SwitchAccessPoliciesState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchAccessPolicies(name, id, state, options);
        }
    }

    public sealed class SwitchAccessPoliciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// accessPolicyNumber path parameter. Access policy number
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<string>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// 802.1x Settings
        /// </summary>
        [Input("dot1x")]
        public Input<Inputs.SwitchAccessPoliciesDot1xArgs>? Dot1x { get; set; }

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Input("guestPortBouncing")]
        public Input<bool>? GuestPortBouncing { get; set; }

        /// <summary>
        /// ID for the guest VLAN allow unauthorized devices access to limited network resources
        /// </summary>
        [Input("guestVlanId")]
        public Input<int>? GuestVlanId { get; set; }

        /// <summary>
        /// Choose the Host Mode for the access policy.
        /// </summary>
        [Input("hostMode")]
        public Input<string>? HostMode { get; set; }

        /// <summary>
        /// Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
        /// </summary>
        [Input("increaseAccessSpeed")]
        public Input<bool>? IncreaseAccessSpeed { get; set; }

        /// <summary>
        /// Name of the access policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// Object for RADIUS Settings
        /// </summary>
        [Input("radius")]
        public Input<Inputs.SwitchAccessPoliciesRadiusArgs>? Radius { get; set; }

        /// <summary>
        /// Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
        /// </summary>
        [Input("radiusAccountingEnabled")]
        public Input<bool>? RadiusAccountingEnabled { get; set; }

        [Input("radiusAccountingServers")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerArgs>? _radiusAccountingServers;

        /// <summary>
        /// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerArgs> RadiusAccountingServers
        {
            get => _radiusAccountingServers ?? (_radiusAccountingServers = new InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerArgs>());
            set => _radiusAccountingServers = value;
        }

        /// <summary>
        /// Change of authentication for RADIUS re-authentication and disconnection
        /// </summary>
        [Input("radiusCoaSupportEnabled")]
        public Input<bool>? RadiusCoaSupportEnabled { get; set; }

        /// <summary>
        /// Acceptable values are *""* for None, or *"11"* for Group Policies ACL
        /// </summary>
        [Input("radiusGroupAttribute")]
        public Input<string>? RadiusGroupAttribute { get; set; }

        [Input("radiusServers")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusServerArgs>? _radiusServers;

        /// <summary>
        /// List of RADIUS servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusServerArgs> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<Inputs.SwitchAccessPoliciesRadiusServerArgs>());
            set => _radiusServers = value;
        }

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Input("radiusTestingEnabled")]
        public Input<bool>? RadiusTestingEnabled { get; set; }

        /// <summary>
        /// Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
        /// </summary>
        [Input("urlRedirectWalledGardenEnabled")]
        public Input<bool>? UrlRedirectWalledGardenEnabled { get; set; }

        [Input("urlRedirectWalledGardenRanges")]
        private InputList<string>? _urlRedirectWalledGardenRanges;

        /// <summary>
        /// IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
        /// </summary>
        public InputList<string> UrlRedirectWalledGardenRanges
        {
            get => _urlRedirectWalledGardenRanges ?? (_urlRedirectWalledGardenRanges = new InputList<string>());
            set => _urlRedirectWalledGardenRanges = value;
        }

        /// <summary>
        /// CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
        /// </summary>
        [Input("voiceVlanClients")]
        public Input<bool>? VoiceVlanClients { get; set; }

        public SwitchAccessPoliciesArgs()
        {
        }
        public static new SwitchAccessPoliciesArgs Empty => new SwitchAccessPoliciesArgs();
    }

    public sealed class SwitchAccessPoliciesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// accessPolicyNumber path parameter. Access policy number
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<string>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// Counts associated with the access policy
        /// </summary>
        [Input("counts")]
        public Input<Inputs.SwitchAccessPoliciesCountsGetArgs>? Counts { get; set; }

        /// <summary>
        /// 802.1x Settings
        /// </summary>
        [Input("dot1x")]
        public Input<Inputs.SwitchAccessPoliciesDot1xGetArgs>? Dot1x { get; set; }

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Input("guestPortBouncing")]
        public Input<bool>? GuestPortBouncing { get; set; }

        /// <summary>
        /// ID for the guest VLAN allow unauthorized devices access to limited network resources
        /// </summary>
        [Input("guestVlanId")]
        public Input<int>? GuestVlanId { get; set; }

        /// <summary>
        /// Choose the Host Mode for the access policy.
        /// </summary>
        [Input("hostMode")]
        public Input<string>? HostMode { get; set; }

        /// <summary>
        /// Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
        /// </summary>
        [Input("increaseAccessSpeed")]
        public Input<bool>? IncreaseAccessSpeed { get; set; }

        /// <summary>
        /// Name of the access policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Object for RADIUS Settings
        /// </summary>
        [Input("radius")]
        public Input<Inputs.SwitchAccessPoliciesRadiusGetArgs>? Radius { get; set; }

        /// <summary>
        /// Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
        /// </summary>
        [Input("radiusAccountingEnabled")]
        public Input<bool>? RadiusAccountingEnabled { get; set; }

        [Input("radiusAccountingServers")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerGetArgs>? _radiusAccountingServers;

        /// <summary>
        /// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerGetArgs> RadiusAccountingServers
        {
            get => _radiusAccountingServers ?? (_radiusAccountingServers = new InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServerGetArgs>());
            set => _radiusAccountingServers = value;
        }

        [Input("radiusAccountingServersResponses")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServersResponseGetArgs>? _radiusAccountingServersResponses;

        /// <summary>
        /// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServersResponseGetArgs> RadiusAccountingServersResponses
        {
            get => _radiusAccountingServersResponses ?? (_radiusAccountingServersResponses = new InputList<Inputs.SwitchAccessPoliciesRadiusAccountingServersResponseGetArgs>());
            set => _radiusAccountingServersResponses = value;
        }

        /// <summary>
        /// Change of authentication for RADIUS re-authentication and disconnection
        /// </summary>
        [Input("radiusCoaSupportEnabled")]
        public Input<bool>? RadiusCoaSupportEnabled { get; set; }

        /// <summary>
        /// Acceptable values are *""* for None, or *"11"* for Group Policies ACL
        /// </summary>
        [Input("radiusGroupAttribute")]
        public Input<string>? RadiusGroupAttribute { get; set; }

        [Input("radiusServers")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusServerGetArgs>? _radiusServers;

        /// <summary>
        /// List of RADIUS servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusServerGetArgs> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<Inputs.SwitchAccessPoliciesRadiusServerGetArgs>());
            set => _radiusServers = value;
        }

        [Input("radiusServersResponses")]
        private InputList<Inputs.SwitchAccessPoliciesRadiusServersResponseGetArgs>? _radiusServersResponses;

        /// <summary>
        /// List of RADIUS servers to require connecting devices to authenticate against before granting network access
        /// </summary>
        public InputList<Inputs.SwitchAccessPoliciesRadiusServersResponseGetArgs> RadiusServersResponses
        {
            get => _radiusServersResponses ?? (_radiusServersResponses = new InputList<Inputs.SwitchAccessPoliciesRadiusServersResponseGetArgs>());
            set => _radiusServersResponses = value;
        }

        /// <summary>
        /// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
        /// </summary>
        [Input("radiusTestingEnabled")]
        public Input<bool>? RadiusTestingEnabled { get; set; }

        /// <summary>
        /// Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
        /// </summary>
        [Input("urlRedirectWalledGardenEnabled")]
        public Input<bool>? UrlRedirectWalledGardenEnabled { get; set; }

        [Input("urlRedirectWalledGardenRanges")]
        private InputList<string>? _urlRedirectWalledGardenRanges;

        /// <summary>
        /// IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
        /// </summary>
        public InputList<string> UrlRedirectWalledGardenRanges
        {
            get => _urlRedirectWalledGardenRanges ?? (_urlRedirectWalledGardenRanges = new InputList<string>());
            set => _urlRedirectWalledGardenRanges = value;
        }

        /// <summary>
        /// CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
        /// </summary>
        [Input("voiceVlanClients")]
        public Input<bool>? VoiceVlanClients { get; set; }

        public SwitchAccessPoliciesState()
        {
        }
        public static new SwitchAccessPoliciesState Empty => new SwitchAccessPoliciesState();
    }
}
