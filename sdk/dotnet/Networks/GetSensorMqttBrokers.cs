// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetSensorMqttBrokers
    {
        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Task<GetSensorMqttBrokersResult> InvokeAsync(GetSensorMqttBrokersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSensorMqttBrokersResult>("meraki:networks/getSensorMqttBrokers:getSensorMqttBrokers", args ?? new GetSensorMqttBrokersArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetSensorMqttBrokersResult> Invoke(GetSensorMqttBrokersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensorMqttBrokersResult>("meraki:networks/getSensorMqttBrokers:getSensorMqttBrokers", args ?? new GetSensorMqttBrokersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetSensorMqttBrokersResult> Invoke(GetSensorMqttBrokersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSensorMqttBrokersResult>("meraki:networks/getSensorMqttBrokers:getSensorMqttBrokers", args ?? new GetSensorMqttBrokersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSensorMqttBrokersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// mqttBrokerId path parameter. Mqtt broker ID
        /// </summary>
        [Input("mqttBrokerId")]
        public string? MqttBrokerId { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public string? NetworkId { get; set; }

        public GetSensorMqttBrokersArgs()
        {
        }
        public static new GetSensorMqttBrokersArgs Empty => new GetSensorMqttBrokersArgs();
    }

    public sealed class GetSensorMqttBrokersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// mqttBrokerId path parameter. Mqtt broker ID
        /// </summary>
        [Input("mqttBrokerId")]
        public Input<string>? MqttBrokerId { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        public GetSensorMqttBrokersInvokeArgs()
        {
        }
        public static new GetSensorMqttBrokersInvokeArgs Empty => new GetSensorMqttBrokersInvokeArgs();
    }


    [OutputType]
    public sealed class GetSensorMqttBrokersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetSensorMqttBrokersItemResult Item;
        /// <summary>
        /// Array of ResponseSensorGetNetworkSensorMqttBrokers
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSensorMqttBrokersItemResult> Items;
        /// <summary>
        /// mqttBrokerId path parameter. Mqtt broker ID
        /// </summary>
        public readonly string? MqttBrokerId;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string? NetworkId;

        [OutputConstructor]
        private GetSensorMqttBrokersResult(
            string id,

            Outputs.GetSensorMqttBrokersItemResult item,

            ImmutableArray<Outputs.GetSensorMqttBrokersItemResult> items,

            string? mqttBrokerId,

            string? networkId)
        {
            Id = id;
            Item = item;
            Items = items;
            MqttBrokerId = mqttBrokerId;
            NetworkId = networkId;
        }
    }
}
