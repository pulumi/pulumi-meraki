// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.ApplianceWarmSpare("example", new()
    ///     {
    ///         Enabled = true,
    ///         NetworkId = "string",
    ///         SpareSerial = "Q234-ABCD-5678",
    ///         UplinkMode = "virtual",
    ///         VirtualIp1 = "1.2.3.4",
    ///         VirtualIp2 = "1.2.3.4",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksApplianceWarmSpareExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/applianceWarmSpare:ApplianceWarmSpare example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/applianceWarmSpare:ApplianceWarmSpare")]
    public partial class ApplianceWarmSpare : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable warm spare
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        [Output("primarySerial")]
        public Output<string> PrimarySerial { get; private set; } = null!;

        /// <summary>
        /// Serial number of the warm spare appliance
        /// </summary>
        [Output("spareSerial")]
        public Output<string> SpareSerial { get; private set; } = null!;

        /// <summary>
        /// Uplink mode, either virtual or public
        /// </summary>
        [Output("uplinkMode")]
        public Output<string> UplinkMode { get; private set; } = null!;

        /// <summary>
        /// The WAN 1 shared IP
        /// </summary>
        [Output("virtualIp1")]
        public Output<string> VirtualIp1 { get; private set; } = null!;

        /// <summary>
        /// The WAN 2 shared IP
        /// </summary>
        [Output("virtualIp2")]
        public Output<string> VirtualIp2 { get; private set; } = null!;

        [Output("wan1")]
        public Output<Outputs.ApplianceWarmSpareWan1> Wan1 { get; private set; } = null!;

        [Output("wan2")]
        public Output<Outputs.ApplianceWarmSpareWan2> Wan2 { get; private set; } = null!;


        /// <summary>
        /// Create a ApplianceWarmSpare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplianceWarmSpare(string name, ApplianceWarmSpareArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceWarmSpare:ApplianceWarmSpare", name, args ?? new ApplianceWarmSpareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplianceWarmSpare(string name, Input<string> id, ApplianceWarmSpareState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/applianceWarmSpare:ApplianceWarmSpare", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplianceWarmSpare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplianceWarmSpare Get(string name, Input<string> id, ApplianceWarmSpareState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplianceWarmSpare(name, id, state, options);
        }
    }

    public sealed class ApplianceWarmSpareArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable warm spare
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// Serial number of the warm spare appliance
        /// </summary>
        [Input("spareSerial")]
        public Input<string>? SpareSerial { get; set; }

        /// <summary>
        /// Uplink mode, either virtual or public
        /// </summary>
        [Input("uplinkMode")]
        public Input<string>? UplinkMode { get; set; }

        /// <summary>
        /// The WAN 1 shared IP
        /// </summary>
        [Input("virtualIp1")]
        public Input<string>? VirtualIp1 { get; set; }

        /// <summary>
        /// The WAN 2 shared IP
        /// </summary>
        [Input("virtualIp2")]
        public Input<string>? VirtualIp2 { get; set; }

        public ApplianceWarmSpareArgs()
        {
        }
        public static new ApplianceWarmSpareArgs Empty => new ApplianceWarmSpareArgs();
    }

    public sealed class ApplianceWarmSpareState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable warm spare
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("primarySerial")]
        public Input<string>? PrimarySerial { get; set; }

        /// <summary>
        /// Serial number of the warm spare appliance
        /// </summary>
        [Input("spareSerial")]
        public Input<string>? SpareSerial { get; set; }

        /// <summary>
        /// Uplink mode, either virtual or public
        /// </summary>
        [Input("uplinkMode")]
        public Input<string>? UplinkMode { get; set; }

        /// <summary>
        /// The WAN 1 shared IP
        /// </summary>
        [Input("virtualIp1")]
        public Input<string>? VirtualIp1 { get; set; }

        /// <summary>
        /// The WAN 2 shared IP
        /// </summary>
        [Input("virtualIp2")]
        public Input<string>? VirtualIp2 { get; set; }

        [Input("wan1")]
        public Input<Inputs.ApplianceWarmSpareWan1GetArgs>? Wan1 { get; set; }

        [Input("wan2")]
        public Input<Inputs.ApplianceWarmSpareWan2GetArgs>? Wan2 { get; set; }

        public ApplianceWarmSpareState()
        {
        }
        public static new ApplianceWarmSpareState Empty => new ApplianceWarmSpareState();
    }
}
