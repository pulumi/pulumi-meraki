// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.SwitchDhcpServerPolicy("example", new()
    ///     {
    ///         Alerts = new Meraki.Networks.Inputs.SwitchDhcpServerPolicyAlertsArgs
    ///         {
    ///             Email = new Meraki.Networks.Inputs.SwitchDhcpServerPolicyAlertsEmailArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         AllowedServers = new[]
    ///         {
    ///             "00:50:56:00:00:01",
    ///             "00:50:56:00:00:02",
    ///         },
    ///         ArpInspection = new Meraki.Networks.Inputs.SwitchDhcpServerPolicyArpInspectionArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///         BlockedServers = new[]
    ///         {
    ///             "00:50:56:00:00:03",
    ///             "00:50:56:00:00:04",
    ///         },
    ///         DefaultPolicy = "block",
    ///         NetworkId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksSwitchDhcpServerPolicyExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy example "network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy")]
    public partial class SwitchDhcpServerPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Email alert settings for DHCP servers
        /// </summary>
        [Output("alerts")]
        public Output<Outputs.SwitchDhcpServerPolicyAlerts> Alerts { get; private set; } = null!;

        /// <summary>
        /// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
        ///   to block.An empty array will clear the entries.
        /// </summary>
        [Output("allowedServers")]
        public Output<ImmutableArray<string>> AllowedServers { get; private set; } = null!;

        /// <summary>
        /// Dynamic ARP Inspection settings
        /// </summary>
        [Output("arpInspection")]
        public Output<Outputs.SwitchDhcpServerPolicyArpInspection> ArpInspection { get; private set; } = null!;

        /// <summary>
        /// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
        ///   to allow.An empty array will clear the entries.
        /// </summary>
        [Output("blockedServers")]
        public Output<ImmutableArray<string>> BlockedServers { get; private set; } = null!;

        /// <summary>
        /// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
        /// </summary>
        [Output("defaultPolicy")]
        public Output<string> DefaultPolicy { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchDhcpServerPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchDhcpServerPolicy(string name, SwitchDhcpServerPolicyArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy", name, args ?? new SwitchDhcpServerPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchDhcpServerPolicy(string name, Input<string> id, SwitchDhcpServerPolicyState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/switchDhcpServerPolicy:SwitchDhcpServerPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchDhcpServerPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchDhcpServerPolicy Get(string name, Input<string> id, SwitchDhcpServerPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchDhcpServerPolicy(name, id, state, options);
        }
    }

    public sealed class SwitchDhcpServerPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email alert settings for DHCP servers
        /// </summary>
        [Input("alerts")]
        public Input<Inputs.SwitchDhcpServerPolicyAlertsArgs>? Alerts { get; set; }

        [Input("allowedServers")]
        private InputList<string>? _allowedServers;

        /// <summary>
        /// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
        ///   to block.An empty array will clear the entries.
        /// </summary>
        public InputList<string> AllowedServers
        {
            get => _allowedServers ?? (_allowedServers = new InputList<string>());
            set => _allowedServers = value;
        }

        /// <summary>
        /// Dynamic ARP Inspection settings
        /// </summary>
        [Input("arpInspection")]
        public Input<Inputs.SwitchDhcpServerPolicyArpInspectionArgs>? ArpInspection { get; set; }

        [Input("blockedServers")]
        private InputList<string>? _blockedServers;

        /// <summary>
        /// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
        ///   to allow.An empty array will clear the entries.
        /// </summary>
        public InputList<string> BlockedServers
        {
            get => _blockedServers ?? (_blockedServers = new InputList<string>());
            set => _blockedServers = value;
        }

        /// <summary>
        /// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
        /// </summary>
        [Input("defaultPolicy")]
        public Input<string>? DefaultPolicy { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        public SwitchDhcpServerPolicyArgs()
        {
        }
        public static new SwitchDhcpServerPolicyArgs Empty => new SwitchDhcpServerPolicyArgs();
    }

    public sealed class SwitchDhcpServerPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email alert settings for DHCP servers
        /// </summary>
        [Input("alerts")]
        public Input<Inputs.SwitchDhcpServerPolicyAlertsGetArgs>? Alerts { get; set; }

        [Input("allowedServers")]
        private InputList<string>? _allowedServers;

        /// <summary>
        /// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set
        ///   to block.An empty array will clear the entries.
        /// </summary>
        public InputList<string> AllowedServers
        {
            get => _allowedServers ?? (_allowedServers = new InputList<string>());
            set => _allowedServers = value;
        }

        /// <summary>
        /// Dynamic ARP Inspection settings
        /// </summary>
        [Input("arpInspection")]
        public Input<Inputs.SwitchDhcpServerPolicyArpInspectionGetArgs>? ArpInspection { get; set; }

        [Input("blockedServers")]
        private InputList<string>? _blockedServers;

        /// <summary>
        /// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set
        ///   to allow.An empty array will clear the entries.
        /// </summary>
        public InputList<string> BlockedServers
        {
            get => _blockedServers ?? (_blockedServers = new InputList<string>());
            set => _blockedServers = value;
        }

        /// <summary>
        /// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
        /// </summary>
        [Input("defaultPolicy")]
        public Input<string>? DefaultPolicy { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        public SwitchDhcpServerPolicyState()
        {
        }
        public static new SwitchDhcpServerPolicyState Empty => new SwitchDhcpServerPolicyState();
    }
}
