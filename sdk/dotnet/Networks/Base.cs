// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.Base("example", new()
    ///     {
    ///         Name = "Main Office",
    ///         Notes = "Additional description of the network",
    ///         OrganizationId = "string",
    ///         ProductTypes = new[]
    ///         {
    ///             "appliance",
    ///             "switch",
    ///             "wireless",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "tag1",
    ///             "tag2",
    ///         },
    ///         TimeZone = "America/Los_Angeles",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/base:base example "network_id,organization_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/base:base")]
    public partial class Base : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enrollment string for the network
        /// </summary>
        [Output("enrollmentString")]
        public Output<string> EnrollmentString { get; private set; } = null!;

        /// <summary>
        /// If the network is bound to a config template
        /// </summary>
        [Output("isBoundToConfigTemplate")]
        public Output<bool> IsBoundToConfigTemplate { get; private set; } = null!;

        /// <summary>
        /// Network name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Notes for the network
        /// </summary>
        [Output("notes")]
        public Output<string> Notes { get; private set; } = null!;

        /// <summary>
        /// Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// List of the product types that the network supports
        /// </summary>
        [Output("productTypes")]
        public Output<ImmutableArray<string>> ProductTypes { get; private set; } = null!;

        /// <summary>
        /// Network tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Timezone of the network
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// URL to the network Dashboard UI
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Base resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Base(string name, BaseArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/base:base", name, args ?? new BaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Base(string name, Input<string> id, BaseState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/base:base", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Base resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Base Get(string name, Input<string> id, BaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Base(name, id, state, options);
        }
    }

    public sealed class BaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enrollment string for the network
        /// </summary>
        [Input("enrollmentString")]
        public Input<string>? EnrollmentString { get; set; }

        /// <summary>
        /// Network name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Notes for the network
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("productTypes")]
        private InputList<string>? _productTypes;

        /// <summary>
        /// List of the product types that the network supports
        /// </summary>
        public InputList<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new InputList<string>());
            set => _productTypes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Network tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timezone of the network
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public BaseArgs()
        {
        }
        public static new BaseArgs Empty => new BaseArgs();
    }

    public sealed class BaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enrollment string for the network
        /// </summary>
        [Input("enrollmentString")]
        public Input<string>? EnrollmentString { get; set; }

        /// <summary>
        /// If the network is bound to a config template
        /// </summary>
        [Input("isBoundToConfigTemplate")]
        public Input<bool>? IsBoundToConfigTemplate { get; set; }

        /// <summary>
        /// Network name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Notes for the network
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("productTypes")]
        private InputList<string>? _productTypes;

        /// <summary>
        /// List of the product types that the network supports
        /// </summary>
        public InputList<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new InputList<string>());
            set => _productTypes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Network tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timezone of the network
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// URL to the network Dashboard UI
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public BaseState()
        {
        }
        public static new BaseState Empty => new BaseState();
    }
}
