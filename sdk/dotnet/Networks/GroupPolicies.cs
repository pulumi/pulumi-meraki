// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/groupPolicies:GroupPolicies example "group_policy_id,network_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/groupPolicies:GroupPolicies")]
    public partial class GroupPolicies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The bandwidth settings for clients bound to your group policy.
        /// </summary>
        [Output("bandwidth")]
        public Output<Outputs.GroupPoliciesBandwidth> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
        /// </summary>
        [Output("bonjourForwarding")]
        public Output<Outputs.GroupPoliciesBonjourForwarding> BonjourForwarding { get; private set; } = null!;

        /// <summary>
        /// The content filtering settings for your group policy
        /// </summary>
        [Output("contentFiltering")]
        public Output<Outputs.GroupPoliciesContentFiltering> ContentFiltering { get; private set; } = null!;

        /// <summary>
        /// The firewall and traffic shaping rules and settings for your policy.
        /// </summary>
        [Output("firewallAndTrafficShaping")]
        public Output<Outputs.GroupPoliciesFirewallAndTrafficShaping> FirewallAndTrafficShaping { get; private set; } = null!;

        /// <summary>
        /// The ID of the group policy
        /// </summary>
        [Output("groupPolicyId")]
        public Output<string> GroupPolicyId { get; private set; } = null!;

        /// <summary>
        /// The name for your group policy. Required.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The schedule for the group policy. Schedules are applied to days of the week.
        /// </summary>
        [Output("scheduling")]
        public Output<Outputs.GroupPoliciesScheduling> Scheduling { get; private set; } = null!;

        /// <summary>
        /// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
        /// </summary>
        [Output("splashAuthSettings")]
        public Output<string> SplashAuthSettings { get; private set; } = null!;

        /// <summary>
        /// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
        /// </summary>
        [Output("vlanTagging")]
        public Output<Outputs.GroupPoliciesVlanTagging> VlanTagging { get; private set; } = null!;


        /// <summary>
        /// Create a GroupPolicies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupPolicies(string name, GroupPoliciesArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/groupPolicies:GroupPolicies", name, args ?? new GroupPoliciesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupPolicies(string name, Input<string> id, GroupPoliciesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/groupPolicies:GroupPolicies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupPolicies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupPolicies Get(string name, Input<string> id, GroupPoliciesState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupPolicies(name, id, state, options);
        }
    }

    public sealed class GroupPoliciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bandwidth settings for clients bound to your group policy.
        /// </summary>
        [Input("bandwidth")]
        public Input<Inputs.GroupPoliciesBandwidthArgs>? Bandwidth { get; set; }

        /// <summary>
        /// The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
        /// </summary>
        [Input("bonjourForwarding")]
        public Input<Inputs.GroupPoliciesBonjourForwardingArgs>? BonjourForwarding { get; set; }

        /// <summary>
        /// The content filtering settings for your group policy
        /// </summary>
        [Input("contentFiltering")]
        public Input<Inputs.GroupPoliciesContentFilteringArgs>? ContentFiltering { get; set; }

        /// <summary>
        /// The firewall and traffic shaping rules and settings for your policy.
        /// </summary>
        [Input("firewallAndTrafficShaping")]
        public Input<Inputs.GroupPoliciesFirewallAndTrafficShapingArgs>? FirewallAndTrafficShaping { get; set; }

        /// <summary>
        /// The name for your group policy. Required.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The schedule for the group policy. Schedules are applied to days of the week.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.GroupPoliciesSchedulingArgs>? Scheduling { get; set; }

        /// <summary>
        /// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
        /// </summary>
        [Input("splashAuthSettings")]
        public Input<string>? SplashAuthSettings { get; set; }

        /// <summary>
        /// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
        /// </summary>
        [Input("vlanTagging")]
        public Input<Inputs.GroupPoliciesVlanTaggingArgs>? VlanTagging { get; set; }

        public GroupPoliciesArgs()
        {
        }
        public static new GroupPoliciesArgs Empty => new GroupPoliciesArgs();
    }

    public sealed class GroupPoliciesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bandwidth settings for clients bound to your group policy.
        /// </summary>
        [Input("bandwidth")]
        public Input<Inputs.GroupPoliciesBandwidthGetArgs>? Bandwidth { get; set; }

        /// <summary>
        /// The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
        /// </summary>
        [Input("bonjourForwarding")]
        public Input<Inputs.GroupPoliciesBonjourForwardingGetArgs>? BonjourForwarding { get; set; }

        /// <summary>
        /// The content filtering settings for your group policy
        /// </summary>
        [Input("contentFiltering")]
        public Input<Inputs.GroupPoliciesContentFilteringGetArgs>? ContentFiltering { get; set; }

        /// <summary>
        /// The firewall and traffic shaping rules and settings for your policy.
        /// </summary>
        [Input("firewallAndTrafficShaping")]
        public Input<Inputs.GroupPoliciesFirewallAndTrafficShapingGetArgs>? FirewallAndTrafficShaping { get; set; }

        /// <summary>
        /// The ID of the group policy
        /// </summary>
        [Input("groupPolicyId")]
        public Input<string>? GroupPolicyId { get; set; }

        /// <summary>
        /// The name for your group policy. Required.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The schedule for the group policy. Schedules are applied to days of the week.
        /// </summary>
        [Input("scheduling")]
        public Input<Inputs.GroupPoliciesSchedulingGetArgs>? Scheduling { get; set; }

        /// <summary>
        /// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
        /// </summary>
        [Input("splashAuthSettings")]
        public Input<string>? SplashAuthSettings { get; set; }

        /// <summary>
        /// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
        /// </summary>
        [Input("vlanTagging")]
        public Input<Inputs.GroupPoliciesVlanTaggingGetArgs>? VlanTagging { get; set; }

        public GroupPoliciesState()
        {
        }
        public static new GroupPoliciesState Empty => new GroupPoliciesState();
    }
}
