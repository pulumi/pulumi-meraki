// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Networks.AppliancePorts("example", new()
    ///     {
    ///         AccessPolicy = "open",
    ///         AllowedVlans = "all",
    ///         DropUntaggedTraffic = false,
    ///         Enabled = true,
    ///         NetworkId = "string",
    ///         PortId = "string",
    ///         Type = "access",
    ///         Vlan = 3,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiNetworksAppliancePortsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/appliancePorts:AppliancePorts example "network_id,port_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/appliancePorts:AppliancePorts")]
    public partial class AppliancePorts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the policy. Only applicable to Access ports.
        /// </summary>
        [Output("accessPolicy")]
        public Output<string> AccessPolicy { get; private set; } = null!;

        /// <summary>
        /// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
        /// </summary>
        [Output("allowedVlans")]
        public Output<string> AllowedVlans { get; private set; } = null!;

        /// <summary>
        /// Whether the trunk port can drop all untagged traffic.
        /// </summary>
        [Output("dropUntaggedTraffic")]
        public Output<bool> DropUntaggedTraffic { get; private set; } = null!;

        /// <summary>
        /// The status of the port
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Number of the port
        /// </summary>
        [Output("number")]
        public Output<int> Number { get; private set; } = null!;

        /// <summary>
        /// portId path parameter. Port ID
        /// </summary>
        [Output("portId")]
        public Output<string> PortId { get; private set; } = null!;

        /// <summary>
        /// The type of the port: 'access' or 'trunk'.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
        /// </summary>
        [Output("vlan")]
        public Output<int> Vlan { get; private set; } = null!;


        /// <summary>
        /// Create a AppliancePorts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppliancePorts(string name, AppliancePortsArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/appliancePorts:AppliancePorts", name, args ?? new AppliancePortsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppliancePorts(string name, Input<string> id, AppliancePortsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/appliancePorts:AppliancePorts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppliancePorts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppliancePorts Get(string name, Input<string> id, AppliancePortsState? state = null, CustomResourceOptions? options = null)
        {
            return new AppliancePorts(name, id, state, options);
        }
    }

    public sealed class AppliancePortsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the policy. Only applicable to Access ports.
        /// </summary>
        [Input("accessPolicy")]
        public Input<string>? AccessPolicy { get; set; }

        /// <summary>
        /// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// Whether the trunk port can drop all untagged traffic.
        /// </summary>
        [Input("dropUntaggedTraffic")]
        public Input<bool>? DropUntaggedTraffic { get; set; }

        /// <summary>
        /// The status of the port
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// portId path parameter. Port ID
        /// </summary>
        [Input("portId", required: true)]
        public Input<string> PortId { get; set; } = null!;

        /// <summary>
        /// The type of the port: 'access' or 'trunk'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        public AppliancePortsArgs()
        {
        }
        public static new AppliancePortsArgs Empty => new AppliancePortsArgs();
    }

    public sealed class AppliancePortsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the policy. Only applicable to Access ports.
        /// </summary>
        [Input("accessPolicy")]
        public Input<string>? AccessPolicy { get; set; }

        /// <summary>
        /// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// Whether the trunk port can drop all untagged traffic.
        /// </summary>
        [Input("dropUntaggedTraffic")]
        public Input<bool>? DropUntaggedTraffic { get; set; }

        /// <summary>
        /// The status of the port
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Number of the port
        /// </summary>
        [Input("number")]
        public Input<int>? Number { get; set; }

        /// <summary>
        /// portId path parameter. Port ID
        /// </summary>
        [Input("portId")]
        public Input<string>? PortId { get; set; }

        /// <summary>
        /// The type of the port: 'access' or 'trunk'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        public AppliancePortsState()
        {
        }
        public static new AppliancePortsState Empty => new AppliancePortsState();
    }
}
