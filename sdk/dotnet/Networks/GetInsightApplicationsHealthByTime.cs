// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    public static class GetInsightApplicationsHealthByTime
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetInsightApplicationsHealthByTime.Invoke(new()
        ///     {
        ///         ApplicationId = "string",
        ///         NetworkId = "string",
        ///         Resolution = 1,
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksInsightApplicationsHealthByTimeExample"] = example.Apply(getInsightApplicationsHealthByTimeResult =&gt; getInsightApplicationsHealthByTimeResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetInsightApplicationsHealthByTimeResult> InvokeAsync(GetInsightApplicationsHealthByTimeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInsightApplicationsHealthByTimeResult>("meraki:networks/getInsightApplicationsHealthByTime:getInsightApplicationsHealthByTime", args ?? new GetInsightApplicationsHealthByTimeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetInsightApplicationsHealthByTime.Invoke(new()
        ///     {
        ///         ApplicationId = "string",
        ///         NetworkId = "string",
        ///         Resolution = 1,
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksInsightApplicationsHealthByTimeExample"] = example.Apply(getInsightApplicationsHealthByTimeResult =&gt; getInsightApplicationsHealthByTimeResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetInsightApplicationsHealthByTimeResult> Invoke(GetInsightApplicationsHealthByTimeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInsightApplicationsHealthByTimeResult>("meraki:networks/getInsightApplicationsHealthByTime:getInsightApplicationsHealthByTime", args ?? new GetInsightApplicationsHealthByTimeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Networks.GetInsightApplicationsHealthByTime.Invoke(new()
        ///     {
        ///         ApplicationId = "string",
        ///         NetworkId = "string",
        ///         Resolution = 1,
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiNetworksInsightApplicationsHealthByTimeExample"] = example.Apply(getInsightApplicationsHealthByTimeResult =&gt; getInsightApplicationsHealthByTimeResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetInsightApplicationsHealthByTimeResult> Invoke(GetInsightApplicationsHealthByTimeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInsightApplicationsHealthByTimeResult>("meraki:networks/getInsightApplicationsHealthByTime:getInsightApplicationsHealthByTime", args ?? new GetInsightApplicationsHealthByTimeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInsightApplicationsHealthByTimeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// applicationId path parameter. Application ID
        /// </summary>
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public string NetworkId { get; set; } = null!;

        /// <summary>
        /// resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300.
        /// </summary>
        [Input("resolution")]
        public int? Resolution { get; set; }

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
        /// </summary>
        [Input("t0")]
        public string? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        /// </summary>
        [Input("t1")]
        public string? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
        /// </summary>
        [Input("timespan")]
        public double? Timespan { get; set; }

        public GetInsightApplicationsHealthByTimeArgs()
        {
        }
        public static new GetInsightApplicationsHealthByTimeArgs Empty => new GetInsightApplicationsHealthByTimeArgs();
    }

    public sealed class GetInsightApplicationsHealthByTimeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// applicationId path parameter. Application ID
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300.
        /// </summary>
        [Input("resolution")]
        public Input<int>? Resolution { get; set; }

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
        /// </summary>
        [Input("t0")]
        public Input<string>? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        /// </summary>
        [Input("t1")]
        public Input<string>? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
        /// </summary>
        [Input("timespan")]
        public Input<double>? Timespan { get; set; }

        public GetInsightApplicationsHealthByTimeInvokeArgs()
        {
        }
        public static new GetInsightApplicationsHealthByTimeInvokeArgs Empty => new GetInsightApplicationsHealthByTimeInvokeArgs();
    }


    [OutputType]
    public sealed class GetInsightApplicationsHealthByTimeResult
    {
        /// <summary>
        /// applicationId path parameter. Application ID
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseInsightGetNetworkInsightApplicationHealthByTime
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInsightApplicationsHealthByTimeItemResult> Items;
        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// resolution query parameter. The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 3600, 86400. The default is 300.
        /// </summary>
        public readonly int? Resolution;
        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
        /// </summary>
        public readonly string? T0;
        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 7 days after t0.
        /// </summary>
        public readonly string? T1;
        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days. The default is 2 hours.
        /// </summary>
        public readonly double? Timespan;

        [OutputConstructor]
        private GetInsightApplicationsHealthByTimeResult(
            string applicationId,

            string id,

            ImmutableArray<Outputs.GetInsightApplicationsHealthByTimeItemResult> items,

            string networkId,

            int? resolution,

            string? t0,

            string? t1,

            double? timespan)
        {
            ApplicationId = applicationId;
            Id = id;
            Items = items;
            NetworkId = networkId;
            Resolution = resolution;
            T0 = t0;
            T1 = t1;
            Timespan = timespan;
        }
    }
}
