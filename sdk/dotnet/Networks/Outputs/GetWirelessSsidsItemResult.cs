// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks.Outputs
{

    [OutputType]
    public sealed class GetWirelessSsidsItemResult
    {
        /// <summary>
        /// URL for the admin splash page
        /// </summary>
        public readonly string AdminSplashUrl;
        /// <summary>
        /// The association control method for the SSID
        /// </summary>
        public readonly string AuthMode;
        /// <summary>
        /// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityTags;
        /// <summary>
        /// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
        /// </summary>
        public readonly bool AvailableOnAllAps;
        /// <summary>
        /// The client-serving radio frequencies of this SSID in the default indoor RF profile
        /// </summary>
        public readonly string BandSelection;
        /// <summary>
        /// Whether or not the SSID is enabled
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The psk encryption mode for the SSID
        /// </summary>
        public readonly string EncryptionMode;
        /// <summary>
        /// The client IP assignment mode
        /// </summary>
        public readonly string IpAssignmentMode;
        /// <summary>
        /// Extended local auth flag for Enterprise NAC
        /// </summary>
        public readonly bool LocalAuth;
        /// <summary>
        /// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
        /// </summary>
        public readonly bool MandatoryDhcpEnabled;
        /// <summary>
        /// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
        /// </summary>
        public readonly int MinBitrate;
        /// <summary>
        /// The name of the SSID
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Unique identifier of the SSID
        /// </summary>
        public readonly int Number;
        /// <summary>
        /// The download bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        public readonly int PerClientBandwidthLimitDown;
        /// <summary>
        /// The upload bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        public readonly int PerClientBandwidthLimitUp;
        /// <summary>
        /// The total download bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        public readonly int PerSsidBandwidthLimitDown;
        /// <summary>
        /// The total upload bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        public readonly int PerSsidBandwidthLimitUp;
        /// <summary>
        /// Whether or not RADIUS accounting is enabled
        /// </summary>
        public readonly bool RadiusAccountingEnabled;
        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWirelessSsidsItemRadiusAccountingServerResult> RadiusAccountingServers;
        /// <summary>
        /// RADIUS attribute used to look up group policies
        /// </summary>
        public readonly string RadiusAttributeForGroupPolicies;
        /// <summary>
        /// Whether RADIUS authentication is enabled
        /// </summary>
        public readonly bool RadiusEnabled;
        /// <summary>
        /// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
        /// </summary>
        public readonly string RadiusFailoverPolicy;
        /// <summary>
        /// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
        /// </summary>
        public readonly string RadiusLoadBalancingPolicy;
        /// <summary>
        /// List of RADIUS 802.1X servers to be used for authentication
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWirelessSsidsItemRadiusServerResult> RadiusServers;
        /// <summary>
        /// The type of splash page for the SSID
        /// </summary>
        public readonly string SplashPage;
        /// <summary>
        /// Splash page timeout
        /// </summary>
        public readonly string SplashTimeout;
        /// <summary>
        /// SSID Administrator access status
        /// </summary>
        public readonly bool SsidAdminAccessible;
        /// <summary>
        /// Whether the SSID is advertised or hidden by the AP
        /// </summary>
        public readonly bool Visible;
        /// <summary>
        /// Allow users to access a configurable list of IP ranges prior to sign-on
        /// </summary>
        public readonly bool WalledGardenEnabled;
        /// <summary>
        /// Domain names and IP address ranges available in Walled Garden mode
        /// </summary>
        public readonly ImmutableArray<string> WalledGardenRanges;
        /// <summary>
        /// The types of WPA encryption
        /// </summary>
        public readonly string WpaEncryptionMode;

        [OutputConstructor]
        private GetWirelessSsidsItemResult(
            string adminSplashUrl,

            string authMode,

            ImmutableArray<string> availabilityTags,

            bool availableOnAllAps,

            string bandSelection,

            bool enabled,

            string encryptionMode,

            string ipAssignmentMode,

            bool localAuth,

            bool mandatoryDhcpEnabled,

            int minBitrate,

            string name,

            int number,

            int perClientBandwidthLimitDown,

            int perClientBandwidthLimitUp,

            int perSsidBandwidthLimitDown,

            int perSsidBandwidthLimitUp,

            bool radiusAccountingEnabled,

            ImmutableArray<Outputs.GetWirelessSsidsItemRadiusAccountingServerResult> radiusAccountingServers,

            string radiusAttributeForGroupPolicies,

            bool radiusEnabled,

            string radiusFailoverPolicy,

            string radiusLoadBalancingPolicy,

            ImmutableArray<Outputs.GetWirelessSsidsItemRadiusServerResult> radiusServers,

            string splashPage,

            string splashTimeout,

            bool ssidAdminAccessible,

            bool visible,

            bool walledGardenEnabled,

            ImmutableArray<string> walledGardenRanges,

            string wpaEncryptionMode)
        {
            AdminSplashUrl = adminSplashUrl;
            AuthMode = authMode;
            AvailabilityTags = availabilityTags;
            AvailableOnAllAps = availableOnAllAps;
            BandSelection = bandSelection;
            Enabled = enabled;
            EncryptionMode = encryptionMode;
            IpAssignmentMode = ipAssignmentMode;
            LocalAuth = localAuth;
            MandatoryDhcpEnabled = mandatoryDhcpEnabled;
            MinBitrate = minBitrate;
            Name = name;
            Number = number;
            PerClientBandwidthLimitDown = perClientBandwidthLimitDown;
            PerClientBandwidthLimitUp = perClientBandwidthLimitUp;
            PerSsidBandwidthLimitDown = perSsidBandwidthLimitDown;
            PerSsidBandwidthLimitUp = perSsidBandwidthLimitUp;
            RadiusAccountingEnabled = radiusAccountingEnabled;
            RadiusAccountingServers = radiusAccountingServers;
            RadiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
            RadiusEnabled = radiusEnabled;
            RadiusFailoverPolicy = radiusFailoverPolicy;
            RadiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
            RadiusServers = radiusServers;
            SplashPage = splashPage;
            SplashTimeout = splashTimeout;
            SsidAdminAccessible = ssidAdminAccessible;
            Visible = visible;
            WalledGardenEnabled = walledGardenEnabled;
            WalledGardenRanges = walledGardenRanges;
            WpaEncryptionMode = wpaEncryptionMode;
        }
    }
}
