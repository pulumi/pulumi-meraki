// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks.Outputs
{

    [OutputType]
    public sealed class GetSwitchStacksRoutingInterfacesDhcpItemResult
    {
        /// <summary>
        /// The PXE boot server file name for the DHCP server running on the switch stack interface
        /// </summary>
        public readonly string BootFileName;
        /// <summary>
        /// The PXE boot server IP for the DHCP server running on the switch stack interface
        /// </summary>
        public readonly string BootNextServer;
        /// <summary>
        /// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
        /// </summary>
        public readonly bool BootOptionsEnabled;
        /// <summary>
        /// The DHCP lease time config for the dhcp server running on the switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
        /// </summary>
        public readonly string DhcpLeaseTime;
        /// <summary>
        /// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
        /// </summary>
        public readonly string DhcpMode;
        /// <summary>
        /// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemDhcpOptionResult> DhcpOptions;
        /// <summary>
        /// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
        /// </summary>
        public readonly ImmutableArray<string> DhcpRelayServerIps;
        /// <summary>
        /// The DHCP name server IPs when DHCP name server option is 'custom'
        /// </summary>
        public readonly ImmutableArray<string> DnsCustomNameservers;
        /// <summary>
        /// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
        /// </summary>
        public readonly string DnsNameserversOption;
        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignmentResult> FixedIpAssignments;
        /// <summary>
        /// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRangeResult> ReservedIpRanges;

        [OutputConstructor]
        private GetSwitchStacksRoutingInterfacesDhcpItemResult(
            string bootFileName,

            string bootNextServer,

            bool bootOptionsEnabled,

            string dhcpLeaseTime,

            string dhcpMode,

            ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemDhcpOptionResult> dhcpOptions,

            ImmutableArray<string> dhcpRelayServerIps,

            ImmutableArray<string> dnsCustomNameservers,

            string dnsNameserversOption,

            ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemFixedIpAssignmentResult> fixedIpAssignments,

            ImmutableArray<Outputs.GetSwitchStacksRoutingInterfacesDhcpItemReservedIpRangeResult> reservedIpRanges)
        {
            BootFileName = bootFileName;
            BootNextServer = bootNextServer;
            BootOptionsEnabled = bootOptionsEnabled;
            DhcpLeaseTime = dhcpLeaseTime;
            DhcpMode = dhcpMode;
            DhcpOptions = dhcpOptions;
            DhcpRelayServerIps = dhcpRelayServerIps;
            DnsCustomNameservers = dnsCustomNameservers;
            DnsNameserversOption = dnsNameserversOption;
            FixedIpAssignments = fixedIpAssignments;
            ReservedIpRanges = reservedIpRanges;
        }
    }
}
