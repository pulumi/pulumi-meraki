// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks.Outputs
{

    [OutputType]
    public sealed class GetWirelessSettingsItemResult
    {
        /// <summary>
        /// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
        /// </summary>
        public readonly bool Ipv6BridgeEnabled;
        /// <summary>
        /// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
        /// </summary>
        public readonly bool LedLightsOn;
        /// <summary>
        /// Toggle for enabling or disabling location analytics for your network
        /// </summary>
        public readonly bool LocationAnalyticsEnabled;
        /// <summary>
        /// Toggle for enabling or disabling meshing in a network
        /// </summary>
        public readonly bool MeshingEnabled;
        /// <summary>
        /// Named VLAN settings for wireless networks.
        /// </summary>
        public readonly Outputs.GetWirelessSettingsItemNamedVlansResult NamedVlans;
        /// <summary>
        /// Regulatory domain information for this network.
        /// </summary>
        public readonly Outputs.GetWirelessSettingsItemRegulatoryDomainResult RegulatoryDomain;
        /// <summary>
        /// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
        /// </summary>
        public readonly string Upgradestrategy;

        [OutputConstructor]
        private GetWirelessSettingsItemResult(
            bool ipv6BridgeEnabled,

            bool ledLightsOn,

            bool locationAnalyticsEnabled,

            bool meshingEnabled,

            Outputs.GetWirelessSettingsItemNamedVlansResult namedVlans,

            Outputs.GetWirelessSettingsItemRegulatoryDomainResult regulatoryDomain,

            string upgradestrategy)
        {
            Ipv6BridgeEnabled = ipv6BridgeEnabled;
            LedLightsOn = ledLightsOn;
            LocationAnalyticsEnabled = locationAnalyticsEnabled;
            MeshingEnabled = meshingEnabled;
            NamedVlans = namedVlans;
            RegulatoryDomain = regulatoryDomain;
            Upgradestrategy = upgradestrategy;
        }
    }
}
