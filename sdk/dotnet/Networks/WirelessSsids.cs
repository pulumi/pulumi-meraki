// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Networks
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:networks/wirelessSsids:WirelessSsids example "network_id,number"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:networks/wirelessSsids:WirelessSsids")]
    public partial class WirelessSsids : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
        /// </summary>
        [Output("activeDirectory")]
        public Output<Outputs.WirelessSsidsActiveDirectory?> ActiveDirectory { get; private set; } = null!;

        [Output("adminSplashUrl")]
        public Output<string> AdminSplashUrl { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating whether or not adult content will be blocked
        /// </summary>
        [Output("adultContentFilteringEnabled")]
        public Output<bool?> AdultContentFilteringEnabled { get; private set; } = null!;

        /// <summary>
        /// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Output("apTagsAndVlanIds")]
        public Output<ImmutableArray<Outputs.WirelessSsidsApTagsAndVlanId>> ApTagsAndVlanIds { get; private set; } = null!;

        /// <summary>
        /// The association control method for the SSID
        /// </summary>
        [Output("authMode")]
        public Output<string> AuthMode { get; private set; } = null!;

        /// <summary>
        /// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
        /// </summary>
        [Output("availabilityTags")]
        public Output<ImmutableArray<string>> AvailabilityTags { get; private set; } = null!;

        /// <summary>
        /// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
        /// </summary>
        [Output("availableOnAllAps")]
        public Output<bool> AvailableOnAllAps { get; private set; } = null!;

        /// <summary>
        /// The client-serving radio frequencies of this SSID in the default indoor RF profile
        /// </summary>
        [Output("bandSelection")]
        public Output<string> BandSelection { get; private set; } = null!;

        /// <summary>
        /// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
        /// </summary>
        [Output("concentratorNetworkId")]
        public Output<string?> ConcentratorNetworkId { get; private set; } = null!;

        /// <summary>
        /// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Output("defaultVlanId")]
        public Output<int?> DefaultVlanId { get; private set; } = null!;

        /// <summary>
        /// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
        /// </summary>
        [Output("disassociateClientsOnVpnFailover")]
        public Output<bool?> DisassociateClientsOnVpnFailover { get; private set; } = null!;

        /// <summary>
        /// DNS servers rewrite settings
        /// </summary>
        [Output("dnsRewrite")]
        public Output<Outputs.WirelessSsidsDnsRewrite?> DnsRewrite { get; private set; } = null!;

        /// <summary>
        /// The current setting for 802.11r
        /// </summary>
        [Output("dot11r")]
        public Output<Outputs.WirelessSsidsDot11r?> Dot11r { get; private set; } = null!;

        /// <summary>
        /// The current setting for Protected Management Frames (802.11w).
        /// </summary>
        [Output("dot11w")]
        public Output<Outputs.WirelessSsidsDot11w?> Dot11w { get; private set; } = null!;

        /// <summary>
        /// Whether or not the SSID is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The psk encryption mode for the SSID
        /// </summary>
        [Output("encryptionMode")]
        public Output<string> EncryptionMode { get; private set; } = null!;

        /// <summary>
        /// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
        /// </summary>
        [Output("enterpriseAdminAccess")]
        public Output<string?> EnterpriseAdminAccess { get; private set; } = null!;

        /// <summary>
        /// Ethernet over GRE settings
        /// </summary>
        [Output("gre")]
        public Output<Outputs.WirelessSsidsGre?> Gre { get; private set; } = null!;

        /// <summary>
        /// The client IP assignment mode
        /// </summary>
        [Output("ipAssignmentMode")]
        public Output<string> IpAssignmentMode { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
        /// </summary>
        [Output("lanIsolationEnabled")]
        public Output<bool?> LanIsolationEnabled { get; private set; } = null!;

        /// <summary>
        /// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
        /// </summary>
        [Output("ldap")]
        public Output<Outputs.WirelessSsidsLdap?> Ldap { get; private set; } = null!;

        /// <summary>
        /// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
        /// </summary>
        [Output("localRadius")]
        public Output<Outputs.WirelessSsidsLocalRadius?> LocalRadius { get; private set; } = null!;

        /// <summary>
        /// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
        /// </summary>
        [Output("mandatoryDhcpEnabled")]
        public Output<bool> MandatoryDhcpEnabled { get; private set; } = null!;

        /// <summary>
        /// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
        /// </summary>
        [Output("minBitrate")]
        public Output<int> MinBitrate { get; private set; } = null!;

        /// <summary>
        /// The name of the SSID
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Named VLAN settings.
        /// </summary>
        [Output("namedVlans")]
        public Output<Outputs.WirelessSsidsNamedVlans?> NamedVlans { get; private set; } = null!;

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the SSID
        /// </summary>
        [Output("number")]
        public Output<int> Number { get; private set; } = null!;

        /// <summary>
        /// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
        /// </summary>
        [Output("oauth")]
        public Output<Outputs.WirelessSsidsOauth?> Oauth { get; private set; } = null!;

        /// <summary>
        /// The download bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Output("perClientBandwidthLimitDown")]
        public Output<int> PerClientBandwidthLimitDown { get; private set; } = null!;

        /// <summary>
        /// The upload bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Output("perClientBandwidthLimitUp")]
        public Output<int> PerClientBandwidthLimitUp { get; private set; } = null!;

        /// <summary>
        /// The total download bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Output("perSsidBandwidthLimitDown")]
        public Output<int> PerSsidBandwidthLimitDown { get; private set; } = null!;

        /// <summary>
        /// The total upload bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Output("perSsidBandwidthLimitUp")]
        public Output<int> PerSsidBandwidthLimitUp { get; private set; } = null!;

        /// <summary>
        /// The passkey for the SSID. This param is only valid if the authMode is 'psk'
        /// </summary>
        [Output("psk")]
        public Output<string?> Psk { get; private set; } = null!;

        /// <summary>
        /// Whether or not RADIUS accounting is enabled
        /// </summary>
        [Output("radiusAccountingEnabled")]
        public Output<bool> RadiusAccountingEnabled { get; private set; } = null!;

        /// <summary>
        /// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
        /// </summary>
        [Output("radiusAccountingInterimInterval")]
        public Output<int?> RadiusAccountingInterimInterval { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        [Output("radiusAccountingServers")]
        public Output<ImmutableArray<Outputs.WirelessSsidsRadiusAccountingServer>> RadiusAccountingServers { get; private set; } = null!;

        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        [Output("radiusAccountingServersResponses")]
        public Output<ImmutableArray<Outputs.WirelessSsidsRadiusAccountingServersResponse>> RadiusAccountingServersResponses { get; private set; } = null!;

        /// <summary>
        /// RADIUS attribute used to look up group policies
        /// </summary>
        [Output("radiusAttributeForGroupPolicies")]
        public Output<string> RadiusAttributeForGroupPolicies { get; private set; } = null!;

        /// <summary>
        /// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Output("radiusAuthenticationNasId")]
        public Output<string?> RadiusAuthenticationNasId { get; private set; } = null!;

        /// <summary>
        /// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Output("radiusCalledStationId")]
        public Output<string?> RadiusCalledStationId { get; private set; } = null!;

        /// <summary>
        /// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
        /// </summary>
        [Output("radiusCoaEnabled")]
        public Output<bool?> RadiusCoaEnabled { get; private set; } = null!;

        /// <summary>
        /// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
        /// </summary>
        [Output("radiusFailoverPolicy")]
        public Output<string> RadiusFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
        /// </summary>
        [Output("radiusFallbackEnabled")]
        public Output<bool?> RadiusFallbackEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Output("radiusGuestVlanEnabled")]
        public Output<bool?> RadiusGuestVlanEnabled { get; private set; } = null!;

        /// <summary>
        /// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Output("radiusGuestVlanId")]
        public Output<int?> RadiusGuestVlanId { get; private set; } = null!;

        /// <summary>
        /// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
        /// </summary>
        [Output("radiusLoadBalancingPolicy")]
        public Output<string> RadiusLoadBalancingPolicy { get; private set; } = null!;

        /// <summary>
        /// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
        /// </summary>
        [Output("radiusOverride")]
        public Output<bool?> RadiusOverride { get; private set; } = null!;

        /// <summary>
        /// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
        /// </summary>
        [Output("radiusProxyEnabled")]
        public Output<bool?> RadiusProxyEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
        /// </summary>
        [Output("radiusServerAttemptsLimit")]
        public Output<int?> RadiusServerAttemptsLimit { get; private set; } = null!;

        /// <summary>
        /// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
        /// </summary>
        [Output("radiusServerTimeout")]
        public Output<int?> RadiusServerTimeout { get; private set; } = null!;

        /// <summary>
        /// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
        /// </summary>
        [Output("radiusServers")]
        public Output<ImmutableArray<Outputs.WirelessSsidsRadiusServer>> RadiusServers { get; private set; } = null!;

        /// <summary>
        /// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
        /// </summary>
        [Output("radiusServersResponses")]
        public Output<ImmutableArray<Outputs.WirelessSsidsRadiusServersResponse>> RadiusServersResponses { get; private set; } = null!;

        /// <summary>
        /// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
        /// </summary>
        [Output("radiusTestingEnabled")]
        public Output<bool?> RadiusTestingEnabled { get; private set; } = null!;

        /// <summary>
        /// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
        /// </summary>
        [Output("secondaryConcentratorNetworkId")]
        public Output<string?> SecondaryConcentratorNetworkId { get; private set; } = null!;

        /// <summary>
        /// The SpeedBurst setting for this SSID'
        /// </summary>
        [Output("speedBurst")]
        public Output<Outputs.WirelessSsidsSpeedBurst?> SpeedBurst { get; private set; } = null!;

        /// <summary>
        /// Array of valid sponsor email domains for sponsored guest splash type.
        /// </summary>
        [Output("splashGuestSponsorDomains")]
        public Output<ImmutableArray<string>> SplashGuestSponsorDomains { get; private set; } = null!;

        /// <summary>
        /// The type of splash page for the SSID
        /// </summary>
        [Output("splashPage")]
        public Output<string> SplashPage { get; private set; } = null!;

        /// <summary>
        /// Splash page timeout
        /// </summary>
        [Output("splashTimeout")]
        public Output<string> SplashTimeout { get; private set; } = null!;

        /// <summary>
        /// SSID Administrator access status
        /// </summary>
        [Output("ssidAdminAccessible")]
        public Output<bool> SsidAdminAccessible { get; private set; } = null!;

        /// <summary>
        /// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Output("useVlanTagging")]
        public Output<bool?> UseVlanTagging { get; private set; } = null!;

        /// <summary>
        /// Whether the SSID is advertised or hidden by the AP
        /// </summary>
        [Output("visible")]
        public Output<bool> Visible { get; private set; } = null!;

        /// <summary>
        /// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
        /// </summary>
        [Output("vlanId")]
        public Output<int?> VlanId { get; private set; } = null!;

        /// <summary>
        /// Allow users to access a configurable list of IP ranges prior to sign-on
        /// </summary>
        [Output("walledGardenEnabled")]
        public Output<bool?> WalledGardenEnabled { get; private set; } = null!;

        /// <summary>
        /// Domain names and IP address ranges available in Walled Garden mode
        /// </summary>
        [Output("walledGardenRanges")]
        public Output<ImmutableArray<string>> WalledGardenRanges { get; private set; } = null!;

        /// <summary>
        /// The types of WPA encryption
        /// </summary>
        [Output("wpaEncryptionMode")]
        public Output<string> WpaEncryptionMode { get; private set; } = null!;


        /// <summary>
        /// Create a WirelessSsids resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelessSsids(string name, WirelessSsidsArgs args, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsids:WirelessSsids", name, args ?? new WirelessSsidsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelessSsids(string name, Input<string> id, WirelessSsidsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:networks/wirelessSsids:WirelessSsids", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelessSsids resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelessSsids Get(string name, Input<string> id, WirelessSsidsState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelessSsids(name, id, state, options);
        }
    }

    public sealed class WirelessSsidsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
        /// </summary>
        [Input("activeDirectory")]
        public Input<Inputs.WirelessSsidsActiveDirectoryArgs>? ActiveDirectory { get; set; }

        /// <summary>
        /// Boolean indicating whether or not adult content will be blocked
        /// </summary>
        [Input("adultContentFilteringEnabled")]
        public Input<bool>? AdultContentFilteringEnabled { get; set; }

        [Input("apTagsAndVlanIds")]
        private InputList<Inputs.WirelessSsidsApTagsAndVlanIdArgs>? _apTagsAndVlanIds;

        /// <summary>
        /// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        public InputList<Inputs.WirelessSsidsApTagsAndVlanIdArgs> ApTagsAndVlanIds
        {
            get => _apTagsAndVlanIds ?? (_apTagsAndVlanIds = new InputList<Inputs.WirelessSsidsApTagsAndVlanIdArgs>());
            set => _apTagsAndVlanIds = value;
        }

        /// <summary>
        /// The association control method for the SSID
        /// </summary>
        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        [Input("availabilityTags")]
        private InputList<string>? _availabilityTags;

        /// <summary>
        /// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
        /// </summary>
        public InputList<string> AvailabilityTags
        {
            get => _availabilityTags ?? (_availabilityTags = new InputList<string>());
            set => _availabilityTags = value;
        }

        /// <summary>
        /// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
        /// </summary>
        [Input("availableOnAllAps")]
        public Input<bool>? AvailableOnAllAps { get; set; }

        /// <summary>
        /// The client-serving radio frequencies of this SSID in the default indoor RF profile
        /// </summary>
        [Input("bandSelection")]
        public Input<string>? BandSelection { get; set; }

        /// <summary>
        /// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
        /// </summary>
        [Input("concentratorNetworkId")]
        public Input<string>? ConcentratorNetworkId { get; set; }

        /// <summary>
        /// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Input("defaultVlanId")]
        public Input<int>? DefaultVlanId { get; set; }

        /// <summary>
        /// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
        /// </summary>
        [Input("disassociateClientsOnVpnFailover")]
        public Input<bool>? DisassociateClientsOnVpnFailover { get; set; }

        /// <summary>
        /// DNS servers rewrite settings
        /// </summary>
        [Input("dnsRewrite")]
        public Input<Inputs.WirelessSsidsDnsRewriteArgs>? DnsRewrite { get; set; }

        /// <summary>
        /// The current setting for 802.11r
        /// </summary>
        [Input("dot11r")]
        public Input<Inputs.WirelessSsidsDot11rArgs>? Dot11r { get; set; }

        /// <summary>
        /// The current setting for Protected Management Frames (802.11w).
        /// </summary>
        [Input("dot11w")]
        public Input<Inputs.WirelessSsidsDot11wArgs>? Dot11w { get; set; }

        /// <summary>
        /// Whether or not the SSID is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The psk encryption mode for the SSID
        /// </summary>
        [Input("encryptionMode")]
        public Input<string>? EncryptionMode { get; set; }

        /// <summary>
        /// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
        /// </summary>
        [Input("enterpriseAdminAccess")]
        public Input<string>? EnterpriseAdminAccess { get; set; }

        /// <summary>
        /// Ethernet over GRE settings
        /// </summary>
        [Input("gre")]
        public Input<Inputs.WirelessSsidsGreArgs>? Gre { get; set; }

        /// <summary>
        /// The client IP assignment mode
        /// </summary>
        [Input("ipAssignmentMode")]
        public Input<string>? IpAssignmentMode { get; set; }

        /// <summary>
        /// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
        /// </summary>
        [Input("lanIsolationEnabled")]
        public Input<bool>? LanIsolationEnabled { get; set; }

        /// <summary>
        /// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
        /// </summary>
        [Input("ldap")]
        public Input<Inputs.WirelessSsidsLdapArgs>? Ldap { get; set; }

        /// <summary>
        /// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
        /// </summary>
        [Input("localRadius")]
        public Input<Inputs.WirelessSsidsLocalRadiusArgs>? LocalRadius { get; set; }

        /// <summary>
        /// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
        /// </summary>
        [Input("mandatoryDhcpEnabled")]
        public Input<bool>? MandatoryDhcpEnabled { get; set; }

        /// <summary>
        /// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
        /// </summary>
        [Input("minBitrate")]
        public Input<int>? MinBitrate { get; set; }

        /// <summary>
        /// The name of the SSID
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Named VLAN settings.
        /// </summary>
        [Input("namedVlans")]
        public Input<Inputs.WirelessSsidsNamedVlansArgs>? NamedVlans { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the SSID
        /// </summary>
        [Input("number", required: true)]
        public Input<int> Number { get; set; } = null!;

        /// <summary>
        /// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
        /// </summary>
        [Input("oauth")]
        public Input<Inputs.WirelessSsidsOauthArgs>? Oauth { get; set; }

        /// <summary>
        /// The download bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Input("perClientBandwidthLimitDown")]
        public Input<int>? PerClientBandwidthLimitDown { get; set; }

        /// <summary>
        /// The upload bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Input("perClientBandwidthLimitUp")]
        public Input<int>? PerClientBandwidthLimitUp { get; set; }

        /// <summary>
        /// The total download bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Input("perSsidBandwidthLimitDown")]
        public Input<int>? PerSsidBandwidthLimitDown { get; set; }

        /// <summary>
        /// The total upload bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Input("perSsidBandwidthLimitUp")]
        public Input<int>? PerSsidBandwidthLimitUp { get; set; }

        /// <summary>
        /// The passkey for the SSID. This param is only valid if the authMode is 'psk'
        /// </summary>
        [Input("psk")]
        public Input<string>? Psk { get; set; }

        /// <summary>
        /// Whether or not RADIUS accounting is enabled
        /// </summary>
        [Input("radiusAccountingEnabled")]
        public Input<bool>? RadiusAccountingEnabled { get; set; }

        /// <summary>
        /// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
        /// </summary>
        [Input("radiusAccountingInterimInterval")]
        public Input<int>? RadiusAccountingInterimInterval { get; set; }

        [Input("radiusAccountingServers")]
        private InputList<Inputs.WirelessSsidsRadiusAccountingServerArgs>? _radiusAccountingServers;

        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusAccountingServerArgs> RadiusAccountingServers
        {
            get => _radiusAccountingServers ?? (_radiusAccountingServers = new InputList<Inputs.WirelessSsidsRadiusAccountingServerArgs>());
            set => _radiusAccountingServers = value;
        }

        /// <summary>
        /// RADIUS attribute used to look up group policies
        /// </summary>
        [Input("radiusAttributeForGroupPolicies")]
        public Input<string>? RadiusAttributeForGroupPolicies { get; set; }

        /// <summary>
        /// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Input("radiusAuthenticationNasId")]
        public Input<string>? RadiusAuthenticationNasId { get; set; }

        /// <summary>
        /// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Input("radiusCalledStationId")]
        public Input<string>? RadiusCalledStationId { get; set; }

        /// <summary>
        /// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
        /// </summary>
        [Input("radiusCoaEnabled")]
        public Input<bool>? RadiusCoaEnabled { get; set; }

        /// <summary>
        /// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
        /// </summary>
        [Input("radiusFailoverPolicy")]
        public Input<string>? RadiusFailoverPolicy { get; set; }

        /// <summary>
        /// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
        /// </summary>
        [Input("radiusFallbackEnabled")]
        public Input<bool>? RadiusFallbackEnabled { get; set; }

        /// <summary>
        /// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Input("radiusGuestVlanEnabled")]
        public Input<bool>? RadiusGuestVlanEnabled { get; set; }

        /// <summary>
        /// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Input("radiusGuestVlanId")]
        public Input<int>? RadiusGuestVlanId { get; set; }

        /// <summary>
        /// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
        /// </summary>
        [Input("radiusLoadBalancingPolicy")]
        public Input<string>? RadiusLoadBalancingPolicy { get; set; }

        /// <summary>
        /// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
        /// </summary>
        [Input("radiusOverride")]
        public Input<bool>? RadiusOverride { get; set; }

        /// <summary>
        /// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
        /// </summary>
        [Input("radiusProxyEnabled")]
        public Input<bool>? RadiusProxyEnabled { get; set; }

        /// <summary>
        /// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
        /// </summary>
        [Input("radiusServerAttemptsLimit")]
        public Input<int>? RadiusServerAttemptsLimit { get; set; }

        /// <summary>
        /// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
        /// </summary>
        [Input("radiusServerTimeout")]
        public Input<int>? RadiusServerTimeout { get; set; }

        [Input("radiusServers")]
        private InputList<Inputs.WirelessSsidsRadiusServerArgs>? _radiusServers;

        /// <summary>
        /// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusServerArgs> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<Inputs.WirelessSsidsRadiusServerArgs>());
            set => _radiusServers = value;
        }

        /// <summary>
        /// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
        /// </summary>
        [Input("radiusTestingEnabled")]
        public Input<bool>? RadiusTestingEnabled { get; set; }

        /// <summary>
        /// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
        /// </summary>
        [Input("secondaryConcentratorNetworkId")]
        public Input<string>? SecondaryConcentratorNetworkId { get; set; }

        /// <summary>
        /// The SpeedBurst setting for this SSID'
        /// </summary>
        [Input("speedBurst")]
        public Input<Inputs.WirelessSsidsSpeedBurstArgs>? SpeedBurst { get; set; }

        [Input("splashGuestSponsorDomains")]
        private InputList<string>? _splashGuestSponsorDomains;

        /// <summary>
        /// Array of valid sponsor email domains for sponsored guest splash type.
        /// </summary>
        public InputList<string> SplashGuestSponsorDomains
        {
            get => _splashGuestSponsorDomains ?? (_splashGuestSponsorDomains = new InputList<string>());
            set => _splashGuestSponsorDomains = value;
        }

        /// <summary>
        /// The type of splash page for the SSID
        /// </summary>
        [Input("splashPage")]
        public Input<string>? SplashPage { get; set; }

        /// <summary>
        /// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Input("useVlanTagging")]
        public Input<bool>? UseVlanTagging { get; set; }

        /// <summary>
        /// Whether the SSID is advertised or hidden by the AP
        /// </summary>
        [Input("visible")]
        public Input<bool>? Visible { get; set; }

        /// <summary>
        /// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Allow users to access a configurable list of IP ranges prior to sign-on
        /// </summary>
        [Input("walledGardenEnabled")]
        public Input<bool>? WalledGardenEnabled { get; set; }

        [Input("walledGardenRanges")]
        private InputList<string>? _walledGardenRanges;

        /// <summary>
        /// Domain names and IP address ranges available in Walled Garden mode
        /// </summary>
        public InputList<string> WalledGardenRanges
        {
            get => _walledGardenRanges ?? (_walledGardenRanges = new InputList<string>());
            set => _walledGardenRanges = value;
        }

        /// <summary>
        /// The types of WPA encryption
        /// </summary>
        [Input("wpaEncryptionMode")]
        public Input<string>? WpaEncryptionMode { get; set; }

        public WirelessSsidsArgs()
        {
        }
        public static new WirelessSsidsArgs Empty => new WirelessSsidsArgs();
    }

    public sealed class WirelessSsidsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The current setting for Active Directory. Only valid if splashPage is 'Password-protected with Active Directory'
        /// </summary>
        [Input("activeDirectory")]
        public Input<Inputs.WirelessSsidsActiveDirectoryGetArgs>? ActiveDirectory { get; set; }

        [Input("adminSplashUrl")]
        public Input<string>? AdminSplashUrl { get; set; }

        /// <summary>
        /// Boolean indicating whether or not adult content will be blocked
        /// </summary>
        [Input("adultContentFilteringEnabled")]
        public Input<bool>? AdultContentFilteringEnabled { get; set; }

        [Input("apTagsAndVlanIds")]
        private InputList<Inputs.WirelessSsidsApTagsAndVlanIdGetArgs>? _apTagsAndVlanIds;

        /// <summary>
        /// The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        public InputList<Inputs.WirelessSsidsApTagsAndVlanIdGetArgs> ApTagsAndVlanIds
        {
            get => _apTagsAndVlanIds ?? (_apTagsAndVlanIds = new InputList<Inputs.WirelessSsidsApTagsAndVlanIdGetArgs>());
            set => _apTagsAndVlanIds = value;
        }

        /// <summary>
        /// The association control method for the SSID
        /// </summary>
        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        [Input("availabilityTags")]
        private InputList<string>? _availabilityTags;

        /// <summary>
        /// List of tags for this SSID. If availableOnAllAps is false, then the SSID is only broadcast by APs with tags matching any of the tags in this list
        /// </summary>
        public InputList<string> AvailabilityTags
        {
            get => _availabilityTags ?? (_availabilityTags = new InputList<string>());
            set => _availabilityTags = value;
        }

        /// <summary>
        /// Whether all APs broadcast the SSID or if it's restricted to APs matching any availability tags
        /// </summary>
        [Input("availableOnAllAps")]
        public Input<bool>? AvailableOnAllAps { get; set; }

        /// <summary>
        /// The client-serving radio frequencies of this SSID in the default indoor RF profile
        /// </summary>
        [Input("bandSelection")]
        public Input<string>? BandSelection { get; set; }

        /// <summary>
        /// The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
        /// </summary>
        [Input("concentratorNetworkId")]
        public Input<string>? ConcentratorNetworkId { get; set; }

        /// <summary>
        /// The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Input("defaultVlanId")]
        public Input<int>? DefaultVlanId { get; set; }

        /// <summary>
        /// Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
        /// </summary>
        [Input("disassociateClientsOnVpnFailover")]
        public Input<bool>? DisassociateClientsOnVpnFailover { get; set; }

        /// <summary>
        /// DNS servers rewrite settings
        /// </summary>
        [Input("dnsRewrite")]
        public Input<Inputs.WirelessSsidsDnsRewriteGetArgs>? DnsRewrite { get; set; }

        /// <summary>
        /// The current setting for 802.11r
        /// </summary>
        [Input("dot11r")]
        public Input<Inputs.WirelessSsidsDot11rGetArgs>? Dot11r { get; set; }

        /// <summary>
        /// The current setting for Protected Management Frames (802.11w).
        /// </summary>
        [Input("dot11w")]
        public Input<Inputs.WirelessSsidsDot11wGetArgs>? Dot11w { get; set; }

        /// <summary>
        /// Whether or not the SSID is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The psk encryption mode for the SSID
        /// </summary>
        [Input("encryptionMode")]
        public Input<string>? EncryptionMode { get; set; }

        /// <summary>
        /// Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
        /// </summary>
        [Input("enterpriseAdminAccess")]
        public Input<string>? EnterpriseAdminAccess { get; set; }

        /// <summary>
        /// Ethernet over GRE settings
        /// </summary>
        [Input("gre")]
        public Input<Inputs.WirelessSsidsGreGetArgs>? Gre { get; set; }

        /// <summary>
        /// The client IP assignment mode
        /// </summary>
        [Input("ipAssignmentMode")]
        public Input<string>? IpAssignmentMode { get; set; }

        /// <summary>
        /// Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
        /// </summary>
        [Input("lanIsolationEnabled")]
        public Input<bool>? LanIsolationEnabled { get; set; }

        /// <summary>
        /// The current setting for LDAP. Only valid if splashPage is 'Password-protected with LDAP'.
        /// </summary>
        [Input("ldap")]
        public Input<Inputs.WirelessSsidsLdapGetArgs>? Ldap { get; set; }

        /// <summary>
        /// The current setting for Local Authentication, a built-in RADIUS server on the access point. Only valid if authMode is '8021x-localradius'.
        /// </summary>
        [Input("localRadius")]
        public Input<Inputs.WirelessSsidsLocalRadiusGetArgs>? LocalRadius { get; set; }

        /// <summary>
        /// Whether clients connecting to this SSID must use the IP address assigned by the DHCP server
        /// </summary>
        [Input("mandatoryDhcpEnabled")]
        public Input<bool>? MandatoryDhcpEnabled { get; set; }

        /// <summary>
        /// The minimum bitrate in Mbps of this SSID in the default indoor RF profile
        /// </summary>
        [Input("minBitrate")]
        public Input<int>? MinBitrate { get; set; }

        /// <summary>
        /// The name of the SSID
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Named VLAN settings.
        /// </summary>
        [Input("namedVlans")]
        public Input<Inputs.WirelessSsidsNamedVlansGetArgs>? NamedVlans { get; set; }

        /// <summary>
        /// networkId path parameter. Network ID
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Unique identifier of the SSID
        /// </summary>
        [Input("number")]
        public Input<int>? Number { get; set; }

        /// <summary>
        /// The OAuth settings of this SSID. Only valid if splashPage is 'Google OAuth'.
        /// </summary>
        [Input("oauth")]
        public Input<Inputs.WirelessSsidsOauthGetArgs>? Oauth { get; set; }

        /// <summary>
        /// The download bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Input("perClientBandwidthLimitDown")]
        public Input<int>? PerClientBandwidthLimitDown { get; set; }

        /// <summary>
        /// The upload bandwidth limit in Kbps. (0 represents no limit.)
        /// </summary>
        [Input("perClientBandwidthLimitUp")]
        public Input<int>? PerClientBandwidthLimitUp { get; set; }

        /// <summary>
        /// The total download bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Input("perSsidBandwidthLimitDown")]
        public Input<int>? PerSsidBandwidthLimitDown { get; set; }

        /// <summary>
        /// The total upload bandwidth limit in Kbps (0 represents no limit)
        /// </summary>
        [Input("perSsidBandwidthLimitUp")]
        public Input<int>? PerSsidBandwidthLimitUp { get; set; }

        /// <summary>
        /// The passkey for the SSID. This param is only valid if the authMode is 'psk'
        /// </summary>
        [Input("psk")]
        public Input<string>? Psk { get; set; }

        /// <summary>
        /// Whether or not RADIUS accounting is enabled
        /// </summary>
        [Input("radiusAccountingEnabled")]
        public Input<bool>? RadiusAccountingEnabled { get; set; }

        /// <summary>
        /// The interval (in seconds) in which accounting information is updated and sent to the RADIUS accounting server.
        /// </summary>
        [Input("radiusAccountingInterimInterval")]
        public Input<int>? RadiusAccountingInterimInterval { get; set; }

        [Input("radiusAccountingServers")]
        private InputList<Inputs.WirelessSsidsRadiusAccountingServerGetArgs>? _radiusAccountingServers;

        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusAccountingServerGetArgs> RadiusAccountingServers
        {
            get => _radiusAccountingServers ?? (_radiusAccountingServers = new InputList<Inputs.WirelessSsidsRadiusAccountingServerGetArgs>());
            set => _radiusAccountingServers = value;
        }

        [Input("radiusAccountingServersResponses")]
        private InputList<Inputs.WirelessSsidsRadiusAccountingServersResponseGetArgs>? _radiusAccountingServersResponses;

        /// <summary>
        /// List of RADIUS accounting 802.1X servers to be used for authentication
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusAccountingServersResponseGetArgs> RadiusAccountingServersResponses
        {
            get => _radiusAccountingServersResponses ?? (_radiusAccountingServersResponses = new InputList<Inputs.WirelessSsidsRadiusAccountingServersResponseGetArgs>());
            set => _radiusAccountingServersResponses = value;
        }

        /// <summary>
        /// RADIUS attribute used to look up group policies
        /// </summary>
        [Input("radiusAttributeForGroupPolicies")]
        public Input<string>? RadiusAttributeForGroupPolicies { get; set; }

        /// <summary>
        /// The template of the NAS identifier to be used for RADIUS authentication (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Input("radiusAuthenticationNasId")]
        public Input<string>? RadiusAuthenticationNasId { get; set; }

        /// <summary>
        /// The template of the called station identifier to be used for RADIUS (ex. $NODE*MAC$:$VAP*NUM$).
        /// </summary>
        [Input("radiusCalledStationId")]
        public Input<string>? RadiusCalledStationId { get; set; }

        /// <summary>
        /// If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
        /// </summary>
        [Input("radiusCoaEnabled")]
        public Input<bool>? RadiusCoaEnabled { get; set; }

        /// <summary>
        /// Policy which determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable
        /// </summary>
        [Input("radiusFailoverPolicy")]
        public Input<string>? RadiusFailoverPolicy { get; set; }

        /// <summary>
        /// Whether or not higher priority RADIUS servers should be retried after 60 seconds.
        /// </summary>
        [Input("radiusFallbackEnabled")]
        public Input<bool>? RadiusFallbackEnabled { get; set; }

        /// <summary>
        /// Whether or not RADIUS Guest VLAN is enabled. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Input("radiusGuestVlanEnabled")]
        public Input<bool>? RadiusGuestVlanEnabled { get; set; }

        /// <summary>
        /// VLAN ID of the RADIUS Guest VLAN. This param is only valid if the authMode is 'open-with-radius' and addressing mode is not set to 'isolated' or 'nat' mode
        /// </summary>
        [Input("radiusGuestVlanId")]
        public Input<int>? RadiusGuestVlanId { get; set; }

        /// <summary>
        /// Policy which determines which RADIUS server will be contacted first in an authentication attempt, and the ordering of any necessary retry attempts
        /// </summary>
        [Input("radiusLoadBalancingPolicy")]
        public Input<string>? RadiusLoadBalancingPolicy { get; set; }

        /// <summary>
        /// If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
        /// </summary>
        [Input("radiusOverride")]
        public Input<bool>? RadiusOverride { get; set; }

        /// <summary>
        /// If true, Meraki devices will proxy RADIUS messages through the Meraki cloud to the configured RADIUS auth and accounting servers.
        /// </summary>
        [Input("radiusProxyEnabled")]
        public Input<bool>? RadiusProxyEnabled { get; set; }

        /// <summary>
        /// The maximum number of transmit attempts after which a RADIUS server is failed over (must be between 1-5).
        /// </summary>
        [Input("radiusServerAttemptsLimit")]
        public Input<int>? RadiusServerAttemptsLimit { get; set; }

        /// <summary>
        /// The amount of time for which a RADIUS client waits for a reply from the RADIUS server (must be between 1-10 seconds).
        /// </summary>
        [Input("radiusServerTimeout")]
        public Input<int>? RadiusServerTimeout { get; set; }

        [Input("radiusServers")]
        private InputList<Inputs.WirelessSsidsRadiusServerGetArgs>? _radiusServers;

        /// <summary>
        /// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusServerGetArgs> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<Inputs.WirelessSsidsRadiusServerGetArgs>());
            set => _radiusServers = value;
        }

        [Input("radiusServersResponses")]
        private InputList<Inputs.WirelessSsidsRadiusServersResponseGetArgs>? _radiusServersResponses;

        /// <summary>
        /// The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
        /// </summary>
        public InputList<Inputs.WirelessSsidsRadiusServersResponseGetArgs> RadiusServersResponses
        {
            get => _radiusServersResponses ?? (_radiusServersResponses = new InputList<Inputs.WirelessSsidsRadiusServersResponseGetArgs>());
            set => _radiusServersResponses = value;
        }

        /// <summary>
        /// If true, Meraki devices will periodically send Access-Request messages to configured RADIUS servers using identity 'meraki*8021x*test' to ensure that the RADIUS servers are reachable.
        /// </summary>
        [Input("radiusTestingEnabled")]
        public Input<bool>? RadiusTestingEnabled { get; set; }

        /// <summary>
        /// The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
        /// </summary>
        [Input("secondaryConcentratorNetworkId")]
        public Input<string>? SecondaryConcentratorNetworkId { get; set; }

        /// <summary>
        /// The SpeedBurst setting for this SSID'
        /// </summary>
        [Input("speedBurst")]
        public Input<Inputs.WirelessSsidsSpeedBurstGetArgs>? SpeedBurst { get; set; }

        [Input("splashGuestSponsorDomains")]
        private InputList<string>? _splashGuestSponsorDomains;

        /// <summary>
        /// Array of valid sponsor email domains for sponsored guest splash type.
        /// </summary>
        public InputList<string> SplashGuestSponsorDomains
        {
            get => _splashGuestSponsorDomains ?? (_splashGuestSponsorDomains = new InputList<string>());
            set => _splashGuestSponsorDomains = value;
        }

        /// <summary>
        /// The type of splash page for the SSID
        /// </summary>
        [Input("splashPage")]
        public Input<string>? SplashPage { get; set; }

        /// <summary>
        /// Splash page timeout
        /// </summary>
        [Input("splashTimeout")]
        public Input<string>? SplashTimeout { get; set; }

        /// <summary>
        /// SSID Administrator access status
        /// </summary>
        [Input("ssidAdminAccessible")]
        public Input<bool>? SsidAdminAccessible { get; set; }

        /// <summary>
        /// Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
        /// </summary>
        [Input("useVlanTagging")]
        public Input<bool>? UseVlanTagging { get; set; }

        /// <summary>
        /// Whether the SSID is advertised or hidden by the AP
        /// </summary>
        [Input("visible")]
        public Input<bool>? Visible { get; set; }

        /// <summary>
        /// The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Allow users to access a configurable list of IP ranges prior to sign-on
        /// </summary>
        [Input("walledGardenEnabled")]
        public Input<bool>? WalledGardenEnabled { get; set; }

        [Input("walledGardenRanges")]
        private InputList<string>? _walledGardenRanges;

        /// <summary>
        /// Domain names and IP address ranges available in Walled Garden mode
        /// </summary>
        public InputList<string> WalledGardenRanges
        {
            get => _walledGardenRanges ?? (_walledGardenRanges = new InputList<string>());
            set => _walledGardenRanges = value;
        }

        /// <summary>
        /// The types of WPA encryption
        /// </summary>
        [Input("wpaEncryptionMode")]
        public Input<string>? WpaEncryptionMode { get; set; }

        public WirelessSsidsState()
        {
        }
        public static new WirelessSsidsState Empty => new WirelessSsidsState();
    }
}
