// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Administered
{
    public static class GetLicensingSubscriptionSubscriptionsComplianceStatuses
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Administered.GetLicensingSubscriptionSubscriptionsComplianceStatuses.Invoke(new()
        ///     {
        ///         OrganizationIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SubscriptionIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample"] = example.Apply(getLicensingSubscriptionSubscriptionsComplianceStatusesResult =&gt; getLicensingSubscriptionSubscriptionsComplianceStatusesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> InvokeAsync(GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult>("meraki:administered/getLicensingSubscriptionSubscriptionsComplianceStatuses:getLicensingSubscriptionSubscriptionsComplianceStatuses", args ?? new GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Administered.GetLicensingSubscriptionSubscriptionsComplianceStatuses.Invoke(new()
        ///     {
        ///         OrganizationIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SubscriptionIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesExample"] = example.Apply(getLicensingSubscriptionSubscriptionsComplianceStatusesResult =&gt; getLicensingSubscriptionSubscriptionsComplianceStatusesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult> Invoke(GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicensingSubscriptionSubscriptionsComplianceStatusesResult>("meraki:administered/getLicensingSubscriptionSubscriptionsComplianceStatuses:getLicensingSubscriptionSubscriptionsComplianceStatuses", args ?? new GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs : global::Pulumi.InvokeArgs
    {
        [Input("organizationIds")]
        private List<string>? _organizationIds;

        /// <summary>
        /// organizationIds query parameter. Organizations to get subscription compliance information for
        /// </summary>
        public List<string> OrganizationIds
        {
            get => _organizationIds ?? (_organizationIds = new List<string>());
            set => _organizationIds = value;
        }

        [Input("subscriptionIds")]
        private List<string>? _subscriptionIds;

        /// <summary>
        /// subscriptionIds query parameter. Subscription ids
        /// </summary>
        public List<string> SubscriptionIds
        {
            get => _subscriptionIds ?? (_subscriptionIds = new List<string>());
            set => _subscriptionIds = value;
        }

        public GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs()
        {
        }
        public static new GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs Empty => new GetLicensingSubscriptionSubscriptionsComplianceStatusesArgs();
    }

    public sealed class GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("organizationIds")]
        private InputList<string>? _organizationIds;

        /// <summary>
        /// organizationIds query parameter. Organizations to get subscription compliance information for
        /// </summary>
        public InputList<string> OrganizationIds
        {
            get => _organizationIds ?? (_organizationIds = new InputList<string>());
            set => _organizationIds = value;
        }

        [Input("subscriptionIds")]
        private InputList<string>? _subscriptionIds;

        /// <summary>
        /// subscriptionIds query parameter. Subscription ids
        /// </summary>
        public InputList<string> SubscriptionIds
        {
            get => _subscriptionIds ?? (_subscriptionIds = new InputList<string>());
            set => _subscriptionIds = value;
        }

        public GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs()
        {
        }
        public static new GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs Empty => new GetLicensingSubscriptionSubscriptionsComplianceStatusesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicensingSubscriptionSubscriptionsComplianceStatusesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseLicensingGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesItemResult> Items;
        /// <summary>
        /// organizationIds query parameter. Organizations to get subscription compliance information for
        /// </summary>
        public readonly ImmutableArray<string> OrganizationIds;
        /// <summary>
        /// subscriptionIds query parameter. Subscription ids
        /// </summary>
        public readonly ImmutableArray<string> SubscriptionIds;

        [OutputConstructor]
        private GetLicensingSubscriptionSubscriptionsComplianceStatusesResult(
            string id,

            ImmutableArray<Outputs.GetLicensingSubscriptionSubscriptionsComplianceStatusesItemResult> items,

            ImmutableArray<string> organizationIds,

            ImmutableArray<string> subscriptionIds)
        {
            Id = id;
            Items = items;
            OrganizationIds = organizationIds;
            SubscriptionIds = subscriptionIds;
        }
    }
}
