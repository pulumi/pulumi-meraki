// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetApiRequestsOverview
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetApiRequestsOverview.Invoke(new()
        ///     {
        ///         OrganizationId = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsApiRequestsOverviewExample"] = example.Apply(getApiRequestsOverviewResult =&gt; getApiRequestsOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetApiRequestsOverviewResult> InvokeAsync(GetApiRequestsOverviewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiRequestsOverviewResult>("meraki:organizations/getApiRequestsOverview:getApiRequestsOverview", args ?? new GetApiRequestsOverviewArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetApiRequestsOverview.Invoke(new()
        ///     {
        ///         OrganizationId = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsApiRequestsOverviewExample"] = example.Apply(getApiRequestsOverviewResult =&gt; getApiRequestsOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiRequestsOverviewResult> Invoke(GetApiRequestsOverviewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiRequestsOverviewResult>("meraki:organizations/getApiRequestsOverview:getApiRequestsOverview", args ?? new GetApiRequestsOverviewInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetApiRequestsOverview.Invoke(new()
        ///     {
        ///         OrganizationId = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsApiRequestsOverviewExample"] = example.Apply(getApiRequestsOverviewResult =&gt; getApiRequestsOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiRequestsOverviewResult> Invoke(GetApiRequestsOverviewInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiRequestsOverviewResult>("meraki:organizations/getApiRequestsOverview:getApiRequestsOverview", args ?? new GetApiRequestsOverviewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiRequestsOverviewArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        /// </summary>
        [Input("t0")]
        public string? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        [Input("t1")]
        public string? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        /// </summary>
        [Input("timespan")]
        public double? Timespan { get; set; }

        public GetApiRequestsOverviewArgs()
        {
        }
        public static new GetApiRequestsOverviewArgs Empty => new GetApiRequestsOverviewArgs();
    }

    public sealed class GetApiRequestsOverviewInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        /// </summary>
        [Input("t0")]
        public Input<string>? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        [Input("t1")]
        public Input<string>? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        /// </summary>
        [Input("timespan")]
        public Input<double>? Timespan { get; set; }

        public GetApiRequestsOverviewInvokeArgs()
        {
        }
        public static new GetApiRequestsOverviewInvokeArgs Empty => new GetApiRequestsOverviewInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiRequestsOverviewResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetApiRequestsOverviewItemResult Item;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
        /// </summary>
        public readonly string? T0;
        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
        /// </summary>
        public readonly string? T1;
        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
        /// </summary>
        public readonly double? Timespan;

        [OutputConstructor]
        private GetApiRequestsOverviewResult(
            string id,

            Outputs.GetApiRequestsOverviewItemResult item,

            string organizationId,

            string? t0,

            string? t1,

            double? timespan)
        {
            Id = id;
            Item = item;
            OrganizationId = organizationId;
            T0 = t0;
            T1 = t1;
            Timespan = timespan;
        }
    }
}
