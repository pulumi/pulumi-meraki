// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetDevicesStatusesOverview
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesStatusesOverview.Invoke(new()
        ///     {
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesStatusesOverviewExample"] = example.Apply(getDevicesStatusesOverviewResult =&gt; getDevicesStatusesOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDevicesStatusesOverviewResult> InvokeAsync(GetDevicesStatusesOverviewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevicesStatusesOverviewResult>("meraki:organizations/getDevicesStatusesOverview:getDevicesStatusesOverview", args ?? new GetDevicesStatusesOverviewArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesStatusesOverview.Invoke(new()
        ///     {
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesStatusesOverviewExample"] = example.Apply(getDevicesStatusesOverviewResult =&gt; getDevicesStatusesOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDevicesStatusesOverviewResult> Invoke(GetDevicesStatusesOverviewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesStatusesOverviewResult>("meraki:organizations/getDevicesStatusesOverview:getDevicesStatusesOverview", args ?? new GetDevicesStatusesOverviewInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesStatusesOverview.Invoke(new()
        ///     {
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesStatusesOverviewExample"] = example.Apply(getDevicesStatusesOverviewResult =&gt; getDevicesStatusesOverviewResult.Item),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDevicesStatusesOverviewResult> Invoke(GetDevicesStatusesOverviewInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesStatusesOverviewResult>("meraki:organizations/getDevicesStatusesOverview:getDevicesStatusesOverview", args ?? new GetDevicesStatusesOverviewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevicesStatusesOverviewArgs : global::Pulumi.InvokeArgs
    {
        [Input("networkIds")]
        private List<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. An optional parameter to filter device statuses by network.
        /// </summary>
        public List<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new List<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        [Input("productTypes")]
        private List<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public List<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new List<string>());
            set => _productTypes = value;
        }

        public GetDevicesStatusesOverviewArgs()
        {
        }
        public static new GetDevicesStatusesOverviewArgs Empty => new GetDevicesStatusesOverviewArgs();
    }

    public sealed class GetDevicesStatusesOverviewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("networkIds")]
        private InputList<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. An optional parameter to filter device statuses by network.
        /// </summary>
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("productTypes")]
        private InputList<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public InputList<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new InputList<string>());
            set => _productTypes = value;
        }

        public GetDevicesStatusesOverviewInvokeArgs()
        {
        }
        public static new GetDevicesStatusesOverviewInvokeArgs Empty => new GetDevicesStatusesOverviewInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevicesStatusesOverviewResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetDevicesStatusesOverviewItemResult Item;
        /// <summary>
        /// networkIds query parameter. An optional parameter to filter device statuses by network.
        /// </summary>
        public readonly ImmutableArray<string> NetworkIds;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// productTypes query parameter. An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public readonly ImmutableArray<string> ProductTypes;

        [OutputConstructor]
        private GetDevicesStatusesOverviewResult(
            string id,

            Outputs.GetDevicesStatusesOverviewItemResult item,

            ImmutableArray<string> networkIds,

            string organizationId,

            ImmutableArray<string> productTypes)
        {
            Id = id;
            Item = item;
            NetworkIds = networkIds;
            OrganizationId = organizationId;
            ProductTypes = productTypes;
        }
    }
}
