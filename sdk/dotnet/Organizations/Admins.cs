// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.Admins("example", new()
    ///     {
    ///         AuthenticationMethod = "Email",
    ///         Email = "miles@meraki.com",
    ///         Name = "Miles Meraki",
    ///         Networks = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.AdminsNetworkArgs
    ///             {
    ///                 Access = "full",
    ///                 Id = "N_24329156",
    ///             },
    ///         },
    ///         OrgAccess = "none",
    ///         OrganizationId = "string",
    ///         Tags = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.AdminsTagArgs
    ///             {
    ///                 Access = "read-only",
    ///                 Tag = "west",
    ///             },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsAdminsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/admins:Admins example "organization_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/admins:Admins")]
    public partial class Admins : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Status of the admin's account
        /// </summary>
        [Output("accountStatus")]
        public Output<string> AccountStatus { get; private set; } = null!;

        /// <summary>
        /// adminId path parameter. Admin ID
        /// </summary>
        [Output("adminId")]
        public Output<string?> AdminId { get; private set; } = null!;

        /// <summary>
        /// Admin's authentication method
        /// </summary>
        [Output("authenticationMethod")]
        public Output<string> AuthenticationMethod { get; private set; } = null!;

        /// <summary>
        /// Admin's email address
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the admin has an API key
        /// </summary>
        [Output("hasApiKey")]
        public Output<bool> HasApiKey { get; private set; } = null!;

        /// <summary>
        /// Time when the admin was last active
        /// </summary>
        [Output("lastActive")]
        public Output<string> LastActive { get; private set; } = null!;

        /// <summary>
        /// Admin's username
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Admin network access information
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.AdminsNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Admin's level of access to the organization
        /// </summary>
        [Output("orgAccess")]
        public Output<string> OrgAccess { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Admin tag information
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AdminsTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Indicates whether two-factor authentication is enabled
        /// </summary>
        [Output("twoFactorAuthEnabled")]
        public Output<bool> TwoFactorAuthEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Admins resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Admins(string name, AdminsArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/admins:Admins", name, args ?? new AdminsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Admins(string name, Input<string> id, AdminsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/admins:Admins", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Admins resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Admins Get(string name, Input<string> id, AdminsState? state = null, CustomResourceOptions? options = null)
        {
            return new Admins(name, id, state, options);
        }
    }

    public sealed class AdminsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// adminId path parameter. Admin ID
        /// </summary>
        [Input("adminId")]
        public Input<string>? AdminId { get; set; }

        /// <summary>
        /// Admin's authentication method
        /// </summary>
        [Input("authenticationMethod")]
        public Input<string>? AuthenticationMethod { get; set; }

        /// <summary>
        /// Admin's email address
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Admin's username
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.AdminsNetworkArgs>? _networks;

        /// <summary>
        /// Admin network access information
        /// </summary>
        public InputList<Inputs.AdminsNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.AdminsNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Admin's level of access to the organization
        /// </summary>
        [Input("orgAccess")]
        public Input<string>? OrgAccess { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.AdminsTagArgs>? _tags;

        /// <summary>
        /// Admin tag information
        /// </summary>
        public InputList<Inputs.AdminsTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AdminsTagArgs>());
            set => _tags = value;
        }

        public AdminsArgs()
        {
        }
        public static new AdminsArgs Empty => new AdminsArgs();
    }

    public sealed class AdminsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Status of the admin's account
        /// </summary>
        [Input("accountStatus")]
        public Input<string>? AccountStatus { get; set; }

        /// <summary>
        /// adminId path parameter. Admin ID
        /// </summary>
        [Input("adminId")]
        public Input<string>? AdminId { get; set; }

        /// <summary>
        /// Admin's authentication method
        /// </summary>
        [Input("authenticationMethod")]
        public Input<string>? AuthenticationMethod { get; set; }

        /// <summary>
        /// Admin's email address
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Indicates whether the admin has an API key
        /// </summary>
        [Input("hasApiKey")]
        public Input<bool>? HasApiKey { get; set; }

        /// <summary>
        /// Time when the admin was last active
        /// </summary>
        [Input("lastActive")]
        public Input<string>? LastActive { get; set; }

        /// <summary>
        /// Admin's username
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.AdminsNetworkGetArgs>? _networks;

        /// <summary>
        /// Admin network access information
        /// </summary>
        public InputList<Inputs.AdminsNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.AdminsNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Admin's level of access to the organization
        /// </summary>
        [Input("orgAccess")]
        public Input<string>? OrgAccess { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("tags")]
        private InputList<Inputs.AdminsTagGetArgs>? _tags;

        /// <summary>
        /// Admin tag information
        /// </summary>
        public InputList<Inputs.AdminsTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AdminsTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates whether two-factor authentication is enabled
        /// </summary>
        [Input("twoFactorAuthEnabled")]
        public Input<bool>? TwoFactorAuthEnabled { get; set; }

        public AdminsState()
        {
        }
        public static new AdminsState Empty => new AdminsState();
    }
}
