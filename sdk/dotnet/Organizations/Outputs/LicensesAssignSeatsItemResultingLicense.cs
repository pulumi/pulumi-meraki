// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Outputs
{

    [OutputType]
    public sealed class LicensesAssignSeatsItemResultingLicense
    {
        /// <summary>
        /// The date the license started burning
        /// </summary>
        public readonly string? ActivationDate;
        /// <summary>
        /// The date the license was claimed into the organization
        /// </summary>
        public readonly string? ClaimDate;
        /// <summary>
        /// Serial number of the device the license is assigned to
        /// </summary>
        public readonly string? DeviceSerial;
        /// <summary>
        /// The duration of the individual license
        /// </summary>
        public readonly int? DurationInDays;
        /// <summary>
        /// The date the license will expire
        /// </summary>
        public readonly string? ExpirationDate;
        /// <summary>
        /// The id of the head license this license is queued behind. If there is no head license, it returns nil.
        /// </summary>
        public readonly string? HeadLicenseId;
        /// <summary>
        /// License ID
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// License key
        /// </summary>
        public readonly string? LicenseKey;
        /// <summary>
        /// License type
        /// </summary>
        public readonly string? LicenseType;
        /// <summary>
        /// ID of the network the license is assigned to
        /// </summary>
        public readonly string? NetworkId;
        /// <summary>
        /// Order number
        /// </summary>
        public readonly string? OrderNumber;
        /// <summary>
        /// DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        /// </summary>
        public readonly ImmutableArray<Outputs.LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense> PermanentlyQueuedLicenses;
        /// <summary>
        /// The number of seats of the license. Only applicable to SM licenses.
        /// </summary>
        public readonly int? SeatCount;
        /// <summary>
        /// The state of the license. All queued licenses have a status of *recentlyQueued*.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The duration of the license plus all permanently queued licenses associated with it
        /// </summary>
        public readonly int? TotalDurationInDays;

        [OutputConstructor]
        private LicensesAssignSeatsItemResultingLicense(
            string? activationDate,

            string? claimDate,

            string? deviceSerial,

            int? durationInDays,

            string? expirationDate,

            string? headLicenseId,

            string? id,

            string? licenseKey,

            string? licenseType,

            string? networkId,

            string? orderNumber,

            ImmutableArray<Outputs.LicensesAssignSeatsItemResultingLicensePermanentlyQueuedLicense> permanentlyQueuedLicenses,

            int? seatCount,

            string? state,

            int? totalDurationInDays)
        {
            ActivationDate = activationDate;
            ClaimDate = claimDate;
            DeviceSerial = deviceSerial;
            DurationInDays = durationInDays;
            ExpirationDate = expirationDate;
            HeadLicenseId = headLicenseId;
            Id = id;
            LicenseKey = licenseKey;
            LicenseType = licenseType;
            NetworkId = networkId;
            OrderNumber = orderNumber;
            PermanentlyQueuedLicenses = permanentlyQueuedLicenses;
            SeatCount = seatCount;
            State = state;
            TotalDurationInDays = totalDurationInDays;
        }
    }
}
