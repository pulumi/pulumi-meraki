// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Outputs
{

    [OutputType]
    public sealed class GetSwitchPortsBySwitchItemPortResult
    {
        /// <summary>
        /// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        public readonly string AccessPolicyType;
        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        public readonly string AllowedVlans;
        /// <summary>
        /// The status of the switch port.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The link speed for the switch port.
        /// </summary>
        public readonly string LinkNegotiation;
        /// <summary>
        /// The name of the switch port.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PoE status of the switch port.
        /// </summary>
        public readonly bool PoeEnabled;
        /// <summary>
        /// The identifier of the switch port.
        /// </summary>
        public readonly string PortId;
        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        public readonly bool RstpEnabled;
        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public readonly int StickyMacAllowListLimit;
        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public readonly ImmutableArray<string> StickyMacAllowLists;
        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        public readonly string StpGuard;
        /// <summary>
        /// The list of tags of the switch port.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The type of the switch port ('trunk' or 'access').
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        public readonly int Vlan;
        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        public readonly int VoiceVlan;

        [OutputConstructor]
        private GetSwitchPortsBySwitchItemPortResult(
            string accessPolicyType,

            string allowedVlans,

            bool enabled,

            string linkNegotiation,

            string name,

            bool poeEnabled,

            string portId,

            bool rstpEnabled,

            int stickyMacAllowListLimit,

            ImmutableArray<string> stickyMacAllowLists,

            string stpGuard,

            ImmutableArray<string> tags,

            string type,

            int vlan,

            int voiceVlan)
        {
            AccessPolicyType = accessPolicyType;
            AllowedVlans = allowedVlans;
            Enabled = enabled;
            LinkNegotiation = linkNegotiation;
            Name = name;
            PoeEnabled = poeEnabled;
            PortId = portId;
            RstpEnabled = rstpEnabled;
            StickyMacAllowListLimit = stickyMacAllowListLimit;
            StickyMacAllowLists = stickyMacAllowLists;
            StpGuard = stpGuard;
            Tags = tags;
            Type = type;
            Vlan = vlan;
            VoiceVlan = voiceVlan;
        }
    }
}
