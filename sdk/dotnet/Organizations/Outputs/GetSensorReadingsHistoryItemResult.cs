// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Outputs
{

    [OutputType]
    public sealed class GetSensorReadingsHistoryItemResult
    {
        /// <summary>
        /// Reading for the 'apparentPower' metric. This will only be present if the 'metric' property equals 'apparentPower'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemApparentPowerResult ApparentPower;
        /// <summary>
        /// Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemBatteryResult Battery;
        /// <summary>
        /// Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemButtonResult Button;
        /// <summary>
        /// Reading for the 'co2' metric. This will only be present if the 'metric' property equals 'co2'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemCo2Result Co2;
        /// <summary>
        /// Reading for the 'current' metric. This will only be present if the 'metric' property equals 'current'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemCurrentResult Current;
        /// <summary>
        /// Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemDoorResult Door;
        /// <summary>
        /// Reading for the 'downstreamPower' metric. This will only be present if the 'metric' property equals 'downstreamPower'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemDownstreamPowerResult DownstreamPower;
        /// <summary>
        /// Reading for the 'frequency' metric. This will only be present if the 'metric' property equals 'frequency'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemFrequencyResult Frequency;
        /// <summary>
        /// Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemHumidityResult Humidity;
        /// <summary>
        /// Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemIndoorAirQualityResult IndoorAirQuality;
        /// <summary>
        /// Type of sensor reading.
        /// </summary>
        public readonly string Metric;
        /// <summary>
        /// Network to which the sensor belongs.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemNetworkResult Network;
        /// <summary>
        /// Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemNoiseResult Noise;
        /// <summary>
        /// Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemPm25Result Pm25;
        /// <summary>
        /// Reading for the 'powerFactor' metric. This will only be present if the 'metric' property equals 'powerFactor'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemPowerFactorResult PowerFactor;
        /// <summary>
        /// Reading for the 'realPower' metric. This will only be present if the 'metric' property equals 'realPower'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemRealPowerResult RealPower;
        /// <summary>
        /// Reading for the 'remoteLockoutSwitch' metric. This will only be present if the 'metric' property equals 'remoteLockoutSwitch'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemRemoteLockoutSwitchResult RemoteLockoutSwitch;
        /// <summary>
        /// Serial number of the sensor that took the reading.
        /// </summary>
        public readonly string Serial;
        /// <summary>
        /// Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemTemperatureResult Temperature;
        /// <summary>
        /// Time at which the reading occurred, in ISO8601 format.
        /// </summary>
        public readonly string Ts;
        /// <summary>
        /// Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemTvocResult Tvoc;
        /// <summary>
        /// Reading for the 'voltage' metric. This will only be present if the 'metric' property equals 'voltage'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemVoltageResult Voltage;
        /// <summary>
        /// Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
        /// </summary>
        public readonly Outputs.GetSensorReadingsHistoryItemWaterResult Water;

        [OutputConstructor]
        private GetSensorReadingsHistoryItemResult(
            Outputs.GetSensorReadingsHistoryItemApparentPowerResult apparentPower,

            Outputs.GetSensorReadingsHistoryItemBatteryResult battery,

            Outputs.GetSensorReadingsHistoryItemButtonResult button,

            Outputs.GetSensorReadingsHistoryItemCo2Result co2,

            Outputs.GetSensorReadingsHistoryItemCurrentResult current,

            Outputs.GetSensorReadingsHistoryItemDoorResult door,

            Outputs.GetSensorReadingsHistoryItemDownstreamPowerResult downstreamPower,

            Outputs.GetSensorReadingsHistoryItemFrequencyResult frequency,

            Outputs.GetSensorReadingsHistoryItemHumidityResult humidity,

            Outputs.GetSensorReadingsHistoryItemIndoorAirQualityResult indoorAirQuality,

            string metric,

            Outputs.GetSensorReadingsHistoryItemNetworkResult network,

            Outputs.GetSensorReadingsHistoryItemNoiseResult noise,

            Outputs.GetSensorReadingsHistoryItemPm25Result pm25,

            Outputs.GetSensorReadingsHistoryItemPowerFactorResult powerFactor,

            Outputs.GetSensorReadingsHistoryItemRealPowerResult realPower,

            Outputs.GetSensorReadingsHistoryItemRemoteLockoutSwitchResult remoteLockoutSwitch,

            string serial,

            Outputs.GetSensorReadingsHistoryItemTemperatureResult temperature,

            string ts,

            Outputs.GetSensorReadingsHistoryItemTvocResult tvoc,

            Outputs.GetSensorReadingsHistoryItemVoltageResult voltage,

            Outputs.GetSensorReadingsHistoryItemWaterResult water)
        {
            ApparentPower = apparentPower;
            Battery = battery;
            Button = button;
            Co2 = co2;
            Current = current;
            Door = door;
            DownstreamPower = downstreamPower;
            Frequency = frequency;
            Humidity = humidity;
            IndoorAirQuality = indoorAirQuality;
            Metric = metric;
            Network = network;
            Noise = noise;
            Pm25 = pm25;
            PowerFactor = powerFactor;
            RealPower = realPower;
            RemoteLockoutSwitch = remoteLockoutSwitch;
            Serial = serial;
            Temperature = temperature;
            Ts = ts;
            Tvoc = tvoc;
            Voltage = voltage;
            Water = water;
        }
    }
}
