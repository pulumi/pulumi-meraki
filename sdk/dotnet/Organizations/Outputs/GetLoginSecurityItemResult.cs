// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Outputs
{

    [OutputType]
    public sealed class GetLoginSecurityItemResult
    {
        /// <summary>
        /// Number of consecutive failed login attempts after which users' accounts will be locked.
        /// </summary>
        public readonly int AccountLockoutAttempts;
        /// <summary>
        /// Details for indicating whether organization will restrict access to API (but not Dashboard) to certain IP addresses.
        /// </summary>
        public readonly Outputs.GetLoginSecurityItemApiAuthenticationResult ApiAuthentication;
        /// <summary>
        /// Boolean indicating whether users' Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
        /// </summary>
        public readonly bool EnforceAccountLockout;
        /// <summary>
        /// Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
        /// </summary>
        public readonly bool EnforceDifferentPasswords;
        /// <summary>
        /// Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
        /// </summary>
        public readonly bool EnforceIdleTimeout;
        /// <summary>
        /// Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
        /// </summary>
        public readonly bool EnforceLoginIpRanges;
        /// <summary>
        /// Boolean indicating whether users are forced to change their password every X number of days.
        /// </summary>
        public readonly bool EnforcePasswordExpiration;
        /// <summary>
        /// Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
        /// </summary>
        public readonly bool EnforceStrongPasswords;
        /// <summary>
        /// Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
        /// </summary>
        public readonly bool EnforceTwoFactorAuth;
        /// <summary>
        /// Number of minutes users can remain idle before being logged out of their accounts.
        /// </summary>
        public readonly int IdleTimeoutMinutes;
        /// <summary>
        /// List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
        /// </summary>
        public readonly ImmutableArray<string> LoginIpRanges;
        /// <summary>
        /// Number of recent passwords that new password must be distinct from.
        /// </summary>
        public readonly int NumDifferentPasswords;
        /// <summary>
        /// Number of days after which users will be forced to change their password.
        /// </summary>
        public readonly int PasswordExpirationDays;

        [OutputConstructor]
        private GetLoginSecurityItemResult(
            int accountLockoutAttempts,

            Outputs.GetLoginSecurityItemApiAuthenticationResult apiAuthentication,

            bool enforceAccountLockout,

            bool enforceDifferentPasswords,

            bool enforceIdleTimeout,

            bool enforceLoginIpRanges,

            bool enforcePasswordExpiration,

            bool enforceStrongPasswords,

            bool enforceTwoFactorAuth,

            int idleTimeoutMinutes,

            ImmutableArray<string> loginIpRanges,

            int numDifferentPasswords,

            int passwordExpirationDays)
        {
            AccountLockoutAttempts = accountLockoutAttempts;
            ApiAuthentication = apiAuthentication;
            EnforceAccountLockout = enforceAccountLockout;
            EnforceDifferentPasswords = enforceDifferentPasswords;
            EnforceIdleTimeout = enforceIdleTimeout;
            EnforceLoginIpRanges = enforceLoginIpRanges;
            EnforcePasswordExpiration = enforcePasswordExpiration;
            EnforceStrongPasswords = enforceStrongPasswords;
            EnforceTwoFactorAuth = enforceTwoFactorAuth;
            IdleTimeoutMinutes = idleTimeoutMinutes;
            LoginIpRanges = loginIpRanges;
            NumDifferentPasswords = numDifferentPasswords;
            PasswordExpirationDays = passwordExpirationDays;
        }
    }
}
