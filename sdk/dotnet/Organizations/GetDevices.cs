// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetDevices
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevices.Invoke(new()
        ///     {
        ///         ConfigurationUpdatedAfter = "string",
        ///         EndingBefore = "string",
        ///         Mac = "string",
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Model = "string",
        ///         Models = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Name = "string",
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SensorAlertProfileIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SensorMetrics = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serial = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         Tags = new[]
        ///         {
        ///             "string",
        ///         },
        ///         TagsFilterType = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesExample"] = example.Apply(getDevicesResult =&gt; getDevicesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDevicesResult> InvokeAsync(GetDevicesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevicesResult>("meraki:organizations/getDevices:getDevices", args ?? new GetDevicesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevices.Invoke(new()
        ///     {
        ///         ConfigurationUpdatedAfter = "string",
        ///         EndingBefore = "string",
        ///         Mac = "string",
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Model = "string",
        ///         Models = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Name = "string",
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         ProductTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SensorAlertProfileIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SensorMetrics = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serial = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         Tags = new[]
        ///         {
        ///             "string",
        ///         },
        ///         TagsFilterType = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesExample"] = example.Apply(getDevicesResult =&gt; getDevicesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDevicesResult> Invoke(GetDevicesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesResult>("meraki:organizations/getDevices:getDevices", args ?? new GetDevicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
        /// </summary>
        [Input("configurationUpdatedAfter")]
        public string? ConfigurationUpdatedAfter { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        /// <summary>
        /// mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        [Input("mac")]
        public string? Mac { get; set; }

        [Input("macs")]
        private List<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
        /// </summary>
        public List<string> Macs
        {
            get => _macs ?? (_macs = new List<string>());
            set => _macs = value;
        }

        /// <summary>
        /// model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
        /// </summary>
        [Input("model")]
        public string? Model { get; set; }

        [Input("models")]
        private List<string>? _models;

        /// <summary>
        /// models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
        /// </summary>
        public List<string> Models
        {
            get => _models ?? (_models = new List<string>());
            set => _models = value;
        }

        /// <summary>
        /// name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("networkIds")]
        private List<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter devices by network.
        /// </summary>
        public List<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new List<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("productTypes")]
        private List<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public List<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new List<string>());
            set => _productTypes = value;
        }

        [Input("sensorAlertProfileIds")]
        private List<string>? _sensorAlertProfileIds;

        /// <summary>
        /// sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
        /// </summary>
        public List<string> SensorAlertProfileIds
        {
            get => _sensorAlertProfileIds ?? (_sensorAlertProfileIds = new List<string>());
            set => _sensorAlertProfileIds = value;
        }

        [Input("sensorMetrics")]
        private List<string>? _sensorMetrics;

        /// <summary>
        /// sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
        /// </summary>
        public List<string> SensorMetrics
        {
            get => _sensorMetrics ?? (_sensorMetrics = new List<string>());
            set => _sensorMetrics = value;
        }

        /// <summary>
        /// serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
        /// </summary>
        [Input("serial")]
        public string? Serial { get; set; }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// tags query parameter. Optional parameter to filter devices by tags.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
        /// </summary>
        [Input("tagsFilterType")]
        public string? TagsFilterType { get; set; }

        public GetDevicesArgs()
        {
        }
        public static new GetDevicesArgs Empty => new GetDevicesArgs();
    }

    public sealed class GetDevicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
        /// </summary>
        [Input("configurationUpdatedAfter")]
        public Input<string>? ConfigurationUpdatedAfter { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        /// <summary>
        /// mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("macs")]
        private InputList<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
        /// </summary>
        public InputList<string> Macs
        {
            get => _macs ?? (_macs = new InputList<string>());
            set => _macs = value;
        }

        /// <summary>
        /// model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
        /// </summary>
        [Input("model")]
        public Input<string>? Model { get; set; }

        [Input("models")]
        private InputList<string>? _models;

        /// <summary>
        /// models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
        /// </summary>
        public InputList<string> Models
        {
            get => _models ?? (_models = new InputList<string>());
            set => _models = value;
        }

        /// <summary>
        /// name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkIds")]
        private InputList<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter devices by network.
        /// </summary>
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("productTypes")]
        private InputList<string>? _productTypes;

        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public InputList<string> ProductTypes
        {
            get => _productTypes ?? (_productTypes = new InputList<string>());
            set => _productTypes = value;
        }

        [Input("sensorAlertProfileIds")]
        private InputList<string>? _sensorAlertProfileIds;

        /// <summary>
        /// sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
        /// </summary>
        public InputList<string> SensorAlertProfileIds
        {
            get => _sensorAlertProfileIds ?? (_sensorAlertProfileIds = new InputList<string>());
            set => _sensorAlertProfileIds = value;
        }

        [Input("sensorMetrics")]
        private InputList<string>? _sensorMetrics;

        /// <summary>
        /// sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
        /// </summary>
        public InputList<string> SensorMetrics
        {
            get => _sensorMetrics ?? (_sensorMetrics = new InputList<string>());
            set => _sensorMetrics = value;
        }

        /// <summary>
        /// serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// tags query parameter. Optional parameter to filter devices by tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
        /// </summary>
        [Input("tagsFilterType")]
        public Input<string>? TagsFilterType { get; set; }

        public GetDevicesInvokeArgs()
        {
        }
        public static new GetDevicesInvokeArgs Empty => new GetDevicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevicesResult
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Filter results by whether or not the device's configuration has been updated after the given timestamp
        /// </summary>
        public readonly string? ConfigurationUpdatedAfter;
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseOrganizationsGetOrganizationDevices
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDevicesItemResult> Items;
        /// <summary>
        /// mac query parameter. Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Mac;
        /// <summary>
        /// macs query parameter. Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Macs;
        /// <summary>
        /// model query parameter. Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Model;
        /// <summary>
        /// models query parameter. Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Models;
        /// <summary>
        /// name query parameter. Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// networkIds query parameter. Optional parameter to filter devices by network.
        /// </summary>
        public readonly ImmutableArray<string> NetworkIds;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// productTypes query parameter. Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
        /// </summary>
        public readonly ImmutableArray<string> ProductTypes;
        /// <summary>
        /// sensorAlertProfileIds query parameter. Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
        /// </summary>
        public readonly ImmutableArray<string> SensorAlertProfileIds;
        /// <summary>
        /// sensorMetrics query parameter. Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
        /// </summary>
        public readonly ImmutableArray<string> SensorMetrics;
        /// <summary>
        /// serial query parameter. Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Serial;
        /// <summary>
        /// serials query parameter. Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;
        /// <summary>
        /// tags query parameter. Optional parameter to filter devices by tags.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// tagsFilterType query parameter. Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
        /// </summary>
        public readonly string? TagsFilterType;

        [OutputConstructor]
        private GetDevicesResult(
            string? configurationUpdatedAfter,

            string? endingBefore,

            string id,

            ImmutableArray<Outputs.GetDevicesItemResult> items,

            string? mac,

            ImmutableArray<string> macs,

            string? model,

            ImmutableArray<string> models,

            string? name,

            ImmutableArray<string> networkIds,

            string organizationId,

            int? perPage,

            ImmutableArray<string> productTypes,

            ImmutableArray<string> sensorAlertProfileIds,

            ImmutableArray<string> sensorMetrics,

            string? serial,

            ImmutableArray<string> serials,

            string? startingAfter,

            ImmutableArray<string> tags,

            string? tagsFilterType)
        {
            ConfigurationUpdatedAfter = configurationUpdatedAfter;
            EndingBefore = endingBefore;
            Id = id;
            Items = items;
            Mac = mac;
            Macs = macs;
            Model = model;
            Models = models;
            Name = name;
            NetworkIds = networkIds;
            OrganizationId = organizationId;
            PerPage = perPage;
            ProductTypes = productTypes;
            SensorAlertProfileIds = sensorAlertProfileIds;
            SensorMetrics = sensorMetrics;
            Serial = serial;
            Serials = serials;
            StartingAfter = startingAfter;
            Tags = tags;
            TagsFilterType = tagsFilterType;
        }
    }
}
