// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.CameraRoles("example", new()
    ///     {
    ///         AppliedOnDevices = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.CameraRolesAppliedOnDeviceArgs
    ///             {
    ///                 Id = "",
    ///                 Permission_scope_id = "1",
    ///                 Tag = "reception-desk",
    ///             },
    ///         },
    ///         AppliedOnNetworks = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.CameraRolesAppliedOnNetworkArgs
    ///             {
    ///                 Id = "",
    ///                 Permission_scope_id = "2",
    ///                 Tag = "building-a",
    ///             },
    ///         },
    ///         AppliedOrgWides = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.CameraRolesAppliedOrgWideArgs
    ///             {
    ///                 Permission_scope_id = "2",
    ///             },
    ///         },
    ///         Name = "Security_Guard",
    ///         OrganizationId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsCameraRolesExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/cameraRoles:CameraRoles example "organization_id,role_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/cameraRoles:CameraRoles")]
    public partial class CameraRoles : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Device tag on which this specified permission is applied.
        /// </summary>
        [Output("appliedOnDevices")]
        public Output<ImmutableArray<Outputs.CameraRolesAppliedOnDevice>> AppliedOnDevices { get; private set; } = null!;

        /// <summary>
        /// Network tag on which this specified permission is applied.
        /// </summary>
        [Output("appliedOnNetworks")]
        public Output<ImmutableArray<Outputs.CameraRolesAppliedOnNetwork>> AppliedOnNetworks { get; private set; } = null!;

        /// <summary>
        /// Permissions to be applied org wide.
        /// </summary>
        [Output("appliedOrgWides")]
        public Output<ImmutableArray<Outputs.CameraRolesAppliedOrgWide>> AppliedOrgWides { get; private set; } = null!;

        /// <summary>
        /// The name of the new role. Must be unique. This parameter is required.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// roleId path parameter. Role ID
        /// </summary>
        [Output("roleId")]
        public Output<string?> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a CameraRoles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CameraRoles(string name, CameraRolesArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/cameraRoles:CameraRoles", name, args ?? new CameraRolesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CameraRoles(string name, Input<string> id, CameraRolesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/cameraRoles:CameraRoles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CameraRoles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CameraRoles Get(string name, Input<string> id, CameraRolesState? state = null, CustomResourceOptions? options = null)
        {
            return new CameraRoles(name, id, state, options);
        }
    }

    public sealed class CameraRolesArgs : global::Pulumi.ResourceArgs
    {
        [Input("appliedOnDevices")]
        private InputList<Inputs.CameraRolesAppliedOnDeviceArgs>? _appliedOnDevices;

        /// <summary>
        /// Device tag on which this specified permission is applied.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOnDeviceArgs> AppliedOnDevices
        {
            get => _appliedOnDevices ?? (_appliedOnDevices = new InputList<Inputs.CameraRolesAppliedOnDeviceArgs>());
            set => _appliedOnDevices = value;
        }

        [Input("appliedOnNetworks")]
        private InputList<Inputs.CameraRolesAppliedOnNetworkArgs>? _appliedOnNetworks;

        /// <summary>
        /// Network tag on which this specified permission is applied.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOnNetworkArgs> AppliedOnNetworks
        {
            get => _appliedOnNetworks ?? (_appliedOnNetworks = new InputList<Inputs.CameraRolesAppliedOnNetworkArgs>());
            set => _appliedOnNetworks = value;
        }

        [Input("appliedOrgWides")]
        private InputList<Inputs.CameraRolesAppliedOrgWideArgs>? _appliedOrgWides;

        /// <summary>
        /// Permissions to be applied org wide.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOrgWideArgs> AppliedOrgWides
        {
            get => _appliedOrgWides ?? (_appliedOrgWides = new InputList<Inputs.CameraRolesAppliedOrgWideArgs>());
            set => _appliedOrgWides = value;
        }

        /// <summary>
        /// The name of the new role. Must be unique. This parameter is required.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// roleId path parameter. Role ID
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        public CameraRolesArgs()
        {
        }
        public static new CameraRolesArgs Empty => new CameraRolesArgs();
    }

    public sealed class CameraRolesState : global::Pulumi.ResourceArgs
    {
        [Input("appliedOnDevices")]
        private InputList<Inputs.CameraRolesAppliedOnDeviceGetArgs>? _appliedOnDevices;

        /// <summary>
        /// Device tag on which this specified permission is applied.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOnDeviceGetArgs> AppliedOnDevices
        {
            get => _appliedOnDevices ?? (_appliedOnDevices = new InputList<Inputs.CameraRolesAppliedOnDeviceGetArgs>());
            set => _appliedOnDevices = value;
        }

        [Input("appliedOnNetworks")]
        private InputList<Inputs.CameraRolesAppliedOnNetworkGetArgs>? _appliedOnNetworks;

        /// <summary>
        /// Network tag on which this specified permission is applied.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOnNetworkGetArgs> AppliedOnNetworks
        {
            get => _appliedOnNetworks ?? (_appliedOnNetworks = new InputList<Inputs.CameraRolesAppliedOnNetworkGetArgs>());
            set => _appliedOnNetworks = value;
        }

        [Input("appliedOrgWides")]
        private InputList<Inputs.CameraRolesAppliedOrgWideGetArgs>? _appliedOrgWides;

        /// <summary>
        /// Permissions to be applied org wide.
        /// </summary>
        public InputList<Inputs.CameraRolesAppliedOrgWideGetArgs> AppliedOrgWides
        {
            get => _appliedOrgWides ?? (_appliedOrgWides = new InputList<Inputs.CameraRolesAppliedOrgWideGetArgs>());
            set => _appliedOrgWides = value;
        }

        /// <summary>
        /// The name of the new role. Must be unique. This parameter is required.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// roleId path parameter. Role ID
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        public CameraRolesState()
        {
        }
        public static new CameraRolesState Empty => new CameraRolesState();
    }
}
