// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetLicensingCotermLicenses
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetLicensingCotermLicenses.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         Expired = false,
        ///         Invalidated = false,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsLicensingCotermLicensesExample"] = example.Apply(getLicensingCotermLicensesResult =&gt; getLicensingCotermLicensesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLicensingCotermLicensesResult> InvokeAsync(GetLicensingCotermLicensesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicensingCotermLicensesResult>("meraki:organizations/getLicensingCotermLicenses:getLicensingCotermLicenses", args ?? new GetLicensingCotermLicensesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetLicensingCotermLicenses.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         Expired = false,
        ///         Invalidated = false,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsLicensingCotermLicensesExample"] = example.Apply(getLicensingCotermLicensesResult =&gt; getLicensingCotermLicensesResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLicensingCotermLicensesResult> Invoke(GetLicensingCotermLicensesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicensingCotermLicensesResult>("meraki:organizations/getLicensingCotermLicenses:getLicensingCotermLicenses", args ?? new GetLicensingCotermLicensesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicensingCotermLicensesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        /// <summary>
        /// expired query parameter. Filter for licenses that are expired
        /// </summary>
        [Input("expired")]
        public bool? Expired { get; set; }

        /// <summary>
        /// invalidated query parameter. Filter for licenses that are invalidated
        /// </summary>
        [Input("invalidated")]
        public bool? Invalidated { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        public GetLicensingCotermLicensesArgs()
        {
        }
        public static new GetLicensingCotermLicensesArgs Empty => new GetLicensingCotermLicensesArgs();
    }

    public sealed class GetLicensingCotermLicensesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        /// <summary>
        /// expired query parameter. Filter for licenses that are expired
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// invalidated query parameter. Filter for licenses that are invalidated
        /// </summary>
        [Input("invalidated")]
        public Input<bool>? Invalidated { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        public GetLicensingCotermLicensesInvokeArgs()
        {
        }
        public static new GetLicensingCotermLicensesInvokeArgs Empty => new GetLicensingCotermLicensesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicensingCotermLicensesResult
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// expired query parameter. Filter for licenses that are expired
        /// </summary>
        public readonly bool? Expired;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// invalidated query parameter. Filter for licenses that are invalidated
        /// </summary>
        public readonly bool? Invalidated;
        /// <summary>
        /// Array of ResponseLicensingGetOrganizationLicensingCotermLicenses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLicensingCotermLicensesItemResult> Items;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;

        [OutputConstructor]
        private GetLicensingCotermLicensesResult(
            string? endingBefore,

            bool? expired,

            string id,

            bool? invalidated,

            ImmutableArray<Outputs.GetLicensingCotermLicensesItemResult> items,

            string organizationId,

            int? perPage,

            string? startingAfter)
        {
            EndingBefore = endingBefore;
            Expired = expired;
            Id = id;
            Invalidated = invalidated;
            Items = items;
            OrganizationId = organizationId;
            PerPage = perPage;
            StartingAfter = startingAfter;
        }
    }
}
