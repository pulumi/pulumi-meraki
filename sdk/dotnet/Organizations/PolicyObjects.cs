// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.PolicyObjects("example", new()
    ///     {
    ///         Category = "network",
    ///         Cidr = "10.0.0.0/24",
    ///         Fqdn = "example.com",
    ///         GroupIds = new[]
    ///         {
    ///             "8",
    ///         },
    ///         Ip = "1.2.3.4",
    ///         Mask = "255.255.0.0",
    ///         Name = "Web Servers - Datacenter 10",
    ///         OrganizationId = "string",
    ///         Type = "cidr",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsPolicyObjectsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/policyObjects:PolicyObjects example "organization_id,policy_object_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/policyObjects:PolicyObjects")]
    public partial class PolicyObjects : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Category of a policy object (one of: adaptivePolicy, network)
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// CIDR Value of a policy object (e.g. 10.11.12.1/24")
        /// </summary>
        [Output("cidr")]
        public Output<string> Cidr { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name of policy object (e.g. "example.com")
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The IDs of policy object groups the policy object belongs to
        /// </summary>
        [Output("groupIds")]
        public Output<ImmutableArray<string>> GroupIds { get; private set; } = null!;

        /// <summary>
        /// IP Address of a policy object (e.g. "1.2.3.4")
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// Mask of a policy object (e.g. "255.255.0.0")
        /// </summary>
        [Output("mask")]
        public Output<string> Mask { get; private set; } = null!;

        /// <summary>
        /// Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkIds")]
        public Output<ImmutableArray<string>> NetworkIds { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// policyObjectId path parameter. Policy object ID
        /// </summary>
        [Output("policyObjectId")]
        public Output<string> PolicyObjectId { get; private set; } = null!;

        /// <summary>
        /// Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyObjects resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyObjects(string name, PolicyObjectsArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/policyObjects:PolicyObjects", name, args ?? new PolicyObjectsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyObjects(string name, Input<string> id, PolicyObjectsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/policyObjects:PolicyObjects", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyObjects resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyObjects Get(string name, Input<string> id, PolicyObjectsState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyObjects(name, id, state, options);
        }
    }

    public sealed class PolicyObjectsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category of a policy object (one of: adaptivePolicy, network)
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// CIDR Value of a policy object (e.g. 10.11.12.1/24")
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// Fully qualified domain name of policy object (e.g. "example.com")
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The IDs of policy object groups the policy object belongs to
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// IP Address of a policy object (e.g. "1.2.3.4")
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Mask of a policy object (e.g. "255.255.0.0")
        /// </summary>
        [Input("mask")]
        public Input<string>? Mask { get; set; }

        /// <summary>
        /// Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// policyObjectId path parameter. Policy object ID
        /// </summary>
        [Input("policyObjectId")]
        public Input<string>? PolicyObjectId { get; set; }

        /// <summary>
        /// Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public PolicyObjectsArgs()
        {
        }
        public static new PolicyObjectsArgs Empty => new PolicyObjectsArgs();
    }

    public sealed class PolicyObjectsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category of a policy object (one of: adaptivePolicy, network)
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// CIDR Value of a policy object (e.g. 10.11.12.1/24")
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Fully qualified domain name of policy object (e.g. "example.com")
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The IDs of policy object groups the policy object belongs to
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// IP Address of a policy object (e.g. "1.2.3.4")
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Mask of a policy object (e.g. "255.255.0.0")
        /// </summary>
        [Input("mask")]
        public Input<string>? Mask { get; set; }

        /// <summary>
        /// Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkIds")]
        private InputList<string>? _networkIds;
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// policyObjectId path parameter. Policy object ID
        /// </summary>
        [Input("policyObjectId")]
        public Input<string>? PolicyObjectId { get; set; }

        /// <summary>
        /// Type of a policy object (one of: adaptivePolicyIpv4Cidr, cidr, fqdn, ipAndMask)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public PolicyObjectsState()
        {
        }
        public static new PolicyObjectsState Empty => new PolicyObjectsState();
    }
}
