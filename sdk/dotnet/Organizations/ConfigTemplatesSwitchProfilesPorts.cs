// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.ConfigTemplatesSwitchProfilesPorts("example", new()
    ///     {
    ///         AccessPolicyNumber = 2,
    ///         AccessPolicyType = "Sticky MAC allow list",
    ///         AllowedVlans = "1,3,5-10",
    ///         ConfigTemplateId = "string",
    ///         DaiTrusted = false,
    ///         Enabled = true,
    ///         FlexibleStackingEnabled = true,
    ///         IsolationEnabled = false,
    ///         LinkNegotiation = "Auto negotiate",
    ///         MacAllowLists = new[]
    ///         {
    ///             "34:56:fe:ce:8e:b0",
    ///             "34:56:fe:ce:8e:b1",
    ///         },
    ///         Name = "My switch port",
    ///         OrganizationId = "string",
    ///         PoeEnabled = true,
    ///         PortId = "string",
    ///         PortScheduleId = "1234",
    ///         Profile = new Meraki.Organizations.Inputs.ConfigTemplatesSwitchProfilesPortsProfileArgs
    ///         {
    ///             Enabled = false,
    ///             Id = "1284392014819",
    ///             Iname = "iname",
    ///         },
    ///         ProfileId = "string",
    ///         RstpEnabled = true,
    ///         StickyMacAllowLists = new[]
    ///         {
    ///             "34:56:fe:ce:8e:b0",
    ///             "34:56:fe:ce:8e:b1",
    ///         },
    ///         StickyMacAllowListLimit = 5,
    ///         StormControlEnabled = true,
    ///         StpGuard = "disabled",
    ///         Tags = new[]
    ///         {
    ///             "tag1",
    ///             "tag2",
    ///         },
    ///         Type = "access",
    ///         Udld = "Alert only",
    ///         Vlan = 10,
    ///         VoiceVlan = 20,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsConfigTemplatesSwitchProfilesPortsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts example "config_template_id,organization_id,port_id,profile_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts")]
    public partial class ConfigTemplatesSwitchProfilesPorts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Output("accessPolicyNumber")]
        public Output<int> AccessPolicyNumber { get; private set; } = null!;

        /// <summary>
        /// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Output("accessPolicyType")]
        public Output<string> AccessPolicyType { get; private set; } = null!;

        /// <summary>
        /// The VLANs allowed on the switch template port. Only applicable to trunk ports.
        /// </summary>
        [Output("allowedVlans")]
        public Output<string> AllowedVlans { get; private set; } = null!;

        /// <summary>
        /// configTemplateId path parameter. Config template ID
        /// </summary>
        [Output("configTemplateId")]
        public Output<string> ConfigTemplateId { get; private set; } = null!;

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Output("daiTrusted")]
        public Output<bool> DaiTrusted { get; private set; } = null!;

        /// <summary>
        /// The status of the switch template port.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Output("flexibleStackingEnabled")]
        public Output<bool> FlexibleStackingEnabled { get; private set; } = null!;

        /// <summary>
        /// The isolation status of the switch template port.
        /// </summary>
        [Output("isolationEnabled")]
        public Output<bool> IsolationEnabled { get; private set; } = null!;

        /// <summary>
        /// The link speed for the switch template port.
        /// </summary>
        [Output("linkNegotiation")]
        public Output<string> LinkNegotiation { get; private set; } = null!;

        /// <summary>
        /// Available link speeds for the switch template port.
        /// </summary>
        [Output("linkNegotiationCapabilities")]
        public Output<ImmutableArray<string>> LinkNegotiationCapabilities { get; private set; } = null!;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        [Output("macAllowLists")]
        public Output<ImmutableArray<string>> MacAllowLists { get; private set; } = null!;

        /// <summary>
        /// Port mirror
        /// </summary>
        [Output("mirror")]
        public Output<Outputs.ConfigTemplatesSwitchProfilesPortsMirror> Mirror { get; private set; } = null!;

        /// <summary>
        /// Expansion module
        /// </summary>
        [Output("module")]
        public Output<Outputs.ConfigTemplatesSwitchProfilesPortsModule> Module { get; private set; } = null!;

        /// <summary>
        /// The name of the switch template port.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The PoE status of the switch template port.
        /// </summary>
        [Output("poeEnabled")]
        public Output<bool> PoeEnabled { get; private set; } = null!;

        /// <summary>
        /// The identifier of the switch template port.
        /// </summary>
        [Output("portId")]
        public Output<string> PortId { get; private set; } = null!;

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Output("portScheduleId")]
        public Output<string> PortScheduleId { get; private set; } = null!;

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Output("profile")]
        public Output<Outputs.ConfigTemplatesSwitchProfilesPortsProfile> Profile { get; private set; } = null!;

        /// <summary>
        /// profileId path parameter. Profile ID
        /// </summary>
        [Output("profileId")]
        public Output<string> ProfileId { get; private set; } = null!;

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Output("rstpEnabled")]
        public Output<bool> RstpEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Output("stickyMacAllowListLimit")]
        public Output<int> StickyMacAllowListLimit { get; private set; } = null!;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Output("stickyMacAllowLists")]
        public Output<ImmutableArray<string>> StickyMacAllowLists { get; private set; } = null!;

        /// <summary>
        /// The storm control status of the switch template port.
        /// </summary>
        [Output("stormControlEnabled")]
        public Output<bool> StormControlEnabled { get; private set; } = null!;

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Output("stpGuard")]
        public Output<string> StpGuard { get; private set; } = null!;

        /// <summary>
        /// The list of tags of the switch template port.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the switch template port ('trunk' or 'access').
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Output("udld")]
        public Output<string> Udld { get; private set; } = null!;

        /// <summary>
        /// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Output("vlan")]
        public Output<int> Vlan { get; private set; } = null!;

        /// <summary>
        /// The voice VLAN of the switch template port. Only applicable to access ports.
        /// </summary>
        [Output("voiceVlan")]
        public Output<int> VoiceVlan { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigTemplatesSwitchProfilesPorts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigTemplatesSwitchProfilesPorts(string name, ConfigTemplatesSwitchProfilesPortsArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts", name, args ?? new ConfigTemplatesSwitchProfilesPortsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigTemplatesSwitchProfilesPorts(string name, Input<string> id, ConfigTemplatesSwitchProfilesPortsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/configTemplatesSwitchProfilesPorts:ConfigTemplatesSwitchProfilesPorts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigTemplatesSwitchProfilesPorts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigTemplatesSwitchProfilesPorts Get(string name, Input<string> id, ConfigTemplatesSwitchProfilesPortsState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigTemplatesSwitchProfilesPorts(name, id, state, options);
        }
    }

    public sealed class ConfigTemplatesSwitchProfilesPortsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<int>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// The VLANs allowed on the switch template port. Only applicable to trunk ports.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// configTemplateId path parameter. Config template ID
        /// </summary>
        [Input("configTemplateId", required: true)]
        public Input<string> ConfigTemplateId { get; set; } = null!;

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Input("daiTrusted")]
        public Input<bool>? DaiTrusted { get; set; }

        /// <summary>
        /// The status of the switch template port.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Input("flexibleStackingEnabled")]
        public Input<bool>? FlexibleStackingEnabled { get; set; }

        /// <summary>
        /// The isolation status of the switch template port.
        /// </summary>
        [Input("isolationEnabled")]
        public Input<bool>? IsolationEnabled { get; set; }

        /// <summary>
        /// The link speed for the switch template port.
        /// </summary>
        [Input("linkNegotiation")]
        public Input<string>? LinkNegotiation { get; set; }

        [Input("macAllowLists")]
        private InputList<string>? _macAllowLists;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        public InputList<string> MacAllowLists
        {
            get => _macAllowLists ?? (_macAllowLists = new InputList<string>());
            set => _macAllowLists = value;
        }

        /// <summary>
        /// The name of the switch template port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// The PoE status of the switch template port.
        /// </summary>
        [Input("poeEnabled")]
        public Input<bool>? PoeEnabled { get; set; }

        /// <summary>
        /// The identifier of the switch template port.
        /// </summary>
        [Input("portId", required: true)]
        public Input<string> PortId { get; set; } = null!;

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Input("portScheduleId")]
        public Input<string>? PortScheduleId { get; set; }

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Input("profile")]
        public Input<Inputs.ConfigTemplatesSwitchProfilesPortsProfileArgs>? Profile { get; set; }

        /// <summary>
        /// profileId path parameter. Profile ID
        /// </summary>
        [Input("profileId", required: true)]
        public Input<string> ProfileId { get; set; } = null!;

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Input("rstpEnabled")]
        public Input<bool>? RstpEnabled { get; set; }

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Input("stickyMacAllowListLimit")]
        public Input<int>? StickyMacAllowListLimit { get; set; }

        [Input("stickyMacAllowLists")]
        private InputList<string>? _stickyMacAllowLists;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public InputList<string> StickyMacAllowLists
        {
            get => _stickyMacAllowLists ?? (_stickyMacAllowLists = new InputList<string>());
            set => _stickyMacAllowLists = value;
        }

        /// <summary>
        /// The storm control status of the switch template port.
        /// </summary>
        [Input("stormControlEnabled")]
        public Input<bool>? StormControlEnabled { get; set; }

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Input("stpGuard")]
        public Input<string>? StpGuard { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags of the switch template port.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the switch template port ('trunk' or 'access').
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Input("udld")]
        public Input<string>? Udld { get; set; }

        /// <summary>
        /// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// The voice VLAN of the switch template port. Only applicable to access ports.
        /// </summary>
        [Input("voiceVlan")]
        public Input<int>? VoiceVlan { get; set; }

        public ConfigTemplatesSwitchProfilesPortsArgs()
        {
        }
        public static new ConfigTemplatesSwitchProfilesPortsArgs Empty => new ConfigTemplatesSwitchProfilesPortsArgs();
    }

    public sealed class ConfigTemplatesSwitchProfilesPortsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<int>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// The VLANs allowed on the switch template port. Only applicable to trunk ports.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// configTemplateId path parameter. Config template ID
        /// </summary>
        [Input("configTemplateId")]
        public Input<string>? ConfigTemplateId { get; set; }

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Input("daiTrusted")]
        public Input<bool>? DaiTrusted { get; set; }

        /// <summary>
        /// The status of the switch template port.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Input("flexibleStackingEnabled")]
        public Input<bool>? FlexibleStackingEnabled { get; set; }

        /// <summary>
        /// The isolation status of the switch template port.
        /// </summary>
        [Input("isolationEnabled")]
        public Input<bool>? IsolationEnabled { get; set; }

        /// <summary>
        /// The link speed for the switch template port.
        /// </summary>
        [Input("linkNegotiation")]
        public Input<string>? LinkNegotiation { get; set; }

        [Input("linkNegotiationCapabilities")]
        private InputList<string>? _linkNegotiationCapabilities;

        /// <summary>
        /// Available link speeds for the switch template port.
        /// </summary>
        public InputList<string> LinkNegotiationCapabilities
        {
            get => _linkNegotiationCapabilities ?? (_linkNegotiationCapabilities = new InputList<string>());
            set => _linkNegotiationCapabilities = value;
        }

        [Input("macAllowLists")]
        private InputList<string>? _macAllowLists;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        public InputList<string> MacAllowLists
        {
            get => _macAllowLists ?? (_macAllowLists = new InputList<string>());
            set => _macAllowLists = value;
        }

        /// <summary>
        /// Port mirror
        /// </summary>
        [Input("mirror")]
        public Input<Inputs.ConfigTemplatesSwitchProfilesPortsMirrorGetArgs>? Mirror { get; set; }

        /// <summary>
        /// Expansion module
        /// </summary>
        [Input("module")]
        public Input<Inputs.ConfigTemplatesSwitchProfilesPortsModuleGetArgs>? Module { get; set; }

        /// <summary>
        /// The name of the switch template port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The PoE status of the switch template port.
        /// </summary>
        [Input("poeEnabled")]
        public Input<bool>? PoeEnabled { get; set; }

        /// <summary>
        /// The identifier of the switch template port.
        /// </summary>
        [Input("portId")]
        public Input<string>? PortId { get; set; }

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Input("portScheduleId")]
        public Input<string>? PortScheduleId { get; set; }

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Input("profile")]
        public Input<Inputs.ConfigTemplatesSwitchProfilesPortsProfileGetArgs>? Profile { get; set; }

        /// <summary>
        /// profileId path parameter. Profile ID
        /// </summary>
        [Input("profileId")]
        public Input<string>? ProfileId { get; set; }

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Input("rstpEnabled")]
        public Input<bool>? RstpEnabled { get; set; }

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Input("stickyMacAllowListLimit")]
        public Input<int>? StickyMacAllowListLimit { get; set; }

        [Input("stickyMacAllowLists")]
        private InputList<string>? _stickyMacAllowLists;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public InputList<string> StickyMacAllowLists
        {
            get => _stickyMacAllowLists ?? (_stickyMacAllowLists = new InputList<string>());
            set => _stickyMacAllowLists = value;
        }

        /// <summary>
        /// The storm control status of the switch template port.
        /// </summary>
        [Input("stormControlEnabled")]
        public Input<bool>? StormControlEnabled { get; set; }

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Input("stpGuard")]
        public Input<string>? StpGuard { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags of the switch template port.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the switch template port ('trunk' or 'access').
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Input("udld")]
        public Input<string>? Udld { get; set; }

        /// <summary>
        /// The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// The voice VLAN of the switch template port. Only applicable to access ports.
        /// </summary>
        [Input("voiceVlan")]
        public Input<int>? VoiceVlan { get; set; }

        public ConfigTemplatesSwitchProfilesPortsState()
        {
        }
        public static new ConfigTemplatesSwitchProfilesPortsState Empty => new ConfigTemplatesSwitchProfilesPortsState();
    }
}
