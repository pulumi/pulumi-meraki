// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetActionBatches
    {
        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Task<GetActionBatchesResult> InvokeAsync(GetActionBatchesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetActionBatchesResult>("meraki:organizations/getActionBatches:getActionBatches", args ?? new GetActionBatchesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetActionBatchesResult> Invoke(GetActionBatchesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetActionBatchesResult>("meraki:organizations/getActionBatches:getActionBatches", args ?? new GetActionBatchesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetActionBatchesResult> Invoke(GetActionBatchesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetActionBatchesResult>("meraki:organizations/getActionBatches:getActionBatches", args ?? new GetActionBatchesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetActionBatchesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// actionBatchId path parameter. Action batch ID
        /// </summary>
        [Input("actionBatchId")]
        public string? ActionBatchId { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public string? OrganizationId { get; set; }

        /// <summary>
        /// status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetActionBatchesArgs()
        {
        }
        public static new GetActionBatchesArgs Empty => new GetActionBatchesArgs();
    }

    public sealed class GetActionBatchesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// actionBatchId path parameter. Action batch ID
        /// </summary>
        [Input("actionBatchId")]
        public Input<string>? ActionBatchId { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetActionBatchesInvokeArgs()
        {
        }
        public static new GetActionBatchesInvokeArgs Empty => new GetActionBatchesInvokeArgs();
    }


    [OutputType]
    public sealed class GetActionBatchesResult
    {
        /// <summary>
        /// actionBatchId path parameter. Action batch ID
        /// </summary>
        public readonly string? ActionBatchId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetActionBatchesItemResult Item;
        /// <summary>
        /// Array of ResponseOrganizationsGetOrganizationActionBatches
        /// </summary>
        public readonly ImmutableArray<Outputs.GetActionBatchesItemResult> Items;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string? OrganizationId;
        /// <summary>
        /// status query parameter. Filter batches by status. Valid types are pending, completed, and failed.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetActionBatchesResult(
            string? actionBatchId,

            string id,

            Outputs.GetActionBatchesItemResult item,

            ImmutableArray<Outputs.GetActionBatchesItemResult> items,

            string? organizationId,

            string? status)
        {
            ActionBatchId = actionBatchId;
            Id = id;
            Item = item;
            Items = items;
            OrganizationId = organizationId;
            Status = status;
        }
    }
}
