// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Inputs
{

    public sealed class ActionBatchesCallbackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The webhook receiver used for the callback webhook.
        /// </summary>
        [Input("httpServer")]
        public Input<Inputs.ActionBatchesCallbackHttpServerArgs>? HttpServer { get; set; }

        /// <summary>
        /// The ID of the callback. To check the status of the callback, use this ID in a request to /webhooks/callbacks/statuses/{id}
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The payload template of the webhook used for the callback
        /// </summary>
        [Input("payloadTemplate")]
        public Input<Inputs.ActionBatchesCallbackPayloadTemplateArgs>? PayloadTemplate { get; set; }

        /// <summary>
        /// A shared secret that will be included in the requests sent to the callback URL. It can be used to verify that the request was sent by Meraki. If using this field, please also specify an url.
        /// </summary>
        [Input("sharedSecret")]
        public Input<string>? SharedSecret { get; set; }

        /// <summary>
        /// The status of the callback
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The callback URL for the webhook target. This was either provided in the original request or comes from a configured webhook receiver
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ActionBatchesCallbackArgs()
        {
        }
        public static new ActionBatchesCallbackArgs Empty => new ActionBatchesCallbackArgs();
    }
}
