// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations.Inputs
{

    public sealed class LicensingCotermLicensesMoveItemRemainderLicenseGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the license was claimed into the organization
        /// </summary>
        [Input("claimedAt")]
        public Input<string>? ClaimedAt { get; set; }

        [Input("counts")]
        private InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseCountGetArgs>? _counts;

        /// <summary>
        /// The counts of the license by model type
        /// </summary>
        public InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseCountGetArgs> Counts
        {
            get => _counts ?? (_counts = new InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseCountGetArgs>());
            set => _counts = value;
        }

        /// <summary>
        /// The duration (term length) of the license, measured in days
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        [Input("editions")]
        private InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseEditionGetArgs>? _editions;

        /// <summary>
        /// The editions of the license for each relevant product type
        /// </summary>
        public InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseEditionGetArgs> Editions
        {
            get => _editions ?? (_editions = new InputList<Inputs.LicensingCotermLicensesMoveItemRemainderLicenseEditionGetArgs>());
            set => _editions = value;
        }

        /// <summary>
        /// Flag to indicate if the license is expired
        /// </summary>
        [Input("expired")]
        public Input<bool>? Expired { get; set; }

        /// <summary>
        /// Flag to indicated that the license is invalidated
        /// </summary>
        [Input("invalidated")]
        public Input<bool>? Invalidated { get; set; }

        /// <summary>
        /// When the license was invalidated. Will be null for active licenses
        /// </summary>
        [Input("invalidatedAt")]
        public Input<string>? InvalidatedAt { get; set; }

        /// <summary>
        /// The key of the license
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The operation mode of the license when it was claimed
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The ID of the organization that the license is claimed in
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// When the license's term began (approximately the date when the license was created)
        /// </summary>
        [Input("startedAt")]
        public Input<string>? StartedAt { get; set; }

        public LicensingCotermLicensesMoveItemRemainderLicenseGetArgs()
        {
        }
        public static new LicensingCotermLicensesMoveItemRemainderLicenseGetArgs Empty => new LicensingCotermLicensesMoveItemRemainderLicenseGetArgs();
    }
}
