// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetDevicesBootsHistory
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesBootsHistory.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         MostRecentPerDevice = false,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SortOrder = "string",
        ///         StartingAfter = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesBootsHistoryExample"] = example.Apply(getDevicesBootsHistoryResult =&gt; getDevicesBootsHistoryResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDevicesBootsHistoryResult> InvokeAsync(GetDevicesBootsHistoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevicesBootsHistoryResult>("meraki:organizations/getDevicesBootsHistory:getDevicesBootsHistory", args ?? new GetDevicesBootsHistoryArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesBootsHistory.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         MostRecentPerDevice = false,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SortOrder = "string",
        ///         StartingAfter = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesBootsHistoryExample"] = example.Apply(getDevicesBootsHistoryResult =&gt; getDevicesBootsHistoryResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDevicesBootsHistoryResult> Invoke(GetDevicesBootsHistoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesBootsHistoryResult>("meraki:organizations/getDevicesBootsHistory:getDevicesBootsHistory", args ?? new GetDevicesBootsHistoryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetDevicesBootsHistory.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         MostRecentPerDevice = false,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         SortOrder = "string",
        ///         StartingAfter = "string",
        ///         T0 = "string",
        ///         T1 = "string",
        ///         Timespan = 1,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsDevicesBootsHistoryExample"] = example.Apply(getDevicesBootsHistoryResult =&gt; getDevicesBootsHistoryResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDevicesBootsHistoryResult> Invoke(GetDevicesBootsHistoryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesBootsHistoryResult>("meraki:organizations/getDevicesBootsHistory:getDevicesBootsHistory", args ?? new GetDevicesBootsHistoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevicesBootsHistoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        /// <summary>
        /// mostRecentPerDevice query parameter. If true, only the most recent boot for each device is returned.
        /// </summary>
        [Input("mostRecentPerDevice")]
        public bool? MostRecentPerDevice { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter device by device serial numbers. This filter uses multiple exact matches.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        /// <summary>
        /// sortOrder query parameter. Sorted order of entries. Order options are 'ascending' and 'descending'. Default is 'descending'.
        /// </summary>
        [Input("sortOrder")]
        public string? SortOrder { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data.
        /// </summary>
        [Input("t0")]
        public string? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 730 days after t0.
        /// </summary>
        [Input("t1")]
        public string? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 730 days.
        /// </summary>
        [Input("timespan")]
        public double? Timespan { get; set; }

        public GetDevicesBootsHistoryArgs()
        {
        }
        public static new GetDevicesBootsHistoryArgs Empty => new GetDevicesBootsHistoryArgs();
    }

    public sealed class GetDevicesBootsHistoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        /// <summary>
        /// mostRecentPerDevice query parameter. If true, only the most recent boot for each device is returned.
        /// </summary>
        [Input("mostRecentPerDevice")]
        public Input<bool>? MostRecentPerDevice { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter device by device serial numbers. This filter uses multiple exact matches.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        /// <summary>
        /// sortOrder query parameter. Sorted order of entries. Order options are 'ascending' and 'descending'. Default is 'descending'.
        /// </summary>
        [Input("sortOrder")]
        public Input<string>? SortOrder { get; set; }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data.
        /// </summary>
        [Input("t0")]
        public Input<string>? T0 { get; set; }

        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 730 days after t0.
        /// </summary>
        [Input("t1")]
        public Input<string>? T1 { get; set; }

        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 730 days.
        /// </summary>
        [Input("timespan")]
        public Input<double>? Timespan { get; set; }

        public GetDevicesBootsHistoryInvokeArgs()
        {
        }
        public static new GetDevicesBootsHistoryInvokeArgs Empty => new GetDevicesBootsHistoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevicesBootsHistoryResult
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseOrganizationsGetOrganizationDevicesBootsHistory
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDevicesBootsHistoryItemResult> Items;
        /// <summary>
        /// mostRecentPerDevice query parameter. If true, only the most recent boot for each device is returned.
        /// </summary>
        public readonly bool? MostRecentPerDevice;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// serials query parameter. Optional parameter to filter device by device serial numbers. This filter uses multiple exact matches.
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// sortOrder query parameter. Sorted order of entries. Order options are 'ascending' and 'descending'. Default is 'descending'.
        /// </summary>
        public readonly string? SortOrder;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;
        /// <summary>
        /// t0 query parameter. The beginning of the timespan for the data.
        /// </summary>
        public readonly string? T0;
        /// <summary>
        /// t1 query parameter. The end of the timespan for the data. t1 can be a maximum of 730 days after t0.
        /// </summary>
        public readonly string? T1;
        /// <summary>
        /// timespan query parameter. The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 730 days.
        /// </summary>
        public readonly double? Timespan;

        [OutputConstructor]
        private GetDevicesBootsHistoryResult(
            string? endingBefore,

            string id,

            ImmutableArray<Outputs.GetDevicesBootsHistoryItemResult> items,

            bool? mostRecentPerDevice,

            string organizationId,

            int? perPage,

            ImmutableArray<string> serials,

            string? sortOrder,

            string? startingAfter,

            string? t0,

            string? t1,

            double? timespan)
        {
            EndingBefore = endingBefore;
            Id = id;
            Items = items;
            MostRecentPerDevice = mostRecentPerDevice;
            OrganizationId = organizationId;
            PerPage = perPage;
            Serials = serials;
            SortOrder = sortOrder;
            StartingAfter = startingAfter;
            T0 = t0;
            T1 = t1;
            Timespan = timespan;
        }
    }
}
