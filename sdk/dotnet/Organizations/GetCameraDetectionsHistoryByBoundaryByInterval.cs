// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetCameraDetectionsHistoryByBoundaryByInterval
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetCameraDetectionsHistoryByBoundaryByInterval.Invoke(new()
        ///     {
        ///         BoundaryIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         BoundaryTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Duration = 1,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Ranges = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsCameraDetectionsHistoryByBoundaryByIntervalExample"] = example.Apply(getCameraDetectionsHistoryByBoundaryByIntervalResult =&gt; getCameraDetectionsHistoryByBoundaryByIntervalResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCameraDetectionsHistoryByBoundaryByIntervalResult> InvokeAsync(GetCameraDetectionsHistoryByBoundaryByIntervalArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCameraDetectionsHistoryByBoundaryByIntervalResult>("meraki:organizations/getCameraDetectionsHistoryByBoundaryByInterval:getCameraDetectionsHistoryByBoundaryByInterval", args ?? new GetCameraDetectionsHistoryByBoundaryByIntervalArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetCameraDetectionsHistoryByBoundaryByInterval.Invoke(new()
        ///     {
        ///         BoundaryIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         BoundaryTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Duration = 1,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Ranges = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsCameraDetectionsHistoryByBoundaryByIntervalExample"] = example.Apply(getCameraDetectionsHistoryByBoundaryByIntervalResult =&gt; getCameraDetectionsHistoryByBoundaryByIntervalResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCameraDetectionsHistoryByBoundaryByIntervalResult> Invoke(GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCameraDetectionsHistoryByBoundaryByIntervalResult>("meraki:organizations/getCameraDetectionsHistoryByBoundaryByInterval:getCameraDetectionsHistoryByBoundaryByInterval", args ?? new GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetCameraDetectionsHistoryByBoundaryByInterval.Invoke(new()
        ///     {
        ///         BoundaryIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         BoundaryTypes = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Duration = 1,
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Ranges = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsCameraDetectionsHistoryByBoundaryByIntervalExample"] = example.Apply(getCameraDetectionsHistoryByBoundaryByIntervalResult =&gt; getCameraDetectionsHistoryByBoundaryByIntervalResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCameraDetectionsHistoryByBoundaryByIntervalResult> Invoke(GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCameraDetectionsHistoryByBoundaryByIntervalResult>("meraki:organizations/getCameraDetectionsHistoryByBoundaryByInterval:getCameraDetectionsHistoryByBoundaryByInterval", args ?? new GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCameraDetectionsHistoryByBoundaryByIntervalArgs : global::Pulumi.InvokeArgs
    {
        [Input("boundaryIds", required: true)]
        private List<string>? _boundaryIds;

        /// <summary>
        /// boundaryIds query parameter. A list of boundary ids. The returned cameras will be filtered to only include these ids.
        /// </summary>
        public List<string> BoundaryIds
        {
            get => _boundaryIds ?? (_boundaryIds = new List<string>());
            set => _boundaryIds = value;
        }

        [Input("boundaryTypes")]
        private List<string>? _boundaryTypes;

        /// <summary>
        /// boundaryTypes query parameter. The detection types. Defaults to 'person'.
        /// </summary>
        public List<string> BoundaryTypes
        {
            get => _boundaryTypes ?? (_boundaryTypes = new List<string>());
            set => _boundaryTypes = value;
        }

        /// <summary>
        /// duration query parameter. The minimum time, in seconds, that the person or car remains in the area to be counted. Defaults to boundary configuration or 60.
        /// </summary>
        [Input("duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 1 1000. Defaults to 1000.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("ranges", required: true)]
        private List<string>? _ranges;

        /// <summary>
        /// ranges query parameter. A list of time ranges with intervals
        /// </summary>
        public List<string> Ranges
        {
            get => _ranges ?? (_ranges = new List<string>());
            set => _ranges = value;
        }

        public GetCameraDetectionsHistoryByBoundaryByIntervalArgs()
        {
        }
        public static new GetCameraDetectionsHistoryByBoundaryByIntervalArgs Empty => new GetCameraDetectionsHistoryByBoundaryByIntervalArgs();
    }

    public sealed class GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("boundaryIds", required: true)]
        private InputList<string>? _boundaryIds;

        /// <summary>
        /// boundaryIds query parameter. A list of boundary ids. The returned cameras will be filtered to only include these ids.
        /// </summary>
        public InputList<string> BoundaryIds
        {
            get => _boundaryIds ?? (_boundaryIds = new InputList<string>());
            set => _boundaryIds = value;
        }

        [Input("boundaryTypes")]
        private InputList<string>? _boundaryTypes;

        /// <summary>
        /// boundaryTypes query parameter. The detection types. Defaults to 'person'.
        /// </summary>
        public InputList<string> BoundaryTypes
        {
            get => _boundaryTypes ?? (_boundaryTypes = new InputList<string>());
            set => _boundaryTypes = value;
        }

        /// <summary>
        /// duration query parameter. The minimum time, in seconds, that the person or car remains in the area to be counted. Defaults to boundary configuration or 60.
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 1 1000. Defaults to 1000.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("ranges", required: true)]
        private InputList<string>? _ranges;

        /// <summary>
        /// ranges query parameter. A list of time ranges with intervals
        /// </summary>
        public InputList<string> Ranges
        {
            get => _ranges ?? (_ranges = new InputList<string>());
            set => _ranges = value;
        }

        public GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs()
        {
        }
        public static new GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs Empty => new GetCameraDetectionsHistoryByBoundaryByIntervalInvokeArgs();
    }


    [OutputType]
    public sealed class GetCameraDetectionsHistoryByBoundaryByIntervalResult
    {
        /// <summary>
        /// boundaryIds query parameter. A list of boundary ids. The returned cameras will be filtered to only include these ids.
        /// </summary>
        public readonly ImmutableArray<string> BoundaryIds;
        /// <summary>
        /// boundaryTypes query parameter. The detection types. Defaults to 'person'.
        /// </summary>
        public readonly ImmutableArray<string> BoundaryTypes;
        /// <summary>
        /// duration query parameter. The minimum time, in seconds, that the person or car remains in the area to be counted. Defaults to boundary configuration or 60.
        /// </summary>
        public readonly int? Duration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseCameraGetOrganizationCameraDetectionsHistoryByBoundaryByInterval
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCameraDetectionsHistoryByBoundaryByIntervalItemResult> Items;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 1 1000. Defaults to 1000.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// ranges query parameter. A list of time ranges with intervals
        /// </summary>
        public readonly ImmutableArray<string> Ranges;

        [OutputConstructor]
        private GetCameraDetectionsHistoryByBoundaryByIntervalResult(
            ImmutableArray<string> boundaryIds,

            ImmutableArray<string> boundaryTypes,

            int? duration,

            string id,

            ImmutableArray<Outputs.GetCameraDetectionsHistoryByBoundaryByIntervalItemResult> items,

            string organizationId,

            int? perPage,

            ImmutableArray<string> ranges)
        {
            BoundaryIds = boundaryIds;
            BoundaryTypes = boundaryTypes;
            Duration = duration;
            Id = id;
            Items = items;
            OrganizationId = organizationId;
            PerPage = perPage;
            Ranges = ranges;
        }
    }
}
