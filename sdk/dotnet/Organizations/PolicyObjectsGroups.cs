// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.PolicyObjectsGroups("example", new()
    ///     {
    ///         Category = "NetworkObjectGroup",
    ///         Name = "Web Servers - Datacenter 10",
    ///         ObjectIds = new[]
    ///         {
    ///             "100",
    ///         },
    ///         OrganizationId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsPolicyObjectsGroupsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/policyObjectsGroups:PolicyObjectsGroups example "organization_id,policy_object_group_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/policyObjectsGroups:PolicyObjectsGroups")]
    public partial class PolicyObjectsGroups : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkIds")]
        public Output<ImmutableArray<string>> NetworkIds { get; private set; } = null!;

        /// <summary>
        /// A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
        /// </summary>
        [Output("objectIds")]
        public Output<ImmutableArray<string>> ObjectIds { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// policyObjectGroupId path parameter. Policy object group ID
        /// </summary>
        [Output("policyObjectGroupId")]
        public Output<string> PolicyObjectGroupId { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyObjectsGroups resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyObjectsGroups(string name, PolicyObjectsGroupsArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/policyObjectsGroups:PolicyObjectsGroups", name, args ?? new PolicyObjectsGroupsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyObjectsGroups(string name, Input<string> id, PolicyObjectsGroupsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/policyObjectsGroups:PolicyObjectsGroups", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyObjectsGroups resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyObjectsGroups Get(string name, Input<string> id, PolicyObjectsGroupsState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyObjectsGroups(name, id, state, options);
        }
    }

    public sealed class PolicyObjectsGroupsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objectIds")]
        private InputList<string>? _objectIds;

        /// <summary>
        /// A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
        /// </summary>
        public InputList<string> ObjectIds
        {
            get => _objectIds ?? (_objectIds = new InputList<string>());
            set => _objectIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// policyObjectGroupId path parameter. Policy object group ID
        /// </summary>
        [Input("policyObjectGroupId")]
        public Input<string>? PolicyObjectGroupId { get; set; }

        public PolicyObjectsGroupsArgs()
        {
        }
        public static new PolicyObjectsGroupsArgs Empty => new PolicyObjectsGroupsArgs();
    }

    public sealed class PolicyObjectsGroupsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Category of a policy object group (one of: NetworkObjectGroup, GeoLocationGroup, PortObjectGroup, ApplicationGroup)
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A name for the group of network addresses, unique within the organization (alphanumeric, space, dash, or underscore characters only)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkIds")]
        private InputList<string>? _networkIds;
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        [Input("objectIds")]
        private InputList<string>? _objectIds;

        /// <summary>
        /// A list of Policy Object ID's that this NetworkObjectGroup should be associated to (note: these ID's will replace the existing associated Policy Objects)
        /// </summary>
        public InputList<string> ObjectIds
        {
            get => _objectIds ?? (_objectIds = new InputList<string>());
            set => _objectIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// policyObjectGroupId path parameter. Policy object group ID
        /// </summary>
        [Input("policyObjectGroupId")]
        public Input<string>? PolicyObjectGroupId { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public PolicyObjectsGroupsState()
        {
        }
        public static new PolicyObjectsGroupsState Empty => new PolicyObjectsGroupsState();
    }
}
