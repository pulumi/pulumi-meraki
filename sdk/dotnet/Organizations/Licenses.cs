// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.Licenses("example", new()
    ///     {
    ///         DeviceSerial = "Q234-ABCD-5678",
    ///         LicenseId = "string",
    ///         OrganizationId = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsLicensesExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/licenses:Licenses example "license_id,organization_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/licenses:Licenses")]
    public partial class Licenses : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date the license started burning
        /// </summary>
        [Output("activationDate")]
        public Output<string> ActivationDate { get; private set; } = null!;

        /// <summary>
        /// The date the license was claimed into the organization
        /// </summary>
        [Output("claimDate")]
        public Output<string> ClaimDate { get; private set; } = null!;

        /// <summary>
        /// Serial number of the device the license is assigned to
        /// </summary>
        [Output("deviceSerial")]
        public Output<string> DeviceSerial { get; private set; } = null!;

        /// <summary>
        /// The duration of the individual license
        /// </summary>
        [Output("durationInDays")]
        public Output<int> DurationInDays { get; private set; } = null!;

        /// <summary>
        /// The date the license will expire
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The id of the head license this license is queued behind. If there is no head license, it returns nil.
        /// </summary>
        [Output("headLicenseId")]
        public Output<string> HeadLicenseId { get; private set; } = null!;

        /// <summary>
        /// licenseId path parameter. License ID
        /// </summary>
        [Output("licenseId")]
        public Output<string> LicenseId { get; private set; } = null!;

        /// <summary>
        /// License key
        /// </summary>
        [Output("licenseKey")]
        public Output<string> LicenseKey { get; private set; } = null!;

        /// <summary>
        /// License type
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// ID of the network the license is assigned to
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// Order number
        /// </summary>
        [Output("orderNumber")]
        public Output<string> OrderNumber { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        /// </summary>
        [Output("permanentlyQueuedLicenses")]
        public Output<ImmutableArray<Outputs.LicensesPermanentlyQueuedLicense>> PermanentlyQueuedLicenses { get; private set; } = null!;

        /// <summary>
        /// The number of seats of the license. Only applicable to SM licenses.
        /// </summary>
        [Output("seatCount")]
        public Output<int> SeatCount { get; private set; } = null!;

        /// <summary>
        /// The state of the license. All queued licenses have a status of *recentlyQueued*.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The duration of the license plus all permanently queued licenses associated with it
        /// </summary>
        [Output("totalDurationInDays")]
        public Output<int> TotalDurationInDays { get; private set; } = null!;


        /// <summary>
        /// Create a Licenses resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Licenses(string name, LicensesArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/licenses:Licenses", name, args ?? new LicensesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Licenses(string name, Input<string> id, LicensesState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/licenses:Licenses", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Licenses resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Licenses Get(string name, Input<string> id, LicensesState? state = null, CustomResourceOptions? options = null)
        {
            return new Licenses(name, id, state, options);
        }
    }

    public sealed class LicensesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Serial number of the device the license is assigned to
        /// </summary>
        [Input("deviceSerial")]
        public Input<string>? DeviceSerial { get; set; }

        /// <summary>
        /// licenseId path parameter. License ID
        /// </summary>
        [Input("licenseId", required: true)]
        public Input<string> LicenseId { get; set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        public LicensesArgs()
        {
        }
        public static new LicensesArgs Empty => new LicensesArgs();
    }

    public sealed class LicensesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date the license started burning
        /// </summary>
        [Input("activationDate")]
        public Input<string>? ActivationDate { get; set; }

        /// <summary>
        /// The date the license was claimed into the organization
        /// </summary>
        [Input("claimDate")]
        public Input<string>? ClaimDate { get; set; }

        /// <summary>
        /// Serial number of the device the license is assigned to
        /// </summary>
        [Input("deviceSerial")]
        public Input<string>? DeviceSerial { get; set; }

        /// <summary>
        /// The duration of the individual license
        /// </summary>
        [Input("durationInDays")]
        public Input<int>? DurationInDays { get; set; }

        /// <summary>
        /// The date the license will expire
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The id of the head license this license is queued behind. If there is no head license, it returns nil.
        /// </summary>
        [Input("headLicenseId")]
        public Input<string>? HeadLicenseId { get; set; }

        /// <summary>
        /// licenseId path parameter. License ID
        /// </summary>
        [Input("licenseId")]
        public Input<string>? LicenseId { get; set; }

        /// <summary>
        /// License key
        /// </summary>
        [Input("licenseKey")]
        public Input<string>? LicenseKey { get; set; }

        /// <summary>
        /// License type
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// ID of the network the license is assigned to
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// Order number
        /// </summary>
        [Input("orderNumber")]
        public Input<string>? OrderNumber { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("permanentlyQueuedLicenses")]
        private InputList<Inputs.LicensesPermanentlyQueuedLicenseGetArgs>? _permanentlyQueuedLicenses;

        /// <summary>
        /// DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
        /// </summary>
        public InputList<Inputs.LicensesPermanentlyQueuedLicenseGetArgs> PermanentlyQueuedLicenses
        {
            get => _permanentlyQueuedLicenses ?? (_permanentlyQueuedLicenses = new InputList<Inputs.LicensesPermanentlyQueuedLicenseGetArgs>());
            set => _permanentlyQueuedLicenses = value;
        }

        /// <summary>
        /// The number of seats of the license. Only applicable to SM licenses.
        /// </summary>
        [Input("seatCount")]
        public Input<int>? SeatCount { get; set; }

        /// <summary>
        /// The state of the license. All queued licenses have a status of *recentlyQueued*.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The duration of the license plus all permanently queued licenses associated with it
        /// </summary>
        [Input("totalDurationInDays")]
        public Input<int>? TotalDurationInDays { get; set; }

        public LicensesState()
        {
        }
        public static new LicensesState Empty => new LicensesState();
    }
}
