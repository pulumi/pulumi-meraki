// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetSwitchPortsBySwitch
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetSwitchPortsBySwitch.Invoke(new()
        ///     {
        ///         ConfigurationUpdatedAfter = "string",
        ///         EndingBefore = "string",
        ///         Mac = "string",
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Name = "string",
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         PortProfileIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serial = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsSwitchPortsBySwitchExample"] = example.Apply(getSwitchPortsBySwitchResult =&gt; getSwitchPortsBySwitchResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSwitchPortsBySwitchResult> InvokeAsync(GetSwitchPortsBySwitchArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSwitchPortsBySwitchResult>("meraki:organizations/getSwitchPortsBySwitch:getSwitchPortsBySwitch", args ?? new GetSwitchPortsBySwitchArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetSwitchPortsBySwitch.Invoke(new()
        ///     {
        ///         ConfigurationUpdatedAfter = "string",
        ///         EndingBefore = "string",
        ///         Mac = "string",
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Name = "string",
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         PortProfileIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serial = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsSwitchPortsBySwitchExample"] = example.Apply(getSwitchPortsBySwitchResult =&gt; getSwitchPortsBySwitchResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSwitchPortsBySwitchResult> Invoke(GetSwitchPortsBySwitchInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSwitchPortsBySwitchResult>("meraki:organizations/getSwitchPortsBySwitch:getSwitchPortsBySwitch", args ?? new GetSwitchPortsBySwitchInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetSwitchPortsBySwitch.Invoke(new()
        ///     {
        ///         ConfigurationUpdatedAfter = "string",
        ///         EndingBefore = "string",
        ///         Mac = "string",
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Name = "string",
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         PortProfileIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Serial = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsSwitchPortsBySwitchExample"] = example.Apply(getSwitchPortsBySwitchResult =&gt; getSwitchPortsBySwitchResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSwitchPortsBySwitchResult> Invoke(GetSwitchPortsBySwitchInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSwitchPortsBySwitchResult>("meraki:organizations/getSwitchPortsBySwitch:getSwitchPortsBySwitch", args ?? new GetSwitchPortsBySwitchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSwitchPortsBySwitchArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
        /// </summary>
        [Input("configurationUpdatedAfter")]
        public string? ConfigurationUpdatedAfter { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        /// <summary>
        /// mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        [Input("mac")]
        public string? Mac { get; set; }

        [Input("macs")]
        private List<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
        /// </summary>
        public List<string> Macs
        {
            get => _macs ?? (_macs = new List<string>());
            set => _macs = value;
        }

        /// <summary>
        /// name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("networkIds")]
        private List<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter switchports by network.
        /// </summary>
        public List<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new List<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("portProfileIds")]
        private List<string>? _portProfileIds;

        /// <summary>
        /// portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
        /// </summary>
        public List<string> PortProfileIds
        {
            get => _portProfileIds ?? (_portProfileIds = new List<string>());
            set => _portProfileIds = value;
        }

        /// <summary>
        /// serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
        /// </summary>
        [Input("serial")]
        public string? Serial { get; set; }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        public GetSwitchPortsBySwitchArgs()
        {
        }
        public static new GetSwitchPortsBySwitchArgs Empty => new GetSwitchPortsBySwitchArgs();
    }

    public sealed class GetSwitchPortsBySwitchInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
        /// </summary>
        [Input("configurationUpdatedAfter")]
        public Input<string>? ConfigurationUpdatedAfter { get; set; }

        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        /// <summary>
        /// mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("macs")]
        private InputList<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
        /// </summary>
        public InputList<string> Macs
        {
            get => _macs ?? (_macs = new InputList<string>());
            set => _macs = value;
        }

        /// <summary>
        /// name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkIds")]
        private InputList<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter switchports by network.
        /// </summary>
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("portProfileIds")]
        private InputList<string>? _portProfileIds;

        /// <summary>
        /// portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
        /// </summary>
        public InputList<string> PortProfileIds
        {
            get => _portProfileIds ?? (_portProfileIds = new InputList<string>());
            set => _portProfileIds = value;
        }

        /// <summary>
        /// serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        public GetSwitchPortsBySwitchInvokeArgs()
        {
        }
        public static new GetSwitchPortsBySwitchInvokeArgs Empty => new GetSwitchPortsBySwitchInvokeArgs();
    }


    [OutputType]
    public sealed class GetSwitchPortsBySwitchResult
    {
        /// <summary>
        /// configurationUpdatedAfter query parameter. Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
        /// </summary>
        public readonly string? ConfigurationUpdatedAfter;
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseSwitchGetOrganizationSwitchPortsBySwitch
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSwitchPortsBySwitchItemResult> Items;
        /// <summary>
        /// mac query parameter. Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Mac;
        /// <summary>
        /// macs query parameter. Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Macs;
        /// <summary>
        /// name query parameter. Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// networkIds query parameter. Optional parameter to filter switchports by network.
        /// </summary>
        public readonly ImmutableArray<string> NetworkIds;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 50. Default is 50.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// portProfileIds query parameter. Optional parameter to filter switchports belonging to the specified port profiles.
        /// </summary>
        public readonly ImmutableArray<string> PortProfileIds;
        /// <summary>
        /// serial query parameter. Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
        /// </summary>
        public readonly string? Serial;
        /// <summary>
        /// serials query parameter. Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;

        [OutputConstructor]
        private GetSwitchPortsBySwitchResult(
            string? configurationUpdatedAfter,

            string? endingBefore,

            string id,

            ImmutableArray<Outputs.GetSwitchPortsBySwitchItemResult> items,

            string? mac,

            ImmutableArray<string> macs,

            string? name,

            ImmutableArray<string> networkIds,

            string organizationId,

            int? perPage,

            ImmutableArray<string> portProfileIds,

            string? serial,

            ImmutableArray<string> serials,

            string? startingAfter)
        {
            ConfigurationUpdatedAfter = configurationUpdatedAfter;
            EndingBefore = endingBefore;
            Id = id;
            Items = items;
            Mac = mac;
            Macs = macs;
            Name = name;
            NetworkIds = networkIds;
            OrganizationId = organizationId;
            PerPage = perPage;
            PortProfileIds = portProfileIds;
            Serial = serial;
            Serials = serials;
            StartingAfter = startingAfter;
        }
    }
}
