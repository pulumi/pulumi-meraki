// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Organizations.AdaptivePolicyGroups("example", new()
    ///     {
    ///         Description = "Group of XYZ Corp Employees",
    ///         Name = "Employee Group",
    ///         OrganizationId = "string",
    ///         PolicyObjects = new[]
    ///         {
    ///             new Meraki.Organizations.Inputs.AdaptivePolicyGroupsPolicyObjectArgs
    ///             {
    ///                 Id = "2345",
    ///                 Name = "Example Policy Object",
    ///             },
    ///         },
    ///         Sgt = 1000,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiOrganizationsAdaptivePolicyGroupsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups example "id,organization_id"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups")]
    public partial class AdaptivePolicyGroups : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the group (default: "")
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        [Output("isDefaultGroup")]
        public Output<bool> IsDefaultGroup { get; private set; } = null!;

        /// <summary>
        /// Name of the group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
        /// </summary>
        [Output("policyObjects")]
        public Output<ImmutableArray<Outputs.AdaptivePolicyGroupsPolicyObject>> PolicyObjects { get; private set; } = null!;

        [Output("requiredIpMappings")]
        public Output<ImmutableArray<string>> RequiredIpMappings { get; private set; } = null!;

        /// <summary>
        /// SGT value of the group
        /// </summary>
        [Output("sgt")]
        public Output<int> Sgt { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a AdaptivePolicyGroups resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdaptivePolicyGroups(string name, AdaptivePolicyGroupsArgs args, CustomResourceOptions? options = null)
            : base("meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups", name, args ?? new AdaptivePolicyGroupsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdaptivePolicyGroups(string name, Input<string> id, AdaptivePolicyGroupsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:organizations/adaptivePolicyGroups:AdaptivePolicyGroups", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdaptivePolicyGroups resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdaptivePolicyGroups Get(string name, Input<string> id, AdaptivePolicyGroupsState? state = null, CustomResourceOptions? options = null)
        {
            return new AdaptivePolicyGroups(name, id, state, options);
        }
    }

    public sealed class AdaptivePolicyGroupsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the group (default: "")
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("policyObjects")]
        private InputList<Inputs.AdaptivePolicyGroupsPolicyObjectArgs>? _policyObjects;

        /// <summary>
        /// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
        /// </summary>
        public InputList<Inputs.AdaptivePolicyGroupsPolicyObjectArgs> PolicyObjects
        {
            get => _policyObjects ?? (_policyObjects = new InputList<Inputs.AdaptivePolicyGroupsPolicyObjectArgs>());
            set => _policyObjects = value;
        }

        /// <summary>
        /// SGT value of the group
        /// </summary>
        [Input("sgt")]
        public Input<int>? Sgt { get; set; }

        public AdaptivePolicyGroupsArgs()
        {
        }
        public static new AdaptivePolicyGroupsArgs Empty => new AdaptivePolicyGroupsArgs();
    }

    public sealed class AdaptivePolicyGroupsState : global::Pulumi.ResourceArgs
    {
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the group (default: "")
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("isDefaultGroup")]
        public Input<bool>? IsDefaultGroup { get; set; }

        /// <summary>
        /// Name of the group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("policyObjects")]
        private InputList<Inputs.AdaptivePolicyGroupsPolicyObjectGetArgs>? _policyObjects;

        /// <summary>
        /// The policy objects that belong to this group; traffic from addresses specified by these policy objects will be tagged with this group's SGT value if no other tagging scheme is being used (each requires one unique attribute) ()
        /// </summary>
        public InputList<Inputs.AdaptivePolicyGroupsPolicyObjectGetArgs> PolicyObjects
        {
            get => _policyObjects ?? (_policyObjects = new InputList<Inputs.AdaptivePolicyGroupsPolicyObjectGetArgs>());
            set => _policyObjects = value;
        }

        [Input("requiredIpMappings")]
        private InputList<string>? _requiredIpMappings;
        public InputList<string> RequiredIpMappings
        {
            get => _requiredIpMappings ?? (_requiredIpMappings = new InputList<string>());
            set => _requiredIpMappings = value;
        }

        /// <summary>
        /// SGT value of the group
        /// </summary>
        [Input("sgt")]
        public Input<int>? Sgt { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public AdaptivePolicyGroupsState()
        {
        }
        public static new AdaptivePolicyGroupsState Empty => new AdaptivePolicyGroupsState();
    }
}
