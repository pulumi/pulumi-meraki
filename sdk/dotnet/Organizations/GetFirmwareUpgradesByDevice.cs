// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetFirmwareUpgradesByDevice
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetFirmwareUpgradesByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         FirmwareUpgradeBatchIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         Upgradestatuses = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsFirmwareUpgradesByDeviceExample"] = example.Apply(getFirmwareUpgradesByDeviceResult =&gt; getFirmwareUpgradesByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFirmwareUpgradesByDeviceResult> InvokeAsync(GetFirmwareUpgradesByDeviceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirmwareUpgradesByDeviceResult>("meraki:organizations/getFirmwareUpgradesByDevice:getFirmwareUpgradesByDevice", args ?? new GetFirmwareUpgradesByDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetFirmwareUpgradesByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         FirmwareUpgradeBatchIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         Upgradestatuses = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsFirmwareUpgradesByDeviceExample"] = example.Apply(getFirmwareUpgradesByDeviceResult =&gt; getFirmwareUpgradesByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirmwareUpgradesByDeviceResult> Invoke(GetFirmwareUpgradesByDeviceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirmwareUpgradesByDeviceResult>("meraki:organizations/getFirmwareUpgradesByDevice:getFirmwareUpgradesByDevice", args ?? new GetFirmwareUpgradesByDeviceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetFirmwareUpgradesByDevice.Invoke(new()
        ///     {
        ///         EndingBefore = "string",
        ///         FirmwareUpgradeBatchIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         Macs = new[]
        ///         {
        ///             "string",
        ///         },
        ///         NetworkIds = new[]
        ///         {
        ///             "string",
        ///         },
        ///         OrganizationId = "string",
        ///         PerPage = 1,
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///         StartingAfter = "string",
        ///         Upgradestatuses = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsFirmwareUpgradesByDeviceExample"] = example.Apply(getFirmwareUpgradesByDeviceResult =&gt; getFirmwareUpgradesByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirmwareUpgradesByDeviceResult> Invoke(GetFirmwareUpgradesByDeviceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirmwareUpgradesByDeviceResult>("meraki:organizations/getFirmwareUpgradesByDevice:getFirmwareUpgradesByDevice", args ?? new GetFirmwareUpgradesByDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirmwareUpgradesByDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public string? EndingBefore { get; set; }

        [Input("firmwareUpgradeBatchIds")]
        private List<string>? _firmwareUpgradeBatchIds;

        /// <summary>
        /// firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
        /// </summary>
        public List<string> FirmwareUpgradeBatchIds
        {
            get => _firmwareUpgradeBatchIds ?? (_firmwareUpgradeBatchIds = new List<string>());
            set => _firmwareUpgradeBatchIds = value;
        }

        [Input("macs")]
        private List<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
        /// </summary>
        public List<string> Macs
        {
            get => _macs ?? (_macs = new List<string>());
            set => _macs = value;
        }

        [Input("networkIds")]
        private List<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter by network
        /// </summary>
        public List<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new List<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
        /// </summary>
        [Input("perPage")]
        public int? PerPage { get; set; }

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public string? StartingAfter { get; set; }

        [Input("upgradestatuses")]
        private List<string>? _upgradestatuses;

        /// <summary>
        /// upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
        /// </summary>
        public List<string> Upgradestatuses
        {
            get => _upgradestatuses ?? (_upgradestatuses = new List<string>());
            set => _upgradestatuses = value;
        }

        public GetFirmwareUpgradesByDeviceArgs()
        {
        }
        public static new GetFirmwareUpgradesByDeviceArgs Empty => new GetFirmwareUpgradesByDeviceArgs();
    }

    public sealed class GetFirmwareUpgradesByDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("endingBefore")]
        public Input<string>? EndingBefore { get; set; }

        [Input("firmwareUpgradeBatchIds")]
        private InputList<string>? _firmwareUpgradeBatchIds;

        /// <summary>
        /// firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
        /// </summary>
        public InputList<string> FirmwareUpgradeBatchIds
        {
            get => _firmwareUpgradeBatchIds ?? (_firmwareUpgradeBatchIds = new InputList<string>());
            set => _firmwareUpgradeBatchIds = value;
        }

        [Input("macs")]
        private InputList<string>? _macs;

        /// <summary>
        /// macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
        /// </summary>
        public InputList<string> Macs
        {
            get => _macs ?? (_macs = new InputList<string>());
            set => _macs = value;
        }

        [Input("networkIds")]
        private InputList<string>? _networkIds;

        /// <summary>
        /// networkIds query parameter. Optional parameter to filter by network
        /// </summary>
        public InputList<string> NetworkIds
        {
            get => _networkIds ?? (_networkIds = new InputList<string>());
            set => _networkIds = value;
        }

        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
        /// </summary>
        [Input("perPage")]
        public Input<int>? PerPage { get; set; }

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        [Input("startingAfter")]
        public Input<string>? StartingAfter { get; set; }

        [Input("upgradestatuses")]
        private InputList<string>? _upgradestatuses;

        /// <summary>
        /// upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
        /// </summary>
        public InputList<string> Upgradestatuses
        {
            get => _upgradestatuses ?? (_upgradestatuses = new InputList<string>());
            set => _upgradestatuses = value;
        }

        public GetFirmwareUpgradesByDeviceInvokeArgs()
        {
        }
        public static new GetFirmwareUpgradesByDeviceInvokeArgs Empty => new GetFirmwareUpgradesByDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirmwareUpgradesByDeviceResult
    {
        /// <summary>
        /// endingBefore query parameter. A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? EndingBefore;
        /// <summary>
        /// firmwareUpgradeBatchIds query parameter. Optional parameter to filter by firmware upgrade batch ids.
        /// </summary>
        public readonly ImmutableArray<string> FirmwareUpgradeBatchIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseOrganizationsGetOrganizationFirmwareUpgradesByDevice
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirmwareUpgradesByDeviceItemResult> Items;
        /// <summary>
        /// macs query parameter. Optional parameter to filter by one or more MAC addresses belonging to devices. All devices returned belong to MAC addresses that are an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Macs;
        /// <summary>
        /// networkIds query parameter. Optional parameter to filter by network
        /// </summary>
        public readonly ImmutableArray<string> NetworkIds;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// perPage query parameter. The number of entries per page returned. Acceptable range is 3 1000. Default is 50.
        /// </summary>
        public readonly int? PerPage;
        /// <summary>
        /// serials query parameter. Optional parameter to filter by serial number.  All returned devices will have a serial number that is an exact match.
        /// </summary>
        public readonly ImmutableArray<string> Serials;
        /// <summary>
        /// startingAfter query parameter. A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
        /// </summary>
        public readonly string? StartingAfter;
        /// <summary>
        /// upgradeStatuses query parameter. Optional parameter to filter by firmware upgrade statuses.
        /// </summary>
        public readonly ImmutableArray<string> Upgradestatuses;

        [OutputConstructor]
        private GetFirmwareUpgradesByDeviceResult(
            string? endingBefore,

            ImmutableArray<string> firmwareUpgradeBatchIds,

            string id,

            ImmutableArray<Outputs.GetFirmwareUpgradesByDeviceItemResult> items,

            ImmutableArray<string> macs,

            ImmutableArray<string> networkIds,

            string organizationId,

            int? perPage,

            ImmutableArray<string> serials,

            string? startingAfter,

            ImmutableArray<string> upgradestatuses)
        {
            EndingBefore = endingBefore;
            FirmwareUpgradeBatchIds = firmwareUpgradeBatchIds;
            Id = id;
            Items = items;
            Macs = macs;
            NetworkIds = networkIds;
            OrganizationId = organizationId;
            PerPage = perPage;
            Serials = serials;
            StartingAfter = startingAfter;
            Upgradestatuses = upgradestatuses;
        }
    }
}
