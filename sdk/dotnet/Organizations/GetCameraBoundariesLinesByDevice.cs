// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Organizations
{
    public static class GetCameraBoundariesLinesByDevice
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetCameraBoundariesLinesByDevice.Invoke(new()
        ///     {
        ///         OrganizationId = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsCameraBoundariesLinesByDeviceExample"] = example.Apply(getCameraBoundariesLinesByDeviceResult =&gt; getCameraBoundariesLinesByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetCameraBoundariesLinesByDeviceResult> InvokeAsync(GetCameraBoundariesLinesByDeviceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCameraBoundariesLinesByDeviceResult>("meraki:organizations/getCameraBoundariesLinesByDevice:getCameraBoundariesLinesByDevice", args ?? new GetCameraBoundariesLinesByDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Meraki = Pulumi.Meraki;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Meraki.Organizations.GetCameraBoundariesLinesByDevice.Invoke(new()
        ///     {
        ///         OrganizationId = "string",
        ///         Serials = new[]
        ///         {
        ///             "string",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["merakiOrganizationsCameraBoundariesLinesByDeviceExample"] = example.Apply(getCameraBoundariesLinesByDeviceResult =&gt; getCameraBoundariesLinesByDeviceResult.Items),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetCameraBoundariesLinesByDeviceResult> Invoke(GetCameraBoundariesLinesByDeviceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCameraBoundariesLinesByDeviceResult>("meraki:organizations/getCameraBoundariesLinesByDevice:getCameraBoundariesLinesByDevice", args ?? new GetCameraBoundariesLinesByDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCameraBoundariesLinesByDeviceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        [Input("serials")]
        private List<string>? _serials;

        /// <summary>
        /// serials query parameter. A list of serial numbers. The returned cameras will be filtered to only include these serials.
        /// </summary>
        public List<string> Serials
        {
            get => _serials ?? (_serials = new List<string>());
            set => _serials = value;
        }

        public GetCameraBoundariesLinesByDeviceArgs()
        {
        }
        public static new GetCameraBoundariesLinesByDeviceArgs Empty => new GetCameraBoundariesLinesByDeviceArgs();
    }

    public sealed class GetCameraBoundariesLinesByDeviceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("serials")]
        private InputList<string>? _serials;

        /// <summary>
        /// serials query parameter. A list of serial numbers. The returned cameras will be filtered to only include these serials.
        /// </summary>
        public InputList<string> Serials
        {
            get => _serials ?? (_serials = new InputList<string>());
            set => _serials = value;
        }

        public GetCameraBoundariesLinesByDeviceInvokeArgs()
        {
        }
        public static new GetCameraBoundariesLinesByDeviceInvokeArgs Empty => new GetCameraBoundariesLinesByDeviceInvokeArgs();
    }


    [OutputType]
    public sealed class GetCameraBoundariesLinesByDeviceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Array of ResponseCameraGetOrganizationCameraBoundariesLinesByDevice
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCameraBoundariesLinesByDeviceItemResult> Items;
        /// <summary>
        /// organizationId path parameter. Organization ID
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// serials query parameter. A list of serial numbers. The returned cameras will be filtered to only include these serials.
        /// </summary>
        public readonly ImmutableArray<string> Serials;

        [OutputConstructor]
        private GetCameraBoundariesLinesByDeviceResult(
            string id,

            ImmutableArray<Outputs.GetCameraBoundariesLinesByDeviceItemResult> items,

            string organizationId,

            ImmutableArray<string> serials)
        {
            Id = id;
            Items = items;
            OrganizationId = organizationId;
            Serials = serials;
        }
    }
}
