// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Devices
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Devices.SwitchPorts("example", new()
    ///     {
    ///         AccessPolicyNumber = 2,
    ///         AccessPolicyType = "Sticky MAC allow list",
    ///         AdaptivePolicyGroupId = "123",
    ///         AllowedVlans = "1,3,5-10",
    ///         DaiTrusted = false,
    ///         Enabled = true,
    ///         FlexibleStackingEnabled = true,
    ///         IsolationEnabled = false,
    ///         LinkNegotiation = "Auto negotiate",
    ///         MacAllowLists = new[]
    ///         {
    ///             "34:56:fe:ce:8e:b0",
    ///             "34:56:fe:ce:8e:b1",
    ///         },
    ///         Name = "My switch port",
    ///         PeerSgtCapable = false,
    ///         PoeEnabled = true,
    ///         PortId = "string",
    ///         PortScheduleId = "1234",
    ///         Profile = new Meraki.Devices.Inputs.SwitchPortsProfileArgs
    ///         {
    ///             Enabled = false,
    ///             Id = "1284392014819",
    ///             Iname = "iname",
    ///         },
    ///         RstpEnabled = true,
    ///         Serial = "string",
    ///         StickyMacAllowLists = new[]
    ///         {
    ///             "34:56:fe:ce:8e:b0",
    ///             "34:56:fe:ce:8e:b1",
    ///         },
    ///         StickyMacAllowListLimit = 5,
    ///         StormControlEnabled = true,
    ///         StpGuard = "disabled",
    ///         Tags = new[]
    ///         {
    ///             "tag1",
    ///             "tag2",
    ///         },
    ///         Type = "access",
    ///         Udld = "Alert only",
    ///         Vlan = 10,
    ///         VoiceVlan = 20,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiDevicesSwitchPortsExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:devices/switchPorts:SwitchPorts example "port_id,serial"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:devices/switchPorts:SwitchPorts")]
    public partial class SwitchPorts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Output("accessPolicyNumber")]
        public Output<int> AccessPolicyNumber { get; private set; } = null!;

        /// <summary>
        /// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Output("accessPolicyType")]
        public Output<string> AccessPolicyType { get; private set; } = null!;

        /// <summary>
        /// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Output("adaptivePolicyGroupId")]
        public Output<string> AdaptivePolicyGroupId { get; private set; } = null!;

        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        [Output("allowedVlans")]
        public Output<string> AllowedVlans { get; private set; } = null!;

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Output("daiTrusted")]
        public Output<bool> DaiTrusted { get; private set; } = null!;

        /// <summary>
        /// The status of the switch port.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Output("flexibleStackingEnabled")]
        public Output<bool> FlexibleStackingEnabled { get; private set; } = null!;

        /// <summary>
        /// The isolation status of the switch port.
        /// </summary>
        [Output("isolationEnabled")]
        public Output<bool> IsolationEnabled { get; private set; } = null!;

        /// <summary>
        /// The link speed for the switch port.
        /// </summary>
        [Output("linkNegotiation")]
        public Output<string> LinkNegotiation { get; private set; } = null!;

        /// <summary>
        /// Available link speeds for the switch port.
        /// </summary>
        [Output("linkNegotiationCapabilities")]
        public Output<ImmutableArray<string>> LinkNegotiationCapabilities { get; private set; } = null!;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        [Output("macAllowLists")]
        public Output<ImmutableArray<string>> MacAllowLists { get; private set; } = null!;

        /// <summary>
        /// Port mirror
        /// </summary>
        [Output("mirror")]
        public Output<Outputs.SwitchPortsMirror> Mirror { get; private set; } = null!;

        /// <summary>
        /// Expansion module
        /// </summary>
        [Output("module")]
        public Output<Outputs.SwitchPortsModule> Module { get; private set; } = null!;

        /// <summary>
        /// The name of the switch port.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Output("peerSgtCapable")]
        public Output<bool> PeerSgtCapable { get; private set; } = null!;

        /// <summary>
        /// The PoE status of the switch port.
        /// </summary>
        [Output("poeEnabled")]
        public Output<bool> PoeEnabled { get; private set; } = null!;

        /// <summary>
        /// The identifier of the switch port.
        /// </summary>
        [Output("portId")]
        public Output<string> PortId { get; private set; } = null!;

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Output("portScheduleId")]
        public Output<string> PortScheduleId { get; private set; } = null!;

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Output("profile")]
        public Output<Outputs.SwitchPortsProfile> Profile { get; private set; } = null!;

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Output("rstpEnabled")]
        public Output<bool> RstpEnabled { get; private set; } = null!;

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Output("stickyMacAllowListLimit")]
        public Output<int> StickyMacAllowListLimit { get; private set; } = null!;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Output("stickyMacAllowLists")]
        public Output<ImmutableArray<string>> StickyMacAllowLists { get; private set; } = null!;

        /// <summary>
        /// The storm control status of the switch port.
        /// </summary>
        [Output("stormControlEnabled")]
        public Output<bool> StormControlEnabled { get; private set; } = null!;

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Output("stpGuard")]
        public Output<string> StpGuard { get; private set; } = null!;

        /// <summary>
        /// The list of tags of the switch port.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the switch port ('trunk' or 'access').
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Output("udld")]
        public Output<string> Udld { get; private set; } = null!;

        /// <summary>
        /// The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Output("vlan")]
        public Output<int> Vlan { get; private set; } = null!;

        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        [Output("voiceVlan")]
        public Output<int> VoiceVlan { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchPorts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchPorts(string name, SwitchPortsArgs args, CustomResourceOptions? options = null)
            : base("meraki:devices/switchPorts:SwitchPorts", name, args ?? new SwitchPortsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchPorts(string name, Input<string> id, SwitchPortsState? state = null, CustomResourceOptions? options = null)
            : base("meraki:devices/switchPorts:SwitchPorts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchPorts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchPorts Get(string name, Input<string> id, SwitchPortsState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchPorts(name, id, state, options);
        }
    }

    public sealed class SwitchPortsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<int>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Input("adaptivePolicyGroupId")]
        public Input<string>? AdaptivePolicyGroupId { get; set; }

        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Input("daiTrusted")]
        public Input<bool>? DaiTrusted { get; set; }

        /// <summary>
        /// The status of the switch port.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Input("flexibleStackingEnabled")]
        public Input<bool>? FlexibleStackingEnabled { get; set; }

        /// <summary>
        /// The isolation status of the switch port.
        /// </summary>
        [Input("isolationEnabled")]
        public Input<bool>? IsolationEnabled { get; set; }

        /// <summary>
        /// The link speed for the switch port.
        /// </summary>
        [Input("linkNegotiation")]
        public Input<string>? LinkNegotiation { get; set; }

        [Input("macAllowLists")]
        private InputList<string>? _macAllowLists;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        public InputList<string> MacAllowLists
        {
            get => _macAllowLists ?? (_macAllowLists = new InputList<string>());
            set => _macAllowLists = value;
        }

        /// <summary>
        /// The name of the switch port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Input("peerSgtCapable")]
        public Input<bool>? PeerSgtCapable { get; set; }

        /// <summary>
        /// The PoE status of the switch port.
        /// </summary>
        [Input("poeEnabled")]
        public Input<bool>? PoeEnabled { get; set; }

        /// <summary>
        /// The identifier of the switch port.
        /// </summary>
        [Input("portId", required: true)]
        public Input<string> PortId { get; set; } = null!;

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Input("portScheduleId")]
        public Input<string>? PortScheduleId { get; set; }

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Input("profile")]
        public Input<Inputs.SwitchPortsProfileArgs>? Profile { get; set; }

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Input("rstpEnabled")]
        public Input<bool>? RstpEnabled { get; set; }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial", required: true)]
        public Input<string> Serial { get; set; } = null!;

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Input("stickyMacAllowListLimit")]
        public Input<int>? StickyMacAllowListLimit { get; set; }

        [Input("stickyMacAllowLists")]
        private InputList<string>? _stickyMacAllowLists;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public InputList<string> StickyMacAllowLists
        {
            get => _stickyMacAllowLists ?? (_stickyMacAllowLists = new InputList<string>());
            set => _stickyMacAllowLists = value;
        }

        /// <summary>
        /// The storm control status of the switch port.
        /// </summary>
        [Input("stormControlEnabled")]
        public Input<bool>? StormControlEnabled { get; set; }

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Input("stpGuard")]
        public Input<string>? StpGuard { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags of the switch port.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the switch port ('trunk' or 'access').
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Input("udld")]
        public Input<string>? Udld { get; set; }

        /// <summary>
        /// The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        [Input("voiceVlan")]
        public Input<int>? VoiceVlan { get; set; }

        public SwitchPortsArgs()
        {
        }
        public static new SwitchPortsArgs Empty => new SwitchPortsArgs();
    }

    public sealed class SwitchPortsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        [Input("accessPolicyNumber")]
        public Input<int>? AccessPolicyNumber { get; set; }

        /// <summary>
        /// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        [Input("accessPolicyType")]
        public Input<string>? AccessPolicyType { get; set; }

        /// <summary>
        /// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Input("adaptivePolicyGroupId")]
        public Input<string>? AdaptivePolicyGroupId { get; set; }

        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        [Input("allowedVlans")]
        public Input<string>? AllowedVlans { get; set; }

        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        [Input("daiTrusted")]
        public Input<bool>? DaiTrusted { get; set; }

        /// <summary>
        /// The status of the switch port.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        [Input("flexibleStackingEnabled")]
        public Input<bool>? FlexibleStackingEnabled { get; set; }

        /// <summary>
        /// The isolation status of the switch port.
        /// </summary>
        [Input("isolationEnabled")]
        public Input<bool>? IsolationEnabled { get; set; }

        /// <summary>
        /// The link speed for the switch port.
        /// </summary>
        [Input("linkNegotiation")]
        public Input<string>? LinkNegotiation { get; set; }

        [Input("linkNegotiationCapabilities")]
        private InputList<string>? _linkNegotiationCapabilities;

        /// <summary>
        /// Available link speeds for the switch port.
        /// </summary>
        public InputList<string> LinkNegotiationCapabilities
        {
            get => _linkNegotiationCapabilities ?? (_linkNegotiationCapabilities = new InputList<string>());
            set => _linkNegotiationCapabilities = value;
        }

        [Input("macAllowLists")]
        private InputList<string>? _macAllowLists;

        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        public InputList<string> MacAllowLists
        {
            get => _macAllowLists ?? (_macAllowLists = new InputList<string>());
            set => _macAllowLists = value;
        }

        /// <summary>
        /// Port mirror
        /// </summary>
        [Input("mirror")]
        public Input<Inputs.SwitchPortsMirrorGetArgs>? Mirror { get; set; }

        /// <summary>
        /// Expansion module
        /// </summary>
        [Input("module")]
        public Input<Inputs.SwitchPortsModuleGetArgs>? Module { get; set; }

        /// <summary>
        /// The name of the switch port.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        [Input("peerSgtCapable")]
        public Input<bool>? PeerSgtCapable { get; set; }

        /// <summary>
        /// The PoE status of the switch port.
        /// </summary>
        [Input("poeEnabled")]
        public Input<bool>? PoeEnabled { get; set; }

        /// <summary>
        /// The identifier of the switch port.
        /// </summary>
        [Input("portId")]
        public Input<string>? PortId { get; set; }

        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        [Input("portScheduleId")]
        public Input<string>? PortScheduleId { get; set; }

        /// <summary>
        /// Profile attributes
        /// </summary>
        [Input("profile")]
        public Input<Inputs.SwitchPortsProfileGetArgs>? Profile { get; set; }

        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        [Input("rstpEnabled")]
        public Input<bool>? RstpEnabled { get; set; }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        [Input("stickyMacAllowListLimit")]
        public Input<int>? StickyMacAllowListLimit { get; set; }

        [Input("stickyMacAllowLists")]
        private InputList<string>? _stickyMacAllowLists;

        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public InputList<string> StickyMacAllowLists
        {
            get => _stickyMacAllowLists ?? (_stickyMacAllowLists = new InputList<string>());
            set => _stickyMacAllowLists = value;
        }

        /// <summary>
        /// The storm control status of the switch port.
        /// </summary>
        [Input("stormControlEnabled")]
        public Input<bool>? StormControlEnabled { get; set; }

        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        [Input("stpGuard")]
        public Input<string>? StpGuard { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The list of tags of the switch port.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the switch port ('trunk' or 'access').
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        [Input("udld")]
        public Input<string>? Udld { get; set; }

        /// <summary>
        /// The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        [Input("voiceVlan")]
        public Input<int>? VoiceVlan { get; set; }

        public SwitchPortsState()
        {
        }
        public static new SwitchPortsState Empty => new SwitchPortsState();
    }
}
