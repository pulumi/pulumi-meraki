// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Devices.Outputs
{

    [OutputType]
    public sealed class CellularGatewayPortForwardingRulesRule
    {
        /// <summary>
        /// *any* or *restricted*. Specify the right to make inbound connections on the specified ports or port ranges. If *restricted*, a list of allowed IPs is mandatory.
        /// </summary>
        public readonly string? Access;
        /// <summary>
        /// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges.
        /// </summary>
        public readonly ImmutableArray<string> AllowedIps;
        /// <summary>
        /// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
        /// </summary>
        public readonly string? LanIp;
        /// <summary>
        /// A port or port ranges that will receive the forwarded traffic from the WAN
        /// </summary>
        public readonly string? LocalPort;
        /// <summary>
        /// A descriptive name for the rule
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// TCP or UDP
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// A port or port ranges that will be forwarded to the host on the LAN
        /// </summary>
        public readonly string? PublicPort;
        public readonly string? Uplink;

        [OutputConstructor]
        private CellularGatewayPortForwardingRulesRule(
            string? access,

            ImmutableArray<string> allowedIps,

            string? lanIp,

            string? localPort,

            string? name,

            string? protocol,

            string? publicPort,

            string? uplink)
        {
            Access = access;
            AllowedIps = allowedIps;
            LanIp = lanIp;
            LocalPort = localPort;
            Name = name;
            Protocol = protocol;
            PublicPort = publicPort;
            Uplink = uplink;
        }
    }
}
