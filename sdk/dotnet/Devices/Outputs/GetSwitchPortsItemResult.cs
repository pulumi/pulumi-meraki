// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Devices.Outputs
{

    [OutputType]
    public sealed class GetSwitchPortsItemResult
    {
        /// <summary>
        /// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
        /// </summary>
        public readonly int AccessPolicyNumber;
        /// <summary>
        /// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
        /// </summary>
        public readonly string AccessPolicyType;
        /// <summary>
        /// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        public readonly string AdaptivePolicyGroupId;
        /// <summary>
        /// The VLANs allowed on the switch port. Only applicable to trunk ports.
        /// </summary>
        public readonly string AllowedVlans;
        /// <summary>
        /// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
        /// </summary>
        public readonly bool DaiTrusted;
        /// <summary>
        /// The status of the switch port.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
        /// </summary>
        public readonly bool FlexibleStackingEnabled;
        /// <summary>
        /// The isolation status of the switch port.
        /// </summary>
        public readonly bool IsolationEnabled;
        /// <summary>
        /// The link speed for the switch port.
        /// </summary>
        public readonly string LinkNegotiation;
        /// <summary>
        /// Available link speeds for the switch port.
        /// </summary>
        public readonly ImmutableArray<string> LinkNegotiationCapabilities;
        /// <summary>
        /// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
        /// </summary>
        public readonly ImmutableArray<string> MacAllowLists;
        /// <summary>
        /// Port mirror
        /// </summary>
        public readonly Outputs.GetSwitchPortsItemMirrorResult Mirror;
        /// <summary>
        /// Expansion module
        /// </summary>
        public readonly Outputs.GetSwitchPortsItemModuleResult Module;
        /// <summary>
        /// The name of the switch port.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port. Cannot be applied to a port on a switch bound to profile.
        /// </summary>
        public readonly bool PeerSgtCapable;
        /// <summary>
        /// The PoE status of the switch port.
        /// </summary>
        public readonly bool PoeEnabled;
        /// <summary>
        /// The identifier of the switch port.
        /// </summary>
        public readonly string PortId;
        /// <summary>
        /// The ID of the port schedule. A value of null will clear the port schedule.
        /// </summary>
        public readonly string PortScheduleId;
        /// <summary>
        /// Profile attributes
        /// </summary>
        public readonly Outputs.GetSwitchPortsItemProfileResult Profile;
        /// <summary>
        /// The rapid spanning tree protocol status.
        /// </summary>
        public readonly bool RstpEnabled;
        /// <summary>
        /// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public readonly int StickyMacAllowListLimit;
        /// <summary>
        /// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
        /// </summary>
        public readonly ImmutableArray<string> StickyMacAllowLists;
        /// <summary>
        /// The storm control status of the switch port.
        /// </summary>
        public readonly bool StormControlEnabled;
        /// <summary>
        /// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
        /// </summary>
        public readonly string StpGuard;
        /// <summary>
        /// The list of tags of the switch port.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The type of the switch port ('trunk' or 'access').
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
        /// </summary>
        public readonly string Udld;
        /// <summary>
        /// The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
        /// </summary>
        public readonly int Vlan;
        /// <summary>
        /// The voice VLAN of the switch port. Only applicable to access ports.
        /// </summary>
        public readonly int VoiceVlan;

        [OutputConstructor]
        private GetSwitchPortsItemResult(
            int accessPolicyNumber,

            string accessPolicyType,

            string adaptivePolicyGroupId,

            string allowedVlans,

            bool daiTrusted,

            bool enabled,

            bool flexibleStackingEnabled,

            bool isolationEnabled,

            string linkNegotiation,

            ImmutableArray<string> linkNegotiationCapabilities,

            ImmutableArray<string> macAllowLists,

            Outputs.GetSwitchPortsItemMirrorResult mirror,

            Outputs.GetSwitchPortsItemModuleResult module,

            string name,

            bool peerSgtCapable,

            bool poeEnabled,

            string portId,

            string portScheduleId,

            Outputs.GetSwitchPortsItemProfileResult profile,

            bool rstpEnabled,

            int stickyMacAllowListLimit,

            ImmutableArray<string> stickyMacAllowLists,

            bool stormControlEnabled,

            string stpGuard,

            ImmutableArray<string> tags,

            string type,

            string udld,

            int vlan,

            int voiceVlan)
        {
            AccessPolicyNumber = accessPolicyNumber;
            AccessPolicyType = accessPolicyType;
            AdaptivePolicyGroupId = adaptivePolicyGroupId;
            AllowedVlans = allowedVlans;
            DaiTrusted = daiTrusted;
            Enabled = enabled;
            FlexibleStackingEnabled = flexibleStackingEnabled;
            IsolationEnabled = isolationEnabled;
            LinkNegotiation = linkNegotiation;
            LinkNegotiationCapabilities = linkNegotiationCapabilities;
            MacAllowLists = macAllowLists;
            Mirror = mirror;
            Module = module;
            Name = name;
            PeerSgtCapable = peerSgtCapable;
            PoeEnabled = poeEnabled;
            PortId = portId;
            PortScheduleId = portScheduleId;
            Profile = profile;
            RstpEnabled = rstpEnabled;
            StickyMacAllowListLimit = stickyMacAllowListLimit;
            StickyMacAllowLists = stickyMacAllowLists;
            StormControlEnabled = stormControlEnabled;
            StpGuard = stpGuard;
            Tags = tags;
            Type = type;
            Udld = udld;
            Vlan = vlan;
            VoiceVlan = voiceVlan;
        }
    }
}
