// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Devices
{
    [MerakiResourceType("meraki:devices/liveToolsCable:LiveToolsCable")]
    public partial class LiveToolsCable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Id of the cable test request. Used to check the status of the request.
        /// </summary>
        [Output("cableTestId")]
        public Output<string> CableTestId { get; private set; } = null!;

        /// <summary>
        /// Details for the callback. Please include either an httpServerId OR url and sharedSecret
        /// </summary>
        [Output("callback")]
        public Output<Outputs.LiveToolsCableCallback> Callback { get; private set; } = null!;

        /// <summary>
        /// An error message for a failed execution
        /// </summary>
        [Output("error")]
        public Output<string> Error { get; private set; } = null!;

        /// <summary>
        /// A list of ports for which to perform the cable test.
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<string>> Ports { get; private set; } = null!;

        /// <summary>
        /// Cable test request parameters
        /// </summary>
        [Output("request")]
        public Output<Outputs.LiveToolsCableRequest> Request { get; private set; } = null!;

        /// <summary>
        /// Results of the cable test request, one for each requested port.
        /// </summary>
        [Output("results")]
        public Output<ImmutableArray<Outputs.LiveToolsCableResult>> Results { get; private set; } = null!;

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// Status of the cable test request.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// GET this url to check the status of your cable test request.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a LiveToolsCable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LiveToolsCable(string name, LiveToolsCableArgs args, CustomResourceOptions? options = null)
            : base("meraki:devices/liveToolsCable:LiveToolsCable", name, args ?? new LiveToolsCableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LiveToolsCable(string name, Input<string> id, LiveToolsCableState? state = null, CustomResourceOptions? options = null)
            : base("meraki:devices/liveToolsCable:LiveToolsCable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LiveToolsCable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LiveToolsCable Get(string name, Input<string> id, LiveToolsCableState? state = null, CustomResourceOptions? options = null)
        {
            return new LiveToolsCable(name, id, state, options);
        }
    }

    public sealed class LiveToolsCableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details for the callback. Please include either an httpServerId OR url and sharedSecret
        /// </summary>
        [Input("callback")]
        public Input<Inputs.LiveToolsCableCallbackArgs>? Callback { get; set; }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// A list of ports for which to perform the cable test.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial", required: true)]
        public Input<string> Serial { get; set; } = null!;

        public LiveToolsCableArgs()
        {
        }
        public static new LiveToolsCableArgs Empty => new LiveToolsCableArgs();
    }

    public sealed class LiveToolsCableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of the cable test request. Used to check the status of the request.
        /// </summary>
        [Input("cableTestId")]
        public Input<string>? CableTestId { get; set; }

        /// <summary>
        /// Details for the callback. Please include either an httpServerId OR url and sharedSecret
        /// </summary>
        [Input("callback")]
        public Input<Inputs.LiveToolsCableCallbackGetArgs>? Callback { get; set; }

        /// <summary>
        /// An error message for a failed execution
        /// </summary>
        [Input("error")]
        public Input<string>? Error { get; set; }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// A list of ports for which to perform the cable test.
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// Cable test request parameters
        /// </summary>
        [Input("request")]
        public Input<Inputs.LiveToolsCableRequestGetArgs>? Request { get; set; }

        [Input("results")]
        private InputList<Inputs.LiveToolsCableResultGetArgs>? _results;

        /// <summary>
        /// Results of the cable test request, one for each requested port.
        /// </summary>
        public InputList<Inputs.LiveToolsCableResultGetArgs> Results
        {
            get => _results ?? (_results = new InputList<Inputs.LiveToolsCableResultGetArgs>());
            set => _results = value;
        }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// Status of the cable test request.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// GET this url to check the status of your cable test request.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public LiveToolsCableState()
        {
        }
        public static new LiveToolsCableState Empty => new LiveToolsCableState();
    }
}
