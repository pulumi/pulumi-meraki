// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Meraki.Devices
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Meraki = Pulumi.Meraki;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Meraki.Devices.CameraSense("example", new()
    ///     {
    ///         AudioDetection = new Meraki.Devices.Inputs.CameraSenseAudioDetectionArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///         MqttBrokerId = "1234",
    ///         SenseEnabled = true,
    ///         Serial = "string",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["merakiDevicesCameraSenseExample"] = example,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import meraki:devices/cameraSense:CameraSense example "serial"
    /// ```
    /// </summary>
    [MerakiResourceType("meraki:devices/cameraSense:CameraSense")]
    public partial class CameraSense : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The details of the audio detection config.
        /// </summary>
        [Output("audioDetection")]
        public Output<Outputs.CameraSenseAudioDetection> AudioDetection { get; private set; } = null!;

        /// <summary>
        /// The ID of the object detection model
        /// </summary>
        [Output("detectionModelId")]
        public Output<string> DetectionModelId { get; private set; } = null!;

        /// <summary>
        /// The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
        /// </summary>
        [Output("mqttBrokerId")]
        public Output<string> MqttBrokerId { get; private set; } = null!;

        [Output("mqttTopics")]
        public Output<ImmutableArray<string>> MqttTopics { get; private set; } = null!;

        /// <summary>
        /// Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
        /// </summary>
        [Output("senseEnabled")]
        public Output<bool> SenseEnabled { get; private set; } = null!;

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;


        /// <summary>
        /// Create a CameraSense resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CameraSense(string name, CameraSenseArgs args, CustomResourceOptions? options = null)
            : base("meraki:devices/cameraSense:CameraSense", name, args ?? new CameraSenseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CameraSense(string name, Input<string> id, CameraSenseState? state = null, CustomResourceOptions? options = null)
            : base("meraki:devices/cameraSense:CameraSense", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-meraki",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CameraSense resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CameraSense Get(string name, Input<string> id, CameraSenseState? state = null, CustomResourceOptions? options = null)
        {
            return new CameraSense(name, id, state, options);
        }
    }

    public sealed class CameraSenseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The details of the audio detection config.
        /// </summary>
        [Input("audioDetection")]
        public Input<Inputs.CameraSenseAudioDetectionArgs>? AudioDetection { get; set; }

        /// <summary>
        /// The ID of the object detection model
        /// </summary>
        [Input("detectionModelId")]
        public Input<string>? DetectionModelId { get; set; }

        /// <summary>
        /// The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
        /// </summary>
        [Input("mqttBrokerId")]
        public Input<string>? MqttBrokerId { get; set; }

        /// <summary>
        /// Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
        /// </summary>
        [Input("senseEnabled")]
        public Input<bool>? SenseEnabled { get; set; }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial", required: true)]
        public Input<string> Serial { get; set; } = null!;

        public CameraSenseArgs()
        {
        }
        public static new CameraSenseArgs Empty => new CameraSenseArgs();
    }

    public sealed class CameraSenseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The details of the audio detection config.
        /// </summary>
        [Input("audioDetection")]
        public Input<Inputs.CameraSenseAudioDetectionGetArgs>? AudioDetection { get; set; }

        /// <summary>
        /// The ID of the object detection model
        /// </summary>
        [Input("detectionModelId")]
        public Input<string>? DetectionModelId { get; set; }

        /// <summary>
        /// The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
        /// </summary>
        [Input("mqttBrokerId")]
        public Input<string>? MqttBrokerId { get; set; }

        [Input("mqttTopics")]
        private InputList<string>? _mqttTopics;
        public InputList<string> MqttTopics
        {
            get => _mqttTopics ?? (_mqttTopics = new InputList<string>());
            set => _mqttTopics = value;
        }

        /// <summary>
        /// Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
        /// </summary>
        [Input("senseEnabled")]
        public Input<bool>? SenseEnabled { get; set; }

        /// <summary>
        /// serial path parameter.
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        public CameraSenseState()
        {
        }
        public static new CameraSenseState Empty => new CameraSenseState();
    }
}
